{"id":185914,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xODU5MTQ=","url":"https://hackerone.com/reports/185914","title":"constant cache_page_secret in regolith","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-11-28T02:07:28.040Z","submitted_at":"2016-11-28T02:07:28.040Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"e3amn2l","url":"/e3amn2l","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":162,"url":"https://hackerone.com/iandunn-projects","handle":"iandunn-projects","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/162/2b148a5580e8f7c45d676df7576fb8b11b4de9ad_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/162/2b148a5580e8f7c45d676df7576fb8b11b4de9ad_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Ian Dunn","twitter_handle":"","website":"","about":"I'm a WordPress developer who maintains several small open source projects."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2016-12-30T04:48:13.103Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2016-11-30T04:48:06.996Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"in:\nhttps://github.com/iandunn/regolith/blob/master/config/plugins/wp-super-cache.php#L28\n```\n$cache_page_secret             = 'ad270361c39c428c9465313363b02559';\n```\nthere usage of static $cache_page_secret, as regolith is installation template. it's better to generate the secret for each installation instead of using static known value.\nknowledge of $cache_page_secret value can be used to send requests which will not pass though the caching:\nhttps://github.com/Automattic/wp-super-cache/blob/ea592c1d2796d0bc5c343322923c5f8bb40a0066/wp-cache-phase1.php#L32\nthus enable more effective DOS (denial of service) attacks as the caching mechanism is disabled.\n\nfix:\ngenerate the $cache_page_secret in safe way once per installation \u0026 store the value in needed configuration file.","bounty_amount":"25.0","formatted_bounty":"$25","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2016-12-30T04:48:07.026Z","allow_singular_disclosure_after":-150887287.71156633,"singular_disclosure_allowed":true,"vote_count":7,"voters":["pekafat","mpz","madrobot","japz","spetr0x","dyabla","ariyansarma"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":1323269,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thanks Emanuel, this is a good catch :)","automated_response":false,"created_at":"2016-11-28T16:30:51.706Z","updated_at":"2016-11-28T16:30:51.706Z","actor":{"username":"iandunn","cleared":false,"url":"/iandunn","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/974/01bc1d097002b7eff8eddba98990e094553b1eac_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"iandunn-projects","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1324980,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey Emanuel, here's the patch I came up with. Do you see any problems with it?\n\n```\n\u003e git show head\ncommit 5fbf2a9fdf3b56a505864c0db9561fc5c7f8e511\nAuthor: Ian Dunn \u003cian@iandunn.name\u003e\nDate:   Mon Nov 28 18:42:01 2016 -0800\n\n    Super Cache: Guarantee a unique value for the page secret\n    \n    Previously the admin would have to set a unique value in `wp-cache-config.php`, which was easy to overlook. If they didn't do that, then the `donotcachepage` parameter could be used in a DDoS attack.\n    \n    This makes it much more obvious, and also falls back to disabling the functionality for backwards-compatibility.\n    \n    Fixes https://hackerone.com/reports/185914\n    Props https://hackerone.com/e3amn2l\n\ndiff --git config/environment-sample.php config/environment-sample.php\nindex ec3e5e4..6ccb81d 100644\n--- config/environment-sample.php\n+++ config/environment-sample.php\n@@ -18,6 +18,7 @@ define( 'WP_HOME',                         'https://regolith.localhost' );\n define( 'DB_HOST',                         'localhost'                  );\n define( 'DB_PASSWORD',                     'password'                   );\n define( 'REGOLITH_MAIL_INTERCEPT_ADDRESS', 'foo@example.org'            );\n+define( 'REGOLITH_WP_SUPER_CACHE_SECRET',  'replace me with  strong password' );\n define( 'REGOLITH_CLOUDFLARE_ZONE_ID',     ''                           );\n \n // https://api.wordpress.org/secret-key/1.1/salt/\ndiff --git config/plugins/wp-super-cache.php config/plugins/wp-super-cache.php\nindex 0716efb..3cd7b38 100644\n--- config/plugins/wp-super-cache.php\n+++ config/plugins/wp-super-cache.php\n@@ -25,7 +25,28 @@ $wp_cache_mfunc_enabled        = 0;\n $wp_supercache_304             = 0;\n $wp_cache_no_cache_for_get     = 0;\n $wp_cache_disable_utf8         = 0;\n-$cache_page_secret             = 'ad270361c39c428c9465313363b02559';\n+\n+if ( defined( 'REGOLITH_WP_SUPER_CACHE_SECRET' ) ) {\n+       $cache_page_secret = REGOLITH_WP_SUPER_CACHE_SECRET;\n+} else {\n+       /*\n+        * Fall back to a random string, for backwards-compatibility. This will break the functionality, because the\n+        * value will be different on every request, but that's ok. The functionality is not essential, and it can be\n+        * easily restored by setting the constant.\n+        *\n+        * A constant string wasn't used, because there isn't a good source of input that is constant, unique, and\n+        * private, while not being sensitive. Sensitive data (like NONCE_SALT) could be derived if the value of\n+        * `$cache_page_secret` were exposed. If that value was exposed, the attacker would most likely have access\n+        * to more sensitive things as well, like `wp-config.php`, but there could be scenarios where they don't, so\n+        * this is erring on the side of caution.\n+        */\n+\n+       try {\n+               $cache_page_secret = bin2hex( random_bytes( 32 ) );\n+       } catch ( Exception $exception ) {\n+               $cache_page_secret = md5( time() . mt_rand() );\n+       }\n+}\n```","automated_response":false,"created_at":"2016-11-29T02:55:35.850Z","updated_at":"2016-11-29T02:55:35.850Z","actor":{"username":"iandunn","cleared":false,"url":"/iandunn","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/974/01bc1d097002b7eff8eddba98990e094553b1eac_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"iandunn-projects","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1325158,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"I decided to classify this as low severity, since it's in a configuration file, and I think it's somewhat reasonable to assume the user will review/update the values in it.\n\nAlso, even if this weren't available, it'd still be possible to hit PHP and MySQL through other means, in order to amplify a DDoS attack, so fixing this doesn't really help all that much.","automated_response":false,"created_at":"2016-11-29T05:53:08.920Z","updated_at":"2016-11-29T05:53:08.920Z","actor":{"url":"/iandunn-projects","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/162/2b148a5580e8f7c45d676df7576fb8b11b4de9ad_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Ian Dunn"}},"bounty_amount":"25.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"iandunn-projects","collaborator":{"username":"e3amn2l","url":"/e3amn2l"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1325510,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"3 problems:\n1. it's disable the functionality if REGOLITH_WP_SUPER_CACHE_SECRET not defined, my suggestion is to do something like:\ninclude 'secrets.config.inc.php'\nand in the installation generate the secrets.config.inc.php (thus it will contain private constant value), something like:\n```\n\u003c?php\n\tuse phpseclib\\Crypt;\n\t\n\tif (class_exists('phpseclib\\Crypt\\Random')) {\n        $cache_page_secret_gen = bin2hex(phpseclib\\Crypt\\Random::string(16));\n    } else {\n        $cache_page_secret_gen = bin2hex(openssl_random_pseudo_bytes(16));\n    }\n\t\n\tif(file_put_contents('secrets.config.inc.php','\u003c?php'.\"\\n\".'$cache_page_secret_gen = \\''.$cache_page_secret_gen.\"';\", LOCK_EX) === false) {\n\t\t// todo: handle error here, file not written.\n\t}\n```\n\n2. it's use static constant if administrator didn't change the default value of:\n\u003ereplace me with  strong password\n\n3. the fallback is insecure:\n```\nmd5( time() . mt_rand() );\n```\nin case fallback is needed it's better to use library such as phpseclib, which contain the following fallback:\nhttps://github.com/phpseclib/phpseclib/blob/master/phpseclib/Crypt/Random.php#L63\nimportant note:\nif support for PHP \u003c 7 is needed, use older version of phpseclib:\nhttps://github.com/phpseclib/phpseclib/blob/1.0/phpseclib/Crypt/Random.php#L68\n","automated_response":false,"created_at":"2016-11-29T09:54:25.982Z","updated_at":"2016-11-29T09:54:25.982Z","actor":{"username":"e3amn2l","cleared":false,"url":"/e3amn2l","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"iandunn-projects","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1326388,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e 1. it's disable the functionality if REGOLITH_WP_SUPER_CACHE_SECRET not defined, \n\nIt breaks WP Super Cache's feature that allows an admin to view a page uncached. I can't see any security problems with that. I don't think non-security problems matter in this case, because the admin can easily restore the functionality by setting the config value. Do you see any security problems with the way that feature is broken?\n\n\u003e 2. it's use static constant if administrator didn't change the default value of `replace me with strong password`\n\nIn order to install Regolith, the user has to copy `environment-sample.php` to a new file named `environment.php`, and is instructed to update all the configuration values to match their environment.\n\nIf they choose to not update something obvious like that, that's basically the same as them choosing `password` for their password. I don't think it's reasonable to go out of my way to prevent someone from doing that.\n\n\u003e 3. the fallback is insecure\n\nWordPress ships with Paragon Initiative's polyfill for `random_bytes()`, so `mt_rand()` is only used in very rare edge cases where none of the polyfill's attempts worked. I think that's more than sufficient in this context.","automated_response":false,"created_at":"2016-11-29T15:18:08.959Z","updated_at":"2016-11-29T15:18:08.959Z","actor":{"username":"iandunn","cleared":false,"url":"/iandunn","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/974/01bc1d097002b7eff8eddba98990e094553b1eac_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"iandunn-projects","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1326874,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003eIt breaks WP Super Cache's feature that allows an admin to view a page uncached. I can't see any security problems with that. I don't think non-security problems matter in this case, because the admin can easily restore the functionality by setting the config value. Do you see any security problems with the way that feature is broken?\n\nno, it's ok (I misread the comment, and thought about the caching itself and not the option to view the page uncached)\n\n\u003eIf they choose to not update something obvious like that, that's basically the same as them choosing password for their password. I don't think it's reasonable to go out of my way to prevent someone from doing that.\n\nalso ok (in case you mention in documentation/steps that this value need to be changed)\nstill an instillation process can safely generate secrets if possible (target directory is writable)\n\n\u003eWordPress ships with Paragon Initiative's polyfill for random_bytes(), so mt_rand() is only used in very rare edge cases where none of the polyfill's attempts worked. I think that's more than sufficient in this context.\n\nsure, so a better approach will be to use wordpress function:\n```\nwp_generate_password( 16, false, false );\n```\n(changing false to true will include special characters in output)\nhttps://codex.wordpress.org/Function_Reference/wp_generate_password\nwhich use wp_rand function that has fallback that use also changing seed for randomization:\nhttps://codex.wordpress.org/Function_Reference/wp_rand","automated_response":false,"created_at":"2016-11-29T17:20:36.007Z","updated_at":"2016-11-29T17:20:36.007Z","actor":{"username":"e3amn2l","cleared":false,"url":"/e3amn2l","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"iandunn-projects","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1327004,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ah, that's a good point, thanks! I'll switch to `wp_generate_password` and deploy this.","automated_response":false,"created_at":"2016-11-29T17:48:33.593Z","updated_at":"2016-11-29T17:48:33.593Z","actor":{"username":"iandunn","cleared":false,"url":"/iandunn","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/974/01bc1d097002b7eff8eddba98990e094553b1eac_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"iandunn-projects","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1328670,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Actually, it's too early to use `wp_rand()`, because this runs long before the database is available.\n\nI [ended up just using an un-seeded version of the fallback in wp_rand()](https://github.com/iandunn/regolith/commit/0186caa7a7ce16abf204f77d88df236e4b0d4dcf). It's not a CSPRN, but I think it's good enough for this context, since it's rare that the fallback would be used, and even if it was, the overall severity is still low.","automated_response":false,"created_at":"2016-11-30T04:46:36.405Z","updated_at":"2016-11-30T04:46:36.405Z","actor":{"username":"iandunn","cleared":false,"url":"/iandunn","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/974/01bc1d097002b7eff8eddba98990e094553b1eac_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"e3amn2l","url":"/e3amn2l"},"genius_execution_id":null,"team_handle":"iandunn-projects","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1328677,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2016-11-30T04:48:07.009Z","updated_at":"2016-11-30T04:48:07.009Z","first_to_agree":true,"actor":{"username":"iandunn","cleared":false,"url":"/iandunn","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/974/01bc1d097002b7eff8eddba98990e094553b1eac_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"iandunn-projects","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1391774,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2016-12-30T04:48:13.124Z","updated_at":"2016-12-30T04:48:13.124Z","actor":{"url":"/iandunn-projects","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/162/2b148a5580e8f7c45d676df7576fb8b11b4de9ad_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Ian Dunn"}},"genius_execution_id":null,"team_handle":"iandunn-projects","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}