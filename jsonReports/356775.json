{"id":356775,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zNTY3NzU=","url":"https://hackerone.com/reports/356775","title":"command Injection in rawlog binary","state":"Closed","substate":"informative","severity_rating":"none","readable_substate":"Informative","created_at":"2018-05-24T11:42:51.512Z","submitted_at":"2018-05-24T11:42:51.512Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"mikki_khan","url":"/mikki_khan","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":8906,"url":"https://hackerone.com/open-xchange","handle":"open-xchange","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Open-Xchange","twitter_handle":"openxchange","website":"https://www.open-xchange.com/","about":"Messaging, collaboration and office productivity software for service providers"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2019-01-16T17:03:45.168Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2018-05-24T13:50:11.282Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Quick Overview\n\n \n\nI have found a Command Injection vulnerability in the code where a method calls an OS (Shell) command using an untrusted string to execute.\n\n \n\nIntroduction\n\n \n\nCommand injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation.\n\n \n\nSeverity : High\n\n \n\nVulnerable Parameter : Server\n\n \n\nPoC\n\n \n\nPage1: core-master\\src\\util\\rawlog.c\n\n \n\nLine no. : 373     int main(int argc, char *argv[])\n\n{\n\n                                char *executable, *p;\n\n                                enum rawlog_flags flags =RAWLOG_FLAG_LOG_INPUT | RAWLOG_FLAG_LOG_OUTPUT;\n\n                                int c;\n\n                                master_service = master_service_init(\"rawlog\", 0,\u0026argc, \u0026argv, \"+f:bIt\");\n\n                                while ((c = master_getopt(master_service)) \u003e 0) {\n\n                                switch (c) {\n\n                                case 'f':\n\n                                                if (strcmp(optarg, \"in\") == 0)\n\n                                                                flags \u0026= ~RAWLOG_FLAG_LOG_OUTPUT;\n\n                                                else if (strcmp(optarg, \"out\") == 0)\n\n                                                                flags \u0026= ~RAWLOG_FLAG_LOG_INPUT;\n\n                                                else\n\n                                                                i_fatal(\"Invalid filter: %s\", optarg);\n\n                                                break;\n\n                                case 'b':\n\n                                                flags |= RAWLOG_FLAG_LOG_BOUNDARIES;\n\n                                                break;\n\n                                case 'I':\n\n                                                flags |= RAWLOG_FLAG_LOG_IP_IN_FILENAME;\n\n                                                break;\n\n                                case 't':\n\n                                                flags |= RAWLOG_FLAG_LOG_TIMESTAMPS;\n\n                                                break;\n\n                                default:\n\n                                                return FATAL_DEFAULT;\n\n                                }\n\n                                }\n\n                                argc -= optind;\n\n                                argv += optind;\n\n                                if (argc \u003c 1)\n\n                                i_fatal(\"Usage: rawlog [-f in | out] [-I] [-b] [-t] \u003cbinary\u003e \u003carguments\u003e\");\n\n                                master_service_init_log(master_service, \"rawlog: \");\n\n                                master_service_init_finish(master_service);\n\n                                executable = argv[0];\n\n                                rawlog_open(flags);\n\n                                /* hide the executable path, it's ugly */\n\n                                p = strrchr(argv[0], '/');\n\nLine no.: 419      if (p != NULL) argv[0] = p+1;\n\nLine no.: 420      execv(executable, argv)\n\n \n\nIn the above code of page1, the application’s main method calls an OS (Shell) command with execv, at line 420, using an untrusted string with the command to execute. This could allow an attacker to inject an arbitrary command and enable a command injection attack. The attacker may be able to inject the executed command via user input, argv, which is retrieved by the application in the main method at line 373 of page1.\n\n \n\nKindly confirm and revert in case of any queries.\n\n## Impact\n\nImpact:\nAn attacker could run arbitrary system-level OS commands on the application server host. Depending on the application’s OS permissions, these could include:\n\n·         File actions (read / create / modify / delete)\n\n·         Open a network connection to the attacker’s server\n\n·         Start and stop system services\n\n·         Modify the running application\n\n·         Complete server takeover","weakness":{"id":58,"name":"Command Injection - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":4,"voters":["haxta4ok00","codeanddecode","sa1tama0","0619"],"severity":{"rating":"none","author_type":"Team"},"structured_scope":{"databaseId":42899,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/dovecot/core","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":2791330,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The parameters aren't coming from untrusted source. This is how this binary is supposed to behave. Its caller expects it to call the given parameters. It's also expected that the parameters can be just about anything, so there aren't really any validity checks that can be done.","automated_response":false,"created_at":"2018-05-24T13:22:01.518Z","updated_at":"2018-05-24T13:22:01.518Z","actor":{"username":"tss","cleared":false,"url":"/tss","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2791397,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","automated_response":false,"created_at":"2018-05-24T13:49:52.879Z","updated_at":"2018-05-24T13:49:52.879Z","additional_data":{"old_severity":"High (7.1)","new_severity":"None","old_severity_id":158699,"new_severity_id":158728},"actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2791398,"is_internal":false,"editable":false,"type":"Activities::BugInformative","message":"Based on your initial description, there do not appear to be any security implications as a direct result of this behavior. If you disagree, please reply with additional information describing your reasoning. Including a working proof-of-concept can be incredibly helpful in our assessment of these claims.\n","automated_response":false,"created_at":"2018-05-24T13:49:55.130Z","updated_at":"2018-05-24T13:49:55.130Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2791401,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2018-05-24T13:50:11.344Z","updated_at":"2018-05-24T13:50:11.344Z","first_to_agree":true,"actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2792420,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","automated_response":false,"created_at":"2018-05-24T15:10:05.320Z","updated_at":"2018-05-24T15:10:05.320Z","additional_data":{"old_title":"command Injection","new_title":"command Injection in rawlog binary"},"actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3987898,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","automated_response":false,"created_at":"2019-01-16T17:03:45.115Z","updated_at":"2019-01-16T17:03:45.115Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}