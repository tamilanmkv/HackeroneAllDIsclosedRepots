{"id":398163,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zOTgxNjM=","url":"https://hackerone.com/reports/398163","title":"DOM based XSS on *.██████.com via document.domain sink in Safari","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-02-09T16:40:08.000Z","submitted_at":"2015-02-09T16:40:08.000Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"filedescriptor","url":"/filedescriptor","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":31807,"url":"https://hackerone.com/redact","handle":"redact","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/031/807/3bf790585f65096b99a75d5fc8e1a8a9ad968da1_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/031/807/3bf790585f65096b99a75d5fc8e1a8a9ad968da1_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"profile":{"name":"██████","twitter_handle":"","website":"","about":"██████ "}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":true,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2018-08-22T17:12:06.764Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":null,"comments_closed?":true,"facebook_team?":false,"team_private?":false,"vulnerability_information":"█████████████████████████████████","original_report_id":null,"original_report_url":null,"attachments":[{"id":336596,"file_name":"chrome.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/336/596/57636e96c09809604b6d1da8a34e14dabeb51849/chrome.jpg?response-content-disposition=attachment%3B%20filename%3D%22chrome.jpg%22%3B%20filename%2A%3DUTF-8%27%27chrome.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T145602Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=9f1fa3db7e22e7784f40c91193afe01e006a2fecf5211914454d6885240f31a2","file_size":85927,"type":"image/jpeg"},{"id":336597,"file_name":"safari.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/336/597/0b304a67eb93db98488d0c815bb492d5d332fa6d/safari.jpg?response-content-disposition=attachment%3B%20filename%3D%22safari.jpg%22%3B%20filename%2A%3DUTF-8%27%27safari.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T145602Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=964c2b856352877dd290bcf607300ea1d8c33ba2e60d445588ab2f1d118d1325","file_size":49626,"type":"image/jpeg"}],"allow_singular_disclosure_at":null,"vote_count":81,"voters":["barbie_girl","jokebookservice1","tomdev","cdl","kapytein","mvc","michiel","muon4","nirvana_msu","base_64","and 71 more..."],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":3231661,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2017-11-30T16:40:08.000Z","updated_at":"2017-11-30T16:40:08.000Z","actor":{"username":"filedescriptor","cleared":true,"url":"/filedescriptor","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"filedescriptor","url":"/filedescriptor"},"genius_execution_id":null,"team_handle":"redact","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3231698,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2018-08-22T17:12:06.815Z","updated_at":"2018-08-22T17:12:06.815Z","actor":{"username":"filedescriptor","cleared":true,"url":"/filedescriptor","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"redact","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"id":9837,"category":"researcher","content":"\n██████ has a lot of services hosted on subdomains (e.g. mail.██████.com and news.██████.com). Naturally, SSO is used to centralize authentication. Because the authentication service is hosted on auth.██████.com, there needs to be a way for the session token to be passed to other subdomains due to SOP. One way to do cross origin messaging is `window.postMessage()`. While being supported in all modern browsers, it does not work well in Internet Explorer 9 and below. Since ██████ also targets users using old browers, `document.domain` was used instead.\n\n`document.domain` is an old technique to loosen SOP. If two origins with the same \"superdomain\" want to communicate to each other (e.g. foo.example.com and bar.example.com), they can both do `document.domain = 'example.com`, and then they can access each other's DOM. This was exactly what ██████ did.\n\nFile: [http://auth.██████.com/receiver.html](https://example.com)\n\nCode: \n```javascript\n        var q = location.hash.substr(1).split('\u0026');\n\n        for (var i = 0, l = q.length; i \u003c l; i++) {\n            var p = q[i].split('=');\n            params[decodeURIComponent(p[0])] = decodeURIComponent(p[1]);\n        }\n        try {\n            if (params['domain']) {\n                document.domain = params['domain']; // document.domain assignment\n            }\n            var broker = window.opener.broker; // reference to opener's function to handle session token \n            if (params['status'] == 'ok') {\n                broker.onSuccess(params);\n            } else {\n                broker.onFailure(params);\n            }\n            window.close();\n        } catch (e) {\n            window.close();\n        }\n    };\n```\n\nThis page passes everything in URL fragment, including session token, to the opener. It accepts parameter `domain` and assigns it to `document.domain`. A service on *.██████.com looking to automatically authenticate users would do the following:\n\n1. Execute `document.domain = '██████.com`\n2. Open [https://auth.██████.com](https://example.com) which redirects to [https://auth.██████.com/receiver.html#domain=██████.com\u0026token=...](https://example.com)\n4. `window.opener.broker.onSuccess` is now accessible to auth.██████.com\n\nThere is one thing not mentioned yet: what is a \"superdomain\"? It differs for diffrent browsers. Can foo.com and bar.com, sharing the \"superdomain\" `com`, both do `document.domain = 'com'` and communicate to each other? The answer is no, at least for most browsers. Websites can only set `document.domain` up to [eTLD+1](https://publicsuffix.org/). This is a security measure preventing lazy developers from over loosening SOP by making their website's DOM accessible universally. Assigning `document.domain` to something like `com`, or even `co.uk`, would result in an error:\n{F336596}\n\nHowever, Safari does not have such restrictions. `document.domain = 'com'` would not result in any error. If foo.com does `document.domain = 'com'`, evil.com can do the same and access its DOM. This is exactly the issue of ██████'s SSO apporach. \n{F336597}\n\nPoC (assuming hosted on https://evil.com and visited in Safari):\n```html\n\u003cscript\u003e\ndocument.domain = 'com';\n\u003c/script\u003e\n\u003ciframe src=\"https://auth.██████.com/receiver.html#domain=com\"\nonload=\"contentWindow.alert(location)\"\u003e\u003c/iframe\u003e\n```\n\nThe best part is, apparently every service that wants to use SSO needs to do `document.domain = '██████.com'`. Therefore, a XSS on any subdomain of ██████ can access all other subdomain's DOM. In this particular issue for example, after getting DOM access on auth.██████.com, we can do  `document.domain = '██████.com'` and pop alerts on any subdomains.","can_view?":true,"can_create?":false,"attachments":[],"user":{"id":9081,"username":"filedescriptor","name":"filedescriptor","bio":"\\\"","cleared":true,"website":"https://www.youtube.com/channel/UCCp25j1Zh9vc_WFm-nB9fhQ","location":"","created_at":"2014-08-16T03:54:09.722Z","url":"https://hackerone.com/filedescriptor","anc_triager":false,"hackerone_triager":false,"hackerone_employee":false,"user_type":"hacker","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png","medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png","xtralarge":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"}}}]}