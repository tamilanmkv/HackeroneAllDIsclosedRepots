{"id":730779,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83MzA3Nzk=","url":"https://hackerone.com/reports/730779","title":"HTTP header values do not have trailing OWS trimmed","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2019-11-06T17:46:12.794Z","submitted_at":"2019-11-06T17:46:12.794Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"alyssawilk","url":"/alyssawilk","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":22984,"url":"https://hackerone.com/nodejs","handle":"nodejs","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Node.js","twitter_handle":"nodejs","website":"https://nodejs.org","about":"The Node.js JavaScript Runtime"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2019-15606"],"singular_disclosure_disabled":false,"disclosed_at":"2020-02-24T17:48:42.993Z","bug_reporter_agreed_on_going_public_at":"2020-02-24T17:48:42.940Z","team_member_agreed_on_going_public_at":"2020-02-06T19:32:33.795Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"[I suspect I may have tagged the wrong vulnerability type -I'm failing to find \"insufficient validation of user input\"]\n\nAccording to the HTTP-spec, http values are\n       field-value    = *( field-content | LWS )\nhttp_parser does not appear to trim trailing LWS. This means if a user sends \"Host: foo\\r\\n\" the string literal \"foo\" is passed up, but if the user sends \"Host: foo \\r\\n\" the string literal \"foo \" is passed up, complete with trailing LWS.\n\n## Steps To Reproduce:\n\n(Add details for how we can reproduce the issue)\n\nIf one hands \"GET / HTTP/1.1\\r\\nHost: foo.com \\r\\nHello: World\\r\\n\\r\\n\"\nto http_parser, http_parser sends on_header_value \"foo.com \" instead of \"foo.com\"\n\n## Impact: [add why this issue matters]\n\nWe are trying to address an issue with Envoy, where if \n\"GET / HTTP/1.1\\r\\nHost: my-super-private-domain.com \\r\\nHello: World\\r\\n\\r\\n\"\nis passed to Envoy, and Envoy is configured to block any requests to \"my-super-private-domain.com\", the matcher fails due the trailing whitespace, and external users can tunnel requests that should be blocked.\n\nOriginally we were going to address this by doing whitespace trimming in Envoy, but this should probably be fixed upstream in http_parser in case other users are affected, so we're reaching out to see what folks on your end think.\n\n## Supporting Material/References:\n\nMy Envoy regression test verifies this lack of LWS trimming, but this is current under envoy security embargo, so please don't share\n\nTEST_F(Http1ServerConnectionImplTest, LWS) {                                                         \n  initialize();                                                                                      \n                                                                                                     \n  InSequence sequence;                                                                               \n                                                                                                     \n  Http::MockStreamDecoder decoder;                                                                   \n  EXPECT_CALL(callbacks_, newStream(_, _)).WillOnce(ReturnRef(decoder));                             \n                                                                                                     \n  TestHeaderMapImpl expected_headers{                                                                \n      {\"Test\", \"value \"},      // note the LWS after value is passed up from http_parser to Envoy :-(                                                                       \n      {\"Hello\", \"World\"},                                                                            \n      {\":path\", \"/\"},                                                                                \n      {\":method\", \"GET\"},                                                                            \n  };                                                                                                 \n  EXPECT_CALL(decoder, decodeHeaders_(HeaderMapEqual(\u0026expected_headers), true)).Times(1);            \n                                                                                                     \n  Buffer::OwnedImpl buffer(\"GET / HTTP/1.1\\r\\nTest: value \\r\\nHello: World\\r\\n\\r\\n\");                \n  codec_-\u003edispatch(buffer);                                                                          \n  EXPECT_EQ(0U, buffer.length());                                                                    \n}\n\n## Impact\n\nAs said above, this could allow privileged escalation, where if one uses an http_parser  enabled server configured to block specific domains, those blocks can be trivially bypassed using white-space. It's possible there are other attacks bypassing http_parser header value checks with whitespace, but I haven't investigated beyond the most obvious exploit","bounty_amount":"250.0","formatted_bounty":"$250","weakness":{"id":107,"name":"Improper Input Validation"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2020-03-07T19:32:33.877Z","allow_singular_disclosure_after":-50356113.59003812,"singular_disclosure_allowed":true,"vote_count":11,"voters":["a_d_a_m","rut00","b69fb2ebda43240ece9dbeb","viicius","ubn","ohioguy","ranulldd","donotenter","b7818470ba6a56b3da0f4f3","bountyhuntersforthewin","and 1 more..."],"severity":{"rating":"high","score":7.4,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"required","scope":"changed","confidentiality":"low","integrity":"low","availability":"none"}},"structured_scope":{"databaseId":666,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/nodejs/node","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":6245314,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey Alyssa,\n\nThanks for reporting. Our team will dig into this and get back to you soon with next steps. Do you have a working patch for http-parser that would fix the regression? Could you imagine any unforeseen edgecases that this could create in code expecting this to work? ","automated_response":false,"created_at":"2019-11-07T20:14:42.885Z","updated_at":"2019-11-07T20:14:42.885Z","actor":{"username":"mylesborins","cleared":false,"url":"/mylesborins","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/234/978/b951e9a05b9f7c327b55bd697d5bd52293856002_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6245326,"is_internal":false,"editable":false,"type":"Activities::ReportVulnerabilityTypesUpdated","message":"","automated_response":false,"created_at":"2019-11-07T20:15:05.105Z","updated_at":"2019-11-07T20:15:05.105Z","additional_data":{"added_weaknesses":[{"id":107,"name":"Improper Input Validation"}],"removed_weaknesses":[{"id":75,"name":"Privilege Escalation"}]},"actor":{"username":"mylesborins","cleared":false,"url":"/mylesborins","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/234/978/b951e9a05b9f7c327b55bd697d5bd52293856002_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6246907,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Unfortunately I haven't had time to pursue an http_parser fix.  On the Envoy side we were just going to trim LWS once we got the header value, but unfortunately going public with that could cause anyone really paying attention to exploit that attack vector in other servers using http_parser (including legacy node.js) so we wanted to check in with you folks and coordinate embargoes if http_parser is still supported enough to merit security back patches","automated_response":false,"created_at":"2019-11-07T21:52:19.918Z","updated_at":"2019-11-07T21:52:19.918Z","actor":{"username":"alyssawilk","cleared":false,"url":"/alyssawilk","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6253604,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @alyssawilk \n\nThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\n\nKind regards,\n@ktistai","automated_response":false,"created_at":"2019-11-08T11:04:48.809Z","updated_at":"2019-11-08T11:04:48.809Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6376908,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@alyssawilk \n\nThe team is internally discussing this. As soon as there is more information to share, we will update this. \n\nThanks\n@ktistai","automated_response":false,"created_at":"2019-11-22T09:26:37.513Z","updated_at":"2019-11-22T09:26:37.513Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6417618,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hey @alyssawilk \n\nStill digging into this right now. There are some related public discussions right now\n\nhttps://github.com/nodejs/node/issues/27711\nhttps://github.com/nodejs/node/pull/30222\nhttps://github.com/nodejs/llhttp/pull/33\n\nI'm still coordinating with the team on how we want to approach this thanks for being patient.","automated_response":false,"created_at":"2019-11-27T04:48:42.152Z","updated_at":"2019-11-27T04:48:42.152Z","actor":{"username":"mylesborins","cleared":false,"url":"/mylesborins","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/234/978/b951e9a05b9f7c327b55bd697d5bd52293856002_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6469794,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The EBNF quoted makes it appear that LWS is in fact part of the field-value, and should NOT be trimmed, which left me unsure whether this is the parser's responsibility. https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.4 is more clear: \"The field value does not\n   include any leading or trailing whitespace: OWS occurring before the\n   first non-whitespace octet of the field value or after the last\n   non-whitespace octet of the field value ought to be excluded by\n   parsers when extracting the field value from a header field. \"","automated_response":false,"created_at":"2019-12-04T23:53:03.571Z","updated_at":"2019-12-04T23:53:03.571Z","actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6794603,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","automated_response":false,"created_at":"2020-01-16T20:30:20.542Z","updated_at":"2020-01-16T20:30:20.542Z","additional_data":{"old_title":"http_parser does not appear to trim LWS after header values","new_title":"http_parser does not trim OWS after header values"},"actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6794610,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","automated_response":false,"created_at":"2020-01-16T20:31:03.467Z","updated_at":"2020-01-16T20:31:03.467Z","additional_data":{"old_title":"http_parser does not trim OWS after header values","new_title":"HTTP header values do not have trailing OWS trimmed"},"actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6794704,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Can someone suggest the text to use for the CVE description? It must match this very specific format: `PROBLEM TYPE` in `PRODUCT/VERSION` causes `IMPACT` when `ATTACK`","automated_response":false,"created_at":"2020-01-16T20:42:38.462Z","updated_at":"2020-01-16T20:42:38.462Z","actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6843795,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"No comment, so I requested CVE for\n\n\u003e Including trailing white space in HTTP header values in Nodejs 10, 12, and 13 causes bypass of authorization based on header value comparisons\n\ncve request: https://hackerone.com/nodejs/cve_requests/1400/edit (EDIT)","automated_response":false,"created_at":"2020-01-22T19:34:51.608Z","updated_at":"2020-01-22T19:42:47.042Z","actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6845994,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@alyssawilk In the release announcement, I can say \"Reported by ...\" if you would like to suggest a \"...\", maybe \"Alyssa Wilk\"?. Thanks!","automated_response":false,"created_at":"2020-01-22T22:37:18.226Z","updated_at":"2020-01-22T22:37:18.226Z","actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6850549,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Alyssa Wilk is fine.  If you usually credit entities as well, either Alyssa Wilk from Google or Alyssa Wilk from the Envoy Proxy security team would be fine and accurate as well\nthanks!","automated_response":false,"created_at":"2020-01-23T14:20:32.630Z","updated_at":"2020-01-23T14:20:32.630Z","actor":{"username":"alyssawilk","cleared":false,"url":"/alyssawilk","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6981451,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"See https://nodejs.org/en/blog/release/v13.8.0/","automated_response":false,"created_at":"2020-02-06T19:29:48.142Z","updated_at":"2020-02-06T19:29:48.142Z","actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"alyssawilk","url":"/alyssawilk"},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6981468,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2020-02-06T19:32:33.810Z","updated_at":"2020-02-06T19:32:33.810Z","first_to_agree":true,"actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7102737,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@alyssawilk can you please respond to the request for disclosure? See https://github.com/nodejs/security-wg/issues/631","automated_response":false,"created_at":"2020-02-20T16:12:03.485Z","updated_at":"2020-02-20T16:12:03.485Z","actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7137222,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'm not seeing any options on https://hackerone.com/reports/730779 for me to request or approve disclosure.\n\nLooking at https://docs.hackerone.com/programs/disclosure.html do you know how your project is set up?  I assume if you'd set up mutual agreement I'd have the \"disclose\" box so I'm wondering if your group is set up to require program admin approval?","automated_response":false,"created_at":"2020-02-24T16:25:38.660Z","updated_at":"2020-02-24T16:25:38.660Z","actor":{"username":"alyssawilk","cleared":false,"url":"/alyssawilk","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7137873,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'm not sure what it should look like from your end, I've asked our H1 program admin. FYI: https://github.com/nodejs/security-wg/issues/631#issuecomment-589401831  \n\n\u003e Singular = You still have to request disclosure here, but if 30 days pass and the other party has neither approved nor denied the request, the report will automatically disclose.\n\nThat implies that there is some way for you to approve, is there any chance an H1 email is in your trash or spam? I asked Alek for clarification on the process.","automated_response":false,"created_at":"2020-02-24T17:38:59.874Z","updated_at":"2020-02-24T17:38:59.874Z","actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7137974,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Indeed, after another 5 minutes of poking I found the right view.  Sorry for the delay - thankfully most of it was vacation and only the last hour was PEBKAC :-P","automated_response":false,"created_at":"2020-02-24T17:48:42.958Z","updated_at":"2020-02-24T17:48:42.958Z","actor":{"username":"alyssawilk","cleared":false,"url":"/alyssawilk","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7137975,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2020-02-24T17:48:43.009Z","updated_at":"2020-02-24T17:48:43.009Z","actor":{"username":"alyssawilk","cleared":false,"url":"/alyssawilk","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8610789,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","automated_response":false,"created_at":"2020-07-15T17:39:16.382Z","updated_at":"2020-07-15T17:39:16.382Z","actor":{"url":"/nodejs","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Node.js"}},"bounty_amount":"250.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"nodejs","collaborator":{"username":"alyssawilk","url":"/alyssawilk"},"actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}