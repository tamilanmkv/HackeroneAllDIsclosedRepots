{"id":812064,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84MTIwNjQ=","url":"https://hackerone.com/reports/812064","title":"SAML authentication bypass","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2020-03-06T10:09:08.702Z","submitted_at":"2020-03-06T10:09:08.702Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"tomp1","url":"/tomp1","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":19858,"url":"https://hackerone.com/rocket_chat","handle":"rocket_chat","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/019/858/ada6c92a338715afad123af214dd6e22fd8dc6ff_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/019/858/ada6c92a338715afad123af214dd6e22fd8dc6ff_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Rocket.Chat","twitter_handle":"RocketChat","website":"https://rocket.chat","about":"Rocket.Chat is a company built on open source values and a love for efficiency. The company is driven by our amazing community of contributors."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-06-18T17:23:50.076Z","bug_reporter_agreed_on_going_public_at":"2020-05-19T17:23:38.723Z","team_member_agreed_on_going_public_at":null,"comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary\n\nWhen using SAML authentication, responses are not checked properly. This allows attacker to inject/modify any assertions in the SAML response and thus, for example, authenticate as administrator.\n\n## Description\n\nFollowing code snippets are from *app/meteor-accounts-saml/server/saml_utils.js*\nWhen checking the signature, the first Signature element which is found in the whole response XML is used:\n\n`316 const signature = xmlCrypto.xpath(doc, '//*[local-name(.)=\\'Signature\\' and namespace-uri(.)=\\'http://www.w3.org/2000/09/xmldsig#\\']')[0];`\n\n After the XML signature has been verified, the code proceeds to use the first Response element found in the whole XML to get assertions and attributes. \n\n`516 const response = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'Response')[0];`\n\n**However there is no check that the signature that was checked relates to the response element that is being used.** Thus attacker can take a valid SAML response, with some valid signature, and add Response element, that has no signatures, in the beginning of the XML. The code finds the original signature and validates that, but proceeds to use the malicious Response element, which is found first in the document.\n\nAlso the validating the status from the response happens before signature validation\n\n`501 const statusValidateObj = self.validateStatus(doc);`\n\n## Releases Affected:\n\nTested on 3.0.3 but appears to affect all versions based on the history of saml_utils.js file.\n\n## Steps To Reproduce (from initial installation to vulnerability):\n\n  1. Configure the application to use SAML authentication\n  1. When logging in, intercept the POST request with a proxy tool\n  1. Use the attached `samlbypasspoc.py` file to create a new value for the parameter `SAMLResponse`. Run the script in python3 with the URL encoded SAMLResponse as argument.\n  1. Replace the parameter value with the one given by the POC script and forward the request\n\nThis requires altering the POC to suite the configuration. Beginning from the line 25, you can alter the response elements as needed to desired values. \n\nIn the sample POC file, attributes `OrganizationName` and `Email` and the element `NameID` are changed. In the setup I tested this resulted in login as a newly created admin.\n\n## Supporting Material/References:\n\n  * samlbypasspoc.py\n\n## Suggested mitigation\n\n  * Refactor the code so that the same elements (references) are used when checking the signature and when reading the attributes\n  * Do not use hard coded indexes when selecting the elements\n\n## Impact\n\nSAML authentication can be bypassed and attacker can log in as any user (e.g. admin user)","weakness":{"id":27,"name":"Improper Authentication - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":739127,"file_name":"samlbypasspoc.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/NxEmSxWnQK1GxnM8DPfvyTze?response-content-disposition=attachment%3B%20filename%3D%22samlbypasspoc.py%22%3B%20filename%2A%3DUTF-8%27%27samlbypasspoc.py\u0026response-content-type=text%2Fx-python\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153115Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=fa29fc7f3b370d39ed3f3411d1de2dbf0a901a9ea0cd2f60a903af0c036a8aa8","file_size":1407,"type":"text/x-python"}],"allow_singular_disclosure_at":"2020-06-18T17:23:38.758Z","allow_singular_disclosure_after":-41465256.376777984,"singular_disclosure_allowed":true,"vote_count":12,"voters":["fabianfreyer","msultan","brahim_boufakri01","pesticide","rut00","spetr0x","l84work","rh21a","ayush0x01","ae7","and 2 more..."],"severity":{"rating":"high","score":8.8,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"low","user_interaction":"none","scope":"unchanged","confidentiality":"high","integrity":"high","availability":"high"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":7243566,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @tomp1 \n\nthanks for your report. We appreciate your help to make Rocket.Chat more secure!\n\nBefore I triage it though, I want to clarify some assumptions for this exploit to work, because they will impact the triage.\n\nDo I understand right that to make this attack work, you need at least:\n(SAML authentication enabled, obviously)\n1. SSL not being used AND\n2. knowledge about parameters you want to exploit with the modified assertion, e.g. the admins email\n\nAbout step 2, this would be knowledge you could not generate with this exploit alone, so you would need pre-knowledge. \nOverall this does not seem to be an exploit you could randomly pull off on an RC instance without prior knowledge, so IÂ´d set its severity to medium.\n\nPlease share your thoughts, or what prerequisites are needed in your opinion for this exploit to work","automated_response":false,"created_at":"2020-03-06T13:54:52.068Z","updated_at":"2020-03-06T13:54:52.068Z","actor":{"username":"markus-rocketchat","cleared":false,"url":"/markus-rocketchat","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7243814,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi!\nThanks for the reply.\n\n1. TLS doesn't help here. Obivously you (the attacker) can MitM your own traffic, even if the site uses or forces HTTPS with HSTS. This is how security testing can be done. You configure your proxy software's (e.g. Burpsuite) CA to you browser and then you can intercept the traffic. \n\nSo a short answer: Attack works regardless if TLS is used or not.\n\n2\\. This depends on how this is configured and how assertions are used. In the use case I was testing login happens with SAML and if  the user id in the assertion was not known, a user was created. Further, role was mapped from OrganizationName attribute. In this case, no knowledge of admin user email addresses are needed. You can create a completely new user if you do not know the admin email/username. \nYou are correct that in some cases pre-knowledge might be needed (e.g. if assertion is encrypted). When assessing the severity however, we should look at the worst case. \n\nI disagree that this would not be an exploit that could be easily pulled off without pre-knowledge in most use cases. All you need to do is look at the SAML response structure (if not encrypted) and read/debug the source code of the application to create an exploit in most cases. For example the use case I was testing (not developed by me) did not require pre-knowledge.","automated_response":false,"created_at":"2020-03-06T14:27:16.643Z","updated_at":"2020-03-06T14:29:11.594Z","actor":{"username":"tomp1","cleared":false,"url":"/tomp1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7246173,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Just to add on to the suggested mitigation. Using some SAML processing library would be recommended instead of doing it yourself. There are many things that can go wrong with SAML processing and it needs to be done carefully. \n\nFor examples see:\n\u003chttps://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations\u003e\n\u003chttps://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final91.pdf\u003e\n","automated_response":false,"created_at":"2020-03-06T18:30:49.102Z","updated_at":"2020-03-06T18:30:49.102Z","actor":{"username":"tomp1","cleared":false,"url":"/tomp1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7298227,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hi @tomp1 \n\nI forgot to triage this after your latest response, thank you for that and the tips! We are already working on a fix.\n\nBest\nMarkus","automated_response":false,"created_at":"2020-03-12T12:30:57.379Z","updated_at":"2020-03-12T12:30:57.379Z","actor":{"username":"markus-rocketchat","cleared":false,"url":"/markus-rocketchat","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7365789,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello!\nAny update on this? I see you have some commit in github trying to fix the issue: \u003chttps://github.com/RocketChat/Rocket.Chat/commit/1d0970aaf623ad6da2d8b26de86007670e03d60c\u003e\n\nWith a quick glance, **this doesn't fix the issue at all.** You are still assuming the order of the elements, and the attacker can change the that. So for example a working bypass could be as follows: \n\n\u003cevil response\u003e\n      \u003csignature with reference \"x\"\u003e\n      \u003cevil assertion\u003e\n\u003c/evil response\u003e\n\u003coriginal response with reference \"x\"\u003e\n     \u003cogirinal assertion\u003e\n\u003c/original response\u003e\n\nThis would pass the signature test and evil assertion would be used.  In your fix you validate against the whole XML but select the first response and signature element. Again no checking of what is validated and what is used. **The issue persists.**\n\nFurther more: In SAML you can also sign assertions. If IdP uses this method, again it is easy to bypass with your code. Also you sill validate the status **before** the signature.\n\nIn a nut shell: I still **STRONGLY** suggest you take into use some established SAML processing library. Parsing the XML yourself is just too risky. Please read the papers I linked above.\n\n","automated_response":false,"created_at":"2020-03-19T08:39:40.109Z","updated_at":"2020-03-19T08:39:40.109Z","actor":{"username":"tomp1","cleared":false,"url":"/tomp1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7369937,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @tomp1 \n\nthank you very much for your proactive approach and tips. This is truly awesome.\n\nYou really have an indepth knowledge of this and for us, SAML is sometimes still a bit of a learning curve. Would you be interested to chat with me and the developers on our open Rocket.Chat server on this topic? This could be faster/more interactive and prevent us from going in the wrong direction.\n\nhttps://open.rocket.chat\n\nIf you are, please feel free to contact me there under my username there markus.kirsch and we can get the conversation going. This will not be to your disadvantage :)\n\nWould be great to have a chat with you.\n\nBest\nMarkus","automated_response":false,"created_at":"2020-03-19T14:58:15.634Z","updated_at":"2020-03-19T14:58:15.634Z","actor":{"username":"markus-rocketchat","cleared":false,"url":"/markus-rocketchat","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7451007,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @tomp1,\nwe will evaluate switching to an established SAML library, but meanwhile, if we refuse any XML with multiple responses or multiple response signatures, will it help with this specific issue?","automated_response":false,"created_at":"2020-03-26T18:07:09.945Z","updated_at":"2020-03-26T18:07:09.945Z","actor":{"username":"hudell","cleared":false,"url":"/hudell","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7455639,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello!\nSorry, I honestly haven't had time to come chat with you to your chat server. Also I don't consider myself as an expert in implementation of SAML, I come at this from a security tester point of view. Hence my recommendation of using something external.\n\nTo your other question: I think there would still be problems when assertions are signed instead of responses, which is often the case. So let's take a scenario where IdP signs an assertion inside the response instead of the whole response element.\nThe problem would again manifest in that the attacker would place two assertion elements inside the response: one that is signed (the original) and the other one is the evil one. Then the XML signature check would be valid but you would use the evil one.\n\nSo here the problem would again be that there are no checks that the (assertion) element you take from the response and use is signed. You check that the XML signature is valid, but that only checks that **something** has been signed. It does not guarantee that the element you use is signed.\n\nIf you add some kind of checks that would prevent attackers from using these kind of techniques (changing element orders) there still could be other attack vectors, like the one in the first link i posted above. So we get back to my original recommendation of using an external library and keeping that up to date with fixes they make.","automated_response":false,"created_at":"2020-03-27T06:38:28.365Z","updated_at":"2020-03-27T06:38:28.365Z","actor":{"username":"tomp1","cleared":false,"url":"/tomp1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8047508,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Can this be marked as Resolved?","automated_response":false,"created_at":"2020-05-19T12:18:14.990Z","updated_at":"2020-05-19T12:18:14.990Z","actor":{"username":"tomp1","cleared":false,"url":"/tomp1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8049213,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Fixed. \nThank you @tomp1 for making Rocket.Chat more secure!","automated_response":false,"created_at":"2020-05-19T14:59:45.745Z","updated_at":"2020-05-19T14:59:45.745Z","actor":{"username":"markus-rocketchat","cleared":false,"url":"/markus-rocketchat","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"tomp1","url":"/tomp1"},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8050528,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2020-05-19T17:23:38.737Z","updated_at":"2020-05-19T17:23:38.737Z","first_to_agree":true,"actor":{"username":"tomp1","cleared":false,"url":"/tomp1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8334028,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2020-06-18T17:23:50.118Z","updated_at":"2020-06-18T17:23:50.118Z","actor":{"url":"/rocket_chat","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/019/858/ada6c92a338715afad123af214dd6e22fd8dc6ff_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Rocket.Chat"}},"genius_execution_id":null,"team_handle":"rocket_chat","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}