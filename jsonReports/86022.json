{"id":86022,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NjAyMg==","url":"https://hackerone.com/reports/86022","title":"Multiple so called  'type juggling' attacks. Most notably PhabricatorUser::validateCSRFToken() is 'bypassable' in certain cases.","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-09-01T01:08:56.393Z","submitted_at":"2015-09-01T01:08:56.393Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"superkritisch","url":"/superkritisch","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":18,"url":"https://hackerone.com/phabricator","handle":"phabricator","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Phabricator","twitter_handle":"phabricator","website":"http://phacility.com/phabricator/","about":"Phabricator is a collection of open source web applications that help software companies build better software."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2015-10-01T22:57:15.654Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2015-09-01T22:57:01.569Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"/* MONGOOSE mongoose MONGOOSE mongoose MONGOOSE mongoose MONGOOSE mongoose */\r\n\r\nThe Phabricator code base is at various places vulnerable for so called \r\n'type juggling' [1] attacks. Most notably PhabricatorUser::validateCSRFToken()\r\nis 'bypassable' in certain cases.  \r\n\r\n\r\n##Type Juggling\r\nSince PHP's loose type comparison operators compare only data values but not \r\ntheir associated types, deriving variable types from context. PHP's string \r\nconversion rules [2] specify strings (when evaluated in a numeric context) with \r\nleading decimal, hexadecimal, infinity, NAN or radix (a '.') data optionally\r\nfollowed by an exponent are evaluated as floats. \r\n\r\nWhat this means is that a string like 00e13242 is cast to 0 and as such, to PHP \r\n0e94323 == 00e19384. \r\n\r\nTranslated into code, this means that the following comparison:\r\n\r\n    (hash($randomSecret) == $user_input)\r\n\r\nwill return true if hash($randomSecret) returns a hash in the form 0+[eE]\\d+ and\r\nthe $user_input is given as \"0\". This applies to various hashing algorithms, \r\nincluding (but not limited to) MD5 and SHA1. If you're not convinced, try \r\nrunning the PHP-code at the bottom of this text for a PoC with SHA1.\r\n\r\n\r\n##How this applies to Phabricator\r\nIn order to understand how this applies to Phabricator, we need to first know \r\nthat static method PhabricatorHash::digest() located at \r\nsrc/infrastructure/util/PhabricatorHash.php [3] on line 25 returns a sha1 hash\r\nvia hash_hmac();\r\n\r\nThen we need to know that in AphrontRequest::validateCSRF();[4] the static function\r\nPhabricatorUser::validateCSRFToken($token); is called with a user-supplied \r\n$token.\r\n\r\nNow, if we look at PhabricatorUser::validateCSRFToken() located at \r\nphabricator/src/applications/people/storage/PhabricatorUser.php [5], on line 409\r\nwe see that getRawCSRFToken (which also returns a sha1 hash) is called and it's \r\nreturn value is stored in $valid \r\n\r\n    $valid = $this-\u003egetRawCSRFToken($ii);\r\n\r\nthen on line 412 we see:\r\n\r\n    if ($token == $valid) {\r\n\r\nor, if the $version is 'breach' we reach this code on line 419-420:\r\n\r\n    $digest = PhabricatorHash::digest($valid, $salt);\r\n    if (substr($digest, 0, self::CSRF_TOKEN_LENGTH) == $token) {\r\n\r\nBoth these comparisons meets the criteria for type juggling. Since $valid is a \r\nrandomly generated sha1 hash which eventually will be of the form 0+[eE]\\d+ \r\nafter sufficient regenerations and the same goes for $digest. In addition, \r\n$token is a user-supplied value. \r\n\r\n##TL;DR\r\nSo in short, some expected CSRF-tokens will equal a user-supplied CSRF-token \r\ncontaining \"0\". In essence this is a reduction in entropy of the CSRF-tokens.\r\n\r\nto stop PHP from automatically casting either value to another type during \r\ncomparison, simply change: \r\n\r\n    if ($token == $valid) {\r\n\r\nto\r\n\r\n    if ($token === $valid) {\r\n\r\nAnd likewise:\r\n\r\n    if (substr($digest, 0, self::CSRF_TOKEN_LENGTH) == $token) {\r\n\r\nto\r\n\r\n    if (substr($digest, 0, self::CSRF_TOKEN_LENGTH) === $token) {\r\n\r\n\r\n\r\nIn addition to the above vulnerability, there are other notable misuses of PHP \r\ncomparison operators. \r\n\r\nphabricator/src/applications/conduit/method/ConduitConnectConduitAPIMethod.php:144\r\nin protected function execute(ConduitAPIRequest $request) [6]:\r\n        \r\n        $valid = sha1($token.$user-\u003egetConduitCertificate());\r\n        if ($valid != $signature) { \r\n            throw new ConduitException('ERR-INVALID-CERTIFICATE');\r\n\r\nThe != operator is not type strict and $signature is user-specified. $token is \r\nalso user-specified. To fix this != should be changed to !==.\r\n\r\n\r\nphabricator/src/applications/metamta/controller/PhabricatorMetaMTAMailgunReceiveController.php\r\nin verifyMessage() on line 15 and 16 [7]:\r\n\r\n    $sig = $request-\u003egetStr('signature');\r\n    return hash_hmac('sha256', $timestamp.$token, $api_key) == $sig\r\n\r\nWhere $sig is obviously a user-supplied value and can thus be 0, and again the \r\nreturn value of hash_hmac can be of the form 0+[eE]\\d+. \r\n\r\nTo fix this, change:\r\n    hash_hmac('sha256', $timestamp.$token, $api_key) == $sig\r\n\r\nto:\r\n    hash_hmac('sha256', $timestamp.$token, $api_key) === $sig\r\n\r\n\r\n\r\n##Examples:\r\n\r\n- type juggling with sha1[8]\r\n\r\n    \u003c?php\r\n    /* sha1 type juggling PoC values */\r\n    $v1 = sha1(\"AAJd1x3j\");\r\n    $v2 = sha1(\"AAPkbYlH\");\r\n    $v3 = sha1(\"AAZlIwOZ\");\r\n\r\n    var_dump($v1, $v2, $v3);\r\n    /* wrong way to compare these hashes */\r\n    var_dump( $v1 == $v2, $v2 == $v3, $v3 == $v1, $v1 == \"0\");\r\n\r\n    /* correct way */\r\n    var_dump( $v1 === $v2, $v2 === $v3, $v3 === $v1 );\r\n    ?\u003e\r\n\r\n\r\n\r\nThe above will output:\r\n\r\n    string(40) \"00e6811279456694288001763399976992804485\"\r\n    string(40) \"0e51223820731210116366152413868569204545\"\r\n    string(40) \"0e13965443605273185827757762777509208778\"\r\n    bool(true)  \r\n    bool(true)\r\n    bool(true)\r\n    bool(true)\r\n    bool(false)\r\n    bool(false)\r\n    bool(false)\r\n\r\n\r\n##References:\r\n1. http://turbochaos.blogspot.nl/2013/08/exploiting-exotic-bugs-php-type-juggling.html\r\n2. http://php.net/manual/en/language.types.string.php#language.types.string.conversion\r\n3. https://github.com/phacility/phabricator/blob/master/src/infrastructure/util/PhabricatorHash.php#L25\r\n4. https://github.com/phacility/phabricator/blob/master/src/aphront/AphrontRequest.php#L249\r\n5. https://github.com/phacility/phabricator/blob/master/src/applications/people/storage/PhabricatorUser.php\r\n6. https://github.com/phacility/phabricator/blob/master//src/applications/conduit/method/ConduitConnectConduitAPIMethod.php#L145\r\n7. https://github.com/phacility/phabricator/blob/master/src/applications/metamta/controller/PhabricatorMetaMTAMailgunReceiveController.php#L15\r\n8. https://pen-testing.sans.org/blog/pen-testing/2014/12/18/php-weak-typing-woes-with-some-pontification-about-code-and-pen-testing\r\n\r\n[1]: http://turbochaos.blogspot.nl/2013/08/exploiting-exotic-bugs-php-type-juggling.html \"1\"\r\n[2]: http://php.net/manual/en/language.types.string.php#language.types.string.conversion \"2\"\r\n[3]: https://github.com/phacility/phabricator/blob/master/src/infrastructure/util/PhabricatorHash.php#L25 \"3\"\r\n[4]: https://github.com/phacility/phabricator/blob/master/src/aphront/AphrontRequest.php#L249 \"4\"\r\n[5]: https://github.com/phacility/phabricator/blob/master/src/applications/people/storage/PhabricatorUser.php \"5\"\r\n[6]: https://github.com/phacility/phabricator/blob/master//src/applications/conduit/method/ConduitConnectConduitAPIMethod.php#L145 \"6\"\r\n[7]: https://github.com/phacility/phabricator/blob/master/src/applications/metamta/controller/PhabricatorMetaMTAMailgunReceiveController.php#L15 \"7\"\r\n[8]: https://pen-testing.sans.org/blog/pen-testing/2014/12/18/php-weak-typing-woes-with-some-pontification-about-code-and-pen-testing \"8\"\r\n\r\n\r\n\r\n\r\n/*END MONGOOSE mongoose MONGOOSE mongoose MONGOOSE mongoose MONGOOSE mongoose */","bounty_amount":"450.0","formatted_bounty":"$450","weakness":{"id":45,"name":"Cross-Site Request Forgery (CSRF)"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2015-10-01T22:57:01.701Z","allow_singular_disclosure_after":-190226312.80278683,"singular_disclosure_allowed":true,"vote_count":1,"voters":["siddiki"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":570608,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This requires random, non-user-controlled values to happen to generate hashes in the form `0+e\\d+`, right? If I'm doing the math right, about 1 in 64 million CSRF tokens has this form, and we cycle them every hour, so there is a 1-hour window of vulnerability in the next 7,300 years. Presumably we can compute when this window occurs, and are not vulnerable if we get everyone patched before then.\n\nThe API token effectively cycles every second, but the entire hash must match, so I think this one has millions (billions?) of years before it is vulnerable.\n\n(If no epoch input between now and 2038 produces a matching hash, we may not be vulnerable on any hardware which exists today.)\n\nDoes that sound about right? This is definitely a theoretical vulnerability and we'll fix it, but I don't _think_ a practical attack exists against it in our lifetimes. Does my math sound like it's in the right ballpark, or am I mis-assessing the practicality of this attack?\n\n","automated_response":false,"created_at":"2015-09-01T01:32:48.081Z","updated_at":"2015-09-01T01:32:48.081Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":570616,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"That sounds about right, i filed it mainly because best practices and often it is not exploitable. This issue happens a lot also with login scripts (e.g. comparing stored sha1/md5 with a user supplied value) and you're right in that case it is very hard to exploit. \n\nHowever, and i'm not completely sure if this is the case with Phabricator or not -- when the attacker can trigger the regeneration of the 'random' hash it is also considered real life exploitable, since you can just regenerate until a hash is generated that matches the 0+e\\d+. This is the case with password regeneration tokens for example (see: http://en.securitylab.ru/lab/PT-2012-29) \n","automated_response":false,"created_at":"2015-09-01T01:39:58.045Z","updated_at":"2015-09-01T01:39:58.045Z","actor":{"username":"superkritisch","cleared":false,"url":"/superkritisch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":570620,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"As far as I can tell, it looks like these are the next 5 vulnerability windows:\n\n```\n2028-10-31 9 AM\n2040-03-11 4 PM\n2122-11-02 7 PM\n2124-06-24 9 PM\n2125-12-31 9 AM\n```\n\nSo we have about 18 years to patch the CSRF version of this, at least, before a practical attack becomes possible.","automated_response":false,"created_at":"2015-09-01T01:45:23.959Z","updated_at":"2015-09-01T01:45:23.959Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":570621,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Well, 13 years, I suppose. Anyway, thanks for the report! We'll get this fixed shortly.","automated_response":false,"created_at":"2015-09-01T01:46:21.553Z","updated_at":"2015-09-01T01:46:21.553Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":570625,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Err, im not sure if i understand, how can you predict the outcome of the hashing function that is based on a random string? I don't think you can predict the csrf-token hashes? Arent the csrf-tokens randomly generated? (e.g. the ones of the form 0+e\\d+ will also appear randomly and not sequentally?) or are you just using statistics?","automated_response":false,"created_at":"2015-09-01T01:50:38.848Z","updated_at":"2015-09-01T01:50:38.848Z","actor":{"username":"superkritisch","cleared":false,"url":"/superkritisch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":570626,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Oh, right, they're variant per user account. Those are the values for my user account, which is obviously the most important one.","automated_response":false,"created_at":"2015-09-01T01:56:45.109Z","updated_at":"2015-09-01T01:56:45.109Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":570628,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Maybe, but they're variant every time a new token is generated right? Every time a new csrf-token is generated it is possibly of the form 0+e\\d+, we can't know which ones will be of that form because we cant predict sha1 outcomes. So that still makes it hard to exploit, since you'd need to perform a XSRF-request at the moment the hash happens to be of the form 0+e\\d+ but there is no way in telling beforehand when that will be. ","automated_response":false,"created_at":"2015-09-01T02:01:27.460Z","updated_at":"2015-09-01T02:01:27.460Z","actor":{"username":"superkritisch","cleared":false,"url":"/superkritisch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":570631,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Anyways, thanks for the reply and good luck with project :) ","automated_response":false,"created_at":"2015-09-01T02:03:59.772Z","updated_at":"2015-09-01T02:03:59.772Z","actor":{"username":"superkritisch","cleared":false,"url":"/superkritisch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":570643,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I believe these changes will fix the issue:\n\nhttps://secure.phabricator.com/D14025\nhttps://secure.phabricator.com/D14026\n\nThey also defuse hypothetical timing attacks against these comparisons, although I currently believe these are even less practical than this juggling attack.","automated_response":false,"created_at":"2015-09-01T02:42:38.392Z","updated_at":"2015-09-01T02:42:38.392Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":570646,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"(I'm not going to try to commit those tonight since it's getting late and I want to double check them tomorrow morning with fresh eyes, but I'll close this out then if no one spots any issues between now and then.)","automated_response":false,"created_at":"2015-09-01T02:52:08.565Z","updated_at":"2015-09-01T02:52:08.565Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":570649,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"      array('hunter42', 'hunter42', true),\n\nthis pretty much sums it up :D","automated_response":false,"created_at":"2015-09-01T02:57:42.841Z","updated_at":"2015-09-01T02:57:42.841Z","actor":{"username":"superkritisch","cleared":false,"url":"/superkritisch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":570650,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Just to add information to the hivemind: stuff like in_array is also vulnerable unless given a third argument \n\nhttps://secure.php.net/in_array\n\nIf the third parameter strict is set to TRUE then the in_array() function will also check the types of the needle in the haystack.\n\n","automated_response":false,"created_at":"2015-09-01T02:59:37.642Z","updated_at":"2015-09-01T02:59:37.642Z","actor":{"username":"superkritisch","cleared":false,"url":"/superkritisch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":573227,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"There's potentially one of those in the Twilio API:\n\nhttps://github.com/twilio/twilio-php/blob/master/Services/Twilio/RequestValidator.php\n\nBut I think it's not vulnerable even in theory since it uses `base64_encode()` and I think it will always end in `=`.\n\nThere's an `in_array()` in our version of the Stripe API but it doesn't do anything bad and the modern library doesn't have it.\n\nI wasn't able to find any additional suspicious callsites, but will keep an eye out.","automated_response":false,"created_at":"2015-09-01T22:52:34.456Z","updated_at":"2015-09-01T22:52:34.456Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":573229,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"This should now be fixed in HEAD.","automated_response":false,"created_at":"2015-09-01T22:53:23.283Z","updated_at":"2015-09-01T22:53:23.283Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"superkritisch","url":"/superkritisch"},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":573237,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"This attack was probably not exploitable in a practical scenario on its own, but did represent a substantial reduction in entropy in core authentication code.","automated_response":false,"created_at":"2015-09-01T22:55:30.958Z","updated_at":"2015-09-01T22:55:30.958Z","actor":{"url":"/phabricator","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Phabricator"}},"bounty_amount":"450.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"phabricator","collaborator":{"username":"superkritisch","url":"/superkritisch"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":573239,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"These fixes are publicly available in the upstream, so this can be disclosed at any time.\n\nThanks again!","automated_response":false,"created_at":"2015-09-01T22:57:01.602Z","updated_at":"2015-09-01T22:57:01.602Z","first_to_agree":true,"actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":575128,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Wow! Thanks for the bounty! I really appreciate it.  \n\nGood luck with the project!","automated_response":false,"created_at":"2015-09-02T23:29:53.829Z","updated_at":"2015-09-02T23:29:53.829Z","actor":{"username":"superkritisch","cleared":false,"url":"/superkritisch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":598368,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'm not sure if theres a button i should press to allow this to become public, so just for clarification: i don't mind if this is shared publically.","automated_response":false,"created_at":"2015-09-25T16:12:51.572Z","updated_at":"2015-09-25T16:12:51.572Z","actor":{"username":"superkritisch","cleared":false,"url":"/superkritisch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":598383,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I think there's a button you can press somewhere to agree to immediate disclosure. It will automatically disclose after a set time period (30 days?) otherwise. Feel free to press the button if you can find it, but just waiting for a week or so will have the same effect if you can't.\n\n(Beyond the project commit history we also already disclosed this in the Sep 5 changelog -- https://secure.phabricator.com/w/changelog/2015.36/ -- so the schedule of the disclosure here isn't too important.)","automated_response":false,"created_at":"2015-09-25T16:18:41.767Z","updated_at":"2015-09-25T16:18:41.767Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":605892,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2015-10-01T22:57:15.688Z","updated_at":"2015-10-01T22:57:15.688Z","actor":{"url":"/phabricator","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Phabricator"}},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}