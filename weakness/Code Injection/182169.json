{"id":182169,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xODIxNjk=","url":"https://hackerone.com/reports/182169","title":"Type confusion in FutureIter_throw() which may potentially lead to an arbitrary code execution","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2016-11-14T21:37:24.096Z","submitted_at":"2016-11-14T21:37:24.096Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"artem","url":"/artem","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/2i1RS84yiWXNaegFdcLMbwu9/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":27,"url":"https://hackerone.com/ibb-python","handle":"ibb-python","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Python (IBB)","twitter_handle":"","website":"http://www.python.org/news/security","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2016-12-03T20:13:05.980Z","bug_reporter_agreed_on_going_public_at":"2016-12-03T20:08:23.367Z","team_member_agreed_on_going_public_at":"2016-12-03T20:13:05.947Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hello,\n\nI reported this directly to security@python.org. The issue has been fixed. Python Team confirmed that it's fixed and disclosed:\n\nIt's disclosed. Feel free to file a bug if that would be helpful to you. \n\n\n\nOn Mon, Nov 14, 2016, at 09:54, Artem Smotrakov wrote:\n\u003e Hello Benjamin,\n\u003e\n\u003e I am planning to submit it to https://hackerone.com/ibb-python to see if\n\u003e it's eligible. Since the fix is in public repo, may it be considered as\n\u003e disclosed? Or, should I wait for next release?\n\u003e\n\u003e Is there a bug id for it?\n\u003e\n\u003e Thanks for fixing this quickly!\n\u003e\n\u003e Artem\n\u003e\n\u003e 2016-11-14 0:17 GMT-08:00 Benjamin Peterson \u003cbenjamin@python.org\u003e:\n\u003e\n\u003e \u003e Thank you for the report. Fixed in\n\u003e \u003e https://hg.python.org/cpython/rev/3ea121235ede\n\n\nHere is the original report:\n\n\n\n\nHello Python Security Team,\n\nA type confusion may occur in FutureIter_throw() method of _asynciomodule:\n\nhttps://hg.python.org/cpython/file/tip/Modules/_asynciomodule.c#l1022\n\n```\nstatic PyObject *\nFutureIter_throw(futureiterobject *self, PyObject *args)\n{\n    PyObject *type=NULL, *val=NULL, *tb=NULL;\n    if (!PyArg_ParseTuple(args, \"O|OO\", \u0026type, \u0026val, \u0026tb))\n        return NULL;\n\n    if (val == Py_None) {\n        val = NULL;\n    }\n    if (tb == Py_None) {\n        tb = NULL;\n    }\n\n    Py_CLEAR(self-\u003efuture);\n\n    if (tb != NULL) {\n        PyErr_Restore(type, val, tb);\n    }\n```\n\nThe method doesn't check types of \"type\" and \"val\", and passes them to PyErr_Restore().\n\nPyErr_Restore() method doesn't perform any type check on \"type\" and \"val\" either,\nand stores them \"as is\" to \"tstate-\u003ecurexc_type\" and \"tstate-\u003ecurexc_value\".\n\nhttps://hg.python.org/cpython/file/tip/Python/errors.c#l27\n\nThen, \"tstate-\u003ecurexc_value\" can be retrieved by PyErr_Fetch() funciton,\nand callers will assume that it returns an object of exception type.\nThis results to a type confusion.\n\nThere are a lot of invocation of PyErr_Fetch() which may lead to different consequences.\nI am attaching two POCs which demonstrates the problem.\n\n1. FutureIter_type_confusion_1.py results to a crash with the following output:\n\n```\nin A.__init__\nin A.__str__\nin except, e = this is not an exception\nin except, type(e) = \u003cclass 'Exception'\u003e\nTraceback (most recent call last):\n  File \"./FutureIter_type_confusion_report/FutureIter_type_confusion_1.py\", line 13, in \u003cmodule\u003e\nSegmentation fault (core dumped)\n```\n\n2. FutureIter_type_confusion_2.py shows that the issue may lead to overwritting function pointers\nwhich may potentially result to an arbitrary code execution:\n\n```\n(gdb) run\nStarting program: /home/artem/projects/python/build/cpython-normal/bin/python3 ./FutureIter_type_confusion_report/FutureIter_type_confusion_2.py\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00000000004b751a in PyObject_Repr (v=0xae1890) at Objects/object.c:474\n474\t    if (Py_TYPE(v)-\u003etp_repr == NULL)\n(gdb) p v-\u003eob_type-\u003etp_repr\nCannot access memory at address 0x50607020304050c8\n(gdb) list\n469\t        return NULL;\n470\t    }\n471\t#endif\n472\t    if (v == NULL)\n473\t        return PyUnicode_FromString(\"\u003cNULL\u003e\");\n474\t    if (Py_TYPE(v)-\u003etp_repr == NULL)\n475\t        return PyUnicode_FromFormat(\"\u003c%s object at %p\u003e\",\n476\t                                    v-\u003eob_type-\u003etp_name, v);\n477\n478\t#ifdef Py_DEBUG\n479\t    /* PyObject_Repr() must not be called with an exception set,\n480\t       because it may clear it (directly or indirectly) and so the\n481\t       caller loses its exception */\n482\t    assert(!PyErr_Occurred());\n483\t#endif\n484\n485\t    res = (*v-\u003eob_type-\u003etp_repr)(v);\n486\t    if (res == NULL)\n487\t        return NULL;\n488\t    if (!PyUnicode_Check(res)) {\n(gdb)\n```\n\n\"v-\u003eob_type-\u003etp_repr\" contains an invalid address 0x50607020304050c8, so it results to a crash.\nBut this address is controlled by an attacker.\n\"v-\u003eob_type-\u003etp_repr\" is called later in line 485, so if it had a valid pointer,\nthen it may potentially lead to full control of instruction pointer.\n\n\nFutureIter_throw() accepts any types, and confused \"tstate-\u003ecurexc_value\" may be used in lots of places,\nso there may be much more many ways to use this problem.\n\nI am also attaching an untested patch which updates FutureIter_throw() function to check types of its parameters.\nThe patch seems to solve the problem. I am wondering if such a check might be added to PyErr_Restore() to prevent similar issues.","vulnerability_information_html":"\u003cp\u003eHello,\u003c/p\u003e\n\n\u003cp\u003eI reported this directly to \u003ca title=\"security@python.org\" href=\"mailto:security@python.org\" rel=\"nofollow noopener noreferrer\"\u003esecurity@python.org\u003c/a\u003e. The issue has been fixed. Python Team confirmed that it\u0026#39;s fixed and disclosed:\u003c/p\u003e\n\n\u003cp\u003eIt\u0026#39;s disclosed. Feel free to file a bug if that would be helpful to you. \u003c/p\u003e\n\n\u003cp\u003eOn Mon, Nov 14, 2016, at 09:54, Artem Smotrakov wrote:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eHello Benjamin,\u003c/p\u003e\n\n\u003cp\u003eI am planning to submit it to \u003ca title=\"https://hackerone.com/ibb-python\" href=\"https://hackerone.com/ibb-python\"\u003ehttps://hackerone.com/ibb-python\u003c/a\u003e to see if\u003cbr\u003e\nit\u0026#39;s eligible. Since the fix is in public repo, may it be considered as\u003cbr\u003e\ndisclosed? Or, should I wait for next release?\u003c/p\u003e\n\n\u003cp\u003eIs there a bug id for it?\u003c/p\u003e\n\n\u003cp\u003eThanks for fixing this quickly!\u003c/p\u003e\n\n\u003cp\u003eArtem\u003c/p\u003e\n\n\u003cp\u003e2016-11-14 0:17 GMT-08:00 Benjamin Peterson \u003ca title=\"benjamin@python.org\" href=\"mailto:benjamin@python.org\" rel=\"nofollow noopener noreferrer\"\u003ebenjamin@python.org\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThank you for the report. Fixed in\u003cbr\u003e\n\u003ca title=\"https://hg.python.org/cpython/rev/3ea121235ede\" href=\"/redirect?url=https%3A%2F%2Fhg.python.org%2Fcpython%2Frev%2F3ea121235ede\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://hg.python.org/cpython/rev/3ea121235ede\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eHere is the original report:\u003c/p\u003e\n\n\u003cp\u003eHello Python Security Team,\u003c/p\u003e\n\n\u003cp\u003eA type confusion may occur in FutureIter_throw() method of _asynciomodule:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://hg.python.org/cpython/file/tip/Modules/_asynciomodule.c#l1022\" href=\"/redirect?url=https%3A%2F%2Fhg.python.org%2Fcpython%2Ffile%2Ftip%2FModules%2F_asynciomodule.c%23l1022\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://hg.python.org/cpython/file/tip/Modules/_asynciomodule.c#l1022\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003estatic PyObject *\nFutureIter_throw(futureiterobject *self, PyObject *args)\n{\n    PyObject *type=NULL, *val=NULL, *tb=NULL;\n    if (!PyArg_ParseTuple(args, \u0026quot;O|OO\u0026quot;, \u0026amp;type, \u0026amp;val, \u0026amp;tb))\n        return NULL;\n\n    if (val == Py_None) {\n        val = NULL;\n    }\n    if (tb == Py_None) {\n        tb = NULL;\n    }\n\n    Py_CLEAR(self-\u0026gt;future);\n\n    if (tb != NULL) {\n        PyErr_Restore(type, val, tb);\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe method doesn\u0026#39;t check types of \u0026quot;type\u0026quot; and \u0026quot;val\u0026quot;, and passes them to PyErr_Restore().\u003c/p\u003e\n\n\u003cp\u003ePyErr_Restore() method doesn\u0026#39;t perform any type check on \u0026quot;type\u0026quot; and \u0026quot;val\u0026quot; either,\u003cbr\u003e\nand stores them \u0026quot;as is\u0026quot; to \u0026quot;tstate-\u0026gt;curexc_type\u0026quot; and \u0026quot;tstate-\u0026gt;curexc_value\u0026quot;.\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://hg.python.org/cpython/file/tip/Python/errors.c#l27\" href=\"/redirect?url=https%3A%2F%2Fhg.python.org%2Fcpython%2Ffile%2Ftip%2FPython%2Ferrors.c%23l27\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://hg.python.org/cpython/file/tip/Python/errors.c#l27\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThen, \u0026quot;tstate-\u0026gt;curexc_value\u0026quot; can be retrieved by PyErr_Fetch() funciton,\u003cbr\u003e\nand callers will assume that it returns an object of exception type.\u003cbr\u003e\nThis results to a type confusion.\u003c/p\u003e\n\n\u003cp\u003eThere are a lot of invocation of PyErr_Fetch() which may lead to different consequences.\u003cbr\u003e\nI am attaching two POCs which demonstrates the problem.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eFutureIter_type_confusion_1.py results to a crash with the following output:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ein A.__init__\nin A.__str__\nin except, e = this is not an exception\nin except, type(e) = \u0026lt;class \u0026#39;Exception\u0026#39;\u0026gt;\nTraceback (most recent call last):\n  File \u0026quot;./FutureIter_type_confusion_report/FutureIter_type_confusion_1.py\u0026quot;, line 13, in \u0026lt;module\u0026gt;\nSegmentation fault (core dumped)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003col\u003e\n\u003cli\u003eFutureIter_type_confusion_2.py shows that the issue may lead to overwritting function pointers\nwhich may potentially result to an arbitrary code execution:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e(gdb) run\nStarting program: /home/artem/projects/python/build/cpython-normal/bin/python3 ./FutureIter_type_confusion_report/FutureIter_type_confusion_2.py\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \u0026quot;/lib/x86_64-linux-gnu/libthread_db.so.1\u0026quot;.\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00000000004b751a in PyObject_Repr (v=0xae1890) at Objects/object.c:474\n474     if (Py_TYPE(v)-\u0026gt;tp_repr == NULL)\n(gdb) p v-\u0026gt;ob_type-\u0026gt;tp_repr\nCannot access memory at address 0x50607020304050c8\n(gdb) list\n469         return NULL;\n470     }\n471 #endif\n472     if (v == NULL)\n473         return PyUnicode_FromString(\u0026quot;\u0026lt;NULL\u0026gt;\u0026quot;);\n474     if (Py_TYPE(v)-\u0026gt;tp_repr == NULL)\n475         return PyUnicode_FromFormat(\u0026quot;\u0026lt;%s object at %p\u0026gt;\u0026quot;,\n476                                     v-\u0026gt;ob_type-\u0026gt;tp_name, v);\n477\n478 #ifdef Py_DEBUG\n479     /* PyObject_Repr() must not be called with an exception set,\n480        because it may clear it (directly or indirectly) and so the\n481        caller loses its exception */\n482     assert(!PyErr_Occurred());\n483 #endif\n484\n485     res = (*v-\u0026gt;ob_type-\u0026gt;tp_repr)(v);\n486     if (res == NULL)\n487         return NULL;\n488     if (!PyUnicode_Check(res)) {\n(gdb)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u0026quot;v-\u0026gt;ob_type-\u0026gt;tp_repr\u0026quot; contains an invalid address 0x50607020304050c8, so it results to a crash.\u003cbr\u003e\nBut this address is controlled by an attacker.\u003cbr\u003e\n\u0026quot;v-\u0026gt;ob_type-\u0026gt;tp_repr\u0026quot; is called later in line 485, so if it had a valid pointer,\u003cbr\u003e\nthen it may potentially lead to full control of instruction pointer.\u003c/p\u003e\n\n\u003cp\u003eFutureIter_throw() accepts any types, and confused \u0026quot;tstate-\u0026gt;curexc_value\u0026quot; may be used in lots of places,\u003cbr\u003e\nso there may be much more many ways to use this problem.\u003c/p\u003e\n\n\u003cp\u003eI am also attaching an untested patch which updates FutureIter_throw() function to check types of its parameters.\u003cbr\u003e\nThe patch seems to solve the problem. I am wondering if such a check might be added to PyErr_Restore() to prevent similar issues.\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":70,"name":"Code Injection"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":134741,"file_name":"FutureIter_type_confusion.patch","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/134/741/d9a988ab528a11188dfaae9782a2ede9138fca5a/FutureIter_type_confusion.patch?response-content-disposition=attachment%3B%20filename%3D%22FutureIter_type_confusion.patch%22%3B%20filename%2A%3DUTF-8%27%27FutureIter_type_confusion.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T044602Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026X-Amz-Signature=24d15ff9b5edbb929c82924068679d045a3d9e2fc3c0c43b3453e05587722d36","file_size":790,"type":"text/x-diff"},{"id":134742,"file_name":"FutureIter_type_confusion_1.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/134/742/a26e5b0b0681f03c55659c9177bcea0597766632/FutureIter_type_confusion_1.py?response-content-disposition=attachment%3B%20filename%3D%22FutureIter_type_confusion_1.py%22%3B%20filename%2A%3DUTF-8%27%27FutureIter_type_confusion_1.py\u0026response-content-type=text%2Fx-python\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T044602Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026X-Amz-Signature=1ab57ff6eb40c581e7e0fdaf07a31708825b22d2e0fa9b0a4b4bc486c94f21cb","file_size":387,"type":"text/x-python"},{"id":134743,"file_name":"FutureIter_type_confusion_2.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/134/743/72c27ea0307bf08afdecc4d51a30435a4c9b1bb5/FutureIter_type_confusion_2.py?response-content-disposition=attachment%3B%20filename%3D%22FutureIter_type_confusion_2.py%22%3B%20filename%2A%3DUTF-8%27%27FutureIter_type_confusion_2.py\u0026response-content-type=text%2Fx-python\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T044602Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026X-Amz-Signature=7c19b72e29ca36bd0268e68fd340b899774883173a2c96ad01f4851f978f9730","file_size":653,"type":"text/x-python"}],"allow_singular_disclosure_at":"2017-01-02T20:08:23.415Z","allow_singular_disclosure_after":-125829458.87244493,"singular_disclosure_allowed":true,"vote_count":4,"voters":["alfredsaonoy","spetr0x","0xsyed","arice"],"severity":{"rating":"low","author_type":"Team"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1338932,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T19:51:34.728Z","updated_at":"2016-12-03T19:51:34.728Z","additional_data":{"old_severity":null,"new_severity":"Low","old_severity_id":null,"new_severity_id":11339},"actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1338934,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T19:51:42.490Z","updated_at":"2016-12-03T19:51:42.490Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"artem","url":"/artem"},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1338936,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T19:51:47.521Z","updated_at":"2016-12-03T19:51:47.521Z","actor":{"url":"/ibb-python","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Python (IBB)"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-python","collaborator":{"username":"artem","url":"/artem"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1338939,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks @artem! ","markdown_message":"\u003cp\u003eThanks \u003ca href=\"/artem\"\u003e@artem\u003c/a\u003e! \u003c/p\u003e\n","automated_response":false,"created_at":"2016-12-03T19:52:18.271Z","updated_at":"2016-12-03T19:52:18.271Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1338960,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T20:08:23.391Z","updated_at":"2016-12-03T20:08:23.391Z","first_to_agree":true,"actor":{"username":"artem","cleared":false,"url":"/artem","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/2i1RS84yiWXNaegFdcLMbwu9/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1338970,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T20:13:05.962Z","updated_at":"2016-12-03T20:13:05.962Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1338971,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T20:13:05.994Z","updated_at":"2016-12-03T20:13:05.994Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}