{"id":755354,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83NTUzNTQ=","url":"https://hackerone.com/reports/755354","title":"Prevent XSS when passing a parameter directly into link_to ","state":"Closed","substate":"informative","severity_rating":"low","readable_substate":"Informative","created_at":"2019-12-10T18:00:07.892Z","submitted_at":"2019-12-10T18:00:07.892Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"speleding","url":"/speleding","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/vJRkCxyKWpQqekuvyr1WFKec/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":22,"url":"https://hackerone.com/rails","handle":"rails","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Ruby on Rails","twitter_handle":null,"website":"http://rubyonrails.org/security","about":"Web development that doesn't hurt."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2020-05-13T18:19:25.408Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2020-05-12T16:38:42.187Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"*Note: I would say this is perhaps more of a feature request than an actual vulnerability, but Rafael Fran√ßa deleted this from GitHub and asked to submit it here instead*\n\nIn a rails views it's easy to accidentally create an XSS vulnerability by using the following in a template:\n`\u003c%= link_to 'Back', params[:back] %\u003e`\n\nDoing this exposes the app to an attack that can easily be demonstrated by simply adding this to URL of that view:\n`?back=javascript%3Aalert%28boom%29%3B`\n\nI think it would be good if rails detects this situation and filters the link_to parameter if it's from an untrusted source. The attached two-line patch does this by only allowing the HTTP(S) protocol in that case.\n\n## Impact\n\nIf a programmer inadvertently passes a parameter directly into link_to then this would leave his site open to an XSS attack. Since rails filters untrusted parameters in many other situations it may not be apparent to the casual observer that link_to does not filter javascript.","weakness":{"id":63,"name":"Cross-site Scripting (XSS) - DOM"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":656072,"file_name":"Prevent_XSS_when_passing_param_directly_into_link_to.patch","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/V97WNmtmEepCjFWqSc5c5tCT?response-content-disposition=attachment%3B%20filename%3D%22Prevent_XSS_when_passing_param_directly_into_link_to.patch%22%3B%20filename%2A%3DUTF-8%27%27Prevent_XSS_when_passing_param_directly_into_link_to.patch\u0026response-content-type=text%2Fx-patch\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2T6DG5UU%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T152339Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJIMEYCIQCyGt%2F6wKTb7WdhbTEehok3geSSNypgF1jy9glhzjfqmQIhAN%2FZ96OUsxT3l%2FcNh%2BJaiqKBQp%2B0XefuAf%2BhfC%2FmhMZBKoMECO%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5IgxZblqGtDqM2dUzvNgq1wMBRL4HwjcRdARKHRTYG1WTOwsUnNm5pyWIDl6UX7cxu3S9pxhLAGamITa%2Bry536DE0dNafGhdIyPeponbLp8FxjTVDEDmVrSlc3vq07ilX%2FsvaFMPbfLwUFwN8DcJVAZSLYZA6zDdeKNCgrZ1ISy%2BuSl%2F8sa9Nj%2FKFffdAxrEzWdcbmnUnTxt6PFvOqigHySvKHcRU1WUlzR%2BJNQhShWoYk3WMwt3lGEOyDeyEBa1PjWzXfwU5hwfOCygWSHeqe3rws%2Fy%2FAjcJ4Igs3dp7VWi2gpey9dMnBlv29eq43WYKyQ6K0q%2FC9l73EFZqlsoZAnNWCF%2BaMWp%2FSNCQCoi6LiyTT3H7xbPsVAE%2F%2B6%2B%2Fmd5o4HWlwOrPWTPapPHw%2BSF0OGtEIdy9BSNcjjpsTprmH3CxZWrOiVUBzDRDrImWT3QqtKWRETxE5UkMEesELPvS1Vr78fUKmIPG33W64ks49siCJg%2BYlvii52MslCAhwi8OBai4EvmsepnSL4Y7WjbGc31Zh7uWP1tOMXaSXgoK4ZXpbX9aNZgfinEq%2FEdjmz1acLqkVL8LTALuORrCaSQNzbL1VsrMHnDQY5Ip6UHG9W3WhTLOB2rMmAx%2FYtqF%2F2HrLRQRuA5lXPow%2F4aRiwY6pAFiuHIrJ99Gk48YedhIWLylCmpLudXTrjRTQ5%2BPJgz8sHy%2FJL%2BbYgchWh7RyeRvXCGWkecfBiAUWkHftxJlLxZP3R4oliu1hG1pnP80N0SBXLpKCFAQqqhncEnNPuXaqUaPMjKqpRRMw76WlTCCpu34SiacreJDZDO6dLymqMm3OX1OpD5Y13L2IbUTLcllZFway4EkA3FPk2PKaxAARwJYsWedpQ%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=74cad37c07f077a974cb93193423001f4be62e4ceea148deaa3c3b2384b1172f","file_size":560,"type":"text/x-patch"}],"allow_singular_disclosure_at":null,"vote_count":2,"voters":["brahim_boufakri01","mr_assassin"],"severity":{"rating":"low","author_type":"User"},"structured_scope":{"databaseId":160,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/rails/rails","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":6515518,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for the report.\n\nI just tried your patch and it doesn't fix the issue. `param[:back]` is just a regular string, not a safer buffer, so the code in the patch will not apply.\n\nWe are aware of this issue for a while, and we did investigate ways to solve it. We didn't came up with any way to solve this issue without wrapping every value in params in an object, what would possibly break a lot of code.\n\nDo you have any other suggestions on how to fix this problem?","automated_response":false,"created_at":"2019-12-10T18:27:59.501Z","updated_at":"2019-12-10T18:28:51.174Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6515519,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","automated_response":false,"created_at":"2019-12-10T18:28:10.892Z","updated_at":"2019-12-10T18:28:10.892Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6515856,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ah, I see there was a mistake in my setup that had turned the param into a SafeBuffer, sorry. Thanks for taking a look.\n\nAnother option I considered would be to only allow the http protocol on the String class unless there is an \"only_http =\u003e false\" parameter present. That might break apps relying on the current behaviour so we could trigger a deprecation warning when link_to is used with: a String \u0026\u0026 not an http URL \u0026\u0026 does not have that parameter. Then refuse to work in a future update.\n\n(Checking if a string is a valid http URL is a bit expensive, but for this purpose I think we can get away with something like `start_with?('/') || start_with?('http') || start_with?('#')` although that misses the edge case where someone wants to link relative to the current page, so not starting with /).","automated_response":false,"created_at":"2019-12-10T19:11:27.564Z","updated_at":"2019-12-10T19:11:27.564Z","actor":{"username":"speleding","cleared":false,"url":"/speleding","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/vJRkCxyKWpQqekuvyr1WFKec/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6515960,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Adding an \"only_http\" option to link_to is a bit tricky though, it would be confusing to indicate that it's an option that applies to the String and not to the html options. So another idea could be to only allow non-http Strings if they are frozen. This is a bit hacky but easy enough to implement and explain in the warning when someone passes a non-frozen non-http String","automated_response":false,"created_at":"2019-12-10T19:27:37.157Z","updated_at":"2019-12-10T19:27:37.157Z","actor":{"username":"speleding","cleared":false,"url":"/speleding","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/vJRkCxyKWpQqekuvyr1WFKec/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7978458,"is_internal":false,"editable":false,"type":"Activities::BugInformative","message":"Hi @speleding,\n\nThank you for the report and for your patience. Unfortunately I don't think there is a viable fix here that will allow developer flexibility and backwards compatibility while also disallowing the `javascript:` scheme entirely. The `link_to` helper currently does not have opinions regarding which schemes are acceptable, and this is unlikely to change in the future. For this reason, we will be closing this report as informative. Additionally, we will be requesting disclosure on this report so that this behaviour is publicly documented.","automated_response":false,"created_at":"2020-05-12T16:38:12.487Z","updated_at":"2020-05-12T16:38:12.487Z","actor":{"username":"jack_mccracken","cleared":false,"url":"/jack_mccracken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/164/342/6543dc397b4dbb2c24dc81f92a42de654a3e6a99_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7978465,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Requesting full disclosure. Let us know if you would rather limited disclosure or no disclosure.","automated_response":false,"created_at":"2020-05-12T16:38:42.215Z","updated_at":"2020-05-12T16:38:42.215Z","first_to_agree":true,"actor":{"username":"jack_mccracken","cleared":false,"url":"/jack_mccracken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/164/342/6543dc397b4dbb2c24dc81f92a42de654a3e6a99_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7978624,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@jack_mccracken Yes, I agree that fixing this in a backwards compatible way would be tricky. And it's fine to disclose this, of course.","automated_response":false,"created_at":"2020-05-12T17:00:07.342Z","updated_at":"2020-05-12T17:00:07.342Z","actor":{"username":"speleding","cleared":false,"url":"/speleding","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/vJRkCxyKWpQqekuvyr1WFKec/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7992447,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","automated_response":false,"created_at":"2020-05-13T18:19:25.328Z","updated_at":"2020-05-13T18:19:25.328Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}