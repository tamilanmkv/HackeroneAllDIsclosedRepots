{"id":592525,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81OTI1MjU=","url":"https://hackerone.com/reports/592525","title":"Lack of input validation and sanitization in react-autolinker-wrapper library causes XSS ","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2019-05-30T04:37:25.438Z","submitted_at":"2019-05-30T04:37:25.438Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"rugged_info","url":"/rugged_info","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":23949,"url":"https://hackerone.com/nodejs-ecosystem","handle":"nodejs-ecosystem","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Node.js third-party modules","twitter_handle":"","website":"https://nodejs.org/en/security/","about":"This program is used to handle vulnerabilities in the Node.js ecosystem."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-12-15T11:32:37.859Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-11-15T11:32:26.382Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"\u003e NOTE! Thanks for submitting a report! Please replace *all* the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to triage and respond quickly, so be sure to take your time filling out the report!\n\nI would like to report [XSS] in [react-autolinker-wrapper]\nIt allows [remote arbitrary code execution]\n\n# Module\n\n**module name:** [react-autolinker-wrapper]\n**version:** [1.1.0]\n**npm page:** `https://www.npmjs.com/package/react-autolinker-wrapper`\n\n## Module Description\n\nReact component which automatically converts URLs, email addresses, phone numbers, Twitter handles and hashtags in a string to HTML anchors.\n\n## Module Stats\n[307] weekly downloads \n\n# Vulnerability\n\n## Vulnerability Description\n\n\u003e Description about how the vulnerability was found and how it can be exploited, how it harms package users (data modification/lost, system access, other.\n\nI expected that calls to react-autolinker-wrapper would find urls, etc. within text and convert them to anchor tags, but I discovered that script execution occurs instead. \n\n## Steps To Reproduce:\n\nBelow is a vulnerable example of using react-autolinker-wrapper to convert user input into anchor tags. If one inserts `\u003cimg src=x onerror=alert() \u003e` into the input area then XSS occurs. \n\n```\nimport React from 'react';\nimport AutolinkerWrapper from 'react-autolinker-wrapper'\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {text: \"fudge\"}\n    this.changeState = this.changeState.bind(this)\n  }\n\n  changeState(event){\n    this.setState({text: event.target.value})\n  }\n\n  render(){\n    return (\n    \u003cdiv className=\"App\"\u003e\n     \u003cinput placeholder=\"Place your link here\" type=\"text\" onChange={this.changeState}/\u003e\n     \u003cAutolinkerWrapper text={this.state.text}/\u003e\n    \u003c/div\u003e)\n  }\n}\n\nexport default App;\n```\n## Patch\n\n\u003e If you're able to provide a patch with the fix please post it in this section\n\n## Supporting Material/References:\n\n\u003e State all technical information about the stack where the vulnerability was found\n\n- Node.js 12.2.0\n- NPM 6.9.0\n\n# Wrap up\n\n\u003e Select Y or N for the following statements:\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N] \n\n\u003e Hunter's comments and funny memes goes here\n\n## Impact\n\nremote code execution","vulnerability_information_html":"\u003cblockquote\u003e\n\u003cp\u003eNOTE! Thanks for submitting a report! Please replace \u003cem\u003eall\u003c/em\u003e the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to triage and respond quickly, so be sure to take your time filling out the report!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI would like to report [XSS] in [react-autolinker-wrapper]\u003cbr\u003e\nIt allows [remote arbitrary code execution]\u003c/p\u003e\n\n\u003ch1 id=\"module\"\u003eModule\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003emodule name:\u003c/strong\u003e [react-autolinker-wrapper]\u003cbr\u003e\n\u003cstrong\u003eversion:\u003c/strong\u003e [1.1.0]\u003cbr\u003e\n\u003cstrong\u003enpm page:\u003c/strong\u003e \u003ccode\u003ehttps://www.npmjs.com/package/react-autolinker-wrapper\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"module-description\"\u003eModule Description\u003c/h2\u003e\n\n\u003cp\u003eReact component which automatically converts URLs, email addresses, phone numbers, Twitter handles and hashtags in a string to HTML anchors.\u003c/p\u003e\n\n\u003ch2 id=\"module-stats\"\u003eModule Stats\u003c/h2\u003e\n\n\u003cp\u003e[307] weekly downloads \u003c/p\u003e\n\n\u003ch1 id=\"vulnerability\"\u003eVulnerability\u003c/h1\u003e\n\n\u003ch2 id=\"vulnerability-description\"\u003eVulnerability Description\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eDescription about how the vulnerability was found and how it can be exploited, how it harms package users (data modification/lost, system access, other.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI expected that calls to react-autolinker-wrapper would find urls, etc. within text and convert them to anchor tags, but I discovered that script execution occurs instead. \u003c/p\u003e\n\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps To Reproduce:\u003c/h2\u003e\n\n\u003cp\u003eBelow is a vulnerable example of using react-autolinker-wrapper to convert user input into anchor tags. If one inserts \u003ccode\u003e\u0026lt;img src=x onerror=alert() \u0026gt;\u003c/code\u003e into the input area then XSS occurs. \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eimport React from \u0026#39;react\u0026#39;;\nimport AutolinkerWrapper from \u0026#39;react-autolinker-wrapper\u0026#39;\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {text: \u0026quot;fudge\u0026quot;}\n    this.changeState = this.changeState.bind(this)\n  }\n\n  changeState(event){\n    this.setState({text: event.target.value})\n  }\n\n  render(){\n    return (\n    \u0026lt;div className=\u0026quot;App\u0026quot;\u0026gt;\n     \u0026lt;input placeholder=\u0026quot;Place your link here\u0026quot; type=\u0026quot;text\u0026quot; onChange={this.changeState}/\u0026gt;\n     \u0026lt;AutolinkerWrapper text={this.state.text}/\u0026gt;\n    \u0026lt;/div\u0026gt;)\n  }\n}\n\nexport default App;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"patch\"\u003ePatch\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf you\u0026#39;re able to provide a patch with the fix please post it in this section\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"supporting-material-references\"\u003eSupporting Material/References:\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eState all technical information about the stack where the vulnerability was found\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n\u003cli\u003eNode.js 12.2.0\u003c/li\u003e\n\u003cli\u003eNPM 6.9.0\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"wrap-up\"\u003eWrap up\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eSelect Y or N for the following statements:\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n\u003cli\u003eI contacted the maintainer to let them know: [N] \u003c/li\u003e\n\u003cli\u003eI opened an issue in the related repository: [N] \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eHunter\u0026#39;s comments and funny memes goes here\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eremote code execution\u003c/p\u003e\n","weakness":{"id":60,"name":"Cross-site Scripting (XSS) - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-12-15T11:32:26.501Z","allow_singular_disclosure_after":-32813786.964043625,"singular_disclosure_allowed":true,"vote_count":5,"voters":["prophet","khizer47","c4v4r0n","b9372d4605459ca97219795","zcortex"],"severity":{"rating":"medium","score":4.6,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"low","user_interaction":"required","scope":"unchanged","confidentiality":"low","integrity":"low","availability":"none"}},"structured_scope":{"databaseId":49409,"asset_type":"SOURCE_CODE","asset_identifier":"react-autolinker-wrapper","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4952112,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello @rugged_info, and thank you for your report.\n\nYou state this submission's impact is \"remote code execution\", however this appears to be a self-XSS. Can you provide a proof-of-concept for the impact you've advertised?\n\nCheers,\n@still","markdown_message":"\u003cp\u003eHello \u003ca href=\"/rugged_info\"\u003e@rugged_info\u003c/a\u003e, and thank you for your report.\u003c/p\u003e\n\n\u003cp\u003eYou state this submission\u0026#39;s impact is \u0026quot;remote code execution\u0026quot;, however this appears to be a self-XSS. Can you provide a proof-of-concept for the impact you\u0026#39;ve advertised?\u003c/p\u003e\n\n\u003cp\u003eCheers,\u003cbr\u003e\n\u003ca href=\"/still\"\u003e@still\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-30T06:31:45.683Z","updated_at":"2019-05-30T06:31:45.683Z","actor":{"username":"still","cleared":false,"url":"/still","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/390/243/51ce849c0c189ad15dade380626c7b85a3fb9332_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4952166,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Aloha @still, \n\nThanks for reaching back to me. The react-autolinker-wrapper is a library, which means it could be deployed in any number of contexts and result in various types of XSS (stored, reflected, etc). I chose \"Generic\" XSS as the weakness for this reason. Based on this fact, would you like me to build a whole app which accomplishes one of these types of XSS as a proof of concept, or does the self-XSS PoC suffice? Please let me know. \n\nAwaiting your response. Sincerely, \nrugged_info ","markdown_message":"\u003cp\u003eAloha \u003ca href=\"/still\"\u003e@still\u003c/a\u003e, \u003c/p\u003e\n\n\u003cp\u003eThanks for reaching back to me. The react-autolinker-wrapper is a library, which means it could be deployed in any number of contexts and result in various types of XSS (stored, reflected, etc). I chose \u0026quot;Generic\u0026quot; XSS as the weakness for this reason. Based on this fact, would you like me to build a whole app which accomplishes one of these types of XSS as a proof of concept, or does the self-XSS PoC suffice? Please let me know. \u003c/p\u003e\n\n\u003cp\u003eAwaiting your response. Sincerely, \u003cbr\u003e\nrugged_info \u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-30T07:01:54.919Z","updated_at":"2019-05-30T07:01:54.919Z","actor":{"username":"rugged_info","cleared":false,"url":"/rugged_info","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4965888,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"Hello @rugged_info,\n\nYour time and effort in submitting this report are much appreciated, however, we'll need you to build a full fledged PoC so that we can better handle the report.\n\nI am going to mark this report as `Needs more info` so you can update us as soon as that's available.\n\nRegards,\n@nasr0x01","markdown_message":"\u003cp\u003eHello \u003ca href=\"/rugged_info\"\u003e@rugged_info\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eYour time and effort in submitting this report are much appreciated, however, we\u0026#39;ll need you to build a full fledged PoC so that we can better handle the report.\u003c/p\u003e\n\n\u003cp\u003eI am going to mark this report as \u003ccode\u003eNeeds more info\u003c/code\u003e so you can update us as soon as that\u0026#39;s available.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\n\u003ca href=\"/nasr0x01\"\u003e@nasr0x01\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-06-01T12:04:11.051Z","updated_at":"2019-06-01T12:04:11.051Z","actor":{"username":"nasr0x01","cleared":false,"url":"/nasr0x01","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/386/674/ec2e2c825a554851c42c122ffd61aa8f18b08174_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5016549,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Good morning @nasr0x01, \n\nThere is a zip file of a full-fledged PoC for an XSS attack attached that will, hopefully, help you better handle the report. \n\nTo further aid your investigation, the source of the XSS in this library is likely due to the fact that react-autolinker-wrapper calls invokeLink() upon componentDidMount(). \n\ninvokeLink() converts the innerHTML of an attacker-controlled input into an anchor tag using the Autolinker package. See the excerpt taken from [/src/AutolinkerWrapper.js](https://github.com/gvas/react-autolinker-wrapper/blob/f66eacec9e43617697be775917391edfc6df26d7/src/AutolinkerWrapper.js#L30) below: \n\n``` \n  invokeLink = () =\u003e {\n    this.element.innerHTML = this.props.options == defaultOptions\n      ? Autolinker.link(this.props.text)\n      : Autolinker.link(this.props.text, this.props.options)\n  }\n\n  saveRef = (element) =\u003e {\n    this.element = element\n  }\n\n  render() {\n\n    const { options, tagName, text, ...rest } = this.props // eslint-disable-line no-unused-vars\n\n    return \u003cthis.props.tagName {...rest} ref={this.saveRef}\u003e{this.props.text}\u003c/this.props.tagName\u003e\n  }\n}\n```\n\nPlease let me know if I can be of further assistance as the process moves forward. \n\nsincerely, \nBart ","markdown_message":"\u003cp\u003eGood morning \u003ca href=\"/nasr0x01\"\u003e@nasr0x01\u003c/a\u003e, \u003c/p\u003e\n\n\u003cp\u003eThere is a zip file of a full-fledged PoC for an XSS attack attached that will, hopefully, help you better handle the report. \u003c/p\u003e\n\n\u003cp\u003eTo further aid your investigation, the source of the XSS in this library is likely due to the fact that react-autolinker-wrapper calls invokeLink() upon componentDidMount(). \u003c/p\u003e\n\n\u003cp\u003einvokeLink() converts the innerHTML of an attacker-controlled input into an anchor tag using the Autolinker package. See the excerpt taken from \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fgvas%2Freact-autolinker-wrapper%2Fblob%2Ff66eacec9e43617697be775917391edfc6df26d7%2Fsrc%2FAutolinkerWrapper.js%23L30\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003e/src/AutolinkerWrapper.js\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e below: \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e  invokeLink = () =\u0026gt; {\n    this.element.innerHTML = this.props.options == defaultOptions\n      ? Autolinker.link(this.props.text)\n      : Autolinker.link(this.props.text, this.props.options)\n  }\n\n  saveRef = (element) =\u0026gt; {\n    this.element = element\n  }\n\n  render() {\n\n    const { options, tagName, text, ...rest } = this.props // eslint-disable-line no-unused-vars\n\n    return \u0026lt;this.props.tagName {...rest} ref={this.saveRef}\u0026gt;{this.props.text}\u0026lt;/this.props.tagName\u0026gt;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePlease let me know if I can be of further assistance as the process moves forward. \u003c/p\u003e\n\n\u003cp\u003esincerely, \u003cbr\u003e\nBart \u003c/p\u003e\n","automated_response":false,"created_at":"2019-06-06T14:10:16.415Z","updated_at":"2019-06-06T14:10:16.415Z","actor":{"username":"rugged_info","cleared":false,"url":"/rugged_info","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":503504,"filename":"poc-xss-react-app-master.zip","type":"application/zip","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/503/504/c2f098f3f8f1c868a1f0cb1b089df6b575a1f501/poc-xss-react-app-master.zip?response-content-disposition=attachment%3B%20filename%3D%22poc-xss-react-app-master.zip%22%3B%20filename%2A%3DUTF-8%27%27poc-xss-react-app-master.zip\u0026response-content-type=application%2Fzip\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZJO3526D%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T062853Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCIvMo8EBz315uHyZU%2FDG0Huf%2BYKjgYY96exJvyGCLJ6QIgTS1mW%2Fy84%2BDNAkhNbJC8Lysp3409zBR1BXDeS%2BTYRyoqtAMIVxABGgwwMTM2MTkyNzQ4NDkiDEH1nkH4bxOL%2FzZVaiqRAz36Ga68aNU0H93UvEuRIu3bWdCaX174NDGE9HjZ6%2FIGHIDSo8%2BrgJclDinDvb%2Bz5hmDmKwxsZWntb8C077ZNi40vSm3S2BX7TIgKs7OdhHPP26QN5RZDLBCOd0pFTN5ykSL4WFPtakUEHIG05D09oYImqFNistW6N3pBf2hsoRXecWNFI7qMU5wkBMwH2QMBKxqwWAWEAbH6%2Bm%2FxceXV1a8FnL9d8Uhq%2F2Q494%2BZl8MTPuGY7b8f24oQWse7cwMUzvDfqk5TkNfLVSGvrldYvDZ5%2BxCgwagxuwM5onXgbXJ4rRlwsCuZjULhImoKeNv96uim58dbOdKVASQ6GndH5Nrd3tU1KMMgE8wulU71dP4zkXeWt6gi59gtfTvslGO582avOHZUkGIulK7r7JD3t1kTj7U8QaLGPznBskRPSjpug5C4fTdunIrlWgxxYPRSkn61QPQIYfO5cT0HvlOlcuNwaVarnH6q4OXAnE%2BiCH6ODeGHFc%2FbpDT1S1H%2FhTwMOseCmH6rpa9zpdueGS1v945MK%2F9qv8FOusBHn%2BLyL3HJMADkT5J%2FQsL%2Bm415pbG%2FB7sn6BT00QcjPotU4hSnic44MJSPfUmiSKj6d9gLy1f6TEKMFDfJSsENQ%2FaA%2FcWdZKIurcEqINLaFCH7pBgplCMxWUAgnjBUSd4R3H7RrO8ZQbJ3mfz5fAyaFiog5eNoktqTPC5U6knr6J5p0BqQz3pjKkZdFIlUKqlFwECcnX15GzWTOONLY2H8vGW7f3Jzu30NgpDT7w1IP4BRoOJg0NZFk0VVeK%2BYFVc3To9CA8AHQuJZBmtD%2B3SdCh%2FxMl87xH6SWR8e4W2edgavCy2dBUw0YFKbw%3D%3D\u0026X-Amz-Signature=a58cf8c61e36ad0628bcafcbf96a83ede5a22064273407098c33948ac9c15669"}],"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5228679,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-07-01T11:29:51.791Z","updated_at":"2019-07-01T11:29:51.791Z","additional_data":{"old_severity":"None","new_severity":"Medium (4.6)","old_severity_id":404625,"new_severity_id":448082},"actor":{"username":"nasr0x01","cleared":false,"url":"/nasr0x01","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/386/674/ec2e2c825a554851c42c122ffd61aa8f18b08174_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5228681,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hello @rugged_info,\n\nThank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.\n\nRegards,\n@nasr0x01 ","markdown_message":"\u003cp\u003eHello \u003ca href=\"/rugged_info\"\u003e@rugged_info\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\n\u003ca href=\"/nasr0x01\"\u003e@nasr0x01\u003c/a\u003e \u003c/p\u003e\n","automated_response":false,"created_at":"2019-07-01T11:29:55.758Z","updated_at":"2019-07-01T11:29:55.758Z","actor":{"username":"nasr0x01","cleared":false,"url":"/nasr0x01","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/386/674/ec2e2c825a554851c42c122ffd61aa8f18b08174_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5241505,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the great news @nasr0x01 ! I'll be available if more correspondence is needed from the team. ","markdown_message":"\u003cp\u003eThanks for the great news \u003ca href=\"/nasr0x01\"\u003e@nasr0x01\u003c/a\u003e ! I\u0026#39;ll be available if more correspondence is needed from the team. \u003c/p\u003e\n","automated_response":false,"created_at":"2019-07-02T21:34:06.012Z","updated_at":"2019-07-02T21:34:06.012Z","actor":{"username":"rugged_info","cleared":false,"url":"/rugged_info","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5697098,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2019-08-30T09:31:32.099Z","updated_at":"2019-08-30T09:31:32.099Z","actor":{"username":"gvas76","cleared":false,"url":"/gvas76","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5699788,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi,\n\nI'm the author of this library. Thanks for reporting the vulnerability. It exists in its main dependency, [autolinker.js](https://github.com/gregjacobs/Autolinker.js). I've reproduced the PoC XSS using only autolinker.js and vanilla javascript: https://codepen.io/gvas/pen/LYPjRoK\n\nMy goal with react-autolinker-wrapper was to create a very simple wrapper component, so React developers can use autolinker's functionality in a more natural way. I don't want to implement any input transformation or -sanitization because it is beyond the project's scope. So no fix will be implemented.\n\nRegards,\ngvas","markdown_message":"\u003cp\u003eHi,\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;m the author of this library. Thanks for reporting the vulnerability. It exists in its main dependency, \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fgregjacobs%2FAutolinker.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eautolinker.js\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. I\u0026#39;ve reproduced the PoC XSS using only autolinker.js and vanilla javascript: \u003ca title=\"https://codepen.io/gvas/pen/LYPjRoK\" href=\"/redirect?url=https%3A%2F%2Fcodepen.io%2Fgvas%2Fpen%2FLYPjRoK\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://codepen.io/gvas/pen/LYPjRoK\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eMy goal with react-autolinker-wrapper was to create a very simple wrapper component, so React developers can use autolinker\u0026#39;s functionality in a more natural way. I don\u0026#39;t want to implement any input transformation or -sanitization because it is beyond the project\u0026#39;s scope. So no fix will be implemented.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\ngvas\u003c/p\u003e\n","automated_response":false,"created_at":"2019-08-30T17:14:49.806Z","updated_at":"2019-08-30T17:14:49.806Z","actor":{"username":"gvas76","cleared":false,"url":"/gvas76","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5711602,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@gvas76 Thanks for responding.\n\nI was not aware of that Autolinker.js is, and when I looked at the pen you provided:\n\n```js\ndocument.getElementsByTagName('input')[0]\n  .addEventListener('change', e =\u003e {\n    document.getElementsByTagName('div')[0].innerHTML = Autolinker.link(e.srcElement.value);\n  });\n```\n\nit looked like the vulnerabilities comes from passing unsanitized from Autolinker.js directly into `innerHTML` tag.\n\nWhen I had a more in-depth look at Autolinker.js, it looks like it produces HTML that is supposed to be used as in your library.\n\nI will invite maintainer of Autolinker.js to discuss the issue here and coordinate disclosure.","markdown_message":"\u003cp\u003e\u003ca href=\"/gvas76\"\u003e@gvas76\u003c/a\u003e Thanks for responding.\u003c/p\u003e\n\n\u003cp\u003eI was not aware of that Autolinker.js is, and when I looked at the pen you provided:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementsByTagName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003einput\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eaddEventListener\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003echange\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementsByTagName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ediv\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003einnerHTML\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eAutolinker\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elink\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esrcElement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eit looked like the vulnerabilities comes from passing unsanitized from Autolinker.js directly into \u003ccode\u003einnerHTML\u003c/code\u003e tag.\u003c/p\u003e\n\n\u003cp\u003eWhen I had a more in-depth look at Autolinker.js, it looks like it produces HTML that is supposed to be used as in your library.\u003c/p\u003e\n\n\u003cp\u003eI will invite maintainer of Autolinker.js to discuss the issue here and coordinate disclosure.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-02T11:13:13.350Z","updated_at":"2019-09-02T11:13:13.350Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5810426,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-15T15:30:57.111Z","updated_at":"2019-09-15T15:30:57.111Z","actor":{"username":"gregjacobs","cleared":false,"url":"/gregjacobs","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5810571,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey guys,\n\nThanks for raising this! Sorry that I'm late to the thread here. \n\nI'm the author of Autolinker.js. Just to give a little background on it: one of the key features of Autolinker is that it will find urls/emails/phones/hashtags/mentions inside of existing html documents, and generate anchor (\u003ca\u003e) tags for them. Therefore, its input is html, and its output is also html.\n\nFor years I've operated on the assertion that it's not the responsibility of Autolinker to provide sanitization functionality as this is better handled by other tools. However, with the popularity of Autolinker and the fact that sanitization has been raised in the GitHub issues a couple of times now (as well as this report), I'm definitely willing to revisit that. \n\nThat being said, I'm no expert on sanitization by any means, and could use some pointers. Does sanitization belong in Autolinker to attempt to strip known attack vectors? Or perhaps we just need some documentation on the readme telling developers to sanitize user input before passing it into Autolinker? (Embarrassingly, somebody asked for the latter way back in 2014 and I didn't really deem it necessary at the time. How little I knew back then :X). \n\nWhat do you guys think?\n\nBest,\nGreg","markdown_message":"\u003cp\u003eHey guys,\u003c/p\u003e\n\n\u003cp\u003eThanks for raising this! Sorry that I\u0026#39;m late to the thread here. \u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;m the author of Autolinker.js. Just to give a little background on it: one of the key features of Autolinker is that it will find urls/emails/phones/hashtags/mentions inside of existing html documents, and generate anchor (\u0026lt;a\u0026gt;) tags for them. Therefore, its input is html, and its output is also html.\u003c/p\u003e\n\n\u003cp\u003eFor years I\u0026#39;ve operated on the assertion that it\u0026#39;s not the responsibility of Autolinker to provide sanitization functionality as this is better handled by other tools. However, with the popularity of Autolinker and the fact that sanitization has been raised in the GitHub issues a couple of times now (as well as this report), I\u0026#39;m definitely willing to revisit that. \u003c/p\u003e\n\n\u003cp\u003eThat being said, I\u0026#39;m no expert on sanitization by any means, and could use some pointers. Does sanitization belong in Autolinker to attempt to strip known attack vectors? Or perhaps we just need some documentation on the readme telling developers to sanitize user input before passing it into Autolinker? (Embarrassingly, somebody asked for the latter way back in 2014 and I didn\u0026#39;t really deem it necessary at the time. How little I knew back then :X). \u003c/p\u003e\n\n\u003cp\u003eWhat do you guys think?\u003c/p\u003e\n\n\u003cp\u003eBest,\u003cbr\u003e\nGreg\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-15T16:16:49.090Z","updated_at":"2019-09-15T16:16:49.090Z","actor":{"username":"gregjacobs","cleared":false,"url":"/gregjacobs","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5810579,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This is perhaps the most relevant thread from the Autolinker GitHub issues on the subject btw: https://github.com/gregjacobs/Autolinker.js/issues/197. \n\nI could take a similar approach as mentioned in the comments about providing two methods: one that accepts html (the current implementation), and one that escapes it all. But in that case, which method should `react-autolinker-wrapper` call behind the scenes? (Or maybe `react-autolinker-wrapper` would have a prop to allow devs to to escape all input html tags or not?)\n\nThoughts?","markdown_message":"\u003cp\u003eThis is perhaps the most relevant thread from the Autolinker GitHub issues on the subject btw: \u003ca title=\"https://github.com/gregjacobs/Autolinker.js/issues/197\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fgregjacobs%2FAutolinker.js%2Fissues%2F197\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/gregjacobs/Autolinker.js/issues/197\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. \u003c/p\u003e\n\n\u003cp\u003eI could take a similar approach as mentioned in the comments about providing two methods: one that accepts html (the current implementation), and one that escapes it all. But in that case, which method should \u003ccode\u003ereact-autolinker-wrapper\u003c/code\u003e call behind the scenes? (Or maybe \u003ccode\u003ereact-autolinker-wrapper\u003c/code\u003e would have a prop to allow devs to to escape all input html tags or not?)\u003c/p\u003e\n\n\u003cp\u003eThoughts?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-15T16:20:28.732Z","updated_at":"2019-09-15T16:20:28.732Z","actor":{"username":"gregjacobs","cleared":false,"url":"/gregjacobs","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5812874,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I think both approaches are valid and I can definitely see how both escaping and not-escaping APIs (with warnings in relevant docs) can be useful.\n\nEscaping content to prevent XSS is a nuanced problem but I always found this OWASP cheat sheet a very good starting point:\n\nhttps://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n\nLet me know if this helps!","markdown_message":"\u003cp\u003eI think both approaches are valid and I can definitely see how both escaping and not-escaping APIs (with warnings in relevant docs) can be useful.\u003c/p\u003e\n\n\u003cp\u003eEscaping content to prevent XSS is a nuanced problem but I always found this OWASP cheat sheet a very good starting point:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\" href=\"/redirect?url=https%3A%2F%2Fcheatsheetseries.owasp.org%2Fcheatsheets%2FCross_Site_Scripting_Prevention_Cheat_Sheet.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eLet me know if this helps!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-16T07:46:06.376Z","updated_at":"2019-09-16T07:46:06.376Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5813059,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@gregjacobs Does adding a new method to Autolinker have any advantages over adding a new option, e.g. `sanitizeHtml` with a default value of `false`? If you choose the latter then it will be simpler to pull react-autolinker-wrapper after your changes.","markdown_message":"\u003cp\u003e\u003ca href=\"/gregjacobs\"\u003e@gregjacobs\u003c/a\u003e Does adding a new method to Autolinker have any advantages over adding a new option, e.g. \u003ccode\u003esanitizeHtml\u003c/code\u003e with a default value of \u003ccode\u003efalse\u003c/code\u003e? If you choose the latter then it will be simpler to pull react-autolinker-wrapper after your changes.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-16T08:24:08.153Z","updated_at":"2019-09-16T08:24:08.153Z","actor":{"username":"gvas76","cleared":false,"url":"/gvas76","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5876042,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@gregjacobs do you plan to release an Autolinker.js patch or address it in any other way (e.g. through documentation) so we can plan the disclosure?","markdown_message":"\u003cp\u003e\u003ca href=\"/gregjacobs\"\u003e@gregjacobs\u003c/a\u003e do you plan to release an Autolinker.js patch or address it in any other way (e.g. through documentation) so we can plan the disclosure?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-24T09:49:51.318Z","updated_at":"2019-09-24T09:49:51.318Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6173241,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@gvas76 @gregjacobs did you have any chance to address this vulnerability either by providing a fix or by improving the documentation?\n\nI'd like to proceed with disclosure soon.","markdown_message":"\u003cp\u003e\u003ca href=\"/gvas76\"\u003e@gvas76\u003c/a\u003e \u003ca href=\"/gregjacobs\"\u003e@gregjacobs\u003c/a\u003e did you have any chance to address this vulnerability either by providing a fix or by improving the documentation?\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;d like to proceed with disclosure soon.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-30T13:22:52.377Z","updated_at":"2019-10-30T13:22:52.377Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6315696,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"I will request public disclosure with the standard grace period.","markdown_message":"\u003cp\u003eI will request public disclosure with the standard grace period.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-15T11:32:18.004Z","updated_at":"2019-11-15T11:32:18.004Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"rugged_info","url":"/rugged_info"},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6315697,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-15T11:32:26.397Z","updated_at":"2019-11-15T11:32:26.397Z","first_to_agree":true,"actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6551532,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-12-15T11:32:37.874Z","updated_at":"2019-12-15T11:32:37.874Z","actor":{"url":"/nodejs-ecosystem","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Node.js third-party modules"}},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7550351,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This is now fixed (embarrassingly 6 months later... many apologies 😭). The option `sanitizeHtml` is now implemented. @gvas76, you can now use this in `react-autolinker-wrapper` :)\n\nBest,\nGreg","markdown_message":"\u003cp\u003eThis is now fixed (embarrassingly 6 months later... many apologies 😭). The option \u003ccode\u003esanitizeHtml\u003c/code\u003e is now implemented. \u003ca href=\"/gvas76\"\u003e@gvas76\u003c/a\u003e, you can now use this in \u003ccode\u003ereact-autolinker-wrapper\u003c/code\u003e :)\u003c/p\u003e\n\n\u003cp\u003eBest,\u003cbr\u003e\nGreg\u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-05T22:40:45.647Z","updated_at":"2020-04-05T22:40:45.647Z","actor":{"username":"gregjacobs","cleared":false,"url":"/gregjacobs","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7553422,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@gregjacobs This is great news!\n\n@gvas76 if you release a new version, can you add a comment here so I can request / update CVE?","markdown_message":"\u003cp\u003e\u003ca href=\"/gregjacobs\"\u003e@gregjacobs\u003c/a\u003e This is great news!\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/gvas76\"\u003e@gvas76\u003c/a\u003e if you release a new version, can you add a comment here so I can request / update CVE?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-06T07:19:12.921Z","updated_at":"2020-04-06T07:19:12.921Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7582734,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I've published a new version of `react-autolinker-wrapper` with the new `Autolinker.js` as its dependency. It seems to work: https://codepen.io/gvas/pen/LYpPQNP\n\nThanks,\ngvas","markdown_message":"\u003cp\u003eI\u0026#39;ve published a new version of \u003ccode\u003ereact-autolinker-wrapper\u003c/code\u003e with the new \u003ccode\u003eAutolinker.js\u003c/code\u003e as its dependency. It seems to work: \u003ca title=\"https://codepen.io/gvas/pen/LYpPQNP\" href=\"/redirect?url=https%3A%2F%2Fcodepen.io%2Fgvas%2Fpen%2FLYpPQNP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://codepen.io/gvas/pen/LYpPQNP\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\ngvas\u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-08T11:22:41.491Z","updated_at":"2020-04-08T11:22:41.491Z","actor":{"username":"gvas76","cleared":false,"url":"/gvas76","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7592759,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@gvas76 many thanks!\n\n@rugged_info can you confirm this release fixes the issue?","markdown_message":"\u003cp\u003e\u003ca href=\"/gvas76\"\u003e@gvas76\u003c/a\u003e many thanks!\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/rugged_info\"\u003e@rugged_info\u003c/a\u003e can you confirm this release fixes the issue?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-09T08:45:19.057Z","updated_at":"2020-04-09T08:45:19.057Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7600918,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I will test and get back to you @marcinhoppe. Many thanks to all on your efforts. ","markdown_message":"\u003cp\u003eI will test and get back to you \u003ca href=\"/marcinhoppe\"\u003e@marcinhoppe\u003c/a\u003e. Many thanks to all on your efforts. \u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-09T18:38:06.171Z","updated_at":"2020-04-09T18:38:06.171Z","actor":{"username":"rugged_info","cleared":false,"url":"/rugged_info","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7682155,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@rugged_info did you have a chance to take a look at this fix?","markdown_message":"\u003cp\u003e\u003ca href=\"/rugged_info\"\u003e@rugged_info\u003c/a\u003e did you have a chance to take a look at this fix?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-16T09:20:39.812Z","updated_at":"2020-04-16T09:20:39.812Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8328415,"is_internal":false,"editable":false,"type":"Activities::ChangedScope","message":"","markdown_message":"","automated_response":false,"created_at":"2020-06-18T08:04:34.678Z","updated_at":"2020-06-18T08:04:34.678Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"old_scope":"None","new_scope":"react-autolinker-wrapper","genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}