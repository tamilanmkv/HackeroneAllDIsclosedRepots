{"id":309531,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMDk1MzE=","url":"https://hackerone.com/reports/309531","title":"Stored XSS in Snapmatic + R★Editor comments","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2018-01-26T11:36:03.600Z","submitted_at":"2018-01-26T11:36:03.600Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"europa","url":"/europa","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":2143,"url":"https://hackerone.com/rockstargames","handle":"rockstargames","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/143/db40b290ac0adcde231da85c33a668f610e6f4df_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/143/db40b290ac0adcde231da85c33a668f610e6f4df_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Rockstar Games","twitter_handle":"RockstarGames","website":"http://www.rockstargames.com/","about":"Publishers of such popular games as Grand Theft Auto, Max Payne, Red Dead Redemption, L.A. Noire, Bully \u0026 more."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"no-content","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2018-04-19T22:14:18.783Z","bug_reporter_agreed_on_going_public_at":"2018-04-08T13:42:19.897Z","team_member_agreed_on_going_public_at":"2018-04-19T22:14:18.550Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"","bounty_amount":"1000.0","formatted_bounty":"$1,000","weakness":{"id":62,"name":"Cross-site Scripting (XSS) - Stored"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2018-05-08T13:42:20.082Z","allow_singular_disclosure_after":-108176416.73213787,"singular_disclosure_allowed":true,"vote_count":111,"voters":["knight9","jokebookservice1","manoelt","flamezzz","irvinlim","nrockhouse","airblender","sp1d3rs","europa","kapytein","and 101 more..."],"severity":{"rating":"high","author_type":"User"},"structured_scope":{"databaseId":430,"asset_type":"URL","asset_identifier":"socialclub.rockstargames.com","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":2321999,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","automated_response":false,"created_at":"2018-01-26T20:48:17.468Z","updated_at":"2018-01-26T20:48:17.468Z","actor":{"username":"jmarshall","cleared":false,"url":"/jmarshall","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2322002,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","automated_response":false,"created_at":"2018-01-26T20:48:37.378Z","updated_at":"2018-01-26T20:48:37.378Z","actor":{"username":"jmarshall","cleared":false,"url":"/jmarshall","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2323538,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","automated_response":false,"created_at":"2018-01-27T09:49:14.248Z","updated_at":"2018-01-27T09:52:26.436Z","actor":{"username":"europa","cleared":true,"url":"/europa","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2388599,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","automated_response":false,"created_at":"2018-02-16T02:24:20.583Z","updated_at":"2018-02-16T02:24:20.583Z","actor":{"username":"jmarshall","cleared":false,"url":"/jmarshall","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2388600,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","automated_response":false,"created_at":"2018-02-16T02:24:34.313Z","updated_at":"2018-02-16T02:24:34.313Z","actor":{"url":"/rockstargames","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/143/db40b290ac0adcde231da85c33a668f610e6f4df_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Rockstar Games"}},"bounty_amount":"1000.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"rockstargames","collaborator":{"username":"europa","url":"/europa"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2390074,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","automated_response":false,"created_at":"2018-02-16T09:30:15.773Z","updated_at":"2018-02-16T09:30:15.773Z","actor":{"username":"europa","cleared":true,"url":"/europa","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2453328,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","automated_response":false,"created_at":"2018-03-03T18:18:30.732Z","updated_at":"2018-03-03T18:26:45.125Z","actor":{"username":"europa","cleared":true,"url":"/europa","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2505855,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","automated_response":false,"created_at":"2018-03-19T11:17:50.778Z","updated_at":"2018-03-19T11:17:50.778Z","actor":{"username":"europa","cleared":true,"url":"/europa","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2506460,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2018-03-19T15:29:03.247Z","updated_at":"2018-03-19T15:29:03.247Z","actor":{"username":"jmarshall","cleared":false,"url":"/jmarshall","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"europa","url":"/europa"},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2578400,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2018-04-08T13:42:19.986Z","updated_at":"2018-04-08T13:42:19.986Z","first_to_agree":true,"actor":{"username":"europa","cleared":true,"url":"/europa","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2581257,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","automated_response":false,"created_at":"2018-04-09T14:05:09.320Z","updated_at":"2018-04-09T14:05:09.320Z","actor":{"username":"jmarshall","cleared":false,"url":"/jmarshall","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2581267,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","automated_response":false,"created_at":"2018-04-09T14:09:56.148Z","updated_at":"2018-04-09T14:09:56.148Z","actor":{"username":"europa","cleared":true,"url":"/europa","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2582748,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","automated_response":false,"created_at":"2018-04-09T17:55:49.054Z","updated_at":"2018-04-09T17:55:49.054Z","actor":{"username":"europa","cleared":true,"url":"/europa","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2638185,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","automated_response":false,"created_at":"2018-04-19T15:25:44.316Z","updated_at":"2018-04-19T15:25:44.316Z","actor":{"username":"jmarshall","cleared":false,"url":"/jmarshall","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2638217,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","automated_response":false,"created_at":"2018-04-19T15:38:26.222Z","updated_at":"2018-04-19T15:38:26.222Z","actor":{"username":"europa","cleared":true,"url":"/europa","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2639503,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2018-04-19T22:14:18.644Z","updated_at":"2018-04-19T22:14:18.644Z","actor":{"username":"jmarshall","cleared":false,"url":"/jmarshall","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2639504,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2018-04-19T22:14:18.826Z","updated_at":"2018-04-19T22:14:18.826Z","actor":{"username":"jmarshall","cleared":false,"url":"/jmarshall","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rockstargames","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"id":7165,"category":"team","content":"**Summary provided by the Researcher, @europa .**\n___________________________________________________________________________________________________________________________\nI requested the disclosure of what I hope is the final report regarding stored cross-site-scripting vulnerabilities on the Rockstar Games SocialClub, to also allow me to summarize the research that went into the other 5 reports. \nHave fun!\n\n### Report #1\nThe 6-months adventure into researching and bypassing the SocialClub WAF begun with a simple discovery at first: while the WAF was removing anything enclosed in `\u003c.*`, some **control characters** (`\\b \\f \\n \\r \\t`) weren't being taken into account when injecting a `\u003c`, allowing an adversary to create a malicious payload in the simple form of `\u003c\\t`.\n\nA fix was deployed to **remove anything following a** `\u003c`.\n\n### Report #2\nTwo weeks after the fix, I ended up discovering what would soon become a “head-scratching” mystery: injecting a **single** `%` in the payload would bypass the filter entirely and force the back-end to somehow produce an unescaped `\u003c` along with the escaped one.\n\nThe original payload was complex and confusing, and it led me to the wrong conclusion that [over-consumption flaws](https://hackerone.com/redirect?signature=e9fdfe4ae08f06fd697d9820b6472cbc3aceb3a2\u0026url=https%3A%2F%2Fwebsec.github.io%2Funicode-security-guide%2Fcharacter-transformations%2F%23overconsumption) were to blame, but as analysis proceeded, it was finally discovered that the culprit was the **simple, single** `%`.\n\nThe final payload `\u003c%\u0026lt;script/src=//...?` produced an output of `\u0026lt;%\u003cscript/src=\"//...\" \u003c=\"\" p=\"\"\u003e` from the back-end.\n\nA fix was deployed and the WAF rules were made more strict, defeating all attempts with a 302 redirect to an error page.\n\n### Report #3\nTwo months after the last fix, I discovered how the WAF wouldn't account for [Full-Width](https://hackerone.com/redirect?signature=94c9f9639fb2c55281d3c1e2820f40ecadc45807\u0026url=https%3A%2F%2Fwww.compart.com%2Fen%2Funicode%2Fblock%2FU%2BFF00) and [Small-Forms](https://hackerone.com/redirect?signature=e823898824394a9c0700e14806b23d9982e8d57a\u0026url=https%3A%2F%2Fwww.compart.com%2Fen%2Funicode%2Fblock%2FU%2BFE50) variants which, chained with the `%` confusion from the second report would again trick the back-end into producing a valid output: indeed, giving **`U+FF1C`** or **`U+FE64`** as the input would pass the WAF and the back-end would transform both into `\u003c`. This is called a [best-fit match flaw](https://hackerone.com/redirect?signature=bc75d2374467e877b490cd0801b7c340ad395857\u0026url=https%3A%2F%2Fwebsec.github.io%2Funicode-security-guide%2Fcharacter-transformations%2F%23best-fit) and it usually happens on Windows-powered technology stacks, where one of the processing layers fails to properly account for missing characters in destination codepages.\n\nThe payload `\\uFE64%\\uFF1Cscript/src=//...?`, evaded the WAF and produced `\u0026lt;%\u003cscript/src=\"//...?\" class=\"badLink\"` in the HTML page.\n\nA first fix was deployed preventing both script injections and DOM events manipulation, both of which I was able to bypass after a few days using a combination of **control chars, percentages, breaks, and exotic function invokation**. The payload `\\uFF1C%\\uFE64input/autofocus onfocus\\b='[1].find(alert)'` successfully bypassed the new filters and popped an alert before the report was closed as resolved, allowing the team to look for a better solution in time. A second, stronger fix was deployed and the WAF rules were made even stricter prohibiting any combination of direct or indirect forms of `\u003c` and `%` in suspicious contextes, plus any shape or form of `onXXX` DOM events.\n\n### Report #4\nThe new WAF rules prevented any kind of injection: no useful HTML elements, no DOM events. Anything went straight to /dev/null. After spending a few weeks in trial \u0026 error tests, I remembered how the payload from **report #3** would have a `badLink class` added to it, as the back-end detected a suspicious URI in the comment and would ~~strike it out~~ and prevent it from becoming clickable.\n\nAfter weeks of tests, in a few hours I was able to chain **_eight_ different techniques** to go through the WAF, the back-end filter, and the client-side Javascript filter:\n\n1. using `\u003c\u003e` to separate “trigger words” in order to turn them “invisible” to the WAF (ie: `\u0026\u003c\u003elt;`). The _back-end_ would remove it for me.\n2. using `\\u0025` instead of `%` which would now trigger the WAF\n3. using the unaccounted for `MATH` [MathML](https://hackerone.com/redirect?signature=f00315bb1ba003cb663832891ce2f04a5e1709e2\u0026url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FMathML%2FElement%2Fmath) element\n4. using control characters (`\\n \\t \\b \\r \\f` from **report #1**) to break element names to trick the _back-end_ (not the WAF) into reassembling them in output (ie: `\u003cm\\bath` instead of `\u003cmath`)\n5. using the `xml:base` attribute instead of the usual `href` to specify a Javascript URI\n6. injecting quotes to mess up the output from the back-end\n7. using an innocuos `href=#` to make everything following the payload clickable\n8. using a **fake URL** enclosed in `[]` to exploit a flaw in the rendering engine in the back-end that would cause it to move the payload outside of the \"badUrl\" element and place it where we could use it\n\nThe final payload was `\u0026\u003c\u003elt;%\u0026\u003c\u003elt;m\\bath xml:base=\\\"j\u003c\u003eavascript:alert(document.domain)//\\\" href=#\\\"[bad.url.pls]` which produced `\u0026lt%\u003cmath xml:base=\"javascript:alert(document.domain)//\" href=\"#\" x=\"\" class=\"badLink\"\u003e[bad.url.pls]`\n\nAs a bonus note, this led to the discovery of a particular payload that would render a newsfeed comment **un-repliable and un-deletable**. Both flaws were fixed with better rules, and by preventing the back-end from stripping “*conveniently-placed*” tags and control characters.\n\n### Report #5\nSomewhat less-related to the SocialClub per sé, this was a variation on **report #3** where it was discovered that Snapmatic and R★ Editor comments would go a different validation flow than any other entry, and the [best-fit matchings](https://hackerone.com/redirect?signature=bc75d2374467e877b490cd0801b7c340ad395857\u0026url=https%3A%2F%2Fwebsec.github.io%2Funicode-security-guide%2Fcharacter-transformations%2F%23best-fit) would once again act up but on a different codepage this time, when using **Left-Angle brackets** `U+3008 \"〈\"` from the [Cjk Symbols and Punctuation block](https://hackerone.com/redirect?signature=73b9a54dadbf0c72c2d6cba07cdf52f97d13da52\u0026url=https%3A%2F%2Fwww.compart.com%2Fen%2Funicode%2Fblock%2FU%2B3000), and **Left-pointing Angle brackets** `U+2329 \"〈\"` from the [Miscellaneus Technical block](https://hackerone.com/redirect?signature=12de40484af21138b7e46413f2fa9bc6eaff769e\u0026url=https%3A%2F%2Fwww.compart.com%2Fen%2Funicode%2Fblock%2FU%2B2300).\n\nWhile the Snapmatic/R★ Editor back-end would block `U+FF1C` and `U+FE64`, the other two would go through and get \"matched\" to `\u003c` somewhere in the web technology stack. My last payload was `〈script/src=//...?` and it was promptly fixed in both its variations.\n\n### Conclusions\nThe Rockstar Games team is amazing. My first duplicate report was with them back in September and if it wasn't for @jmarshall reacting so politely to my unjustified noobish irk to a duplicate I would've probably dropped bug bounties altogether.\n\nIt's been great to be involved all these months into researching new things and approaches—failing for weeks at a time allowed me to learn new techniques and extremely peculiar quirks I now feel ready to share with the community. I still go back and try new ideas as of today, so far without success. Which is great.\n\nAd maiora!","can_view?":true,"can_create?":false,"attachments":[],"user":{"id":57954,"username":"jmarshall","name":"JMarshall","bio":"","cleared":false,"website":null,"location":"","created_at":"2016-02-25T14:40:27.992Z","url":"https://hackerone.com/jmarshall","anc_triager":false,"hackerone_triager":false,"hackerone_employee":false,"user_type":"company","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png","medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png","xtralarge":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"}}},{"id":7061,"category":"researcher","content":"I requested the disclosure of what I hope is the final report regarding stored cross-site-scripting vulnerabilities on the Rockstar Games SocialClub, to also allow me to summarize the research that went into the other 5 reports. \nHave fun!\n\n---\n\n### Report #1\nThe 6-months adventure into researching and bypassing the SocialClub WAF begun with a simple discovery at first: while the WAF was removing anything enclosed in `\u003c.*`, some **control characters** (`\\b \\f \\n \\r \\t`) weren't being taken into account when injecting a `\u003c`, allowing an adversary to create a malicious payload in the simple form of `\u003c\\t`.\n\nA fix was deployed to **remove anything following a `\u003c`**.\n\n### Report #2\nTwo weeks after the fix, I ended up discovering what would soon become a “head-scratching” mystery: injecting a **single `%`** in the payload would bypass the filter entirely and force the back-end to somehow produce an unescaped `\u003c` along with the escaped one.  \nThe original payload was complex and confusing, and it led me to the wrong conclusion that [over-consumption flaws](https://websec.github.io/unicode-security-guide/character-transformations/#overconsumption) were to blame, but as analysis proceeded, it was finally discovered that the culprit was the **simple, single `%`**.\n\nThe final payload `\u003c%\u0026lt;script/src=//...?` produced an output of `\u0026lt;%\u003cscript/src=\"//...\" \u003c=\"\" p=\"\"\u003e` from the back-end.\n\nA fix was deployed and the WAF rules were made more strict, defeating all attempts with a 302 redirect to an error page.\n\n### Report #3\nTwo months after the last fix, I discovered how the WAF wouldn't account for [**Full-Width**](https://www.compart.com/en/unicode/block/U+FF00) and [**Small-Forms**](https://www.compart.com/en/unicode/block/U+FE50) variants which, chained with the `%` confusion from the second report would again trick the back-end into producing a valid output: indeed, giving **`U+FF1C` or `U+FE64`** as the input would pass the WAF and the back-end would transform both into `\u003c`. This is called a [best-fit match flaw](https://websec.github.io/unicode-security-guide/character-transformations/#best-fit) and it usually happens on Windows-powered technology stacks, where one of the processing layers fails to properly account for missing characters in destination codepages.\n\nThe payload `\\uFE64%\\uFF1Cscript/src=//...?`, evaded the WAF and produced `\u0026lt;%\u003cscript/src=\"//...?\" class=\"badLink\"` in the HTML page.  \n\nA first fix was deployed preventing both script injections and DOM events manipulation, both of which I was able to bypass after a few days using a combination of **control chars, percentages, breaks, and exotic function invokation**.  The payload `\\uFF1C%\\uFE64input/autofocus onfocus\\b='[1].find(alert)'` successfully bypassed the new filters and popped an alert before the report was closed as resolved, allowing the team to look for a better solution in time. A second, stronger fix was deployed and the WAF rules were made even stricter prohibiting any combination of direct or indirect forms of `\u003c` and `%` in suspicious contextes, plus any shape or form of `onXXX` DOM events.\n\n### Report #4\nThe new WAF rules prevented *any* kind of injection: no useful HTML elements, no DOM events. Anything went straight to /dev/null. After spending a few weeks in trial \u0026 error tests, I remembered how the payload from **report #3** would have a `badLink` class added to it, as the back-end detected a suspicious URI in the comment and would ~~strike it out~~ and prevent it from becoming clickable.\n\nAfter weeks of tests, in a few hours I was able to chain **_eight_ different techniques** to go through the WAF, the back-end filter, and the client-side Javascript filter:\n\n1. using `\u003c\u003e` to separate “trigger words” in order to turn them “invisible” to the WAF (ie: `\u0026\u003c\u003elt;`). The _back-end_ would remove it for me.\n2. using `\\u0025` instead of `%` which would now trigger the WAF\n3. using the unaccounted for `MATH` [MathML element](https://developer.mozilla.org/en-US/docs/Web/MathML/Element/math)\n4. using control characters (`\\n \\t \\b \\r \\f` from **report #1**) to break element names to trick the _back-end_ (not the WAF) into reassembling them in output (ie: `\u003cm\\bath` instead of `\u003cmath`)\n5. using the `xml:base` attribute instead of the usual `href` to specify a Javascript URI\n6. injecting quotes to mess up the output from the back-end\n7. using an innocuos `href=#` to make everything following the payload clickable\n8. using a **fake URL** enclosed in `[]` to exploit a flaw in the rendering engine in the back-end that would cause it to move the payload *outside* of the \"badUrl\" element and place it where we could use it \n\nThe final payload was `\u0026\u003c\u003elt;%\u0026\u003c\u003elt;m\\bath xml:base=\\\"j\u003c\u003eavascript:alert(document.domain)//\\\" href=#\\\"[bad.url.pls]` which produced `\u0026lt%\u003cmath xml:base=\"javascript:alert(document.domain)//\" href=\"#\" x=\"\" class=\"badLink\"\u003e[bad.url.pls]`\n\nAs a bonus note, this led to the discovery of a particular payload that would render a newsfeed comment **un-repliable and un-deletable**. Both flaws were fixed with better rules, and by preventing the back-end from stripping *“conveniently-placed”* tags and control characters.\n\n### Report #5\nSomewhat *less-related* to the SocialClub per sé, this was a variation on **report #3** where it was discovered that Snapmatic and R★ Editor comments would go a different validation flow than any other entry, and the [best-fit matchings](https://websec.github.io/unicode-security-guide/character-transformations/#best-fit) would once again act up but on a different codepage this time, when using **Left-Angle brackets** `U+3008 \"〈\"` from the [Cjk Symbols and Punctuation block](https://www.compart.com/en/unicode/block/U+3000), and **Left-pointing Angle brackets** `U+2329 \"〈\"` from the [Miscellaneus Technical block](https://www.compart.com/en/unicode/block/U+2300).\n\nWhile the Snapmatic/R★ Editor back-end would block `U+FF1C` and `U+FE64`, the other two would go through and get \"matched\" to `\u003c` somewhere in the web technology stack. My last payload was `〈script/src=//...?` and it was promptly fixed in both its variations.\n\n### Conclusions\nThe Rockstar Games team is amazing. My first duplicate report was with them back in September and if it wasn't for @jmarshall reacting so politely to my unjustified noobish irk to a duplicate I would've probably dropped bug bounties altogether.  \nIt's been great to be involved all these months into researching new things and approaches—failing for weeks at a time allowed me to learn new techniques and extremely peculiar quirks I now feel ready to share with the community. I still go back and try new ideas as of today, so far without success. Which is great.\n\nAd maiora!","can_view?":true,"can_create?":false,"attachments":[],"user":{"id":189882,"username":"europa","name":"Alessandro De Micheli","bio":"OH GOD HOW DID THIS GET HERE I'M NOT GOOD WITH COMPUTERS","cleared":true,"website":null,"location":"Rome","created_at":"2017-08-07T16:08:08.728Z","url":"https://hackerone.com/europa","anc_triager":false,"hackerone_triager":false,"hackerone_employee":null,"hacker_resume_enabled":true,"user_type":"hacker","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c","xtralarge":"https://profile-photos.hackerone-user-content.com/variants/yLAfkbEdjS5TTkov1RViumZ4/c11036e2d3f8b05af4b5da5984ccdec6f786b763c8abceb4e68042e10dcdae85"}}}]}