{"id":190373,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xOTAzNzM=","url":"https://hackerone.com/reports/190373","title":"Gratipay uses the random module's cryptographically insecure PRNG.","state":"Closed","substate":"informative","severity_rating":"none","readable_substate":"Informative","created_at":"2016-12-11T15:49:45.330Z","submitted_at":"2016-12-11T15:49:45.330Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"edoverflow","url":"/edoverflow","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":1868,"url":"https://hackerone.com/gratipay","handle":"gratipay","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/001/868/a75c6649c5b4671b3cf44160af884a7da9fd0b67_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/001/868/a75c6649c5b4671b3cf44160af884a7da9fd0b67_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"disabled","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Gratipay","twitter_handle":"Gratipay","website":"https://gratipay.com/","about":"Gratitude? Gratipay! The easiest way for your company to pay for open source."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2016-12-12T17:07:22.677Z","bug_reporter_agreed_on_going_public_at":"2016-12-12T17:07:22.645Z","team_member_agreed_on_going_public_at":"2016-12-12T14:32:27.797Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Dear Gratipay bug bounty team,\n\n# Summary\n---\n\nGratipay currently uses the [random](https://docs.python.org/dev/library/random.html) module's pseudo-random number generator which is not a cryptographically secure PRNG as stated in the docs:\n\n\u003e The pseudo-random generators of this module should not be used for security purposes. For security or cryptographic uses, see the secrets module.\n\nThe PRNG is implemented in `crypto.py` as follows:\n\n~~~\ntry:                                # use the system PRNG if possible\n    random = random.SystemRandom()\n    using_sysrandom = True\nexcept NotImplementedError:         # fall back\n    import warnings\n    warnings.warn('A secure pseudo-random number generator is not available '\n                  'on your system. Falling back to Mersenne Twister.')\n    using_sysrandom = False\n~~~\n\nLink: https://github.com/gratipay/gratipay.com/blob/master/gratipay/security/crypto.py#L17\n\n# Why does this vulnerability exist?\n---\n\nA PRNG is an algorithm used to produce random-looking numbers with certain desirable statistical properties. In order for a PRNG to be cryptographically secure it must be resistant to prediction.\n\nThe random module uses the [Mersenne Twister](https://en.wikipedia.org/wiki/Mersenne_Twister) by default, which is designed for simulation (Monte-Carlo simulation) and modelling, and is therefore not suitable for cryptographic purposes. Interestingly Gratipay's current fallback from the `random` module is in fact the Mersenne Twister:\n\n~~~\n warnings.warn('A secure pseudo-random number generator is not available '\n                  'on your system. Falling back to Mersenne Twister.')\n~~~\n\n# How can this be fixed?\n---\n\nI recommend using the [secrets](https://docs.python.org/dev/library/secrets.html#secrets.SystemRandom) module's PRNG as follows:\n\n~~~\nrandom = secrets.SystemRandom()\n~~~\n\nFor more on `Insecure Randomness` please refer to the OWASP page here: https://www.owasp.org/index.php/Insecure_Randomness\n\nYours sincerely,\nEd","weakness":{"id":32,"name":"Cryptographic Issues - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":5,"voters":["logicmap","khizer47","hacklad","spetr0x","nosas"],"severity":{"rating":"none","author_type":"Team"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":1358484,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","automated_response":false,"created_at":"2016-12-12T14:29:12.475Z","updated_at":"2016-12-12T14:29:12.475Z","additional_data":{"old_severity":null,"new_severity":"None","old_severity_id":null,"new_severity_id":13310},"actor":{"username":"whit537","cleared":false,"url":"/whit537","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/034/094/b38b9225fd8592d05d5e6939116e8f30d7c98af5_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"gratipay","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1358497,"is_internal":false,"editable":false,"type":"Activities::BugInformative","message":"Thanks for reading our source code! :-)\n\n`secrets.SystemRandom` is an [alias](https://hg.python.org/cpython/file/3.6/Lib/secrets.py#l20) for `random.SystemRandom`, which is in fact [advertised](https://hg.python.org/cpython/file/2.7/Lib/random.py#l803) as being cryptographically secure (since it [uses](https://hg.python.org/cpython/file/2.7/Lib/random.py#l805) `os.urandom` under the hood):\n\n\u003e Use `os.urandom()` or `SystemRandom` if you require a cryptographically secure pseudo-random number generator.\n\nClosing as informative. Happy hacking! :-)","automated_response":false,"created_at":"2016-12-12T14:32:16.077Z","updated_at":"2016-12-12T14:32:16.077Z","actor":{"username":"whit537","cleared":false,"url":"/whit537","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/034/094/b38b9225fd8592d05d5e6939116e8f30d7c98af5_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"gratipay","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1358498,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2016-12-12T14:32:27.818Z","updated_at":"2016-12-12T14:32:27.818Z","first_to_agree":true,"actor":{"username":"whit537","cleared":false,"url":"/whit537","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/034/094/b38b9225fd8592d05d5e6939116e8f30d7c98af5_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"gratipay","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1358836,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Dear @whit537,\n\nThank you for the prompt and informative response. Only after submitting this report did I notice that `secrets.SystemRandom` is the equivalent of `random.SystemRandom`. Since this report will be publicly disclosed, I will write a brief summary explaining what both modules are for developers who would like to implement a cryptographically secure PRNG (CPRNG).\n\n# The `random` module\n---\n\nIn order to produce cryptograpically secure strings you must ensure that you are using `random.SystemRandom` and not `random.choice`.\n\n## üëé Don't use this:\n\n~~~\n''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))\n~~~\n\nThis uses the Mersenne Twister.\n\n## üëç Use this instead:\n\n~~~\n''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))\n~~~\n\n`random.SystemRandom` runs `os.urandom()` (as seen in the code snippet below), which uses the operating system's PRNG. On *nix machines that's `/dev/urandom` and `CryptGenRandom()` on Windows machines.\n\n~~~\ndef random(self):\n        \"\"\"Get the next random number in the range [0.0, 1.0).\"\"\"\n        return (long(_hexlify(_urandom(7)), 16) \u003e\u003e 3) * RECIP_BPF          # Runs it here.\n\n    def getrandbits(self, k):\n        \"\"\"getrandbits(k) -\u003e x.  Generates a long int with k random bits.\"\"\"\n        if k \u003c= 0:\n            raise ValueError('number of bits must be greater than zero')\n        if k != int(k):\n            raise TypeError('number of bits should be an integer')\n        bytes = (k + 7) // 8\n        x = long(_hexlify(_urandom(bytes)), 16)                            # ... and here.\n        return x \u003e\u003e (bytes * 8 - k)  \n~~~\n\nLink to docs: https://docs.python.org/2/library/random.html\nLink to source code: https://hg.python.org/cpython/file/2.7/Lib/random.py#l805\n\n# The `secrets` module\n---\n\nIf you are running Python 3.6 and want to ensure you are using a CPRNG, please opt for the `secrets` module. As @whit537 stated, `secrets.SystemRandom` is just an alias for `random.SystemRandom`. The reason behind creating this module was the fact that some developers were using `random.choice` and therefore by creating a module that only uses cryptographically secure functions there would be no way of making the same mistake. On top of that, for a very long time when looking for a random string generator in Python, the number one result was the following insecure method: http://stackoverflow.com/a/2257449.\n\nIn the `secrets` module's source code you can see that the `SystemRandom` class from the `random` module is imported as follows:\n\n~~~\nfrom random import SystemRandom\n\n_sysrand = SystemRandom()\n~~~\n\nLink to docs: https://docs.python.org/dev/library/secrets.html\nLink to source code: https://hg.python.org/cpython/file/3.6/Lib/secrets.py\n\nPlease let me know if any further information would be helpful. Thank you for your time.\n\nYours sincerely,\nEd","automated_response":false,"created_at":"2016-12-12T17:07:22.659Z","updated_at":"2016-12-12T17:07:22.659Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"gratipay","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1358837,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2016-12-12T17:07:22.690Z","updated_at":"2016-12-12T17:07:22.690Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"gratipay","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1358901,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the informative write-up, @edio! P.S. We are an open organization and are always [happy to have collaborators](http://inside.gratipay.com/big-picture/welcome) if you would like to be on our blue team. :-)","automated_response":false,"created_at":"2016-12-12T17:33:15.556Z","updated_at":"2016-12-12T17:33:15.556Z","actor":{"username":"whit537","cleared":false,"url":"/whit537","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/034/094/b38b9225fd8592d05d5e6939116e8f30d7c98af5_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"gratipay","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}