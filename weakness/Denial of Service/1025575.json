{"id":1025575,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDI1NTc1","url":"https://hackerone.com/reports/1025575","title":"Default behavior of Fastifys versioned routes can be used for cache poisoning when Fastify is used in combination with a http cache / CDN","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2020-11-03T20:22:03.699Z","submitted_at":"2020-11-03T20:22:03.726Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"trygve_lie","url":"/trygve_lie","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/gvMhqhfwJokCwd5WuYZX1fAU/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":23949,"url":"https://hackerone.com/nodejs-ecosystem","handle":"nodejs-ecosystem","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Node.js third-party modules","twitter_handle":"","website":"https://nodejs.org/en/security/","about":"This program is used to handle vulnerabilities in the Node.js ecosystem."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2020-7764"],"singular_disclosure_disabled":false,"disclosed_at":"2020-12-10T16:56:12.040Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2020-11-10T16:56:04.263Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I would like to report possible cache poisoning in Fastify\nIt allows an attacker to perform an cache poisoning when Fastify is used in combination with a http cache / CDN.\n\n# Module\n\n**module name:** Fastify\n**version:** 3.x\n**npm page:** `https://www.npmjs.com/package/fastify`\n\n## Module Description\n\n\u003e Fast and low overhead web framework, for Node.js\n\n## Module Stats\n\n159,983 weekly downloads\n\n# Vulnerability\n\n## Vulnerability Description\n\nI might be missing the obvious or I've not read the documentation closely enough, but to me it seem like its not possible to turn off versioned routes in Fastify.\n\nThe reason why I am reporting this issue as a security issue are because my reason to want to turn off versioned routes in Fastify is rooted in a security issue when using Fastify in relation with a http cache / CDN and I do not want to expose this in the common issue tracker because it can be used against running services. \n\nMy current issue is that we have a Fastify server not using versioned routes where the server live behind a http cache / CDN. By default Fastify will return a 404 if a `Accept-Version` http header is passed on to an exiting route not under versioning. When there is a http cache / CDN infront of Fastify this will make it possible for an attacker to perform an cache poisoning attack (https://owasp.org/www-community/attacks/Cache_Poisoning).\n\n## Steps To Reproduce:\n\nGiven the following Fastify server:\n\n```js\nconst app = require('fastify')();\n\napp.get('/', async () =\u003e {\n    return { hello: 'world' };\n});\n\nconst start = async () =\u003e {\n    await app.listen(9000)\n}\nstart();\n```\n\nRequesting this as follow:\n\n```sh\ncurl -v http://localhost:9000\n```\n\nit outputs a HTTP 200 with the expected content:\n\n```sh\n*   Trying 127.0.0.1:9000...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9000 (#0)\n\u003e GET / HTTP/1.1\n\u003e Host: localhost:9000\n\u003e User-Agent: curl/7.68.0\n\u003e Accept: */*\n\u003e \n* Mark bundle as not supporting multiuse\n\u003c HTTP/1.1 200 OK\n\u003c content-type: application/json; charset=utf-8\n\u003c content-length: 17\n\u003c Date: Tue, 03 Nov 2020 19:21:41 GMT\n\u003c Connection: keep-alive\n\u003c Keep-Alive: timeout=5\n\u003c \n* Connection #0 to host localhost left intact\n{\"hello\":\"world\"}\n```\n\nThough, if we request the same route with an `Accept-Version` header:\n\n```sh\ncurl -v -H \"Accept-version: tada\" http://localhost:9000\n```\n\nit outputs a HTTP 404:\n\n```sh\n*   Trying 127.0.0.1:9000...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9000 (#0)\n\u003e GET / HTTP/1.1\n\u003e Host: localhost:9000\n\u003e User-Agent: curl/7.68.0\n\u003e Accept: */*\n\u003e Accept-version: tada\n\u003e \n* Mark bundle as not supporting multiuse\n\u003c HTTP/1.1 404 Not Found\n\u003c content-type: application/json; charset=utf-8\n\u003c content-length: 72\n\u003c Date: Tue, 03 Nov 2020 19:25:09 GMT\n\u003c Connection: keep-alive\n\u003c Keep-Alive: timeout=5\n\u003c \n* Connection #0 to host localhost left intact\n{\"message\":\"Route GET:/ not found\",\"error\":\"Not Found\",\"statusCode\":404}\n```\n\nWhen a http cache / CDN are in front of such a server, an attacker can use this behavior to trigger caching of a 404 page on a legal route. Ex; A default Fastly (the CDN we use) or Varnish config will result in a cached 404 page with the above setup.\n\nWhen versioned routes are in use I also think that a `Vary` http header with `Accept-Version` as a value should be added to the response. That shall prevent a http cache / CDN from caching a 404 under the same cache key as a previous response.\n\nThough; to avoid this behavior when not using version routes I think it should be possible to turn off version routes. Is there an easy way to do so? Type a boolean on the constructor? Or do one need to write a custom version parser which according to doc affect performance?\n\nIts highly debatable if this is a security issue in Fastify, though, behavior of this might be worth having a second look at. Personally I was a bit surprised that versioned routes was a default behavior. I would expect it to be an opt in instead of opt out (if its possible to opt out). \n\n## Supporting Material/References:\n\n- All OSes\n- All node.js versions\n- All NPM versions\n- [BROWSERS VERSIONS, IF APPLICABLE] \n- Any http cache / CDN\n\n# Wrap up\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N]\n\n## Impact\n\nAn attacker can use this cache poisoning to perform an attack where fully functionally URLs are replaced with 404's.","vulnerability_information_html":"\u003cp\u003eI would like to report possible cache poisoning in Fastify\u003cbr\u003e\nIt allows an attacker to perform an cache poisoning when Fastify is used in combination with a http cache / CDN.\u003c/p\u003e\n\n\u003ch1 id=\"module\"\u003eModule\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003emodule name:\u003c/strong\u003e Fastify\u003cbr\u003e\n\u003cstrong\u003eversion:\u003c/strong\u003e 3.x\u003cbr\u003e\n\u003cstrong\u003enpm page:\u003c/strong\u003e \u003ccode\u003ehttps://www.npmjs.com/package/fastify\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"module-description\"\u003eModule Description\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eFast and low overhead web framework, for Node.js\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"module-stats\"\u003eModule Stats\u003c/h2\u003e\n\n\u003cp\u003e159,983 weekly downloads\u003c/p\u003e\n\n\u003ch1 id=\"vulnerability\"\u003eVulnerability\u003c/h1\u003e\n\n\u003ch2 id=\"vulnerability-description\"\u003eVulnerability Description\u003c/h2\u003e\n\n\u003cp\u003eI might be missing the obvious or I\u0026#39;ve not read the documentation closely enough, but to me it seem like its not possible to turn off versioned routes in Fastify.\u003c/p\u003e\n\n\u003cp\u003eThe reason why I am reporting this issue as a security issue are because my reason to want to turn off versioned routes in Fastify is rooted in a security issue when using Fastify in relation with a http cache / CDN and I do not want to expose this in the common issue tracker because it can be used against running services. \u003c/p\u003e\n\n\u003cp\u003eMy current issue is that we have a Fastify server not using versioned routes where the server live behind a http cache / CDN. By default Fastify will return a 404 if a \u003ccode\u003eAccept-Version\u003c/code\u003e http header is passed on to an exiting route not under versioning. When there is a http cache / CDN infront of Fastify this will make it possible for an attacker to perform an cache poisoning attack (\u003ca title=\"https://owasp.org/www-community/attacks/Cache_Poisoning\" href=\"/redirect?url=https%3A%2F%2Fowasp.org%2Fwww-community%2Fattacks%2FCache_Poisoning\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://owasp.org/www-community/attacks/Cache_Poisoning\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e).\u003c/p\u003e\n\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps To Reproduce:\u003c/h2\u003e\n\n\u003cp\u003eGiven the following Fastify server:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eapp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003efastify\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)();\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eapp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"na\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eworld\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003easync\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eawait\u003c/span\u003e \u003cspan class=\"nx\"\u003eapp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elisten\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e9000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRequesting this as follow:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ecurl \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e http://localhost:9000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eit outputs a HTTP 200 with the expected content:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003e   Trying 127.0.0.1:9000...\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e TCP_NODELAY \u003cspan class=\"nb\"\u003eset\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Connected to localhost \u003cspan class=\"o\"\u003e(\u003c/span\u003e127.0.0.1\u003cspan class=\"o\"\u003e)\u003c/span\u003e port 9000 \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"c\"\u003e#0)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e GET / HTTP/1.1\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e Host: localhost:9000\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e User-Agent: curl/7.68.0\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e Accept: \u003cspan class=\"k\"\u003e*\u003c/span\u003e/\u003cspan class=\"k\"\u003e*\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Mark bundle as not supporting multiuse\n\u0026lt; HTTP/1.1 200 OK\n\u0026lt; content-type: application/json\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003echarset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eutf-8\n\u0026lt; content-length: 17\n\u0026lt; Date: Tue, 03 Nov 2020 19:21:41 GMT\n\u0026lt; Connection: keep-alive\n\u0026lt; Keep-Alive: \u003cspan class=\"nb\"\u003etimeout\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e5\n\u0026lt; \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Connection \u003cspan class=\"c\"\u003e#0 to host localhost left intact\u003c/span\u003e\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;hello\u0026quot;\u003c/span\u003e:\u003cspan class=\"s2\"\u003e\u0026quot;world\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThough, if we request the same route with an \u003ccode\u003eAccept-Version\u003c/code\u003e header:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ecurl \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Accept-version: tada\u0026quot;\u003c/span\u003e http://localhost:9000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eit outputs a HTTP 404:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003e*\u003c/span\u003e   Trying 127.0.0.1:9000...\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e TCP_NODELAY \u003cspan class=\"nb\"\u003eset\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Connected to localhost \u003cspan class=\"o\"\u003e(\u003c/span\u003e127.0.0.1\u003cspan class=\"o\"\u003e)\u003c/span\u003e port 9000 \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"c\"\u003e#0)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e GET / HTTP/1.1\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e Host: localhost:9000\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e User-Agent: curl/7.68.0\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e Accept: \u003cspan class=\"k\"\u003e*\u003c/span\u003e/\u003cspan class=\"k\"\u003e*\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e Accept-version: tada\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Mark bundle as not supporting multiuse\n\u0026lt; HTTP/1.1 404 Not Found\n\u0026lt; content-type: application/json\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003echarset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eutf-8\n\u0026lt; content-length: 72\n\u0026lt; Date: Tue, 03 Nov 2020 19:25:09 GMT\n\u0026lt; Connection: keep-alive\n\u0026lt; Keep-Alive: \u003cspan class=\"nb\"\u003etimeout\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e5\n\u0026lt; \n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Connection \u003cspan class=\"c\"\u003e#0 to host localhost left intact\u003c/span\u003e\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;message\u0026quot;\u003c/span\u003e:\u003cspan class=\"s2\"\u003e\u0026quot;Route GET:/ not found\u0026quot;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026quot;error\u0026quot;\u003c/span\u003e:\u003cspan class=\"s2\"\u003e\u0026quot;Not Found\u0026quot;\u003c/span\u003e,\u003cspan class=\"s2\"\u003e\u0026quot;statusCode\u0026quot;\u003c/span\u003e:404\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen a http cache / CDN are in front of such a server, an attacker can use this behavior to trigger caching of a 404 page on a legal route. Ex; A default Fastly (the CDN we use) or Varnish config will result in a cached 404 page with the above setup.\u003c/p\u003e\n\n\u003cp\u003eWhen versioned routes are in use I also think that a \u003ccode\u003eVary\u003c/code\u003e http header with \u003ccode\u003eAccept-Version\u003c/code\u003e as a value should be added to the response. That shall prevent a http cache / CDN from caching a 404 under the same cache key as a previous response.\u003c/p\u003e\n\n\u003cp\u003eThough; to avoid this behavior when not using version routes I think it should be possible to turn off version routes. Is there an easy way to do so? Type a boolean on the constructor? Or do one need to write a custom version parser which according to doc affect performance?\u003c/p\u003e\n\n\u003cp\u003eIts highly debatable if this is a security issue in Fastify, though, behavior of this might be worth having a second look at. Personally I was a bit surprised that versioned routes was a default behavior. I would expect it to be an opt in instead of opt out (if its possible to opt out). \u003c/p\u003e\n\n\u003ch2 id=\"supporting-material-references\"\u003eSupporting Material/References:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAll OSes\u003c/li\u003e\n\u003cli\u003eAll node.js versions\u003c/li\u003e\n\u003cli\u003eAll NPM versions\u003c/li\u003e\n\u003cli\u003e[BROWSERS VERSIONS, IF APPLICABLE] \u003c/li\u003e\n\u003cli\u003eAny http cache / CDN\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"wrap-up\"\u003eWrap up\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eI contacted the maintainer to let them know: [N] \u003c/li\u003e\n\u003cli\u003eI opened an issue in the related repository: [N]\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eAn attacker can use this cache poisoning to perform an attack where fully functionally URLs are replaced with 404\u0026#39;s.\u003c/p\u003e\n","weakness":{"id":86,"name":"HTTP Request Smuggling"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2020-12-10T16:56:04.419Z","allow_singular_disclosure_after":-1595781.922212304,"singular_disclosure_allowed":true,"vote_count":6,"voters":["youstin","exploit_db","abdullahrehman2","deigo88","frank-hacker2000","username-me"],"severity":{"rating":"medium","score":5.9,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"high","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"none","integrity":"none","availability":"high"}},"structured_scope":{"databaseId":4647,"asset_type":"SOURCE_CODE","asset_identifier":"fastify","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":9723639,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thanks Trygve! This is a tough one and you have found a nice problem. I've added Tomas della Vedova to the report.\n\nI have a few questions.\n\n\u003e When a http cache / CDN are in front of such a server, an attacker can use this behavior to trigger caching of a 404 page on a legal route. Ex; A default Fastly (the CDN we use) or Varnish config will result in a cached 404 page with the above setup.\n\nIf I understand this correctly, you are saying that Fastly and Varnish are going to automatically cache all HTTP responses despite the absence of any specific caching headers (vs what other CDNs do). This seems quite a dangerous behavior from my point of view, specifically for applications that have any logged in control. Have you got some documentation for the default behavior in this case? What's the default behavior for Authorization for example?\n\nThere are infinite ways to perform cache poisoning attacks in those systems. I'm not necessarily sure that a Web Framework responsibility is to cater for them all. If we think this is one of them, then this is a security vulnerability. If we think it's not, it is just a bad design on our part.\n\n---\n\nIrregardless of the severity of the problem I think the fixes should be:\n\n1. put API versioning behind an option argument, disabled by default (potentially breaking)\n2. automatically add a VARY header for accept-version if it's detected in the request. This can work well if we have a flag to enable/disable route versioning\n\nWDYT Tomas? I think we can start working on a fix. We might also consider this a bug in https://github.com/delvedor/find-my-way, as it uses the accept-version strategy as the default. This can also effect Restify, as it using find-my-way internally.","markdown_message":"\u003cp\u003eThanks Trygve! This is a tough one and you have found a nice problem. I\u0026#39;ve added Tomas della Vedova to the report.\u003c/p\u003e\n\n\u003cp\u003eI have a few questions.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhen a http cache / CDN are in front of such a server, an attacker can use this behavior to trigger caching of a 404 page on a legal route. Ex; A default Fastly (the CDN we use) or Varnish config will result in a cached 404 page with the above setup.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIf I understand this correctly, you are saying that Fastly and Varnish are going to automatically cache all HTTP responses despite the absence of any specific caching headers (vs what other CDNs do). This seems quite a dangerous behavior from my point of view, specifically for applications that have any logged in control. Have you got some documentation for the default behavior in this case? What\u0026#39;s the default behavior for Authorization for example?\u003c/p\u003e\n\n\u003cp\u003eThere are infinite ways to perform cache poisoning attacks in those systems. I\u0026#39;m not necessarily sure that a Web Framework responsibility is to cater for them all. If we think this is one of them, then this is a security vulnerability. If we think it\u0026#39;s not, it is just a bad design on our part.\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eIrregardless of the severity of the problem I think the fixes should be:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eput API versioning behind an option argument, disabled by default (potentially breaking)\u003c/li\u003e\n\u003cli\u003eautomatically add a VARY header for accept-version if it\u0026#39;s detected in the request. This can work well if we have a flag to enable/disable route versioning\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWDYT Tomas? I think we can start working on a fix. We might also consider this a bug in \u003ca title=\"https://github.com/delvedor/find-my-way\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdelvedor%2Ffind-my-way\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/delvedor/find-my-way\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, as it uses the accept-version strategy as the default. This can also effect Restify, as it using find-my-way internally.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-04T12:31:58.329Z","updated_at":"2020-11-04T12:31:58.329Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9723886,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2020-11-04T13:04:00.827Z","updated_at":"2020-11-04T13:04:00.827Z","actor":{"username":"delvedor","cleared":false,"url":"/delvedor","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9724000,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello, thank you for writing!\nWe can easily add an option in find-my-way (and consequently in Fastify) for disabling route versioning, it will be enabled by default in v3 and disabled in v4.\nI agree that Fastify should set the vary header in case of a versioned route, but I'm not sure if we should define it as a vulnerability.\nI can prepare both pull requests.","markdown_message":"\u003cp\u003eHello, thank you for writing!\u003cbr\u003e\nWe can easily add an option in find-my-way (and consequently in Fastify) for disabling route versioning, it will be enabled by default in v3 and disabled in v4.\u003cbr\u003e\nI agree that Fastify should set the vary header in case of a versioned route, but I\u0026#39;m not sure if we should define it as a vulnerability.\u003cbr\u003e\nI can prepare both pull requests.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-04T13:18:20.569Z","updated_at":"2020-11-04T13:18:20.569Z","actor":{"username":"delvedor","cleared":false,"url":"/delvedor","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9726559,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Added Adam from Snyk as well. Wdyt? Is this worth a CVE and security release? What should be the \"correct\" behavior in this case?","markdown_message":"\u003cp\u003eAdded Adam from Snyk as well. Wdyt? Is this worth a CVE and security release? What should be the \u0026quot;correct\u0026quot; behavior in this case?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-04T18:38:25.124Z","updated_at":"2020-11-04T18:38:25.124Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9727915,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e If I understand this correctly, you are saying that Fastly and Varnish are going to automatically cache all HTTP responses despite the absence of any specific caching headers (vs what other CDNs do). This seems quite a dangerous behavior from my point of view, specifically for applications that have any logged in control. Have you got some documentation for the default behavior in this case? What's the default behavior for Authorization for example?\n\nNo, they will not do that-ish. They, at last Fastly seems to (I've not checked Varnish), operate with a short lived cache on 404 by default for some reason (I assume DDoS prevention). But by default they ignore `Accept-Version` unless it is added to `Vary`. Due to this having ex a `Cache-Control` header does not realy matter for this attack. An attacker can time expiration of the item in cache and then trigger a 404 by adding a `Accept-Version` on the time it expires. Not easy, but possible.\n\nFastly do recommend to add http headers which manipulate the output as part of the cache key or `vary` header:\nhttps://docs.fastly.com/en/guides/manipulating-the-cache-key#before-you-begin\n\n\n\u003e There are infinite ways to perform cache poisoning attacks in those systems. I'm not necessarily sure that a Web Framework responsibility is to cater for them all. If we think this is one of them, then this is a security vulnerability. If we think it's not, it is just a bad design on our part.\n\nI totally agree. There is so many rabbit holes to go down regarding http caching and I do also think its not the task of a Web Framework to prevent all of them. I do though think it is a Web Framework's responsibility to make it easy to adjust behavior which alter the output. In this case, I miss turning off versioning since we are not using it in our service.\n\nTo be honest; it had gone totally under my radar that versioning is default on and that a non-matching `Accept-Version` would trigger a 404 on routes without versioning defined. Versioning is a great feature but I think the majority building a web application is not using it. For APIs it might be different.\n\n\u003e Is this worth a CVE and security release? \n\nI don't think this is worth a CVE or security release due to the complexity in the setup needed for this to be a proper vulnerability (my employer, FINN.no, where though). This is also possible to fix in the http cache / CDN (which we did).","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eIf I understand this correctly, you are saying that Fastly and Varnish are going to automatically cache all HTTP responses despite the absence of any specific caching headers (vs what other CDNs do). This seems quite a dangerous behavior from my point of view, specifically for applications that have any logged in control. Have you got some documentation for the default behavior in this case? What\u0026#39;s the default behavior for Authorization for example?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNo, they will not do that-ish. They, at last Fastly seems to (I\u0026#39;ve not checked Varnish), operate with a short lived cache on 404 by default for some reason (I assume DDoS prevention). But by default they ignore \u003ccode\u003eAccept-Version\u003c/code\u003e unless it is added to \u003ccode\u003eVary\u003c/code\u003e. Due to this having ex a \u003ccode\u003eCache-Control\u003c/code\u003e header does not realy matter for this attack. An attacker can time expiration of the item in cache and then trigger a 404 by adding a \u003ccode\u003eAccept-Version\u003c/code\u003e on the time it expires. Not easy, but possible.\u003c/p\u003e\n\n\u003cp\u003eFastly do recommend to add http headers which manipulate the output as part of the cache key or \u003ccode\u003evary\u003c/code\u003e header:\u003cbr\u003e\n\u003ca title=\"https://docs.fastly.com/en/guides/manipulating-the-cache-key#before-you-begin\" href=\"/redirect?url=https%3A%2F%2Fdocs.fastly.com%2Fen%2Fguides%2Fmanipulating-the-cache-key%23before-you-begin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://docs.fastly.com/en/guides/manipulating-the-cache-key#before-you-begin\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThere are infinite ways to perform cache poisoning attacks in those systems. I\u0026#39;m not necessarily sure that a Web Framework responsibility is to cater for them all. If we think this is one of them, then this is a security vulnerability. If we think it\u0026#39;s not, it is just a bad design on our part.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI totally agree. There is so many rabbit holes to go down regarding http caching and I do also think its not the task of a Web Framework to prevent all of them. I do though think it is a Web Framework\u0026#39;s responsibility to make it easy to adjust behavior which alter the output. In this case, I miss turning off versioning since we are not using it in our service.\u003c/p\u003e\n\n\u003cp\u003eTo be honest; it had gone totally under my radar that versioning is default on and that a non-matching \u003ccode\u003eAccept-Version\u003c/code\u003e would trigger a 404 on routes without versioning defined. Versioning is a great feature but I think the majority building a web application is not using it. For APIs it might be different.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIs this worth a CVE and security release? \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI don\u0026#39;t think this is worth a CVE or security release due to the complexity in the setup needed for this to be a proper vulnerability (my employer, FINN.no, where though). This is also possible to fix in the http cache / CDN (which we did).\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-04T21:43:31.864Z","updated_at":"2020-11-04T21:43:31.864Z","actor":{"username":"trygve_lie","cleared":false,"url":"/trygve_lie","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/gvMhqhfwJokCwd5WuYZX1fAU/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9731593,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2020-11-05T10:24:58.595Z","updated_at":"2020-11-05T10:24:58.595Z","actor":{"username":"adamgold7","cleared":false,"url":"/adamgold7","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9732192,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Another option is to change the default of find-my-way to \"disable\" versioning in a security release and put it behind an option. This is a breaking change, likely for a minority of our users.","markdown_message":"\u003cp\u003eAnother option is to change the default of find-my-way to \u0026quot;disable\u0026quot; versioning in a security release and put it behind an option. This is a breaking change, likely for a minority of our users.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-05T11:52:32.138Z","updated_at":"2020-11-05T11:52:32.138Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9733011,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"From what I understand, all current implementations of Fastify which are not explicitly using route versioning are vulnerable to denial of service, unless mitigated at proxy-level. Therefore, I do think that it's worth issuing a CVE here, after we decide on a proper fix - even if this issue requires a complex setup.\n\nI can see why disabling API versioning by default could be a breaking change - but won't adding a `Vary` header solve the problem, without the need of disabling versioning by default?","markdown_message":"\u003cp\u003eFrom what I understand, all current implementations of Fastify which are not explicitly using route versioning are vulnerable to denial of service, unless mitigated at proxy-level. Therefore, I do think that it\u0026#39;s worth issuing a CVE here, after we decide on a proper fix - even if this issue requires a complex setup.\u003c/p\u003e\n\n\u003cp\u003eI can see why disabling API versioning by default could be a breaking change - but won\u0026#39;t adding a \u003ccode\u003eVary\u003c/code\u003e header solve the problem, without the need of disabling versioning by default?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-05T13:36:08.626Z","updated_at":"2020-11-05T13:36:08.626Z","actor":{"username":"adamgold7","cleared":false,"url":"/adamgold7","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9735363,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e From what I understand, all current implementations of Fastify which are not explicitly using route versioning are vulnerable to denial of service, unless mitigated at proxy-level. Therefore, I do think that it's worth issuing a CVE here, after we decide on a proper fix - even if this issue requires a complex setup.\n\nThe problem is slightly different. __The DoS happens because the proxy decides to perform http caching in the absence of a Cache-Control header__. Unfortunately this is a part of the HTTP I was not aware about.\n\nAs I read in https://tools.ietf.org/html/rfc7231#section-4.3.1, it's stated that GET request are cacheable, independently of the presence of `Cache-Control`.  Apparently it is something that some CDN do, which is something I was not aware until now. This is normally not a problem but in the current case. The exact same issue would happen if some other custom header was set.\n\nMy specific issue with adding a `Vary` header automatically is that it opens up a way to receive a high amount of vulnerabilities, all of them targeting a different header that should be part put in `Vary`. I have seen this behavior first hand, I think it's impossible for a framework to fully protect their users against all possible headers they might include/use. By making versioning opt-in, we are putting it in the hands of our users.\n\nWhat makes me wonder a lot is how a Vary header would be interpreted without a matching Cache-Control header.\n\n---\n\nI think the best path forward is disable versioning by default in find-my-way v2 (possibly v1 as well).\nDocument what is would be required by the app to use versioning in Fastify v3.\n\nGet a CVE for find-my-way and Fastify. I evaluate this at https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\u0026version=3.1 with a 3.7 score.\n\n","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eFrom what I understand, all current implementations of Fastify which are not explicitly using route versioning are vulnerable to denial of service, unless mitigated at proxy-level. Therefore, I do think that it\u0026#39;s worth issuing a CVE here, after we decide on a proper fix - even if this issue requires a complex setup.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe problem is slightly different. \u003cstrong\u003eThe DoS happens because the proxy decides to perform http caching in the absence of a Cache-Control header\u003c/strong\u003e. Unfortunately this is a part of the HTTP I was not aware about.\u003c/p\u003e\n\n\u003cp\u003eAs I read in \u003ca title=\"https://tools.ietf.org/html/rfc7231#section-4.3.1\" href=\"/redirect?url=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc7231%23section-4.3.1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://tools.ietf.org/html/rfc7231#section-4.3.1\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, it\u0026#39;s stated that GET request are cacheable, independently of the presence of \u003ccode\u003eCache-Control\u003c/code\u003e.  Apparently it is something that some CDN do, which is something I was not aware until now. This is normally not a problem but in the current case. The exact same issue would happen if some other custom header was set.\u003c/p\u003e\n\n\u003cp\u003eMy specific issue with adding a \u003ccode\u003eVary\u003c/code\u003e header automatically is that it opens up a way to receive a high amount of vulnerabilities, all of them targeting a different header that should be part put in \u003ccode\u003eVary\u003c/code\u003e. I have seen this behavior first hand, I think it\u0026#39;s impossible for a framework to fully protect their users against all possible headers they might include/use. By making versioning opt-in, we are putting it in the hands of our users.\u003c/p\u003e\n\n\u003cp\u003eWhat makes me wonder a lot is how a Vary header would be interpreted without a matching Cache-Control header.\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eI think the best path forward is disable versioning by default in find-my-way v2 (possibly v1 as well).\u003cbr\u003e\nDocument what is would be required by the app to use versioning in Fastify v3.\u003c/p\u003e\n\n\u003cp\u003eGet a CVE for find-my-way and Fastify. I evaluate this at \u003ca title=\"https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\u0026amp;version=3.1\" href=\"/redirect?url=https%3A%2F%2Fnvd.nist.gov%2Fvuln-metrics%2Fcvss%2Fv3-calculator%3Fvector%3DAV%3AN%2FAC%3AH%2FPR%3AN%2FUI%3AN%2FS%3AU%2FC%3AN%2FI%3AN%2FA%3AL%26version%3D3.1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\u0026amp;version=3.1\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e with a 3.7 score.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-05T16:04:06.705Z","updated_at":"2020-11-05T16:04:06.705Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9735532,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e I can see why disabling API versioning by default could be a breaking change - but won't adding a Vary header solve the problem, without the need of disabling versioning by default?\n\nYes. Adding a `Vary` header will fix this. But adding it to `Vary` will also add a new cache key (possible multiplying entries in the cache) and in a case where one do not use versioning its preferable to just turn versioning off.","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eI can see why disabling API versioning by default could be a breaking change - but won\u0026#39;t adding a Vary header solve the problem, without the need of disabling versioning by default?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eYes. Adding a \u003ccode\u003eVary\u003c/code\u003e header will fix this. But adding it to \u003ccode\u003eVary\u003c/code\u003e will also add a new cache key (possible multiplying entries in the cache) and in a case where one do not use versioning its preferable to just turn versioning off.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-05T16:35:58.045Z","updated_at":"2020-11-05T16:35:58.045Z","actor":{"username":"trygve_lie","cleared":false,"url":"/trygve_lie","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/gvMhqhfwJokCwd5WuYZX1fAU/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9741920,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e The problem is slightly different. The DoS happens because the proxy decides to perform http caching in the absence of a Cache-Control header. Unfortunately this is a part of the HTTP I was not aware about.\n\nNot sure about this one. Having a `Cache-Control` header won't make any difference here, so I'd say that the DoS happens because there is a default unkeyed header which makes Fastify give 404. Wouldn't you agree?\n\n\u003e Get a CVE for find-my-way and Fastify. I evaluate this at https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\u0026version=3.1 with a 3.7 score.\n\nDon't you prefer waiting for a new release?\n\n\u003e My specific issue with adding a Vary header automatically is that it opens up a way to receive a high amount of vulnerabilities, all of them targeting a different header that should be part put in Vary. I have seen this behavior first hand, I think it's impossible for a framework to fully protect their users against all possible headers they might include/use. By making versioning opt-in, we are putting it in the hands of our users.\n\u003e Yes. Adding a Vary header will fix this. But adding it to Vary will also add a new cache key (possible multiplying entries in the cache) and in a case where one do not use versioning its preferable to just turn versioning off.\n\nI definitely agree that versioning should be optional. My idea was just to not turn it off by default in order to not break current implementation, adding a Vary header when versioning is turned on and letting developers turn it off should fix it in my eyes - but perhaps I'm missing something.","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eThe problem is slightly different. The DoS happens because the proxy decides to perform http caching in the absence of a Cache-Control header. Unfortunately this is a part of the HTTP I was not aware about.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNot sure about this one. Having a \u003ccode\u003eCache-Control\u003c/code\u003e header won\u0026#39;t make any difference here, so I\u0026#39;d say that the DoS happens because there is a default unkeyed header which makes Fastify give 404. Wouldn\u0026#39;t you agree?\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eGet a CVE for find-my-way and Fastify. I evaluate this at \u003ca title=\"https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\u0026amp;version=3.1\" href=\"/redirect?url=https%3A%2F%2Fnvd.nist.gov%2Fvuln-metrics%2Fcvss%2Fv3-calculator%3Fvector%3DAV%3AN%2FAC%3AH%2FPR%3AN%2FUI%3AN%2FS%3AU%2FC%3AN%2FI%3AN%2FA%3AL%26version%3D3.1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\u0026amp;version=3.1\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e with a 3.7 score.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eDon\u0026#39;t you prefer waiting for a new release?\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eMy specific issue with adding a Vary header automatically is that it opens up a way to receive a high amount of vulnerabilities, all of them targeting a different header that should be part put in Vary. I have seen this behavior first hand, I think it\u0026#39;s impossible for a framework to fully protect their users against all possible headers they might include/use. By making versioning opt-in, we are putting it in the hands of our users.\u003cbr\u003e\nYes. Adding a Vary header will fix this. But adding it to Vary will also add a new cache key (possible multiplying entries in the cache) and in a case where one do not use versioning its preferable to just turn versioning off.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI definitely agree that versioning should be optional. My idea was just to not turn it off by default in order to not break current implementation, adding a Vary header when versioning is turned on and letting developers turn it off should fix it in my eyes - but perhaps I\u0026#39;m missing something.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-06T07:58:20.287Z","updated_at":"2020-11-06T07:58:20.287Z","actor":{"username":"adamgold7","cleared":false,"url":"/adamgold7","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9742841,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e Not sure about this one. Having a Cache-Control header won't make any difference here, so I'd say that the DoS happens because there is a default unkeyed header which makes Fastify give 404. Wouldn't you agree?\n\nSetting a Cache-Control is in the developer/user responsibilities, as configuring their CDN. The assumption this feature was coded with is that CDNs and proxies would not cache GET requests without a Cache-Control header.\n\nYou are right, the problem will be there anyway. I'm merely talking about the default behavior, which should be safe.\n\n\u003e Don't you prefer waiting for a new release?\n\nThat was a list of tasks. Anyway, we'll ship a release in the next few days. Do you agree with the CVSS?\n\n\u003e I definitely agree that versioning should be optional. My idea was just to not turn it off by default in order to not break current implementation, adding a Vary header when versioning is turned on and letting developers turn it off should fix it in my eyes - but perhaps I'm missing something.\n\nIt is not the framework responsibility to manage Vary headers. Those deeply depend on the CDN/Proxy configuration as well as the application that it is using them. By making the framework responsible for managing those, we are exposing ourselves to huge amount of security vulnerabilities. I have seen first hand that accepting a vulnerability of a type would make _n_ copycats be reported.","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eNot sure about this one. Having a Cache-Control header won\u0026#39;t make any difference here, so I\u0026#39;d say that the DoS happens because there is a default unkeyed header which makes Fastify give 404. Wouldn\u0026#39;t you agree?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSetting a Cache-Control is in the developer/user responsibilities, as configuring their CDN. The assumption this feature was coded with is that CDNs and proxies would not cache GET requests without a Cache-Control header.\u003c/p\u003e\n\n\u003cp\u003eYou are right, the problem will be there anyway. I\u0026#39;m merely talking about the default behavior, which should be safe.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eDon\u0026#39;t you prefer waiting for a new release?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThat was a list of tasks. Anyway, we\u0026#39;ll ship a release in the next few days. Do you agree with the CVSS?\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eI definitely agree that versioning should be optional. My idea was just to not turn it off by default in order to not break current implementation, adding a Vary header when versioning is turned on and letting developers turn it off should fix it in my eyes - but perhaps I\u0026#39;m missing something.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIt is not the framework responsibility to manage Vary headers. Those deeply depend on the CDN/Proxy configuration as well as the application that it is using them. By making the framework responsible for managing those, we are exposing ourselves to huge amount of security vulnerabilities. I have seen first hand that accepting a vulnerability of a type would make \u003cu\u003en\u003c/u\u003e copycats be reported.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-06T08:35:35.330Z","updated_at":"2020-11-06T08:35:35.330Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9743861,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e It is not the framework responsibility to manage Vary headers. Those deeply depend on the CDN/Proxy configuration as well as the application that it is using them. By making the framework responsible for managing those, we are exposing ourselves to huge amount of security vulnerabilities. I have seen first hand that accepting a vulnerability of a type would make n copycats be reported.\n\nMakes sense.\n\nI would say a 5.9 score is more accurate, changing the availability to high:\nhttps://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H\u0026version=3.1 ","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eIt is not the framework responsibility to manage Vary headers. Those deeply depend on the CDN/Proxy configuration as well as the application that it is using them. By making the framework responsible for managing those, we are exposing ourselves to huge amount of security vulnerabilities. I have seen first hand that accepting a vulnerability of a type would make n copycats be reported.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eMakes sense.\u003c/p\u003e\n\n\u003cp\u003eI would say a 5.9 score is more accurate, changing the availability to high:\u003cbr\u003e\n\u003ca title=\"https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H\u0026amp;version=3.1\" href=\"/redirect?url=https%3A%2F%2Fnvd.nist.gov%2Fvuln-metrics%2Fcvss%2Fv3-calculator%3Fvector%3DAV%3AN%2FAC%3AH%2FPR%3AN%2FUI%3AN%2FS%3AU%2FC%3AN%2FI%3AN%2FA%3AH%26version%3D3.1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H\u0026amp;version=3.1\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e \u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-06T09:45:46.870Z","updated_at":"2020-11-06T09:46:43.596Z","actor":{"username":"adamgold7","cleared":false,"url":"/adamgold7","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9745723,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Tomas and myself have decided to go for a slightly different fix/strategy that does not require a breaking change.\n\nWe will modify find-my-way so that versioning is enabled at the first use of a versioned route. In this way it would solve the vulnerability for users that do not use versioning in their APIs, while keeping things working for users that do.\n\nWe'll also update the documentation accordingly clearly noting that they will need to add Vary headers or properly configure their CDN.","markdown_message":"\u003cp\u003eTomas and myself have decided to go for a slightly different fix/strategy that does not require a breaking change.\u003c/p\u003e\n\n\u003cp\u003eWe will modify find-my-way so that versioning is enabled at the first use of a versioned route. In this way it would solve the vulnerability for users that do not use versioning in their APIs, while keeping things working for users that do.\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ll also update the documentation accordingly clearly noting that they will need to add Vary headers or properly configure their CDN.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-06T11:45:12.497Z","updated_at":"2020-11-06T11:45:12.497Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9749896,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"find-my-way@3.0.5 and find-my-way@2.2.5 are out with the fix.","markdown_message":"\u003cp\u003e\u003ca title=\"find-my-way@3.0.5\" href=\"mailto:find-my-way@3.0.5\" rel=\"nofollow noopener noreferrer\"\u003efind-my-way@3.0.5\u003c/a\u003e and \u003ca title=\"find-my-way@2.2.5\" href=\"mailto:find-my-way@2.2.5\" rel=\"nofollow noopener noreferrer\"\u003efind-my-way@2.2.5\u003c/a\u003e are out with the fix.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-06T17:57:08.371Z","updated_at":"2020-11-06T17:57:08.371Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9750165,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The Fastify documentation has been [updated](https://github.com/fastify/fastify/pull/2679) as well.","markdown_message":"\u003cp\u003eThe Fastify documentation has been \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Ffastify%2Ffastify%2Fpull%2F2679\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eupdated\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e as well.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-06T18:24:09.585Z","updated_at":"2020-11-06T18:24:09.585Z","actor":{"username":"delvedor","cleared":false,"url":"/delvedor","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9761606,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@mcollina Great solution!\n\nCVE-2020-7764 has been assigned to a vulnerability in `find-my-way`: https://snyk.io/vuln/SNYK-JS-FINDMYWAY-1038269","markdown_message":"\u003cp\u003e\u003ca href=\"/mcollina\"\u003e@mcollina\u003c/a\u003e Great solution!\u003c/p\u003e\n\n\u003cp\u003eCVE-2020-7764 has been assigned to a vulnerability in \u003ccode\u003efind-my-way\u003c/code\u003e: \u003ca title=\"https://snyk.io/vuln/SNYK-JS-FINDMYWAY-1038269\" href=\"/redirect?url=https%3A%2F%2Fsnyk.io%2Fvuln%2FSNYK-JS-FINDMYWAY-1038269\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://snyk.io/vuln/SNYK-JS-FINDMYWAY-1038269\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-08T16:49:22.114Z","updated_at":"2020-11-08T17:03:15.901Z","actor":{"username":"adamgold7","cleared":false,"url":"/adamgold7","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9782134,"is_internal":false,"editable":false,"type":"Activities::CveIdAdded","message":"","markdown_message":"","automated_response":false,"created_at":"2020-11-10T16:54:30.236Z","updated_at":"2020-11-10T16:54:30.236Z","cve_ids":["CVE-2020-7764"],"actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9782137,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":null,"markdown_message":"","automated_response":false,"created_at":"2020-11-10T16:55:08.952Z","updated_at":"2020-11-10T16:55:08.952Z","additional_data":{"old_severity":null,"new_severity":"Medium (5.9)","old_severity_id":null,"new_severity_id":902205},"actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9782140,"is_internal":false,"editable":false,"type":"Activities::ReportVulnerabilityTypesUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2020-11-10T16:55:40.660Z","updated_at":"2020-11-10T16:55:40.660Z","additional_data":{"added_weaknesses":[{"id":86,"name":"HTTP Request Smuggling"}],"removed_weaknesses":[{"id":48,"name":"Denial of Service"}]},"actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9782142,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2020-11-10T16:55:55.736Z","updated_at":"2020-11-10T16:55:55.736Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"trygve_lie","url":"/trygve_lie"},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9782144,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-11-10T16:56:04.313Z","updated_at":"2020-11-10T16:56:04.313Z","first_to_agree":true,"actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9782162,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This is elegible for a reward. Would you like to receive it  Trygve?","markdown_message":"\u003cp\u003eThis is elegible for a reward. Would you like to receive it  Trygve?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-10T16:58:36.522Z","updated_at":"2020-11-10T16:58:36.522Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10065276,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-12-10T16:56:12.076Z","updated_at":"2020-12-10T16:56:12.076Z","actor":{"url":"/nodejs-ecosystem","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Node.js third-party modules"}},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10071988,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e This is elegible for a reward. Would you like to receive it Trygve?\n\nI honestly did not do much here. I personally would prefer that the reward is given to you who worked on fixing the issue or kept to support work and security in this open source project further.\n\nI would though like to request that the Hacker One user https://hackerone.com/yousteen is added to, or given full credit for, this CVE. My reason for this is because he is the reporter of filing a security issue in my employers (FINN.no) Hacker One bounty program which down the road lead to me detecting this. My employer have two domains where we have Fastly serving the content. These two domains have services behind them where one is built on top of Fastify. A cache poisoning security issue was reported to affect both domains and in our end the issue was tracked down to being mainly caused by a poorly configured Fastly. In our end the reported security issue in our Hacker One report was fixed with a reconfiguration of Fastly.\n\nI did though do a little bit more digging in Fastify and discovered that there was no option to turn off versioning which made me file a question here to ask if this was a concern or not which lead to a code change in your end. I would like to repeat that I find it a bit difficult to justify that this was a security issue in Fastify since a clear fix is by configuring the http cache one might use in front of Fastify.\n\nI will leave it up to you to decide if `yousteen` should be added to, or given full credit for, this CVE.","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eThis is elegible for a reward. Would you like to receive it Trygve?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI honestly did not do much here. I personally would prefer that the reward is given to you who worked on fixing the issue or kept to support work and security in this open source project further.\u003c/p\u003e\n\n\u003cp\u003eI would though like to request that the Hacker One user \u003ca title=\"https://hackerone.com/yousteen\" href=\"https://hackerone.com/yousteen\"\u003ehttps://hackerone.com/yousteen\u003c/a\u003e is added to, or given full credit for, this CVE. My reason for this is because he is the reporter of filing a security issue in my employers (FINN.no) Hacker One bounty program which down the road lead to me detecting this. My employer have two domains where we have Fastly serving the content. These two domains have services behind them where one is built on top of Fastify. A cache poisoning security issue was reported to affect both domains and in our end the issue was tracked down to being mainly caused by a poorly configured Fastly. In our end the reported security issue in our Hacker One report was fixed with a reconfiguration of Fastly.\u003c/p\u003e\n\n\u003cp\u003eI did though do a little bit more digging in Fastify and discovered that there was no option to turn off versioning which made me file a question here to ask if this was a concern or not which lead to a code change in your end. I would like to repeat that I find it a bit difficult to justify that this was a security issue in Fastify since a clear fix is by configuring the http cache one might use in front of Fastify.\u003c/p\u003e\n\n\u003cp\u003eI will leave it up to you to decide if \u003ccode\u003eyousteen\u003c/code\u003e should be added to, or given full credit for, this CVE.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-12-11T11:59:24.440Z","updated_at":"2020-12-11T11:59:24.440Z","actor":{"username":"trygve_lie","cleared":false,"url":"/trygve_lie","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/gvMhqhfwJokCwd5WuYZX1fAU/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10146386,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@adamgold7 could you please update the CVE to mention yousteen? Thanks.","markdown_message":"\u003cp\u003e\u003ca href=\"/adamgold7\"\u003e@adamgold7\u003c/a\u003e could you please update the CVE to mention yousteen? Thanks.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-12-18T18:19:57.661Z","updated_at":"2020-12-18T18:19:57.661Z","actor":{"username":"mcollina","cleared":false,"url":"/mcollina","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/230/980/61a26e6fa4ec002fca494b3b7b43aa251eef3453_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10146434,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2020-12-18T18:27:09.364Z","updated_at":"2020-12-18T18:27:09.364Z","actor":{"username":"youstin","cleared":false,"url":"/youstin","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/h0mbrakd6wloyemt5b2eizdchd40/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5?response-content-disposition=inline%3B%20filename%3D%22an4voxE_700b.jpg%22%3B%20filename%2A%3DUTF-8%27%27an4voxE_700b.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQUELEOUFM%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T041226Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIEHcXLEQPeJ1NbEZdJXi%2BjDjW%2Brvnvj%2FJxEOqy4HmeuwAiBgfPiwnDW5VOmXCmdoSe8v4i4f3S1PrDzJHYj%2FK50vXSq0AwhTEAEaDDAxMzYxOTI3NDg0OSIMaRbp4M0ZZ3Ux0slgKpEDvGtg639OjuV4555YTXv0v1%2B3YeZYF7O3onBjNlgrOhYRA2lprfPhUel71T%2FX8MbclnF3ZoJTRbh1SdgGfYOStDOta4s40bALV9ZmACLawkbdV5j9rxJ9pCGv21GYDtjHl%2BVgYvqeUwT5NO%2BGzBJrB503UxwAbns4iOwLRos1I4mDZe8lyTK4OMOf2a1zF%2BFTTlSMuC7w658c6qUWnC5%2BArvYu5FSuBUNrnkIR0rG7uhSI8ku8glS3yPDiQjxIRB%2F6CwvXzaA%2B2%2FNSYCsbFFNan5Z3Qv3Pw0xINQ1V2xkEBrKDV2pJ42QAmmq7rgxA7nqrBru1GFYFrIkNUKpGw7I9OnBd81CnAxR9SYAoa%2B6sQ2cYGkXqOUhL0i6m1jBJc%2FiP11Lb%2FbVovAvfjqWsjLoQGLW6ZOZXFlq4Bb6qVcqO%2FV489Jh7LKgvf31VImkKBHPJZwDVAxn2q5yPm6TakzKJPvE4pDzpxa7Nw3oQ8Knf4I3qGhuif9BXRI3vu%2BhplC7ximOU4kG0vG2MI8F3rK2Xxow8Y6q%2FwU67AGCwlwk%2Fh50Mwp%2FofR%2Be%2BD5LiLGKMPNwxJJuYfv0E3oKNIT9wTCjV1Id28if6r3Zw9qtUxsnDKkDk%2B14l2fH9vPhI8cfp9BDEEHlfIIuWpITf0EUwAKcW%2BaKDKVRx%2FLb6InewTMZ%2B%2FgFi6gBqHlzu6MCAeys7vQVufF0akHiMP%2BiPeXfKCLU%2F4r9BeqnyEJqvrxabHfVXrZG5WsK5OLFxwqz4j4dpwzxocYRpH4zbbfII18jPfcKEQtcvg9zCzIaEfzIbLATRocx3PcEQLLDsdGuqcKyAv9S5VdHnJUqfDX%2BAjGLQcwxhdjmh4WHg%3D%3D\u0026X-Amz-Signature=2368e55b2b0682ce59b7516158f8ac9a462e6d3aa3dc53beccfa5368ed4ecc73"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10162837,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yes, I have updated our database and issued a request to Mitre.","markdown_message":"\u003cp\u003eYes, I have updated our database and issued a request to Mitre.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-12-21T09:57:44.162Z","updated_at":"2020-12-21T09:57:54.547Z","actor":{"username":"adamgold7","cleared":false,"url":"/adamgold7","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10163353,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks a lot :)","markdown_message":"\u003cp\u003eThanks a lot :)\u003c/p\u003e\n","automated_response":false,"created_at":"2020-12-21T10:43:29.880Z","updated_at":"2020-12-21T10:43:29.880Z","actor":{"username":"trygve_lie","cleared":false,"url":"/trygve_lie","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/gvMhqhfwJokCwd5WuYZX1fAU/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}