{"id":412673,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MTI2NzM=","url":"https://hackerone.com/reports/412673","title":"XML hash collision DoS vulnerability in Python's xml.etree module","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2018-09-22T06:36:27.255Z","submitted_at":"2018-09-22T06:36:27.255Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"tiran","url":"/tiran","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":27,"url":"https://hackerone.com/ibb-python","handle":"ibb-python","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Python (IBB)","twitter_handle":"","website":"http://www.python.org/news/security","about":""}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2018-10-31T23:39:22.011Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2018-10-01T23:29:42.909Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Python's standard library uses libexpat to parse XML. Internally the expat library has a hash table implementation to efficiently store and lookup DTD elements like entities, elements, attributes, etc. Hash tables are potentially vulnerable to hash collision Denial-of-Service attacks, which turns a hash insert or lookup from O(1) best case scenario to O(n) worst case scenario. To mitigate hash collision attacks, expat introduced hash randomization.\n\nHash randomization depends on a good, unpredictable seed. The expat library either uses the operating systems CSPRNG or expects the application to set a good hash seed with ``XML_SetHashSalt()`` call. Python's standard library decided to go for ``XML_SetHashSalt()``. Due to an oversight, ``XML_SetHashSalt()`` was only used in the ``pyexpat`` module, but not in the C-accelerator module ``_elementtree`` for ``xml.etree`` subpackage. As a consequence, the ``xml.etree`` parser used a low entropy and potentially predictable RNG on all platforms except Windows and very recent Linux versions with ``getrandom()`` syscall in libc. Since Python's autoconf system doesn't define ``XML_DEV_URANDOM``, ``/dev/urandom`` wasn't used either. Further more expat's internal error check was disabled with ``XML_POOR_ENTROPY=1``, too.\n\n## Bug report\nRed Hat Product Security has assigned CVE-2018-14647 for this issue. The bug is tracked in upstream ticket https://bugs.python.org/issue34623 and will be fixed in the next releases of Python\n\n## Resources \n* https://bugs.python.org/issue14234\n* https://bugs.python.org/issue30947\n* https://bugs.python.org/issue34623\n* https://libexpat.github.io/doc/expat-internals-the-hash-tables/\n\n## Impact\n\nAn attack can abuse the vulnerability to mount a hash collision Denial-of-Service attack with carefully crafted XML data with a large DTD. Any server or client that parses XML, is potentially vulnerable.","vulnerability_information_html":"\u003cp\u003ePython\u0026#39;s standard library uses libexpat to parse XML. Internally the expat library has a hash table implementation to efficiently store and lookup DTD elements like entities, elements, attributes, etc. Hash tables are potentially vulnerable to hash collision Denial-of-Service attacks, which turns a hash insert or lookup from O(1) best case scenario to O(n) worst case scenario. To mitigate hash collision attacks, expat introduced hash randomization.\u003c/p\u003e\n\n\u003cp\u003eHash randomization depends on a good, unpredictable seed. The expat library either uses the operating systems CSPRNG or expects the application to set a good hash seed with \u003ccode\u003eXML_SetHashSalt()\u003c/code\u003e call. Python\u0026#39;s standard library decided to go for \u003ccode\u003eXML_SetHashSalt()\u003c/code\u003e. Due to an oversight, \u003ccode\u003eXML_SetHashSalt()\u003c/code\u003e was only used in the \u003ccode\u003epyexpat\u003c/code\u003e module, but not in the C-accelerator module \u003ccode\u003e_elementtree\u003c/code\u003e for \u003ccode\u003exml.etree\u003c/code\u003e subpackage. As a consequence, the \u003ccode\u003exml.etree\u003c/code\u003e parser used a low entropy and potentially predictable RNG on all platforms except Windows and very recent Linux versions with \u003ccode\u003egetrandom()\u003c/code\u003e syscall in libc. Since Python\u0026#39;s autoconf system doesn\u0026#39;t define \u003ccode\u003eXML_DEV_URANDOM\u003c/code\u003e, \u003ccode\u003e/dev/urandom\u003c/code\u003e wasn\u0026#39;t used either. Further more expat\u0026#39;s internal error check was disabled with \u003ccode\u003eXML_POOR_ENTROPY=1\u003c/code\u003e, too.\u003c/p\u003e\n\n\u003ch2 id=\"bug-report\"\u003eBug report\u003c/h2\u003e\n\n\u003cp\u003eRed Hat Product Security has assigned CVE-2018-14647 for this issue. The bug is tracked in upstream ticket \u003ca title=\"https://bugs.python.org/issue34623\" href=\"/redirect?url=https%3A%2F%2Fbugs.python.org%2Fissue34623\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.python.org/issue34623\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e and will be fixed in the next releases of Python\u003c/p\u003e\n\n\u003ch2 id=\"resources\"\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca title=\"https://bugs.python.org/issue14234\" href=\"/redirect?url=https%3A%2F%2Fbugs.python.org%2Fissue14234\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.python.org/issue14234\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca title=\"https://bugs.python.org/issue30947\" href=\"/redirect?url=https%3A%2F%2Fbugs.python.org%2Fissue30947\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.python.org/issue30947\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca title=\"https://bugs.python.org/issue34623\" href=\"/redirect?url=https%3A%2F%2Fbugs.python.org%2Fissue34623\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.python.org/issue34623\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca title=\"https://libexpat.github.io/doc/expat-internals-the-hash-tables/\" href=\"/redirect?url=https%3A%2F%2Flibexpat.github.io%2Fdoc%2Fexpat-internals-the-hash-tables%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://libexpat.github.io/doc/expat-internals-the-hash-tables/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eAn attack can abuse the vulnerability to mount a hash collision Denial-of-Service attack with carefully crafted XML data with a large DTD. Any server or client that parses XML, is potentially vulnerable.\u003c/p\u003e\n","weakness":{"id":48,"name":"Denial of Service"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2018-10-31T23:29:43.038Z","allow_singular_disclosure_after":-68192644.97783543,"singular_disclosure_allowed":true,"vote_count":9,"voters":["sameerphad72","mygf","eveeez","prob","cryptographer","spetr0x","script_py","reppie","marshalsimon2"],"severity":{"rating":"low","score":3.7,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"high","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"none","integrity":"none","availability":"low"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":3417228,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"Hi @tiran,\n\nThe impact requirements for the @ibb-python program are the following:\n\n\u003e Only critical vulnerabilities that demonstrate complete compromise of the system's integrity or confidentiality are eligible for a bounty - typically Arbitrary Code Execution or equivalent impact. While we encourage you to submit all potential issues, lower severity issues are not in scope at this time.\n\nWhile we appreciate your report, it does not appear that this issue meets the impact requirement to be eligible for an IBB payout. ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/tiran\"\u003e@tiran\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThe impact requirements for the \u003ca href=\"/ibb-python\"\u003e@ibb-python\u003c/a\u003e program are the following:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eOnly critical vulnerabilities that demonstrate complete compromise of the system\u0026#39;s integrity or confidentiality are eligible for a bounty - typically Arbitrary Code Execution or equivalent impact. While we encourage you to submit all potential issues, lower severity issues are not in scope at this time.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhile we appreciate your report, it does not appear that this issue meets the impact requirement to be eligible for an IBB payout. \u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-01T23:29:23.240Z","updated_at":"2018-10-01T23:29:23.240Z","actor":{"url":"/ibb-python","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Python (IBB)"}},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3417229,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-01T23:29:36.542Z","updated_at":"2018-10-01T23:29:36.542Z","actor":{"username":"bonjarber","cleared":false,"url":"/bonjarber","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/cs3GAVsndJ7brWzkPmgMJDg5/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"tiran","url":"/tiran"},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3417230,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-01T23:29:42.981Z","updated_at":"2018-10-01T23:29:42.981Z","first_to_agree":true,"actor":{"username":"bonjarber","cleared":false,"url":"/bonjarber","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/cs3GAVsndJ7brWzkPmgMJDg5/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3567714,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-31T23:39:22.321Z","updated_at":"2018-10-31T23:39:22.321Z","actor":{"url":"/ibb-python","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Python (IBB)"}},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}