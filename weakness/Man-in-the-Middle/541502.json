{"id":541502,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81NDE1MDI=","url":"https://hackerone.com/reports/541502","title":"[https-proxy-agent] Socket returned without TLS upgrade on non-200 CONNECT response, allowing request data to be sent over unencrypted connection","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2019-04-17T19:20:28.876Z","submitted_at":"2019-04-17T19:20:28.876Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"kadler15","url":"/kadler15","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/584/250/fa85e1dd3a7776efef9277c99178cadb5fe2efe1_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":23949,"url":"https://hackerone.com/nodejs-ecosystem","handle":"nodejs-ecosystem","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Node.js third-party modules","twitter_handle":"","website":"https://nodejs.org/en/security/","about":"This program is used to handle vulnerabilities in the Node.js ecosystem."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-09-25T08:21:57.569Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-08-26T08:21:57.268Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I would like to report a man-in-the-middle vulnerability in `https-proxy-agent`.\nIt allows an attacker with access to the network firewall or targeted proxy server to obtain secrets (e.g. a HTTP basic auth header) from the client trying to send HTTPS traffic via HTTP proxy.\n\n# Module\n\n**module name:** `https-proxy-agent`\n**version:** 2.2.1\n**npm page:** `https://www.npmjs.com/package/https-proxy-agent`\n\n## Module Description\n\n\u003e This module provides an http.Agent implementation that connects to a specified HTTP or HTTPS proxy server, and can be used with the built-in https module.\n\n## Module Stats\n\n4314908 downloads in the last week\n\n# Vulnerability\n\n## Vulnerability Description\n\nWhen targeting a HTTP proxy, `https-proxy-agent` [opens a socket](https://github.com/TooTallNate/node-https-proxy-agent/blob/2.2.1/index.js#L77) to the proxy, and sends the proxy server a [CONNECT request](https://github.com/TooTallNate/node-https-proxy-agent/blob/2.2.1/index.js#L203). E.g.:\n\n```\nCONNECT www.google.com:443 HTTP/1.1\nHost: www.google.com\nConnection: close\n```\n\nIf the proxy server responds with 200 and the client is targeting a secure endpoint, `https-proxy-agent` [TLS-upgrades](https://github.com/TooTallNate/node-https-proxy-agent/blob/2.2.1/index.js#L154) the socket before returning it for use. This is normal and expected.\n\nHowever, if the proxy server (or firewall blocking the request) responds with something other than a 200, `https-proxy-agent` incorrectly [returns the socket](https://github.com/TooTallNate/node-https-proxy-agent/blob/2.2.1/index.js#L170) without any TLS upgrade. Companion library `agent-base` [passes the socket off](https://github.com/TooTallNate/node-agent-base/blob/4.2.1/index.js#L141) to Node HTTP internals, which will write the pending request data to the socket. E.g.:\n\n```\nGET / HTTP/1.1\nHost: www.google.com\nAuthorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=\nConnection: close\n```\n\nThe request data, which may contain basic auth credentials or other secrets, is sent over an unencrypted connection. An attacker with access to tcpdump contents at the firewall or proxy server can steal these secrets and impersonate the client.\n\n## Steps To Reproduce:\n\nRun a simple web server on port 80 that returns 403 in response to any request:\n```bash\n#!/bin/bash\nwhile true; do\n  echo -e \"HTTP/1.1 403 FORBIDDEN\\r\\n$(date)\\r\\n\\r\\n\u003ch1\u003ehello world from $(hostname) on $(date)\u003c/h1\u003e\" |  nc -vl 80;\ndone\n```\n\nSend a a request to a remote server using the simple web server as a proxy:\n```javascript\nvar url = require('url');\nvar https = require('https');\nvar HttpsProxyAgent = require('https-proxy-agent');\n\nvar proxyOpts = url.parse('http://127.0.0.1:80');\nvar opts = url.parse('https://www.google.com');\nvar agent = new HttpsProxyAgent(proxyOpts);\nopts.agent = agent;\nopts.auth = 'username:password';\nhttps.get(opts);\n```\n\nLogs observed on the simple web server:\n```\nCONNECT www.google.com:443 HTTP/1.1\nHost: www.google.com\nConnection: close\n\nGET / HTTP/1.1\nHost: www.google.com\nAuthorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=\nConnection: close\n```\n\n## Patch\n\nChanges in a [commit from 2013](https://github.com/TooTallNate/node-https-proxy-agent/commit/ae03c687bd5667e4088f13bd1eda6228cb10f62d) to buffer and replay incoming proxy data in case of error should be reconsidered. Maybe the replaying can still be done when targeting an insecure endpoint, but it seems unsafe to return the socket without TLS upgrade in the secure endpoint case. It would be better to do something like:\n\n```javascript\nif (200 == statusCode) {\n  // Happy path\n} else if (secureEndpoint) {\n  cleanup();\n  socket.destroy();\n  fn(new Error(`Could not establish TLS connection. Status code: ${statusCode}`));\n} else {\n  // Replay on insecure endpoint\n}\n```\n\nThere may also be a way for the agent to replay the incoming proxy data on and then destroy the socket before returning it.\n\n## Supporting Material/References:\n\n- Ubuntu 16.04 / Linux 4.15.0-43\n- Node 10.15.3\n- npm 6.4.1\n- gnu-netcat 0.7.1\n\n# Wrap up\n\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N\n\n## Impact\n\nThe vulnerability allows a determined attacker with access to the network firewall or targeted proxy server to see plaintext request data, which could expose auth credentials or other secrets.","vulnerability_information_html":"\u003cp\u003eI would like to report a man-in-the-middle vulnerability in \u003ccode\u003ehttps-proxy-agent\u003c/code\u003e.\u003cbr\u003e\nIt allows an attacker with access to the network firewall or targeted proxy server to obtain secrets (e.g. a HTTP basic auth header) from the client trying to send HTTPS traffic via HTTP proxy.\u003c/p\u003e\n\n\u003ch1 id=\"module\"\u003eModule\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003emodule name:\u003c/strong\u003e \u003ccode\u003ehttps-proxy-agent\u003c/code\u003e\u003cbr\u003e\n\u003cstrong\u003eversion:\u003c/strong\u003e 2.2.1\u003cbr\u003e\n\u003cstrong\u003enpm page:\u003c/strong\u003e \u003ccode\u003ehttps://www.npmjs.com/package/https-proxy-agent\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"module-description\"\u003eModule Description\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThis module provides an http.Agent implementation that connects to a specified HTTP or HTTPS proxy server, and can be used with the built-in https module.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"module-stats\"\u003eModule Stats\u003c/h2\u003e\n\n\u003cp\u003e4314908 downloads in the last week\u003c/p\u003e\n\n\u003ch1 id=\"vulnerability\"\u003eVulnerability\u003c/h1\u003e\n\n\u003ch2 id=\"vulnerability-description\"\u003eVulnerability Description\u003c/h2\u003e\n\n\u003cp\u003eWhen targeting a HTTP proxy, \u003ccode\u003ehttps-proxy-agent\u003c/code\u003e \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FTooTallNate%2Fnode-https-proxy-agent%2Fblob%2F2.2.1%2Findex.js%23L77\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eopens a socket\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to the proxy, and sends the proxy server a \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FTooTallNate%2Fnode-https-proxy-agent%2Fblob%2F2.2.1%2Findex.js%23L203\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eCONNECT request\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. E.g.:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eCONNECT www.google.com:443 HTTP/1.1\nHost: www.google.com\nConnection: close\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf the proxy server responds with 200 and the client is targeting a secure endpoint, \u003ccode\u003ehttps-proxy-agent\u003c/code\u003e \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FTooTallNate%2Fnode-https-proxy-agent%2Fblob%2F2.2.1%2Findex.js%23L154\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eTLS-upgrades\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e the socket before returning it for use. This is normal and expected.\u003c/p\u003e\n\n\u003cp\u003eHowever, if the proxy server (or firewall blocking the request) responds with something other than a 200, \u003ccode\u003ehttps-proxy-agent\u003c/code\u003e incorrectly \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FTooTallNate%2Fnode-https-proxy-agent%2Fblob%2F2.2.1%2Findex.js%23L170\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ereturns the socket\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e without any TLS upgrade. Companion library \u003ccode\u003eagent-base\u003c/code\u003e \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FTooTallNate%2Fnode-agent-base%2Fblob%2F4.2.1%2Findex.js%23L141\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003epasses the socket off\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to Node HTTP internals, which will write the pending request data to the socket. E.g.:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eGET / HTTP/1.1\nHost: www.google.com\nAuthorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=\nConnection: close\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe request data, which may contain basic auth credentials or other secrets, is sent over an unencrypted connection. An attacker with access to tcpdump contents at the firewall or proxy server can steal these secrets and impersonate the client.\u003c/p\u003e\n\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps To Reproduce:\u003c/h2\u003e\n\n\u003cp\u003eRun a simple web server on port 80 that returns 403 in response to any request:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\u003cspan class=\"k\"\u003ewhile \u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\n  \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;HTTP/1.1 403 FORBIDDEN\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\\n\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003edate\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\\n\\r\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;h1\u0026gt;hello world from \u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003ehostname\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e on \u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003edate\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;/h1\u0026gt;\u0026quot;\u003c/span\u003e |  nc \u003cspan class=\"nt\"\u003e-vl\u003c/span\u003e 80\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSend a a request to a remote server using the simple web server as a proxy:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eurl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eurl\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ehttps\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehttps\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eHttpsProxyAgent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehttps-proxy-agent\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eproxyOpts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehttp://127.0.0.1:80\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eopts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehttps://www.google.com\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eagent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eHttpsProxyAgent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eproxyOpts\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eagent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eagent\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eauth\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eusername:password\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003ehttps\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLogs observed on the simple web server:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eCONNECT www.google.com:443 HTTP/1.1\nHost: www.google.com\nConnection: close\n\nGET / HTTP/1.1\nHost: www.google.com\nAuthorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=\nConnection: close\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"patch\"\u003ePatch\u003c/h2\u003e\n\n\u003cp\u003eChanges in a \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FTooTallNate%2Fnode-https-proxy-agent%2Fcommit%2Fae03c687bd5667e4088f13bd1eda6228cb10f62d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ecommit from 2013\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to buffer and replay incoming proxy data in case of error should be reconsidered. Maybe the replaying can still be done when targeting an insecure endpoint, but it seems unsafe to return the socket without TLS upgrade in the secure endpoint case. It would be better to do something like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e200\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nx\"\u003estatusCode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Happy path\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esecureEndpoint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecleanup\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003esocket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003edestroy\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003efn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nb\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`Could not establish TLS connection. Status code: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003estatusCode\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Replay on insecure endpoint\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere may also be a way for the agent to replay the incoming proxy data on and then destroy the socket before returning it.\u003c/p\u003e\n\n\u003ch2 id=\"supporting-material-references\"\u003eSupporting Material/References:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUbuntu 16.04 / Linux 4.15.0-43\u003c/li\u003e\n\u003cli\u003eNode 10.15.3\u003c/li\u003e\n\u003cli\u003enpm 6.4.1\u003c/li\u003e\n\u003cli\u003egnu-netcat 0.7.1\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"wrap-up\"\u003eWrap up\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eI contacted the maintainer to let them know: N\u003c/li\u003e\n\u003cli\u003eI opened an issue in the related repository: N\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eThe vulnerability allows a determined attacker with access to the network firewall or targeted proxy server to see plaintext request data, which could expose auth credentials or other secrets.\u003c/p\u003e\n","weakness":{"id":30,"name":"Man-in-the-Middle"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-09-25T08:21:57.379Z","allow_singular_disclosure_after":-39822886.60967862,"singular_disclosure_allowed":true,"vote_count":4,"voters":["sameerphad72","praveen211","2801881804","asdasdasdqqqqqqqqqqqqqqqqqqqqq"],"severity":{"rating":"medium","score":6.1,"author_type":"User","metrics":{"attack_vector":"adjacent","attack_complexity":"high","privileges_required":"none","user_interaction":"none","scope":"changed","confidentiality":"high","integrity":"none","availability":"none"}},"structured_scope":{"databaseId":6412,"asset_type":"SOURCE_CODE","asset_identifier":"https-proxy-agent","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4586440,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello,\nThanks for reporting this to us. Someone will quickly look at this report and triage it.","markdown_message":"\u003cp\u003eHello,\u003cbr\u003e\nThanks for reporting this to us. Someone will quickly look at this report and triage it.\u003c/p\u003e\n","automated_response":true,"created_at":"2019-04-17T19:20:34.661Z","updated_at":"2019-04-17T19:20:34.661Z","actor":{"username":"vdeturckheim_dev","cleared":false,"url":"/vdeturckheim_dev","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":4629713,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@nrajlich","markdown_message":"\u003cp\u003e\u003ca href=\"/nrajlich\"\u003e@nrajlich\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-23T20:47:40.468Z","updated_at":"2019-04-23T20:47:40.468Z","actor":{"username":"kadler15","cleared":false,"url":"/kadler15","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/584/250/fa85e1dd3a7776efef9277c99178cadb5fe2efe1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4809580,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"Hello @kadler15,\n\nYour time and effort in submitting this report are much appreciated, however, could you please let me know if you are assuming that the request is being made through HTTP? if so I don't think this qualifies as an issue, since the packets will be in plaintext already and what has been reported here doesn't make it any worst if an attacker is already in between.\n\nYour input is much appreciated.\n\nRegards,\n@nasr0x01","markdown_message":"\u003cp\u003eHello \u003ca href=\"/kadler15\"\u003e@kadler15\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eYour time and effort in submitting this report are much appreciated, however, could you please let me know if you are assuming that the request is being made through HTTP? if so I don\u0026#39;t think this qualifies as an issue, since the packets will be in plaintext already and what has been reported here doesn\u0026#39;t make it any worst if an attacker is already in between.\u003c/p\u003e\n\n\u003cp\u003eYour input is much appreciated.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\n\u003ca href=\"/nasr0x01\"\u003e@nasr0x01\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-10T13:03:51.977Z","updated_at":"2019-05-10T13:03:51.977Z","actor":{"username":"nasr0x01","cleared":false,"url":"/nasr0x01","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/386/674/ec2e2c825a554851c42c122ffd61aa8f18b08174_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4809952,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Hi @nasr0x01,\n\nNo, I'm exclusively using the `https` module, and targeting secure web servers. Sorry if my example in steps to reproduce is misleading -- ignore the use of port 80... port 3128 might have been clearer. The test server in the example is a mock proxy server. Note that the client-side logic uses `https.get`. E.g.:\n\n```javascript\nvar proxyOpts = url.parse('http://127.0.0.1:3128'); # Mock proxy server\nvar opts = url.parse('https://www.google.com'); # Defaults to port 443\n...\nhttps.get(opts);\n```\n\nMy expectation when using `https` for requests is the hostname is plaintext, but headers, payload and URL path are encrypted.\n\nThanks,\n@kadler15\n","markdown_message":"\u003cp\u003eHi \u003ca href=\"/nasr0x01\"\u003e@nasr0x01\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eNo, I\u0026#39;m exclusively using the \u003ccode\u003ehttps\u003c/code\u003e module, and targeting secure web servers. Sorry if my example in steps to reproduce is misleading -- ignore the use of port 80... port 3128 might have been clearer. The test server in the example is a mock proxy server. Note that the client-side logic uses \u003ccode\u003ehttps.get\u003c/code\u003e. E.g.:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eproxyOpts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehttp://127.0.0.1:3128\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"err\"\u003e#\u003c/span\u003e \u003cspan class=\"nx\"\u003eMock\u003c/span\u003e \u003cspan class=\"nx\"\u003eproxy\u003c/span\u003e \u003cspan class=\"nx\"\u003eserver\u003c/span\u003e\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eopts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ehttps://www.google.com\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"err\"\u003e#\u003c/span\u003e \u003cspan class=\"nx\"\u003eDefaults\u003c/span\u003e \u003cspan class=\"nx\"\u003eto\u003c/span\u003e \u003cspan class=\"nx\"\u003eport\u003c/span\u003e \u003cspan class=\"mi\"\u003e443\u003c/span\u003e\n\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"nx\"\u003ehttps\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"kd\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eopts\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMy expectation when using \u003ccode\u003ehttps\u003c/code\u003e for requests is the hostname is plaintext, but headers, payload and URL path are encrypted.\u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\n\u003ca href=\"/kadler15\"\u003e@kadler15\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-10T14:39:36.694Z","updated_at":"2019-05-10T14:43:44.056Z","actor":{"username":"kadler15","cleared":false,"url":"/kadler15","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/584/250/fa85e1dd3a7776efef9277c99178cadb5fe2efe1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4871400,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hi @kadler15,\n\nThanks for your submission! I need to check further with the product team to see if this is an issue they intend to fix. If not, it's possible this issue will be closed accordingly.\n\nYour patience is much appreciated.\n\nBest regards,\n@nasr0x01 ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/kadler15\"\u003e@kadler15\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThanks for your submission! I need to check further with the product team to see if this is an issue they intend to fix. If not, it\u0026#39;s possible this issue will be closed accordingly.\u003c/p\u003e\n\n\u003cp\u003eYour patience is much appreciated.\u003c/p\u003e\n\n\u003cp\u003eBest regards,\u003cbr\u003e\n\u003ca href=\"/nasr0x01\"\u003e@nasr0x01\u003c/a\u003e \u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-18T11:17:24.056Z","updated_at":"2019-05-18T11:17:24.056Z","actor":{"username":"nasr0x01","cleared":false,"url":"/nasr0x01","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/386/674/ec2e2c825a554851c42c122ffd61aa8f18b08174_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5140642,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @nasr0x01, has anyone from the product team given feedback on this? Thanks!","markdown_message":"\u003cp\u003eHi \u003ca href=\"/nasr0x01\"\u003e@nasr0x01\u003c/a\u003e, has anyone from the product team given feedback on this? Thanks!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-06-19T22:12:32.041Z","updated_at":"2019-06-19T22:12:32.041Z","actor":{"username":"kadler15","cleared":false,"url":"/kadler15","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/584/250/fa85e1dd3a7776efef9277c99178cadb5fe2efe1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5429944,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2019-07-25T18:19:40.904Z","updated_at":"2019-07-25T18:19:40.904Z","actor":{"username":"nrajlich","cleared":false,"url":"/nrajlich","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5460750,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@nrajlich can you let us know when the fix has been released?","markdown_message":"\u003cp\u003e\u003ca href=\"/nrajlich\"\u003e@nrajlich\u003c/a\u003e can you let us know when the fix has been released?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-07-30T10:15:35.529Z","updated_at":"2019-07-30T10:15:35.529Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5612978,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@nrajlich Is there any way we can help coordinate release of this fix?","markdown_message":"\u003cp\u003e\u003ca href=\"/nrajlich\"\u003e@nrajlich\u003c/a\u003e Is there any way we can help coordinate release of this fix?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-08-20T07:29:14.659Z","updated_at":"2019-08-20T07:29:14.659Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5663239,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I will close this report and schedule it for public disclosure.","markdown_message":"\u003cp\u003eI will close this report and schedule it for public disclosure.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-08-26T08:21:37.575Z","updated_at":"2019-08-26T08:21:37.575Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5663241,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-08-26T08:21:45.647Z","updated_at":"2019-08-26T08:21:45.647Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"kadler15","url":"/kadler15"},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5663242,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-08-26T08:21:57.299Z","updated_at":"2019-08-26T08:21:57.299Z","first_to_agree":true,"actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5882966,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I've been in touch with @nrajlich. He's aware of this issue, but hasn't found the time to fix it yet.\n\nHere's a patch I've been using in a private registry:\n\n```patch\ndiff --git a/index.js b/index.js\nindex 0a2fdab..a331ce1 100644\n--- a/index.js\n+++ b/index.js\n@@ -157,17 +157,16 @@ HttpsProxyAgent.prototype.callback = function connect(req, opts, fn) {\n       cleanup();\n       fn(null, sock);\n     } else {\n-      // some other status code that's not 200... need to re-play the HTTP header\n-      // \"data\" events onto the socket once the HTTP machinery is attached so that\n-      // the user can parse and handle the error status code\n+      // We got a bad response to the CONNECT request, so we will not attempt\n+      // to upgrade the socket to a TLS connection.\n+      //\n+      // Destroy the socket and return an error, as the socket has not been\n+      // upgraded to a TLS connection. If the socket were returned for use,\n+      // plaintext secrets could leak to a network firewall or remote server.\n+      buffers = buffered = null;\n+      socket.destroy();\n       cleanup();\n-\n-      // save a reference to the concat'd Buffer for the `onsocket` callback\n-      buffers = buffered;\n-\n-      // need to wait for the \"socket\" event to re-play the \"data\" events\n-      req.once('socket', onsocket);\n-      fn(null, socket);\n+      fn(new Error(`Could not establish TLS connection. Status code: ${statusCode}`));\n     }\n   }\n```","markdown_message":"\u003cp\u003eI\u0026#39;ve been in touch with \u003ca href=\"/nrajlich\"\u003e@nrajlich\u003c/a\u003e. He\u0026#39;s aware of this issue, but hasn\u0026#39;t found the time to fix it yet.\u003c/p\u003e\n\n\u003cp\u003eHere\u0026#39;s a patch I\u0026#39;ve been using in a private registry:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/index.js b/index.js\nindex 0a2fdab..a331ce1 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/index.js\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/index.js\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -157,17 +157,16 @@\u003c/span\u003e HttpsProxyAgent.prototype.callback = function connect(req, opts, fn) {\n       cleanup();\n       fn(null, sock);\n     } else {\n\u003cspan class=\"gd\"\u003e-      // some other status code that\u0026#39;s not 200... need to re-play the HTTP header\n-      // \u0026quot;data\u0026quot; events onto the socket once the HTTP machinery is attached so that\n-      // the user can parse and handle the error status code\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+      // We got a bad response to the CONNECT request, so we will not attempt\n+      // to upgrade the socket to a TLS connection.\n+      //\n+      // Destroy the socket and return an error, as the socket has not been\n+      // upgraded to a TLS connection. If the socket were returned for use,\n+      // plaintext secrets could leak to a network firewall or remote server.\n+      buffers = buffered = null;\n+      socket.destroy();\n\u003c/span\u003e       cleanup();\n\u003cspan class=\"gd\"\u003e-\n-      // save a reference to the concat\u0026#39;d Buffer for the `onsocket` callback\n-      buffers = buffered;\n-\n-      // need to wait for the \u0026quot;socket\u0026quot; event to re-play the \u0026quot;data\u0026quot; events\n-      req.once(\u0026#39;socket\u0026#39;, onsocket);\n-      fn(null, socket);\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+      fn(new Error(`Could not establish TLS connection. Status code: ${statusCode}`));\n\u003c/span\u003e     }\n   }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2019-09-25T02:35:38.166Z","updated_at":"2019-09-25T02:35:38.166Z","actor":{"username":"kadler15","cleared":false,"url":"/kadler15","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/584/250/fa85e1dd3a7776efef9277c99178cadb5fe2efe1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5884110,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@kadler15 thanks! The report will be disclosed today and I think it is good that a patch is available in the report description so people can apply it in the meantime if they want.","markdown_message":"\u003cp\u003e\u003ca href=\"/kadler15\"\u003e@kadler15\u003c/a\u003e thanks! The report will be disclosed today and I think it is good that a patch is available in the report description so people can apply it in the meantime if they want.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-25T07:30:04.802Z","updated_at":"2019-09-25T07:30:04.802Z","actor":{"username":"marcinhoppe","cleared":false,"url":"/marcinhoppe","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5884316,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-25T08:21:57.684Z","updated_at":"2019-09-25T08:21:57.684Z","actor":{"url":"/nodejs-ecosystem","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Node.js third-party modules"}},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5980736,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi there. I wanted to report that this vulnerability has been fixed as of `https-proxy-agent` v3.0.0. Please see the release notes: https://github.com/TooTallNate/node-https-proxy-agent/releases/tag/3.0.0","markdown_message":"\u003cp\u003eHi there. I wanted to report that this vulnerability has been fixed as of \u003ccode\u003ehttps-proxy-agent\u003c/code\u003e v3.0.0. Please see the release notes: \u003ca title=\"https://github.com/TooTallNate/node-https-proxy-agent/releases/tag/3.0.0\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FTooTallNate%2Fnode-https-proxy-agent%2Freleases%2Ftag%2F3.0.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/TooTallNate/node-https-proxy-agent/releases/tag/3.0.0\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-07T21:35:21.525Z","updated_at":"2019-10-07T21:35:21.525Z","actor":{"username":"nrajlich","cleared":false,"url":"/nrajlich","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5980822,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'll update the Security WG vuln entry for that. Thanks Nathan.","markdown_message":"\u003cp\u003eI\u0026#39;ll update the Security WG vuln entry for that. Thanks Nathan.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-07T21:57:16.087Z","updated_at":"2019-10-07T21:57:16.087Z","actor":{"username":"lirantal","cleared":false,"url":"/lirantal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/096/045/7e9d9170c9862d8d3697b11b0bb7160d40444c16_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}