{"id":112057,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTIwNTc=","url":"https://hackerone.com/reports/112057","title":"Heapoverflow in zipimporter module","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-01-21T16:31:28.833Z","submitted_at":"2016-01-21T16:31:28.833Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jakkdu","url":"/jakkdu","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":27,"url":"https://hackerone.com/ibb-python","handle":"ibb-python","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Python (IBB)","twitter_handle":"","website":"http://www.python.org/news/security","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-10-14T10:52:16.812Z","bug_reporter_agreed_on_going_public_at":"2019-10-14T10:52:16.714Z","team_member_agreed_on_going_public_at":"2019-10-13T09:02:13.206Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"https://bugs.python.org/issue26171","vulnerability_information_html":"\u003cp\u003e\u003ca title=\"https://bugs.python.org/issue26171\" href=\"/redirect?url=https%3A%2F%2Fbugs.python.org%2Fissue26171\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.python.org/issue26171\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","bounty_amount":"1000.0","formatted_bounty":"$1,000","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T09:02:13.307Z","allow_singular_disclosure_after":-35666068.0829136,"singular_disclosure_allowed":true,"vote_count":12,"voters":["zoczus","ozzyoz","dyabla","hackerbobby","drmike","opritche","nehal98","rumhamsec","jldavid","emanueltrandafir","and 2 more..."],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":873539,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @jakkdu - can you provide a bit more information on remote exploitability and impact of this bug?","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jakkdu\"\u003e@jakkdu\u003c/a\u003e - can you provide a bit more information on remote exploitability and impact of this bug?\u003c/p\u003e\n","automated_response":false,"created_at":"2016-03-27T22:13:16.668Z","updated_at":"2016-03-27T22:13:16.668Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":877161,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, let me give more info on the exploit.\nAttached file (python_exploit.tar.gz) includes some more PoCs that shows that the vulnerability can be exploited in many ways.\n\nFirst, to show the remote exploitability, \nwe created a zip file that solely triggers the vulnerability\nwhen it is just loaded with zipimport.import then read.\n\nAlthough we manipulated python code at the former PoC\n(posted at python.org, such as assigning -1 or 1)\nfor the easy proof, there is no problem on\ncreating solely exploitable zip.\n\nInside of crash-with-zip directory, if you run generate.py,\nit will generate a zip file that triggers the vulnerability.\nOn the run.py, it just load the created zip file with the following two lines:\nimporter = zipimport.zipimporter(ZIP)\nimporter.get_data(FILE)\n\nand, the program crashes.\nAlthough it just show the crash, at the end (in the Third PoC), we will show that \nthe bug can be exploited as arbitrary code execution if an information leak\nvulnerability is supplied.\n\nThis PoC shows that if a Python application read a zip file through zipimport, \nit is exploitable.\nWe can easily find such apps that are widely used, for example,\nsetuptools: https://github.com/jaraco/setuptools/search?utf8=%E2%9C%93\u0026q=zipimport.zipimporter\n\n\n\n\nSecond, we show that the bug can be exploited to launch sandbox escape attack.\nOn the Google Cloud Platform (https://cloud.google.com/python/getting-started/tutorial-app),\nusers can run an app that is written in Python with Flask.\nThe service is a PaaS cloud, having restricted runtime with some sandbox over Python,\nand only runs Flask application.\n\nIn the directory 'google-app-engine',\nwe placed an app that can be uploaded to Google Cloud Platform, \nwhich reads the zip file that we created.\nOn launching the app, the application got crashed, which shows that Google Cloud Platform is vulnerable to this bug.\n\nThird, in spawn-shell directory, \nwe present an attack that launches system shell by exploiting this bug.\nBy creating a zip file in a certain way, we can control %RIP of the process.\n(this can be done with creating zip file in the first PoC).\nHowever, the problem is we don't know where to jump.\nIn the PoC, we assume that there is a information leak vulnerability\n(leaking address of object 'a'), then calculate the base address of libc\nand address of system() from the address in Ubuntu 14.04.4 LTS (fully patched for today).\n\nAs a result, in screenshot.png, \na system shell is spawned.\n\n\nIn sum, the bug can be exploited remotely if the app uses zipimport to read \nzip file from the remote (as setuptool does), and it can be exploited as arbitrary code execution if there is a information leak vulnerability or there is no ASLR.\n\n","markdown_message":"\u003cp\u003eHi, let me give more info on the exploit.\u003cbr\u003e\nAttached file (python_exploit.tar.gz) includes some more PoCs that shows that the vulnerability can be exploited in many ways.\u003c/p\u003e\n\n\u003cp\u003eFirst, to show the remote exploitability, \u003cbr\u003e\nwe created a zip file that solely triggers the vulnerability\u003cbr\u003e\nwhen it is just loaded with zipimport.import then read.\u003c/p\u003e\n\n\u003cp\u003eAlthough we manipulated python code at the former PoC\u003cbr\u003e\n(posted at python.org, such as assigning -1 or 1)\u003cbr\u003e\nfor the easy proof, there is no problem on\u003cbr\u003e\ncreating solely exploitable zip.\u003c/p\u003e\n\n\u003cp\u003eInside of crash-with-zip directory, if you run generate.py,\u003cbr\u003e\nit will generate a zip file that triggers the vulnerability.\u003cbr\u003e\nOn the run.py, it just load the created zip file with the following two lines:\u003cbr\u003e\nimporter = zipimport.zipimporter(ZIP)\u003cbr\u003e\nimporter.get_data(FILE)\u003c/p\u003e\n\n\u003cp\u003eand, the program crashes.\u003cbr\u003e\nAlthough it just show the crash, at the end (in the Third PoC), we will show that \u003cbr\u003e\nthe bug can be exploited as arbitrary code execution if an information leak\u003cbr\u003e\nvulnerability is supplied.\u003c/p\u003e\n\n\u003cp\u003eThis PoC shows that if a Python application read a zip file through zipimport, \u003cbr\u003e\nit is exploitable.\u003cbr\u003e\nWe can easily find such apps that are widely used, for example,\u003cbr\u003e\nsetuptools: \u003ca title=\"https://github.com/jaraco/setuptools/search?utf8=%E2%9C%93\u0026amp;q=zipimport.zipimporter\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fjaraco%2Fsetuptools%2Fsearch%3Futf8%3D%25E2%259C%2593%26q%3Dzipimport.zipimporter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/jaraco/setuptools/search?utf8=%E2%9C%93\u0026amp;q=zipimport.zipimporter\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eSecond, we show that the bug can be exploited to launch sandbox escape attack.\u003cbr\u003e\nOn the Google Cloud Platform (\u003ca title=\"https://cloud.google.com/python/getting-started/tutorial-app\" href=\"/redirect?url=https%3A%2F%2Fcloud.google.com%2Fpython%2Fgetting-started%2Ftutorial-app\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://cloud.google.com/python/getting-started/tutorial-app\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e),\u003cbr\u003e\nusers can run an app that is written in Python with Flask.\u003cbr\u003e\nThe service is a PaaS cloud, having restricted runtime with some sandbox over Python,\u003cbr\u003e\nand only runs Flask application.\u003c/p\u003e\n\n\u003cp\u003eIn the directory \u0026#39;google-app-engine\u0026#39;,\u003cbr\u003e\nwe placed an app that can be uploaded to Google Cloud Platform, \u003cbr\u003e\nwhich reads the zip file that we created.\u003cbr\u003e\nOn launching the app, the application got crashed, which shows that Google Cloud Platform is vulnerable to this bug.\u003c/p\u003e\n\n\u003cp\u003eThird, in spawn-shell directory, \u003cbr\u003e\nwe present an attack that launches system shell by exploiting this bug.\u003cbr\u003e\nBy creating a zip file in a certain way, we can control %RIP of the process.\u003cbr\u003e\n(this can be done with creating zip file in the first PoC).\u003cbr\u003e\nHowever, the problem is we don\u0026#39;t know where to jump.\u003cbr\u003e\nIn the PoC, we assume that there is a information leak vulnerability\u003cbr\u003e\n(leaking address of object \u0026#39;a\u0026#39;), then calculate the base address of libc\u003cbr\u003e\nand address of system() from the address in Ubuntu 14.04.4 LTS (fully patched for today).\u003c/p\u003e\n\n\u003cp\u003eAs a result, in screenshot.png, \u003cbr\u003e\na system shell is spawned.\u003c/p\u003e\n\n\u003cp\u003eIn sum, the bug can be exploited remotely if the app uses zipimport to read \u003cbr\u003e\nzip file from the remote (as setuptool does), and it can be exploited as arbitrary code execution if there is a information leak vulnerability or there is no ASLR.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-03-29T22:50:47.573Z","updated_at":"2016-03-29T22:50:47.573Z","actor":{"username":"jakkdu","cleared":false,"url":"/jakkdu","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":81985,"filename":"python_exploit.tar.gz","type":"application/x-gzip","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/081/985/f1e313ea46a5801cf1b9d46677b42aaa40ad7d14/python_exploit.tar.gz?response-content-disposition=attachment%3B%20filename%3D%22python_exploit.tar.gz%22%3B%20filename%2A%3DUTF-8%27%27python_exploit.tar.gz\u0026response-content-type=application%2Fx-gzip\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2UMPB2FX%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T041641Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEq9neBunEjsdY7f8cNZfYtjkYnfx7sYXIBk82UycrktAiEA5w10R4CJv%2FQIiYTXv1ZP8q%2BbScvvzy7qwcG%2BmPmKCXMqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKX6CTSGAGf6Bt5yHyqRA9qW1WRQYe7JztYb6rdSeSRyzKgf4LxEu42JMoyPyy0VqqdaIdaW%2F5Oe%2FZcBqKJkPjfrnsLv1E3Cttn6QZ2fsMawdDGLyKyEEvAx6LbD4TYD1QOy0YJIw6j32Nt3V4psvzyU384FsJYLymiqMGAqTzIuUS4QNvTcHn%2BFoOZvS%2F06fP5YWj%2BxpW%2BELDyBb5CFIWqKXYmkW%2BPv4IxFiMVfFF4KM80ZKVGfyJ7nRaRwvjM5YUJYHOlvXjFuPBSC3IYIgEZYlopEqTolZ1OQ2zbi1yDB%2FWl1rx7i7cbCVK6zJwPdLcPRBOa7jlMN0jlHdNPzjyKxdEaNBy7Cyflyw%2FZCl7X1dB7yuSBF8YK2st4h%2FZchseLh%2BjukipjtpVl5nDjO8BSu5evt1V1lFzADomlTKShrSgjmej1gvXmULpbdNuEwc3vMl328MfuwtHHSSvzZo5xxP0U1cq9fhM0Ztcea1ZRpQDZR4DB1jRqdjeMIXNuuwv3G7Uotj1VrvA87zW9Og6gQ9VN7fQSdOpurQFAV2WvRMIuSqv8FOusB%2B%2BEh7xquKUpKrZEfrLl0yLcAZyezk5OlnVLaoE%2BCU7%2F1YWDwq4fJ%2Fzqx58r%2Ffgzx%2FRuGFLAoCPIl7GI47ntqpCuRo5kjknXh3Vhm0Ds%2B9y0Uo9mgVKhl6XjEqADeRJOm5JpIvTZkPibWah%2FFXooiOsIWnpbe3xZbkrh62wdx0iVuonbBNy6Z0vYXXREkzeNyKh%2Fx0i0DwAehfYiLehqkIm1GqvDnaSiQ0dTRzOsrEnXwNhRtDRaBDDLvFXHGy3Xm8ucb70jki0U1otEIUfIG%2Fnfsrs7zhSOcLfi6%2B4aytuy%2FrSFLmVnwIpfIzQ%3D%3D\u0026X-Amz-Signature=951899fc327649f221efca13c6cf2b7b272f821fa6f4ff0f2c604ddbe4a7cc01"}],"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":877163,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@arice  And for the second one, I meant that the bug can be used for escape the Python sandbox of Google Cloud Platform. And we tested that it works on Python 2.7.x, Python 3.4.x, and Python 3.6.x (patched on the latest upstream, but not at the distribution side. In Ubuntu, it still works).\n","markdown_message":"\u003cp\u003e\u003ca href=\"/arice\"\u003e@arice\u003c/a\u003e  And for the second one, I meant that the bug can be used for escape the Python sandbox of Google Cloud Platform. And we tested that it works on Python 2.7.x, Python 3.4.x, and Python 3.6.x (patched on the latest upstream, but not at the distribution side. In Ubuntu, it still works).\u003c/p\u003e\n","automated_response":false,"created_at":"2016-03-29T22:52:34.268Z","updated_at":"2016-03-29T22:52:34.268Z","actor":{"username":"jakkdu","cleared":false,"url":"/jakkdu","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":991794,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2016-05-31T06:20:17.002Z","updated_at":"2016-05-31T06:20:17.002Z","actor":{"url":"/ibb-python","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Python (IBB)"}},"bounty_amount":"1000.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-python","collaborator":{"username":"jakkdu","url":"/jakkdu"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":991795,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2016-05-31T06:20:24.800Z","updated_at":"2016-05-31T06:20:24.800Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"jakkdu","url":"/jakkdu"},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6025436,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T09:02:13.228Z","updated_at":"2019-10-13T09:02:13.228Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6032983,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-14T10:52:16.740Z","updated_at":"2019-10-14T10:52:16.740Z","actor":{"username":"jakkdu","cleared":false,"url":"/jakkdu","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6032984,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-14T10:52:16.832Z","updated_at":"2019-10-14T10:52:16.832Z","actor":{"username":"jakkdu","cleared":false,"url":"/jakkdu","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}