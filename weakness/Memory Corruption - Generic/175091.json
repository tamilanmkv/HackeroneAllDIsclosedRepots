{"id":175091,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNzUwOTE=","url":"https://hackerone.com/reports/175091","title":"chain.__setstate__ Type Confusion","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2016-10-11T08:14:36.540Z","submitted_at":"2016-10-11T08:14:36.540Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"johnleitch","url":"/johnleitch","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":27,"url":"https://hackerone.com/ibb-python","handle":"ibb-python","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Python (IBB)","twitter_handle":"","website":"http://www.python.org/news/security","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2016-12-05T00:30:56.041Z","bug_reporter_agreed_on_going_public_at":"2016-12-04T06:09:34.208Z","team_member_agreed_on_going_public_at":"2016-12-05T00:30:55.988Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Python 3.5.2 suffers from a type confusion vulnerability in the chain.__setstate__ method of the itertools module. The issue exists due to lack of argument validation in the chain_setstate() function:\n\n    static PyObject *\n    chain_setstate(chainobject *lz, PyObject *state)\n    {\n        PyObject *source, *active=NULL;\n\n        if (! PyArg_ParseTuple(state, \"O|O\", \u0026source, \u0026active))\n            return NULL;\n\n        Py_INCREF(source);\n        Py_XSETREF(lz-\u003esource, source);\n        Py_XINCREF(active);\n        Py_XSETREF(lz-\u003eactive, active);\n        Py_RETURN_NONE;\n    }\n\nAfter parsing the argument tuple, source and active are set without validating that they are iterator objects. This causes issues elsewhere, where the values are passed PyIter_Next:\n\n    static PyObject *\n    chain_next(chainobject *lz)\n    {\n        PyObject *item;\n\n        if (lz-\u003esource == NULL)\n            return NULL;                                    /* already stopped */\n\n        if (lz-\u003eactive == NULL) {\n            PyObject *iterable = PyIter_Next(lz-\u003esource);\n            if (iterable == NULL) {\n                Py_CLEAR(lz-\u003esource);\n                return NULL;                                /* no more input sources */\n            }\n            lz-\u003eactive = PyObject_GetIter(iterable);\n            Py_DECREF(iterable);\n            if (lz-\u003eactive == NULL) {\n                Py_CLEAR(lz-\u003esource);\n                return NULL;                                /* input not iterable */\n            }\n        }\n        item = PyIter_Next(lz-\u003eactive);\n        if (item != NULL)\n            return item;\n        if (PyErr_Occurred()) {\n            if (PyErr_ExceptionMatches(PyExc_StopIteration))\n                PyErr_Clear();\n            else\n                return NULL;                                /* input raised an exception */\n        }\n        Py_CLEAR(lz-\u003eactive);\n        return chain_next(lz);                      /* recurse and use next active */\n    }\n\nIn some cases, this can lead to a DEP access violation. It might be possible to exploit this to achieve code execution.\n\n    (4074.198c): Access violation - code c0000005 (first chance)\n    First chance exceptions are reported before any exception handling.\n    This exception may be expected and handled.\n    eax=00000000 ebx=0132fa10 ecx=5b547028 edx=00000002 esi=0132fa10 edi=5b37b3e0\n    eip=00000000 esp=009ef940 ebp=009ef94c iopl=0         nv up ei pl zr na pe nc\n    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246\n    00000000 ??              ???\n    0:000\u003e k6\n    ChildEBP RetAddr  \n    WARNING: Frame IP not in any known module. Following frames may be wrong.\n    009ef93c 5b329ac0 0x0\n    009ef94c 5b2cb321 python35!PyIter_Next+0x10 [c:\\build\\cpython\\objects\\abstract.c @ 2778]\n    009ef960 5b37b42e python35!chain_next+0x21 [c:\\build\\cpython\\modules\\itertoolsmodule.c @ 1846]\n    009ef970 5b33fedd python35!wrap_next+0x4e [c:\\build\\cpython\\objects\\typeobject.c @ 5470]\n    009ef990 5b328b9d python35!wrapper_call+0x7d [c:\\build\\cpython\\objects\\descrobject.c @ 1195]\n    009ef9ac 5b3c463c python35!PyObject_Call+0x6d [c:\\build\\cpython\\objects\\abstract.c @ 2167]\n\nTo fix this issue, it is recommended that chain_setstate() be updated to validate its arguments. A proposed patch has been attached.\n\n    static PyObject *\n    chain_setstate(chainobject *lz, PyObject *state)\n    {\n        PyObject *source, *active=NULL;\n\n        if (! PyArg_ParseTuple(state, \"O|O\", \u0026source, \u0026active))\n            return NULL;\n\n        if (!PyIter_Check(source) || (active != NULL \u0026\u0026 !PyIter_Check(active))) {\n            PyErr_SetString(PyExc_ValueError, \"Arguments must be iterators.\");\n            return NULL;\n        }\n\n        Py_INCREF(source);\n        Py_XSETREF(lz-\u003esource, source);\n        Py_XINCREF(active);\n        Py_XSETREF(lz-\u003eactive, active);\n        Py_RETURN_NONE;\n    }","vulnerability_information_html":"\u003cp\u003ePython 3.5.2 suffers from a type confusion vulnerability in the chain.\u003cstrong\u003esetstate\u003c/strong\u003e method of the itertools module. The issue exists due to lack of argument validation in the chain_setstate() function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003estatic PyObject *\nchain_setstate(chainobject *lz, PyObject *state)\n{\n    PyObject *source, *active=NULL;\n\n    if (! PyArg_ParseTuple(state, \u0026quot;O|O\u0026quot;, \u0026amp;source, \u0026amp;active))\n        return NULL;\n\n    Py_INCREF(source);\n    Py_XSETREF(lz-\u0026gt;source, source);\n    Py_XINCREF(active);\n    Py_XSETREF(lz-\u0026gt;active, active);\n    Py_RETURN_NONE;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter parsing the argument tuple, source and active are set without validating that they are iterator objects. This causes issues elsewhere, where the values are passed PyIter_Next:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003estatic PyObject *\nchain_next(chainobject *lz)\n{\n    PyObject *item;\n\n    if (lz-\u0026gt;source == NULL)\n        return NULL;                                    /* already stopped */\n\n    if (lz-\u0026gt;active == NULL) {\n        PyObject *iterable = PyIter_Next(lz-\u0026gt;source);\n        if (iterable == NULL) {\n            Py_CLEAR(lz-\u0026gt;source);\n            return NULL;                                /* no more input sources */\n        }\n        lz-\u0026gt;active = PyObject_GetIter(iterable);\n        Py_DECREF(iterable);\n        if (lz-\u0026gt;active == NULL) {\n            Py_CLEAR(lz-\u0026gt;source);\n            return NULL;                                /* input not iterable */\n        }\n    }\n    item = PyIter_Next(lz-\u0026gt;active);\n    if (item != NULL)\n        return item;\n    if (PyErr_Occurred()) {\n        if (PyErr_ExceptionMatches(PyExc_StopIteration))\n            PyErr_Clear();\n        else\n            return NULL;                                /* input raised an exception */\n    }\n    Py_CLEAR(lz-\u0026gt;active);\n    return chain_next(lz);                      /* recurse and use next active */\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn some cases, this can lead to a DEP access violation. It might be possible to exploit this to achieve code execution.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e(4074.198c): Access violation - code c0000005 (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\neax=00000000 ebx=0132fa10 ecx=5b547028 edx=00000002 esi=0132fa10 edi=5b37b3e0\neip=00000000 esp=009ef940 ebp=009ef94c iopl=0         nv up ei pl zr na pe nc\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246\n00000000 ??              ???\n0:000\u0026gt; k6\nChildEBP RetAddr  \nWARNING: Frame IP not in any known module. Following frames may be wrong.\n009ef93c 5b329ac0 0x0\n009ef94c 5b2cb321 python35!PyIter_Next+0x10 [c:\\build\\cpython\\objects\\abstract.c @ 2778]\n009ef960 5b37b42e python35!chain_next+0x21 [c:\\build\\cpython\\modules\\itertoolsmodule.c @ 1846]\n009ef970 5b33fedd python35!wrap_next+0x4e [c:\\build\\cpython\\objects\\typeobject.c @ 5470]\n009ef990 5b328b9d python35!wrapper_call+0x7d [c:\\build\\cpython\\objects\\descrobject.c @ 1195]\n009ef9ac 5b3c463c python35!PyObject_Call+0x6d [c:\\build\\cpython\\objects\\abstract.c @ 2167]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo fix this issue, it is recommended that chain_setstate() be updated to validate its arguments. A proposed patch has been attached.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003estatic PyObject *\nchain_setstate(chainobject *lz, PyObject *state)\n{\n    PyObject *source, *active=NULL;\n\n    if (! PyArg_ParseTuple(state, \u0026quot;O|O\u0026quot;, \u0026amp;source, \u0026amp;active))\n        return NULL;\n\n    if (!PyIter_Check(source) || (active != NULL \u0026amp;\u0026amp; !PyIter_Check(active))) {\n        PyErr_SetString(PyExc_ValueError, \u0026quot;Arguments must be iterators.\u0026quot;);\n        return NULL;\n    }\n\n    Py_INCREF(source);\n    Py_XSETREF(lz-\u0026gt;source, source);\n    Py_XINCREF(active);\n    Py_XSETREF(lz-\u0026gt;active, active);\n    Py_RETURN_NONE;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","bounty_amount":"1000.0","formatted_bounty":"$1,000","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2017-01-03T06:09:34.254Z","allow_singular_disclosure_after":-125793181.33903673,"singular_disclosure_allowed":true,"vote_count":14,"voters":["madrobot","mpz","exception","tony_tsep","satishpk1","paulos_","sumit7","spetr0x","deviluser","maximilianoo","and 4 more..."],"severity":{"rating":"medium","author_type":"Team"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1241683,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Link to bug report: https://bugs.python.org/issue28322","markdown_message":"\u003cp\u003eLink to bug report: \u003ca title=\"https://bugs.python.org/issue28322\" href=\"/redirect?url=https%3A%2F%2Fbugs.python.org%2Fissue28322\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.python.org/issue28322\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2016-10-11T08:14:51.395Z","updated_at":"2016-10-11T08:14:51.395Z","actor":{"username":"johnleitch","cleared":false,"url":"/johnleitch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1338920,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T19:40:59.448Z","updated_at":"2016-12-03T19:40:59.448Z","additional_data":{"old_severity":"High","new_severity":"Medium","old_severity_id":1474,"new_severity_id":11335},"actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1338921,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T19:41:05.224Z","updated_at":"2016-12-03T19:41:05.224Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"johnleitch","url":"/johnleitch"},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1338922,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T19:41:11.741Z","updated_at":"2016-12-03T19:41:11.741Z","actor":{"url":"/ibb-python","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Python (IBB)"}},"bounty_amount":"1000.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-python","collaborator":{"username":"johnleitch","url":"/johnleitch"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1339463,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-04T06:09:34.229Z","updated_at":"2016-12-04T06:09:34.229Z","first_to_agree":true,"actor":{"username":"johnleitch","cleared":false,"url":"/johnleitch","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1340404,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-05T00:30:56.007Z","updated_at":"2016-12-05T00:30:56.007Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1340405,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-05T00:30:56.059Z","updated_at":"2016-12-05T00:30:56.059Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}