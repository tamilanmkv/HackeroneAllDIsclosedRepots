{"id":1180380,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTgwMzgw","url":"https://hackerone.com/reports/1180380","title":"CVE-2021-22901: TLS session caching disaster","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2021-04-29T20:31:01.285Z","submitted_at":"2021-04-29T20:31:01.333Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"nyymi","url":"/nyymi","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":35663,"url":"https://hackerone.com/curl","handle":"curl","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"curl","twitter_handle":"","website":"https://curl.se","about":"cURL is a computer software project providing a library and command-line tool for transferring data using various protocols."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2021-22901"],"singular_disclosure_disabled":false,"disclosed_at":"2021-05-26T08:24:20.205Z","bug_reporter_agreed_on_going_public_at":"2021-05-26T08:24:20.126Z","team_member_agreed_on_going_public_at":"2021-05-26T07:25:33.372Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary:\nlib/vtls/openssl.c `ossl_connect_step1` sets up the `ossl_new_session_cb` sessionid callback with  `SSL_CTX_sess_set_new_cb`, and adds association from `data_idx` and `connectdata_idx` to current `conn` and `data` respectively:\n```\n  SSL_CTX_set_session_cache_mode(backend-\u003ectx,\n      SSL_SESS_CACHE_CLIENT | SSL_SESS_CACHE_NO_INTERNAL);\n  SSL_CTX_sess_set_new_cb(backend-\u003ectx, ossl_new_session_cb);\n```\n...\n```\n      SSL_set_ex_data(backend-\u003ehandle, data_idx, data);\n      SSL_set_ex_data(backend-\u003ehandle, connectdata_idx, conn);\n```\n \nWhenever the `ossl_new_session_cb` callback is called the code fetches the `conn` and `data` associated  via:\n``` \n  conn = (struct connectdata*) SSL_get_ex_data(ssl, connectdata_idx);\n  if(!conn)\n    return 0;\n\n  data = (struct Curl_easy *) SSL_get_ex_data(ssl, data_idx);\n```\nHowever, it is possible that the connection is disassociated from these pointers via `Curl_detach_connnection`, and reassociated to a different connection via `Curl_attach_connnection`. Yet, `Curl_detach_connnection` doesn't `SSL_set_ex_data` the `data_idx` / `connectdata_idx`/ to NULL, nor does `Curl_attach_connnection` update the pointers with new ones. I am not absolutely certain but this appears to lead to a situation where a stale pointer(s) can exists when the session callback is called. \n\n## Steps To Reproduce:\n\nUnfortunately I currently have no easy to way reproduce this issue. I might attempt to do this later.\n\n## Notes\n\nThis issue is currently lacking information but includes what I believe is the potential root cause of the issue. This information might be wrong or lacking necessary details to make full determination of the validity of this issue at this time.\n\nThis issue seems to be occurring somewhat periodically when webkit browser is built with the libcurl backend. Typically this is a rare use case, I know of only Sony Playstation devices that use in larger scale.\n\n## Impact\n\nUse after free, with potential for (remote(*)) code execution as `ossl_new_session_cb` calls `Curl_ssl_sessionid_lock(data);` with potentially repurposed memory. Attacker would need to control `data-\u003eshare` pointer to attacker controller memory. This fake `struct Curl_share` would need to be crafted in a way that `if(share-\u003especifier \u0026 (1\u003c\u003ctype))` is taken. `share-\u003elockfunc` would then get called by the function, resulting in code execution.\n\n*) caveat here, as it is unknown if external attacker can trigger this situation. It would be difficult, but cannot be completely ruled out.","bounty_amount":"2000.0","formatted_bounty":"$2,000","weakness":{"id":50,"name":"Use After Free"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2021-06-25T07:25:33.478Z","allow_singular_disclosure_after":-9353080.26673088,"singular_disclosure_allowed":true,"vote_count":69,"voters":["obsesif","pmnh","0xsaltyhashes","battle_angel","bl4de","teuvokas","rumata","yassinek3ch","mattberg","0nlymohammed","and 59 more..."],"severity":{"rating":"high","author_type":"User"},"structured_scope":{"databaseId":18844,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/curl/curl","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":11570531,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for your report!\n\nWe will take some time and investigate your reports and get back to you with details and possible follow-up questions as soon as we can!","automated_response":false,"created_at":"2021-04-29T20:31:56.937Z","updated_at":"2021-04-29T20:31:56.937Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11570544,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"It is currently unknown what exactly causes this issue or if this is even something attacker can control in any meaningful way (locally or remotely). So this could well end up being a bug, instead of a vulnerability.","automated_response":false,"created_at":"2021-04-29T20:34:33.749Z","updated_at":"2021-04-29T20:34:33.749Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11570567,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"s/that use in/ that use it in/g\n\nAlso, it could be that CWE-825 (Expired Pointer Dereference) describes this more precisely.","automated_response":false,"created_at":"2021-04-29T20:37:27.242Z","updated_at":"2021-04-29T20:39:57.150Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11571199,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thinking about it, the server can trigger the callback to be called, since they control the lifetime of the session ticket:\n\nRFC 5077:\n\n```\n3.3.  NewSessionTicket Handshake Message\n...\n\n   If the server successfully verifies the client's ticket, then it MAY\n   renew the ticket by including a NewSessionTicket handshake message\n   after the ServerHello in the abbreviated handshake.\n```\n```\n5.6.  Ticket Lifetime\n\n   The TLS server controls the lifetime of the ticket.\n```\n\nSo this part appears to be remotely controllable by the attacker, at least.\n\nNaturally this would be just the final part of the exploitation (code execution). To be a practical exploit the attacker would still need to be able to somehow massage the victim's memory layout in a way that the `data` pointer would include the necessary `data-\u003eshare` pointer and the `struct Curl_share` memory contents. It of course is also still unclear if the attacker has any control when/if this condition occurs.","automated_response":false,"created_at":"2021-04-29T20:51:38.962Z","updated_at":"2021-04-29T20:51:38.962Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11571775,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Assuming that the necessary memory massaging and triggering the UAF is possible, the prime target for this exploit would likely by the browser included in the Sony PlayStation devices. It is unclear to me if the Webkit browser they include with the device implements the protections that usually exists in modern browsers, such as sandboxing.\n\nRegardless, the attack would likely involve getting the user to browse a website crafted by the attacker. The JavaScript on this website would perform necessary memory massaging and triggering the UAF condition (assuming here for the arguments sake that it would be possible). Finally the NewSessionTicket Handshake Message would be used to trigger the code execution (*).\n\n*) Yes, it usually isn't that simple. You probably need to find another info leak vulnerability to defeat ASLR, and then have another exploit to escape out of the browser sandbox. The info leak vulnerability wouldn't need to be in libcurl however, it could be a leak via bug in the webkit JavaScript implementation.","automated_response":false,"created_at":"2021-04-29T21:21:21.035Z","updated_at":"2021-04-29T21:21:21.035Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11571910,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The UAF situation already appears randomly when browsing the web with the Webkit built against libcurl 7.76.1. The crash logs indicate at least the following path of execution:\n\nCurlMultiHandle::perform (webkit) -\u003e curl_multi_perform -\u003e multi_runsingle -\u003e Curl_connect -\u003e Curl_conncache_foreach -\u003e call_extract_if_dead -\u003e extract_if_dead.part.0 -\u003e http2_conncheck -\u003e ossl_recv  -\u003e SSL_read -\u003e ssl3_read -\u003e ssl3_read_bytes -\u003e state_machine.part.0 -\u003e ossl_statem_client_process_message -\u003e tls_process_new_session_ticket -\u003e ssl_update_cache -\u003e ossl_new_session_cb -\u003e  Curl_ssl_sessionid_lock -\u003e Curl_share_lock\n\nThis gets *really* interesting around `extract_if_dead` that does:\n\n```\n    }\n    else if(conn-\u003ehandler-\u003econnection_check) {\n      /* The protocol has a special method for checking the state of the\n         connection. Use it to check if the connection is dead. */\n      unsigned int state;\n\n      /* briefly attach the connection to this transfer for the purpose of\n         checking it */\n      Curl_attach_connnection(data, conn);\n\n      state = conn-\u003ehandler-\u003econnection_check(data, conn, CONNCHECK_ISDEAD);    \u003c- crash from this call\n      dead = (state \u0026 CONNRESULT_DEAD);\n      /* detach the connection again */\n      Curl_detach_connnection(data);\n\n    }\n```\n\nThat would suggest that indeed `Curl_attach_connnection` indeed fails to update the necessary information in the connection and thus stale pointer is used in the callback.\n\nThis thing seems to be called from lib/url.c `Curl_connect` -\u003e  `create_conn` -\u003e `prune_dead_connections` -\u003e `Curl_conncache_foreach`, some of which are inlined and thus visible in the crash log above.\n\nBTW, I noticed https://github.com/curl/curl/issues/4141 which appears to be an earlier ticket filed about this crash.","automated_response":false,"created_at":"2021-04-29T21:49:12.903Z","updated_at":"2021-04-29T22:00:43.086Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11571978,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'm not entirely sure if it is hard for external attacker to spoof a \"dead\" connection such as this, but I don't think that would be impossible. I thus think this UAF condition might be within reason to consider triggerable remotely.\n\nIf this all holds, I believe this ticket should be considered `Critical` level. If so this vulnerability might require somewhat different triage process than usual.\n\nIt is extremely likely that triggering this issue requires specific use case of libcurl however, such as a browser. It for example might be be easily exploitable against `curl` command directly (unless if the victim is tricked to perform specific curl command line with certain target URLs). Practical exploitability likely largely depends on how libcurl is used in the application.","automated_response":false,"created_at":"2021-04-29T22:10:36.596Z","updated_at":"2021-04-29T22:11:59.376Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11572041,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e I'm not entirely sure if it is hard for external attacker to spoof a \"dead\" connection such as this\n\nI don't think you can spoof that, I think you need to actually disconnect the connection. And it'd need to be using TLS 1.3 to begin with for the ticket callback to happen like described I believe.\n\n\u003e If this all holds...\n\nThat's still a rather big \"if\" the way I read this.","automated_response":false,"created_at":"2021-04-29T22:26:46.318Z","updated_at":"2021-04-29T22:26:46.318Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11572263,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e That's still a rather big \"if\" the way I read this.\n\nYeah, however I've already seen the `share-\u003elockfunc` callback jumping to random address in one of the crashes from our \"Wayfarer\" webkit browser, so this is definitely plausible. The question is how easy it is to trigger deliberately.\n\n```\n\u003e\u003e\u003e Exception 4 DAR 00000000 DSISR 0000241e\n\u003e\u003e\u003e Task 348d6e68 \"WkWebView:curlThread\"\nGPR[00] 1a2e54b4 3cb6f2f0 3cb6ff10 24b14560 00000004 00000002 a4101218 14000048\nGPR[08] 0000001b 94101218 00000001 140019b0 3df58410 00000000 00000000 22242842\nGPR[16] 2c446570 00000001 00000000 00000001 00000001 00000003 00000001 374d1440\nGPR[24] 74de4631 25807780 374d1440 2c445c78 00000000 00000003 24b14560 00000000\n   SRR0 94101218 SRR1 4200f030 LR 1a2a50e4 CTR 94101218 CR 82222242 XER 20000000\n      LR [0x1a2a50e4][1]: 'Wayfarer_1.14' offset 1a9a2e4 Curl_share_lock\n\u003e\u003e\u003e PPC StackTrace:\n    [0x1a2e54b4][1]: 'Wayfarer_1.14' offset 1ada6b4 ossl_new_session_cb\n    [0x1a30ad5c][1]: 'Wayfarer_1.14' offset 1afff5c ssl_update_cache\n    [0x1a326ba8][1]: 'Wayfarer_1.14' offset 1b1bda8 tls_process_new_session_ticket\n    [0x1a328cb4][1]: 'Wayfarer_1.14' offset 1b1deb4 ossl_statem_client_process_message\n```\n\n0x94101218 is the bogus program counter (SRR0), also in r9 and CTR.\n\n```\n01a9a298 \u003cCurl_share_lock\u003e:\n 1a9a298:       94 21 ff f0     stwu    r1,-16(r1)\n 1a9a29c:       93 e1 00 0c     stw     r31,12(r1)\n 1a9a2a0:       81 03 00 78     lwz     r8,120(r3)         # r8 = data-\u003eshare\n 1a9a2a4:       2c 08 00 00     cmpwi   r8,0\n 1a9a2a8:       41 82 00 54     beq     1a9a2fc \u003cCurl_share_lock+0x64\u003e\n 1a9a2ac:       83 e8 00 04     lwz     r31,4(r8)\n 1a9a2b0:       39 40 00 01     li      r10,1\n 1a9a2b4:       7d 49 20 30     slw     r9,r10,r4\n 1a9a2b8:       7d 3f f8 39     and.    r31,r9,r31\n 1a9a2bc:       41 82 00 30     beq     1a9a2ec \u003cCurl_share_lock+0x54\u003e\n 1a9a2c0:       81 28 00 0c     lwz     r9,12(r8)         # r9 = share-\u003elockfunc\n 1a9a2c4:       3b e0 00 00     li      r31,0\n 1a9a2c8:       2c 09 00 00     cmpwi   r9,0\n 1a9a2cc:       41 82 00 20     beq     1a9a2ec \u003cCurl_share_lock+0x54\u003e\n 1a9a2d0:       7c 08 02 a6     mflr    r0\n 1a9a2d4:       7d 29 03 a6     mtctr   r9                # ctr = share-\u003elockfunc\n 1a9a2d8:       90 01 00 14     stw     r0,20(r1)\n 1a9a2dc:       80 c8 00 14     lwz     r6,20(r8)\n 1a9a2e0:       4e 80 04 21     bctrl                     # branch to CTR, pushing next inst address to link register\n 1a9a2e4:       80 01 00 14     lwz     r0,20(r1)\n 1a9a2e8:       7c 08 03 a6     mtlr    r0\n 1a9a2ec:       7f e3 fb 78     mr      r3,r31\n 1a9a2f0:       83 e1 00 0c     lwz     r31,12(r1)\n 1a9a2f4:       38 21 00 10     addi    r1,r1,16\n 1a9a2f8:       4e 80 00 20     blr\n 1a9a2fc:       3b e0 00 03     li      r31,3\n 1a9a300:       7f e3 fb 78     mr      r3,r31\n 1a9a304:       83 e1 00 0c     lwz     r31,12(r1)\n 1a9a308:       38 21 00 10     addi    r1,r1,16\n 1a9a30c:       4e 80 00 20     blr\n```\nIn this case the corrupt/invalid `data` was 0x24b14560, `data-\u003eshare` was 0x0000001b. Address 0x1b + 12 (`share-\u003elockfunc`) contained 0x94101218. ","automated_response":false,"created_at":"2021-04-29T23:20:51.689Z","updated_at":"2021-04-29T23:22:15.430Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11572285,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Look like the bug (or vulnerability) was added by commit https://github.com/curl/curl/commit/549310e907e82e44c59548351d4c6ac4aaada114 and released as part of curl 7.63.0 https://curl.se/mail/archive-2018-12/0012.html 12 Dec 2018.\n","automated_response":false,"created_at":"2021-04-29T23:28:55.589Z","updated_at":"2021-04-29T23:36:40.515Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11572328,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Heap massaging in well understood topic. It all depends on how much control the remote side has on the client. With browsers this is considerable.\n\nSome basic background: https://www.rapid7.com/blog/post/2019/06/12/heap-overflow-exploitation-on-windows-10-explained/\n\nSome not so basic example: https://labs.f-secure.com/assets/BlogFiles/apple-safari-pwn2own-vuln-write-up-2018-10-29-final.pdf\n\nBrowsers typically allow easier massaging as javascript has rather large control of the heap space. Due to this reason various mitigations have been put in place: https://labs.f-secure.com/archive/some-brief-notes-on-webkit-heap-hardening/\n\nOf course not all software has such mitigations in place. Our Wayfarer browser for sure doesn't....\n\nEither way, it is plausible that the attacker can manipulate the memory occupied by the `struct Curl_easy` earlier. This manipulation doesn't need any vulnerabilities in itself, just primitives to allocate (and fill) and free memory, often available easily.\n\nAfter this it is merely (*) up to triggering the callback.\n\n*) Yes, I'm deliberately ignoring the fact that you may need to bypass Address-Space Layout Randomization (ASLR) and form a ROP chain. If this needs to be done you need to  leak some memory address relative to executable code segment. This vulnerability doesn't need to be in libcurl itself.","automated_response":false,"created_at":"2021-04-29T23:46:18.386Z","updated_at":"2021-04-30T00:00:46.066Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11572427,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"It may also be necessary to leak the address of the heap as well (so that valid `data-\u003eshare` pointer can be crafted). This is not always necessary however, as you may be able to get away from some of these requirements by performing heap spraying - https://en.wikipedia.org/wiki/Heap_spraying - basically filling massive amount of heap memory with the valid `struct Curl_share` needed.","automated_response":false,"created_at":"2021-04-30T00:11:18.433Z","updated_at":"2021-04-30T00:11:18.433Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11573991,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e Look like the bug (or vulnerability) was added by commit\n\nI don't think it matters too much, but when commit 549310e907e was made we didn't do the \"attach the connection again\" dance in the disconnect the same way so I'm not sure that individual commit alone triggers this problem. I think perhaps commit f2f91ac709bc (From January 2021) took the problem the extra step it needed to become a real problem.\n\nSo, while pondering on the severity and security angle of this bug, have you tried any patch to fix it?","automated_response":false,"created_at":"2021-04-30T06:23:10.998Z","updated_at":"2021-04-30T06:23:10.998Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11574844,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I haven't yet tried to fix it. It would be easy enough to NULL the pointers at detach and update them again at attach. However this is just one part of the problem. I wonder what I should do when a new session ticket arrives while the connection is detached. Should the new ticket stored somewhere and updated once `Curl_attach_connnection` again or should the current tickets be flushed at detach, and any new tickets thrown away while being detached.\n\nJust continuing to use the old cached ticket is likely wrong.\n\nOne complication is that in order to test the fix I'd really need to be able to reproduce the issue as well.","automated_response":false,"created_at":"2021-04-30T07:18:57.874Z","updated_at":"2021-04-30T07:23:27.450Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11578803,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I now wrote code that does associate/disassociate the data/conn from the ssl context at `Curl_attach_connnection ` and `Curl_detach_connnection` respectively. `Curl_detach_connnection` also invalidates the session cache entry, if any.\n\nAt least simple testcases appear to work fine. Yet I don't know for sure if this is exactly the right thing to do here.\n\nAnd of course I haven't been able to really test it properly since I'd need to somehow reproduce the issue reliably first.","automated_response":false,"created_at":"2021-04-30T12:05:52.854Z","updated_at":"2021-04-30T12:05:52.854Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11589513,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I think this happens only with TLS connections that have non-NULL connection_check function that calls openssl functionality that can lead to the renegotiation being processed (and thus the callback being called). The only protocol this can happen with is HTTP/2 over TLS. As discussed earlier the callback only occurs for TLS 1.3.\n\nThe fundamental flaw occurs because `extract_if_dead` \"`briefly attach the connection to this transfer for the purpose of checking it`\", but the actual `data` pointer in SSL CTX is not updated to point to the current `data`. If then the `NewSessionTicket Handshake Message` arrives a wrong `data` will be referenced.\n\nFinally for this to happen randomly the connection needs to have timed out in `http2_conncheck` (`CONNCHECK_KEEPALIVE` is set and `elapsed \u003e data-\u003eset.upkeep_interval_ms` -- default 60 seconds -- is true). In this case `http2_conncheck` will send a `HTTP2 PING`, and at that point if the server sends a `NewSessionTicket Handshake Message` the bug will be triggered. This is what we're seeing when we have the random crashes. This also explains the difficulty I've had in reproducing the issue. In normal situations this doesn't happen very often.\n\nAs to exploitation: The attacker can easily trigger the UAF every time as the `NewSessionTicket Handshake Message` can be sent as a response to any `HTTP2 PING` seen by the evil server. If the `data` pointer is valid nothing happens (except for updating the sessionid). However, if the attacker has managed to massage the heap in a way that the dangling `data` pointer points to the crafted memory contents the code execution will be achieved (as described earlier). Of course the really tricky part is to craft the memory in such way that the heap contents will be the desired one for the attack to be successful. This is plausible, however.","automated_response":false,"created_at":"2021-05-01T22:04:22.796Z","updated_at":"2021-05-01T22:04:22.796Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11589559,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e The attacker can easily trigger the UAF every time as the NewSessionTicket Handshake Message can be sent as a response to any HTTP2 PING seen by the evil server. If the data pointer is valid nothing happens (except for updating the sessionid).\n\nIf the data pointer is in fact still valid, then it actually isn't a UAF. I would imagine that in fact for most cases the connection and the transfer still exist in memory when the callback arrives and that's one reason why this issue has been such a tough nut to crack. It's a use of dangling pointers that often happen to still work, but occasionally point to already freed memory.\n\n\u003e Of course the really tricky part is to craft the memory in such way that the heap contents will be the desired one for the attack to be successful. This is plausible, however.\n\nLet's see if I understand this correctly:\n\nThe \"attacker\", a malicious server to which curl is doing some kind of repeated requests against possible because libcurl is used by a browser, would have to do magic and put data into the same addresses in the heap where data/conn were previously stored, and add custom content/function pointers in that heap memory. Then make the bug trigger.\n\nI admit that it is a theoretical attack. I'm not an expert on this, but it seems like a mighty hard task to do this exploit.","automated_response":false,"created_at":"2021-05-01T22:24:42.136Z","updated_at":"2021-05-01T22:24:42.136Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11589739,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Right poor choice of words there. It indeed is a UAF only sometimes, I merely tried to convey that the `HTTP2 PING` -\u003e `NewSessionTicket Handshake Message` thing would be harmless in normal circumstances.\n\n\u003e The \"attacker\", a malicious server to which curl is doing some kind of repeated requests against possible because libcurl is used by a browser, would have to do magic and put data into the same addresses in the heap where data/conn were previously stored, and add custom content/function pointers in that heap memory. Then make the bug trigger.\n\nYes, roughly. This isn't as hard as it may sound, however.\n\nThe attacker only needs to guess the address of the dangling `struct Curl_easy` pointer. Typically the heap memory allocators use buckets for certain size objects. The attacker would need to know the characteristics of the allocator used in the target application, of course. Once known, the attacker will then be able to perform malloc()s of the same size. The attacker doesn't need to know the exact address, they can create extremely large number of of `struct Curl_easy` in hope of getting one of them to hit the same address. With some luck one of the allocations will occupy the same address that is pointed by the SSL CTX `data_idx`.\n\nFor each of these fake `struct Curl_easy` the attacker will need to set up `data-\u003eshare` point to a memory where there would be `struct Curl_share` with the following:\n\n- share-\u003especifier must have 1\u003c\u003cCURL_LOCK_DATA_SSL_SESSION (1\u003c\u003c4) bit set\n- share-\u003elockfunc points to the start of the code to execute\n\nDue to the way the structure is laid out, very large array in heap could be filled with a pattern that contains merely the desired target lockfunc pointers. The only thing that needs to be ensured is that the target address has the bit 4 set. This way any `data-\u003eshare` pointer that falls within this array in heap will be \"valid\" in the context of `Curl_share_lock` and lead to the code execution. This way the attacker doesn't need to know exact address of the heap even, just a roughly correct address will do.\n\nHow complicated the attack is to pull off depends on multiple factors:\n- If the target platform has Address-Space Layout Randomization. If so, additional info leak vulnerability needs to be found, such as leak of uninitialized heap or stack memory.\n- If the target has non-executable heap (not all platforms do), a return oriented programming needs to be employed to actually gain arbitrary code execution. Note that `struct Curl_easy` pointer is passed to the called `share-\u003elockfunc` as the first parameter, giving address to the attacker controlled buffer. This could be pivoted to stack register to set up ropchain execution. One option is to perform 'return-to-libc' attack: arrange the target pointer to be a `system` function call. Since the first parameter to the `lockfunc` is the `struct Curl_easy` pointer, the buffer could be filled with shell commands to execute (such as callback shell).\n- There may be additional protections in place, such as separate heap for JavaScript and rest of the application.\n\n\u003e I admit that it is a theoretical attack. I'm not an expert on this, but it seems like a mighty hard task to do this exploit.\n\nThe difficulty is entirely dependant on the target application and environment. Admittedly this can be extremely difficult. However, considering the potential of this vulnerability I expect actual exploits to be developed eventually.","automated_response":false,"created_at":"2021-05-01T23:52:54.130Z","updated_at":"2021-05-01T23:56:42.251Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11589815,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Actually, on 64-bit platforms the `lockfunc` is a 64-bit pointer, so the \"fill heap with pointers\" strategy doesn't quite work there due to the `struct Curl_share` having 12 bytes before the pointer. It array trick does work better on 32-bit platforms.\n\nOn 64-bit platforms things get a bit more complicated. Assuming the attacker can leak some heap address they might try to derive likely pointer of the resulting `struct Curl_share` they create. Again a strategy of creating a lot of the objects in memory would raise the likelihood of guessing right.","automated_response":false,"created_at":"2021-05-02T00:23:56.568Z","updated_at":"2021-05-02T00:23:56.568Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11589873,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Actually hitting the memory occupied by the dangling `struct Curl_easy` is far easier than I initially thought: malloc typically returns memory aligned by 16. Since the `struct Curl_easy` only needs to have `data-\u003eshare` valid, just allocate very large amount of memory and fill it with pointers to the fake `struct Curl_share`. It will end up also filling the `data-\u003eshare` pointer of the dangling `struct Curl_easy`.\n\nHow well this actually works out depends on the specifics of the malloc allocator, of course.","automated_response":false,"created_at":"2021-05-02T00:48:55.125Z","updated_at":"2021-05-02T01:03:38.188Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11590009,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here's how the problem can get triggered:\n\n- Remove a completed `struct Curl_easy` from multihandle with `curl_multi_remove_handle`\n- Free the `struct Curl_easy` with `curl_easy_cleanup`\n- Continue working with the multihandle\n\nThe reference to this already freed `struct Curl_easy` remains in the SSL CTX `data_idx`. It will then end up referenced in the `ossl_new_session_cb` if `NewSessionTicket Handshake Message` arrives when processing the response to the `HTTP2 PING` sent from `http2_conncheck` (via at least `prune_dead_connections`).\n\nI debugged this by making `CURLOPT_UPKEEP_INTERVAL_MS` a small value and then dumping the `SSL_get_ex_data(backend-\u003ehandle, data_idx)` pointer in `http2_conncheck`. Old, already deallocated value was present. This way I wasn't reliant on actually receiving the `NewSessionTicket Handshake Message` to inspect the bug. This isn't very pretty but at least I could reproduce the condition that leads to the crash.","automated_response":false,"created_at":"2021-05-02T02:19:05.491Z","updated_at":"2021-05-02T02:19:05.491Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11590048,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thinking about it, in this condition any reception and processing of `NewSessionTicket Handshake Message` would lead to the bug being triggered.\n\nThis happens because `Curl_detach_connnection` doesn't remove the SSL CTX associations.","automated_response":false,"created_at":"2021-05-02T02:37:57.828Z","updated_at":"2021-05-02T02:37:57.828Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11591775,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"That seems like a decent way to force it to reproduce if you also know that/make the server send a TLS 1.3 session ticket on that reused connection. It matches my understanding of the bug.\n\nThis is not easily triggered by an attacker. The attacker would basically have to know of a particular code path or control flow in a specific client and then it could attempt to trigger such a path while also massaging the heap correctly. That would basically require a lot of additional client logic and transfers to give the server that chance, narrowing down the amount of potential targets even further.\n\nI'm not saying it is impossible. I think a question is if this is actually an attack that can be considered practical.\n\nIf it isn't \"practical\" attack, as in there has to be at least a minuscule chance of success within a reasonable amount of time and effort, then I don't think it is a security problem.\n\nIf we deem that this attack *can* be done with a worse outcome than just a crash every ten thousand attempts, then it is a security problem. The fact that it will \"just\" cause a crash for the vast majority of all attempts of exploits will also work against the attack to work since users probably will not come back to the server the million times necessary for the attack to succeed.\n\nThen for the severity. **If** this is truly a security problem, then we think this malicious server attacker can actually get the client to execute code that it didn't intend to in a way that causes problems. Getting that attack code to do something \"useful\" (in the view of the attacker) is another very difficult step in this attack ladder.\n\nI'm having a hard time to call this a \"RCE flaw\" point blank since the risk is so tiny and requires such an extreme effort - and luck - that it to me seems highly unlikely that anyone would ever succeed in doing something nasty against a client with this. I don't like downplaying a flaw but I'm also a bit vary of \"crying wolf\" for an issue than in all practical senses isn't actually going to hurt any real life users or applications.\n\nThe \"Severity\" property for security issues is so one-dimensional and always speak of the worst case and it doesn't include limiting factors such that there basically don't exist any clients for which the attack can work or succeed against. \"critical\" sounds horrible, but the next line would say that there's maybe *one* (niche) client that *perhaps* could actually become a target if the attacker is a state actor or others with next to \"unlimited\" funds.","automated_response":false,"created_at":"2021-05-02T10:56:04.196Z","updated_at":"2021-05-02T10:56:04.196Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11592392,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I have a working poc that implements the code execution against my test app (modified app-multi.c).\n\nIn this test app I've made the situation \"favourable\":\n- the code `curl_multi_remove_handle` the completed transfer easy handle\n- the code release the easy handle with `curl_easy_cleanup`\n- the code allocates a buffer with the size of the completed transfer + copies the data to the allocated buffer\n\nThis is a favourable situation as the attacker can control the heap contents (for example replace the deallocated easy handle).\n\nOn the memory contents are crafted in a way the attacker feels the victim has been set up in an predicted state the exploit is triggered by sending the `NewSessionTicket Handshake Message`.\n\nThere are just two challenges: address of 'struct Curl_share' and determining the 'system' libc function address.\nOn 32-bit platforms with ASLR it is easy enough to roll a dice. Due to the ASLR having 12-bit of entropy this exploit successfully works quite often, even when doing a blind attack.\n\n```\n$ LD_LIBRARY_PATH=./lib/.libs:$LD_LIBRARY_PATH ./victim\nfree easy 0x57b673d0\nHTTP #0 transfer completed with status 0\nbuffer ptr 0x57b673d0\nLinux asus 5.10.0-6-amd64 #1 SMP Debian 5.10.28-1 (2021-04-09) x86_64 GNU/Linux\n```\n\nHere the payload triggers the app to call `system` with buffer of:\n```\nuname -a\nsleep 200000000\n```\n\nOn 64-bit platforms with ASLR the attacker practically needs another vulnerability for easy exploitation: Leak of heap base address and libc base address.\n\nGranted my proof of concept victim app is rather optimal situation but I'd still claim that this vulnerability is exploitable. It definitely won't work against all applications using libcurl, and in many cases the environment can be too complicated to exploit the vulnerability successfully. This is a UAF that can lead to RCE in favourable situations.\n\nIf the platform in question is an embedded one it often might not have ASLR at all. In these cases the addresses are easily predictable and exploitation becomes trivial.","automated_response":false,"created_at":"2021-05-02T14:20:04.596Z","updated_at":"2021-05-02T14:29:10.106Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11592670,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I more concise bit about the limitations.\n\n# Limitations\n\nTo be exploitable the application needs to employ a specific use pattern:\n- application utililizes curl `multi` interface\n- TLS connection is established with a curl `easy handle`\n- after the connection is established, the specific `easy handle` is removed from the `multi handle` with `curl_multi_remove_handle` and the said `easy handle` is deallocated with `curl_easy_cleanup`. This typically happens when the specific curl `easy handle` connection completes.\n- the application keeps processing other connections that utilize the same TLS connection (this means HTTP/2 in practice)\n- the application has functionality where attacker provided data is placed in heap allocated memory\n\nSuccessful exploitation requires that either the target application/platform doesn't employ Address-Space Layout Randomization, or that heap pointer and/or libc base can be predicted or guessed (could be feasible on 32-bit targets with limited ASLR entropy). If ASLR is employed an unrelated information disclosure vulnerability could still be discovered in the application. In this case the exploitation would become feasible.\n\nFinally, the victim application needs to connect to a malicious server that performs the attack against it.\n","automated_response":false,"created_at":"2021-05-02T15:55:27.284Z","updated_at":"2021-05-02T15:55:27.284Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11593091,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e I more\n\ns/I more/I wrote more/g","automated_response":false,"created_at":"2021-05-02T18:23:47.659Z","updated_at":"2021-05-02T18:23:47.659Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11599692,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"For the attack to work it is also important that it is the *first* easy_handle to use the TLS 1.3 connection that is the one that is freed and replaced with the appropriate content controlled by the server. So we need\n\n1. libcurl built to use OpenSSL (I believe BoringSSL and libressl also work the same)\n2. a multi interface using application\n3. more than one concurrent easy handle created that do HTTP/2 over a TLS 1.3 connection to a malicious server\n4. the first easy handle to use the connection must be freed\n5. at least one easy handle remaining in use\n6. the attacking server would need to figure out heap address details in order to know what payload data to provide\n7. the necessary exact memory address in the heap gets populated by memory contents controlled by the server\n8. the attacker sends a new TLS 1.3 session ticket over that connection\n\nI would imagine that a server would provide data of the suitable size(s) with the suitable content (probably many copies if it can) with the hope that one of them could get allocated and put exactly where the easy handle just previously was stored. Also of course betting or hoping that the application doesn't do other allocations or heap exercises at the same time that reduces the chances.\n\nThe way for the server to provide the data with the attack payloads of course also needs a lot of transfers (as this is a theoretic attack, we don't know how many that's required). For this. the application needs to have many more transfers going for a period of time that download data and put that into heap memory, but the creation of the new easy handles for those transfers must not reuse the same address as the original easy handle as that would ruin the attack. Therefore, the easy handles for those additional transfers pretty much must have already been allocated. Which now describes an even more awkward and unlikely application design.\n\nThis does indeed describe an application that can be attacked by a malicious server when the stars are correctly aligned and the wind blows in the right direction.\n\nThe risk that an existing libcurl-using application is actually vulnerable like this is extremely slim.\n\nDo we make libcurl users a service or a disservice by doing a security advisory for this?","automated_response":false,"created_at":"2021-05-03T13:52:11.518Z","updated_at":"2021-05-03T13:52:11.518Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11600422,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Why do you feel it would be a disservice to write an advisory about this?","automated_response":false,"created_at":"2021-05-03T15:07:18.074Z","updated_at":"2021-05-03T15:07:18.074Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11600727,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'm asking the question, I don't actually say it is (yet).\n\nA reason it could be, is that it would be \"crying wolf\". We raise the alarm for something that simply isn't a feasible attack outside the realm of our imaginations. Saying \"there's a RCE flaw in curl\" and then in a very convoluted and hard to understand explanation  pretty much saying that virtually nobody can be attacked by it. That would be why.","automated_response":false,"created_at":"2021-05-03T15:39:35.831Z","updated_at":"2021-05-03T15:39:35.831Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11601274,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Fair enough, here's my take on the matter:\n\nI think it's more of a service than disservice. Here's why I believe this:\n\n- Not reporting vulnerabilities (at all, or inaccurately) will create a false sense of security.\n- There is no way to know how many applications are affected. libcurl is after all used in countless of projects and applications. We can make an educated guess that there likely aren't that many apps that are truly exploitable, but we can't know this for a fact. We just can't know how and where libcurl might be affected by this vulnerability.\n- We already know about major one application that is affected (Webkit, even though it may well be limited to denial of service with it, at least on most platforms). Users of Webkit + libcurl + openssl combo definitely want to know about this vulnerability, if only to get rid of the sporadic crashing they have currently because of it.\n- If vulnerabilities won't be reported as they are, it can lead to situations where some vulnerable applications or systems might not get the security patch applied.\n- It is up to the users of libcurl to decide how relevant some vulnerability is to them. The advisory should include all relevant information to aid the users to make an informed decision on actions to take.\n\nNote that I am not advocating making this vulnerability appear worse than it is. Yet, I'd consider it misleading to for example describe it as \"denial of service\" only and to leave out the potential for remote code execution.\n\nAs a personal opinion, it is better to get alarmed and find out it's an non-issue, than to dismiss a vulnerability due to inaccurate or misleading reporting and get negatively impacted by it. I do understand that this vulnerability could cause some undue alarm in some users, and could even lead to some knee-jerk reactions. I however think that accurate vulnerability reporting is in the best interest of all parties, including libcurl users.","automated_response":false,"created_at":"2021-05-03T16:33:02.092Z","updated_at":"2021-05-03T16:33:02.092Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11612569,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"commit a304051620 (first in 7.75.0) is my prime suspect for having introduced this problem. Did it exist before? Or perhaps, did it exist this serious before then?","automated_response":false,"created_at":"2021-05-04T13:08:56.123Z","updated_at":"2021-05-04T13:08:56.123Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11613564,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"(Someone else has now reported this exact same issue as well.)","automated_response":false,"created_at":"2021-05-04T14:17:40.328Z","updated_at":"2021-05-04T14:17:40.328Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11613697,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"I'll get started on an advisory draft.\n\n@nyymi: you mentioned work on a fix previously, how's that going?","automated_response":false,"created_at":"2021-05-04T14:26:57.775Z","updated_at":"2021-05-04T14:26:57.775Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11613715,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"It seems to have been at least been activated in 7.75 release. indeed. Our Webkit browser releases with earlier libcurl had no crashes in the ossl_new_session_cb (I checked all crash tickets from versions using libcurl 7.72, 7.73 and 7.74). Technically I guess this could be just by luck, but there were no cases before 7.75 was used and then dozens after update to 7.75.","automated_response":false,"created_at":"2021-05-04T14:28:28.659Z","updated_at":"2021-05-04T14:28:28.659Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11613847,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here's the current very rough attempt at a fix (it lacks NULLs to the other ssl backends etc). I definitely am not sure about the cache flushing, and if something nasty will happen if the client ignores the updates (like will happen while disassociated). It has been now deployed to beta version of the browser and I'll be monitoring the type of crashes coming to the ticket system.\n\nAt least it didn't lead to immediate crashes, but I'm more worried about non-crashy type of misbehaviour that might result from this change.\n\nFeel free to use this work as basis for a fix, if it proves to be of any use.","automated_response":false,"created_at":"2021-05-04T14:37:31.492Z","updated_at":"2021-05-04T14:37:31.492Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":1288470,"filename":"0014-fix-stale-data-association.diff","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/15jym95tb5x8ekdcdfe9evsnawtw?response-content-disposition=attachment%3B%20filename%3D%220014-fix-stale-data-association.diff%22%3B%20filename%2A%3DUTF-8%27%270014-fix-stale-data-association.diff\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133014Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=8d1aad38fe4bb8b9ea6c2f1b7ca963d4aa022c6caedcfd5632c5dfbe30d5c42a"}],"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11613870,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@nyymi are you ok with me inviting the second reporter of this problem into this issue? He's done quite a bit of analyzing of this as well so I figure it could help us make sure we cover all the bases. If he accepts my invitation that is.","automated_response":false,"created_at":"2021-05-04T14:40:05.162Z","updated_at":"2021-05-04T14:40:05.162Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11613984,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e are you ok with me inviting the second reporter of this problem into this issue?\n\nThis is ok with me.","automated_response":false,"created_at":"2021-05-04T14:53:07.366Z","updated_at":"2021-05-04T14:53:07.366Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11614107,"is_internal":false,"editable":false,"type":"Activities::CveIdAdded","message":"","automated_response":false,"created_at":"2021-05-04T15:04:14.179Z","updated_at":"2021-05-04T15:04:14.179Z","cve_ids":["CVE-2021-22901"],"actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11614113,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","automated_response":false,"created_at":"2021-05-04T15:04:30.242Z","updated_at":"2021-05-04T15:04:30.242Z","additional_data":{"old_title":"Use after free in ossl_new_session_cb callback","new_title":"CVE-2021-22901: TLS 1.3 session ticket disaster"},"actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11614274,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Okay, I have a first draft of an advisory. I bet we can polish it further. As usual, I include it both inlined and attached.\n\n---\n\nTLS 1.3 session ticket disaster\n===============================\n\nProject curl Security Advisory, May 26th 2021 -\n[Permalink](https://curl.se/docs/CVE-2021-22901.html)\n\nVULNERABILITY\n-------------\n\nlibcurl can be tricked into using already freed memory when a TLS 1.3 session\nticket arrives over a connection. A malicious server can use this in rare\nunfortunate circumstances to potentially reach remote code execution in the\nclient.\n\nWhen libcurl at run-time sets up support for TLS 1.3 session tickets on a\nconnection using OpenSSL, it stores pointers to the transfer in-memory object\nfor later retrieval when a session ticket arrives.\n\nHowever, if the connection is used by multiple transfers (like with a\nmultiplexed HTTP/2 connection) that first transfer object might be freed\nbefore the session ticket arrives and then the function will access a memory\nbuffer that might be freed. When using that memory, libcurl might even call a\nfunction pointer in the object, making it possible for a remote code execution\nif the server could somehow manage to get crafted memory content into the\ncorrect place in memory.\n\nWe are not aware of any exploit of this flaw.\n\nINFO\n----\n\nThe flaw can only happen in libcurl built to use OpenSSL (or one of its forks)\nand only when using TLS 1.3 connections.\n\nThis flaw has existed in curl since commit\n[a304051620b92](https://github.com/curl/curl/commit/a304051620b92) in libcurl\n7.75.0, released on February 3, 2021.\n\nThe Common Vulnerabilities and Exposures (CVE) project has assigned the name\nCVE-2021-22901 to this issue.\n\nCWE-416: Use After Free\n\nSeverity: High\n\n## Steps to remote code execution\n\n1. libcurl built to use OpenSSL (BoringSSL and libressl work the same)\n2. a multi interface using application\n3. more than one concurrent easy handle created that do HTTP/2 over a TLS 1.3\n   connection to a malicious server\n4. the *first* easy handle to use the connection must be freed with\n   `curl_easy_cleanup()`\n5. at least one easy handle remaining in use of the same connection\n6. the attacking server needs to figure out heap address details in order to\n   know what payload contents to provide\n7. the necessary exact memory address in the heap gets populated by memory\n   contents controlled by the server\n8. the attacker sends a new TLS 1.3 session ticket over that connection\n\nFor step 7 to work out, the client needs to have more transfers going to get\ncrafted contents into heap memory, and potentially many such and for those\ntransfers it needs more handles setup.\n\nAFFECTED VERSIONS\n-----------------\n\n- Affected versions: curl 7.75.0 to and including 7.76.1\n- Not affected versions: curl \u003c 7.75.0 and curl \u003e= 7.77.0\n\nAlso note that libcurl is used by many applications, and not always advertised\nas such.\n\nTHE SOLUTION\n------------\n\nWhen the transfer is detached from the connection, it clears the association\nto it from the session ticket logic.\n\nA [fix for CVE-2021-22901]()\n\n(The patch URL will change in the final published version of this advisory)\n\nRECOMMENDATIONS\n--------------\n\n A - Upgrade curl to version 7.77.0\n\n B - Apply the patch to your local version\n\n C - Build libcurl to \n\nTIMELINE\n--------\n\nThis issue was reported to the curl project on April 29, 2021.\n\nThis advisory was posted on May 26, 2021.\n\nCREDITS\n-------\n\nThis issue was reported by Harry Sintonen. Patch by...\n\nThanks a lot!\n","automated_response":false,"created_at":"2021-05-04T15:16:16.595Z","updated_at":"2021-05-04T15:16:16.595Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":1288555,"filename":"CVE-2021-22901.md","type":"text/markdown","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/q8senqhs20046dizbo2z73iv4c0q?response-content-disposition=attachment%3B%20filename%3D%22CVE-2021-22901.md%22%3B%20filename%2A%3DUTF-8%27%27CVE-2021-22901.md\u0026response-content-type=text%2Fmarkdown\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133014Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d410071cff8d773a543a613fb6a790312fe496b8f039b42d009bc3127d6714a4"}],"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11615050,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","automated_response":false,"created_at":"2021-05-04T16:14:05.840Z","updated_at":"2021-05-04T16:14:05.840Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11615172,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for adding me @badger.  There's a lot here, and I haven't had a chance to read it all yet, but, yes, this is essentially the same root cause that I reported.  When I have time to read the entire page, I will add any additional feedback.\n\nI can say already, though, that affected versions of curl do encounter a use-after-free (as detected by ASan) with 100% reproducibility the test scenario that I outline in my report with my `prog.c` demo program when talking to `openssl s_server` as I describe.  As to whether that translates in to an _abusable_ use-after-free, I defer to you.\n\nIt's also worth noting that I found this problem while testing something and seeing a reliable crash when making a certain pattern of requests to a TLS 1.2 server (via HTTP/1.1) that requested renegotiation after the reused `conn` was no longer associated with the `data`.  So, this definitely affects not only TLS 1.3 and not only HTTP/2.  I tried (a lot) to make a TLS/1.2 test case, but it's hard to trigger the right kind of renegotiation.  My test case uses TLS 1.3 because it's very easy to use `openssl s_server` to create the failure scenario.\n\nFWIW, I concur that versions older than 7.75.0 are not affected.\n\nI also threw together a rough fix that by forcing the `ex_data` to `0` in `Curl_detach_connnection()`, which I think is the right approach, but I didn't submit it because I abused the existing \"no-op\"-ness of the OpenSSL backend's `ossl_close_all()`.  As I explain in my report, I think there might need to be a new \"method\" on the vtls \"class\" that is used inside `Curl_detach_connnection()` to clean up the association between the `conn` and the `data` via the `ex_data` any time that function is invoked.  I was able to make this work, but the workaround of disabling session ID caching was simpler.","automated_response":false,"created_at":"2021-05-04T16:26:56.245Z","updated_at":"2021-05-04T16:26:56.245Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11615239,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"To be clear, while I couldn't make an isolated test case with HTTP/1.1 over TLS 1.2, I did get an ASan report 100% of the time in that request pattern against the particular original (real) server.","automated_response":false,"created_at":"2021-05-04T16:33:03.516Z","updated_at":"2021-05-04T16:33:03.516Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11615434,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here's prog.c from @bspencer's original report - maybe @nyymi is curious about it too. I'll have to dig deeper into the additional details provided here. I probably need to rephrase the advisory at the very least.","automated_response":false,"created_at":"2021-05-04T16:54:16.996Z","updated_at":"2021-05-04T16:54:16.996Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":1288633,"filename":"prog.c","type":"text/x-csrc","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/fdy82t5acfmvgb9y5zoricdd8u9w?response-content-disposition=attachment%3B%20filename%3D%22prog.c%22%3B%20filename%2A%3DUTF-8%27%27prog.c\u0026response-content-type=text%2Fx-csrc\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133014Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=b46541aae437a89e78af6e1e039eb2cba5a36ae2e04aab132e76593787bb7130"}],"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11615504,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Since `prog.c` is here, it might help to also have the instructions for how to drive it.  Copied from my report.\n\n1. Generate a self-signed certificate.  The demo doesn't verify it, so almost\n   any certificate will do.  For example:\n\n        openssl req -newkey rsa:2048 -new -subj \"/C=CA/CN=none\" -nodes -x509 \\\n          -days 3650 -keyout server.pem -out server.pem\n\n2. Run an OpenSSL 1.1.1 TLS 1.3 server with any self-signed certificate under\n   interactive control.  The current Debian 10 version (1.1.1d-0+deb10u6) is\n   sufficient.  This need not be the same OpenSSL version used by libcurl.\n   \n        openssl s_server -cert server.pem -accept 0.0.0.0:4433 -crlf\n\n3. Build `libcurl` with `-fsanitize=address`.  Curl needs to use OpenSSL 1.1.1.\n\n4. Build the demo program with `-fsanitize`.  For an example command-line, see\n   `prog.c`.\n\n5. Run this program, which will connect to the server.\n\n        ./prog\n\n6. Interact with the server to respond to the client's first request.  Be sure\n   to include the blank line after Content-Length.  (Cutting and pasting from\n   this markdown might not preserve the proper whitespace.)\n\n    HTTP/1.1 200 OK\n    Content-Length: 0\n    \n\n7. See the second request.\n\n8. Before responding to the second request, enter a line with just the character\n   `c` (and type Enter) to trigger a TLS 1.3 client verification request.\n\n9. Asan detects a use-after-free.\n","automated_response":false,"created_at":"2021-05-04T17:03:41.172Z","updated_at":"2021-05-04T17:03:41.172Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11616922,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"From https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_sess_set_new_cb.html :\n```\nNote that in TLSv1.3, sessions are established after the main handshake has completed. The server decides when to send the\nclient the session information and this may occur some time after the end of the handshake (or not at all). This means that\napplications should expect the new_session_cb() function to be invoked during the handshake (for \u003c= TLSv1.2) or after the\nhandshake (for TLSv1.3). It is also possible in TLSv1.3 for multiple sessions to be established with a single connection.\nIn these case the new_session_cb() function will be invoked multiple times.\n```\nSo it seems the callback can get called for \u003c= TLSv1.2 only at handshake time. With TLSv1.3 it can get called on demand as discussed.","automated_response":false,"created_at":"2021-05-04T19:25:47.504Z","updated_at":"2021-05-04T19:25:47.504Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11621254,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Right. The changed behavior of that session callback (from TLS  \u003c 1.3 to TLS ==  1.3) is really the specific detail the libcurl code has not been appropriately updated to take into account. When the callback is called during the TLS handshake it causes no problem...\n\n@bspencer's reproduce code uses a client certificate request from the server which I suppose causes a new session ticket to get sent?\n","automated_response":false,"created_at":"2021-05-05T06:19:45.668Z","updated_at":"2021-05-05T06:20:20.611Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11623099,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"FYI: it was reported again, now with links to two external bug reports showing it happen:\n\nhttps://bugzilla.opensuse.org/show_bug.cgi?id=1185579 (libzypp)\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1944291 (transmission-gtk)","automated_response":false,"created_at":"2021-05-05T09:02:17.421Z","updated_at":"2021-05-05T09:02:17.421Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11623361,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Alright, so more things are definitely affected (and potentially exploitable, too).\n\nI wonder if this should mean that the security fix should be gotten out earlier than the regular release cycle (May 26)?","automated_response":false,"created_at":"2021-05-05T09:30:18.828Z","updated_at":"2021-05-05T09:30:18.828Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11623772,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We need to:\n1. get a patch done for this flaw that believe in\n2. give a week advance heads-up pre-notification to distros at openwall\n3. allow some time for things to settle and bug-fix the master branch (there are also other security fixes scheduled for next release)\n\nRight now, it seems possible to cut maybe a week off the schedule or so if we want to hurry this up. To me, that feels like maybe too little gain to actually do and we might benefit from playing it safely and stick to the original schedule.","automated_response":false,"created_at":"2021-05-05T10:18:53.859Z","updated_at":"2021-05-05T10:18:53.859Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11623872,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"diff:\n~~~diff\nindex aa7bdaff..589b0047 100644\n--- a/docs/CVE-2021-22901.md\n+++ b/docs/CVE-2021-22901.md\n@@ -20,11 +20,12 @@ However, if the connection is used by multiple transfers (like with a\n multiplexed HTTP/2 connection) that first transfer object might be freed\n before the session ticket arrives and then the function will access a memory\n buffer that might be freed. When using that memory, libcurl might even call a\n function pointer in the object, making it possible for a remote code execution\n if the server could somehow manage to get crafted memory content into the\n-correct place in memory.\n+correct place in memory. The more likely and common outcome is a crash, which\n+could be used as a DOS attack by a malicious server.\n \n We are not aware of any exploit of this flaw.\n \n INFO\n ----\n","automated_response":false,"created_at":"2021-05-05T10:27:18.966Z","updated_at":"2021-05-05T10:27:18.966Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11624112,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Regarding the patch, I think we agree that zeroing the pointer at `Curl_detach_connnection` is the correct thing to do to fix the immediate UAF / crash.\n\nI'd love to get some feedback in regards to:\n- if ignoring the potential new session from the callback will have any ill effects. Because this is what will happen if we zero the pointer and a new session arrives.\n- If flushing the existing session from the cache is a right thing to do in `Curl_detach_connnection`? The motivation for this is that if we didn't do this, the callback might arrive that replaces the existing session. If the callback is disabled then the old session would never get invalidated. So to account for this I delete the existing session from the case. But is this the correct thing to do?\n\nThere is a the larger question: Should the sessionid be cached regardless if an easy handle is connected to the connection or not? Also I'm somewhat confused to what the TLS session applies to.. the easy handle or underlying the connection? If they're not really related to easy handle then some larger changes are needed, I think.\n\nI really don't understand the relations here well enough to give definite answers myself :-\\","automated_response":false,"created_at":"2021-05-05T10:54:42.690Z","updated_at":"2021-05-05T10:54:42.690Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11624808,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e if ignoring the potential new session from the callback will have any ill effects\n\nNothing that really hurts that I can see. The session ticket is \"just\" potentially used in subsequent re-connections and if curl doesn't have a session ticket for that it just means a slightly slower handshake.\n\nA potential optimization would be to store another still live transfer there so that a session ticket update would work, but that's added complexity we at least leave out of this fix.\n\n\u003e If flushing the existing session from the cache is a right thing to do\n\nI think believe it is. That makes sure the old ticket won't be used/attempted.\n\n\u003e Should the sessionid be cached regardless if an easy handle is connected to the connection or not? Also I'm somewhat confused to what the TLS session applies to.. the easy handle or underlying the connection? If they're not really related to easy handle then some larger changes are needed, I think.\n\nThe TLS context is per connection so the session id/ticket really needs to be anchored on the connection and not the easy handle. The easy handle might in fact keep living and use another connection in a subsequent transfer (step), but the connection is the one that has the session ticket no matter which transfer is going over it.\n\n## patch v2\n\nI edited your patch somewhat, but the fundamentals remain the way you did them. My changes:\n1. I made associate/deteach functions in vtls.c to hide the SSL related logic more from multi.c\n2. I call the associated conn function from within openssl.c to unify\n3. I added a comment above `ossl_disassociate_connection` to explain its existence a little\n\nIt'd be good to get @bspencer's feedback on the patch too!","automated_response":false,"created_at":"2021-05-05T12:05:22.360Z","updated_at":"2021-05-05T12:05:22.360Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":1289585,"filename":"0001-openssl-associate-detach-the-transfer-from-connectio.patch","type":"application/mbox","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/nd349ab28rfdry26pugefbvsn6b3?response-content-disposition=attachment%3B%20filename%3D%220001-openssl-associate-detach-the-transfer-from-connectio.patch%22%3B%20filename%2A%3DUTF-8%27%270001-openssl-associate-detach-the-transfer-from-connectio.patch\u0026response-content-type=application%2Fmbox\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133014Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=bc6ca680262d2dabf29d21712a4e35ac59abab759e69a821308b9fc24bfd1a49"}],"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11625649,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Reviewing the patch, the approach seems right to me, and is similar to the rough fix I mentioned (but much cleaner!).\n\nHowever, I noticed this in `ossl_disassociate_connection()`:\n\n```\n+    if(data_idx \u003e= 0 \u0026\u0026 connectdata_idx \u003e= 0 \u0026\u0026 sockindex_idx \u003e= 0 \u0026\u0026\n+       proxy_idx \u003e= 0) {\n+      /* Disable references to data in \"new session\" callback to avoid\n+       * accessing a stale pointer. */\n+      SSL_set_ex_data(backend-\u003ehandle, data_idx, NULL);\n+      SSL_set_ex_data(backend-\u003ehandle, connectdata_idx, NULL);\n+      SSL_set_ex_data(backend-\u003ehandle, sockindex_idx, NULL);\n+      SSL_set_ex_data(backend-\u003ehandle, proxy_idx, NULL);\n+    }\n+\n+    /* Invalidate the session cache entry, if any */\n+    isproxy = SSL_get_ex_data(backend-\u003ehandle, proxy_idx) ? TRUE : FALSE;\n```\nIsn't the `ex_data` in the `proxy_idx` slot already `NULL` by the time the `isproxy` variable is set?  Shouldn't `isproxy` get captured inside the `if`, before it's cleared?\n\nMeanwhile, @nyymi's comments had me concerned that my notes were wrong, so I went back to my original scenario that led to the discovery.  This morning, I reproduced the situation again with pure HTTP/1.1 and TLS 1.2 while dumping the packet stream and decoding it with tshark to confirm it happens when using TLS 1.2.\n\n\n","automated_response":false,"created_at":"2021-05-05T13:02:03.542Z","updated_at":"2021-05-05T13:02:03.542Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11626102,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@bspencer\n\n\u003e Isn't the ex_data in the proxy_idx slot already NULL by the time the isproxy variable is set?\n\nHmm yeah that's a mistake from my part. I think `isproxy` should get gotten before the value is set to `NULL`. The code should have been:\n\n```\nbool isproxy = FALSE;\n```\n...\n```\n    if(data_idx \u003e= 0 \u0026\u0026 connectdata_idx \u003e= 0 \u0026\u0026 sockindex_idx \u003e= 0 \u0026\u0026\n       proxy_idx \u003e= 0) {\n      isproxy = SSL_get_ex_data(backend-\u003ehandle, proxy_idx) ? TRUE : FALSE;\n      /* Disable references to data in \"new session\" callback to avoid\n       * accessing a stale pointer. */\n      SSL_set_ex_data(backend-\u003ehandle, data_idx, NULL);\n      SSL_set_ex_data(backend-\u003ehandle, connectdata_idx, NULL);\n      SSL_set_ex_data(backend-\u003ehandle, sockindex_idx, NULL);\n      SSL_set_ex_data(backend-\u003ehandle, proxy_idx, NULL);\n    }\n```\n...\n\n\u003e Meanwhile, @nyymi's comments had me concerned that my notes were wrong,\n\nNote that some of my (especially earlier) comments were probably incorrect. My original thought that it only applied to HTTP/2 was due to the specific code path I saw in the crash I inspected. I later found out that it can definitely happen for other HTTP versions as well.\n\nTLS version \u003c 1.3 definitely can have the callback called as well, but as far as I understand only TLS 1.3 can have it called  after of the handshake phase. Or this is how I interpreted the documentation at least. Maybe the TLS version \u003c 1.3 case happens only when connection is detached right away while the handshake is in progress. Maybe this is what happens here?\n\nBTW: TLS versions are a bit confusing at times, are you sure it really is TLS 1.2? I mean TLS 1.3 frames still claim version 1.2 in them due to backwards compatibility reasons... Wireshark \"Protocol\" column version info is correct however.","automated_response":false,"created_at":"2021-05-05T13:42:13.312Z","updated_at":"2021-05-05T13:48:23.692Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11626448,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"If my memory is correct, in TLS 1.2 the server can request, for example, a client certificate by reinitiating a handshake request on an already established connection.  I think it can even use it for more exotic reasons like changing ciphers in general.  I'm not a TLS expert though, so I don't know.\n\n\u003e Maybe the TLS version \u003c 1.3 case happens only when connection is detached right away while the handshake is in progress. \n\nI don't think this is the case.  Unfortunately, I can't provide the TLS 1.2 test code here, but in that scenario, all of the curl transfers (easy handles) run to normal completion.  After being used for a few requests, the (single) connection receives handshake messages from the server, and this is when the new session callback is called, and the old `ex_data` is used.\n\nHere is a summary of the series of packets, decoded by tshark, that lead to the TLS 1.2 case.  I have confirmed that there is only one TLS connection in play here.\n\n```\nclient -\u003e server\n    TLSv1 Record Layer: Handshake Protocol: Client Hello\nserver -\u003e client\n    TLSv1.2 Record Layer: Handshake Protocol: Server Hello\nserver -\u003e client\n    TLSv1.2 Record Layer: Handshake Protocol: Certificate\nserver -\u003e client\n    TLSv1.2 Record Layer: Handshake Protocol: Server Key Exchange\n    TLSv1.2 Record Layer: Handshake Protocol: Server Hello Done\nclient -\u003e server\n    TLSv1.2 Record Layer: Handshake Protocol: Client Key Exchange\n    TLSv1.2 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nserver -\u003e client\n    TLSv1.2 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nclient -\u003e server\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nclient -\u003e server\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nserver -\u003e client\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nserver -\u003e client\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nserver -\u003e client\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nclient -\u003e server\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\n    TLSv1.2 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nserver -\u003e client\n    TLSv1.2 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nclient -\u003e server\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nclient -\u003e server\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nclient -\u003e server\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nclient -\u003e server\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nclient -\u003e server\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nclient -\u003e server\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nclient -\u003e server\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nclient -\u003e server\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nclient -\u003e server\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nserver -\u003e client\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nserver -\u003e client\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nserver -\u003e client\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nclient -\u003e server\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\n    TLSv1.2 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nserver -\u003e client\n    TLSv1.2 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec\n    TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\nserver -\u003e client\n    TLSv1.2 Record Layer: Application Data Protocol: http-over-tls\n\n```\n\nThere's some asynchronous overlap of packets flowing vs. the ASan detection of the use after free that happens during this last handshake.  I didn't bother to figure out precisely which packet triggers the new session callback, but the ASan stack trace makes it clear.  I also didn't bother to try to decrypt those encrypted handshakes.  It happens every single time for this particular interaction.\n\nI tried (a lot) to make a TLS 1.2 isolated test server that reproduced the above pattern, but it's hard to do because such renegotiations seemed to require direct manipulations of the TLS state machine in the server (which you can't do in modern OpenSSL) and documentation on how exactly to do it is left as scraps of history from ancient mailing list posts.  Once I realized I could reproduce the scenario with TLS 1.3, I stopped trying to make it work with TLS 1.2 (since I already knew it could happen from my \"real\" test).\n\n\n\n\n","automated_response":false,"created_at":"2021-05-05T14:14:31.829Z","updated_at":"2021-05-05T14:14:31.829Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11626752,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I tried v2 of the patch with both my demo `prog.c` and the original TLS 1.2 scenario and it seems to fix both.","automated_response":false,"created_at":"2021-05-05T14:43:12.481Z","updated_at":"2021-05-05T14:43:12.481Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11644320,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here's patch v3 with @nyymi's fix amended (as mentioned above).\n\nDoes any of you have any suggestion or thoughts on how or if we should tweak the advisory to include TLS 1.2 in there as well somehow? I don't quite understand how that callback gets called with the wrong data when 1.2 is used.","automated_response":false,"created_at":"2021-05-06T14:15:23.709Z","updated_at":"2021-05-06T14:15:23.709Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":1291061,"filename":"v3-0001-openssl-associate-detach-the-transfer-from-connec.patch","type":"application/mbox","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/uidm0kpd7bmemmbm2bxc4mv1c2mu?response-content-disposition=attachment%3B%20filename%3D%22v3-0001-openssl-associate-detach-the-transfer-from-connec.patch%22%3B%20filename%2A%3DUTF-8%27%27v3-0001-openssl-associate-detach-the-transfer-from-connec.patch\u0026response-content-type=application%2Fmbox\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133014Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=2923a2edb048fe02eda08b1843fa744ce8f51fd4d680c41da536d9bb0bd69722"}],"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11644903,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I think the advisory should say that this can happen when talking to a TLS 1.2 server, because it can :)\n\nI think @bagder wants to be able to explain, in the advisory, exactly how it happens on TLS 1.2.  Unfortunately, I do not have conclusive information on what high-level action triggers the subsequent call to the callback registered with `SSL_CTX_sess_set_new_cb()`, but I don't think we need to.  That function is documented as follows:\n\n\u003e SSL_CTX_sess_set_new_cb() sets the callback function that is called whenever a new session was negotiated.\n\nFrom my (non-expert) understanding, in TLS \u003c=1.2 a \"new session\" can be negotiated on an existing TLS connection well into its lifetime.  So, whenever the server initiates and then successfully completes the negotiation of a new session, the callback is called.  Whenever that happens after dissociation from a destroyed easy handle, we have the problem.\n\nI took the liberty of suggesting some edits to your draft advisory:\n\n- I removed TLS 1.3 specifics, including from the title\n- Added TLS \u003c=1.2 steps.  I didn't try it, but I think any TLS version that supports renegotiation and thus the callback is enough.\n- I didn't make or change any judgements on the likelihood or frequency of attack, but I think it's pretty easy to \"crash\" the client even without RCE.\n- We can get to UaF without concurrent handles on the connection (see `prog.c`).\n- I have personally not ever tried to reproduce this with HTTP/2, so I have presumed that the advisory's HTTP/2 steps are correct\n- I may not understand or have properly captured the difference (or similarity) between TLS 1.3 \"session tickets\" vs. \"client certificate requests\".\n- I suspect my changes, if acceptable, might require further edits or review.  I offer them just to be helpful!\n\nTLS session ticket disaster\n===============================\n\nProject curl Security Advisory, May 26th 2021 -\n[Permalink](https://curl.se/docs/CVE-2021-22901.html)\n\nVULNERABILITY\n-------------\n\nlibcurl can be tricked into using already freed memory when a new TLS session is\nnegotiated on an existing connection.  For example, this can happen when a TLS\nserver requests a client certificate on a connection that was established\nwithout one.  A malicious server can use this in rare unfortunate circumstances\nto potentially reach remote code execution in the client.\n\nWhen libcurl at run-time sets up support for session ID caching on a connection\nusing OpenSSL, it stores pointers to the transfer in-memory object for later\nretrieval when a session ticket arrives.\n\nHowever, if the connection is used by multiple transfers (like with a reused\nHTTP/1.1 connection or multiplexed HTTP/2 connection) that first transfer object\nmight be freed before the session ticket arrives and then the function will\naccess a memory buffer that might be freed. When using that memory, libcurl\nmight even call a function pointer in the object, making it possible for a\nremote code execution if the server could somehow manage to get crafted memory\ncontent into the correct place in memory.\n\nWe are not aware of any exploit of this flaw.\n\nINFO\n----\n\nThe flaw can only happen in libcurl built to use OpenSSL (or one of its forks).\n\nThis flaw has existed in curl since commit\n[a304051620b92](https://github.com/curl/curl/commit/a304051620b92) in libcurl\n7.75.0, released on February 3, 2021.\n\nThe Common Vulnerabilities and Exposures (CVE) project has assigned the name\nCVE-2021-22901 to this issue.\n\nCWE-416: Use After Free\n\nSeverity: High\n\n## Steps to remote code execution\n\n1. libcurl built to use OpenSSL (BoringSSL and libressl work the same)\n2. a multi interface using application\n3. one of the following:\n\n  a. create and use an first easy handle to do HTTP/1.1 over TLS to a malicious\n     server, using a version of TLS that supports renegotiation\n\n  b. free that easy handle with `curl_easy_cleanup()`\n\n  c. create and use a second easy handle to do HTTP/1.1 over TLS with to the \n     same server such that the TLS connection is reused\n\n  or\n  \n  a. more than one concurrent easy handle created that do HTTP/2 over a TLS 1.3\n   connection to a malicious server,\n\n  b. the *first* easy handle to use the connection must be freed with\n   `curl_easy_cleanup()`\n\n  c. at least one easy handle remaining in use of the same connection\n\n6. the attacking server needs to figure out heap address details in order to\n   know what payload contents to provide\n7. the necessary exact memory address in the heap gets populated by memory\n   contents controlled by the server\n8. the attacker requests a new TLS handshake, sends a TLS 1.3 client certificate\n   request, or sends a new TLS 1.3 session ticket over that connection\n\nFor step 7 to work out, the client needs to have more transfers going to get\ncrafted contents into heap memory, and potentially many such and for those\ntransfers it needs more handles setup.\n\nAFFECTED VERSIONS\n-----------------\n\n- Affected versions: curl 7.75.0 to and including 7.76.1\n- Not affected versions: curl \u003c 7.75.0 and curl \u003e= 7.77.0\n\nAlso note that libcurl is used by many applications, and not always advertised\nas such.\n\nTHE SOLUTION\n------------\n\nWhen the transfer is detached from the connection, it clears the association\nto it from the session ID cache logic.\n\nA [fix for CVE-2021-22901]()\n\n(The patch URL will change in the final published version of this advisory)\n\nRECOMMENDATIONS\n--------------\n\n A - Upgrade curl to version 7.77.0\n\n B - Apply the patch to your local version\n\n C - Build libcurl to \n\nTIMELINE\n--------\n\nThis issue was reported to the curl project on April 29, 2021.\n\nThis advisory was posted on May 26, 2021.\n\nCREDITS\n-------\n\nThis issue was reported by Harry Sintonen. Patch by...\n\nThanks a lot!\n","automated_response":false,"created_at":"2021-05-06T15:04:23.653Z","updated_at":"2021-05-06T15:04:23.653Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11645247,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks @bspencer can you attach your \"raw\" updated file for easier handling?","automated_response":false,"created_at":"2021-05-06T15:30:26.080Z","updated_at":"2021-05-06T15:30:26.080Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11645689,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@bspencer\n\u003e For step 7 to work out\n\nShould be step 5 I believe.","automated_response":false,"created_at":"2021-05-06T16:16:29.752Z","updated_at":"2021-05-06T16:16:29.752Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11650238,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I took my time and went through the whole advisory again and address your comments, and (I hope) made it very clear how this happens without making any assumptions we (or at least I) haven't verified.  I hope this helps.  I will take no offense if you don't like these edits :)\n\nChanges:\n\n- retitle again (but do you really want to use the word \"disaster\"?)\n\n- more replacement of \"ticket\" with session ID caching\n\n- VULNERABILITY paragraph 2 changed to explain that the pointers to the transfer\n  that are stored are for recording new sessions (that's the only time they are\n  ever queried, in `ossl_new_session_cb()`, that I can see)\n\n- clean up the steps to rely on the previous explanation of triggers in\n  VULNERABILITY and fix cross-reference problems\n  \nMy next comment contains markdown in the comment text and as an attachment.  (BTW I copied the original one with the \"Copy Markdown\" feature in the three-dots-menu on the original comment).\n","automated_response":false,"created_at":"2021-05-07T00:47:11.755Z","updated_at":"2021-05-07T00:47:11.755Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11650248,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"TLS session ID caching disaster\n===============================\n\nProject curl Security Advisory, May 26th 2021 -\n[Permalink](https://curl.se/docs/CVE-2021-22901.html)\n\nVULNERABILITY\n-------------\n\nlibcurl can be tricked into using already freed memory when a new TLS session is\nnegotiated or a client certificate is requested on an existing connection.  For\nexample, this can happen when a TLS server requests a client certificate on a\nconnection that was established without one.  A malicious server can use this in\nrare unfortunate circumstances to potentially reach remote code execution in the\nclient.\n\nOpenSSL can declare a \"new session\" for different reasons, including the initial\nTLS handshake completion, TLS 1.2 (or earlier) renegotiation, or TLS 1.3 client\ncertificate requests.  When libcurl at run-time sets up support for session ID\ncaching on a connection using OpenSSL, it stores pointers to the transfer\nin-memory object for later retrieval when OpenSSL considers a new session to be\nestablished.\n\nHowever, if the connection is used by multiple transfers (like with a reused\nHTTP/1.1 connection or multiplexed HTTP/2 connection) that first transfer object\nmight be freed before the new session is established on that connection and then\nthe function will access a memory buffer that might be freed. When using that\nmemory, libcurl might even call a function pointer in the object, making it\npossible for a remote code execution if the server could somehow manage to get\ncrafted memory content into the correct place in memory.\n\nWe are not aware of any exploit of this flaw.\n\nINFO\n----\n\nThe flaw can only happen in libcurl built to use OpenSSL (or one of its forks).\n\nThis flaw has existed in curl since commit\n[a304051620b92](https://github.com/curl/curl/commit/a304051620b92) in libcurl\n7.75.0, released on February 3, 2021.\n\nThe Common Vulnerabilities and Exposures (CVE) project has assigned the name\nCVE-2021-22901 to this issue.\n\nCWE-416: Use After Free\n\nSeverity: High\n\n## Steps to remote code execution\n\n1. libcurl built to use OpenSSL (BoringSSL and libressl work the same)\n2. a multi interface using application\n3. one of the following:\n\n  a. create and use a first easy handle to do HTTP/1.1 over TLS to a malicious\n     server\n\n  b. free that easy handle with `curl_easy_cleanup()`\n\n  c. create and use a second easy handle to do HTTP/1.1 over TLS with to the \n     same server such that the TLS connection is reused\n\n  or\n  \n  a. more than one concurrent easy handle created that do HTTP/2 over a TLS\n     connection to a malicious server,\n\n  b. the *first* easy handle to use the connection must be freed with\n     `curl_easy_cleanup()`\n\n  c. at least one easy handle remaining in use of the same connection\n\n4. the attacking server needs to figure out heap address details in order to\n   know what payload contents to provide\n5. the necessary exact memory address in the heap gets populated by memory\n   contents controlled by the server\n6. the attacker starts a new handshake (on TLS 1.2 or earlier), or sends a TLS\n   1.3 client certificate request, or otherwise triggers OpenSSL to consider a\n   new session to be established\n\nFor a remote code execution, the client needs to perform (potentially many) more\ntransfers (and thus have more easy handles) to allow the server to place crafted\ncontents into heap memory.  Instead of remote code execution, the client could\ninstead crash or otherwise experience undefined behaviour.\n\nAFFECTED VERSIONS\n-----------------\n\n- Affected versions: curl 7.75.0 to and including 7.76.1\n- Not affected versions: curl \u003c 7.75.0 and curl \u003e= 7.77.0\n\nAlso note that libcurl is used by many applications, and not always advertised\nas such.\n\nTHE SOLUTION\n------------\n\nWhen the transfer is detached from the connection, it clears the association\nto it from the session ID cache logic.\n\nA [fix for CVE-2021-22901]()\n\n(The patch URL will change in the final published version of this advisory)\n\nRECOMMENDATIONS\n--------------\n\n A - Upgrade curl to version 7.77.0\n\n B - Apply the patch to your local version\n\n C - Build libcurl to \n\nTIMELINE\n--------\n\nThis issue was reported to the curl project on April 29, 2021.\n\nThis advisory was posted on May 26, 2021.\n\nCREDITS\n-------\n\nThis issue was reported by Harry Sintonen. Patch by...\n\nThanks a lot!\n","automated_response":false,"created_at":"2021-05-07T00:50:01.753Z","updated_at":"2021-05-07T00:50:01.753Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":1291689,"filename":"advisory.md","type":"text/x-web-markdown","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/synp8u3larql7am959pwfglsmaey?response-content-disposition=attachment%3B%20filename%3D%22advisory.md%22%3B%20filename%2A%3DUTF-8%27%27advisory.md\u0026response-content-type=text%2Fx-web-markdown\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133014Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=05de7099450031e4e3293b4e9469ec603e20f45f8a274316521c33706e88608c"}],"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11653585,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks @bspencer! I edited the advisory slightly further, mostly to make sure the generated html from the markdown looks proper. I also renamed it again to \"TLS session caching disaster\" since it's technically not actually an \"id\" when it is a ticket. A minor thing.\n\nThis time attached only:","automated_response":false,"created_at":"2021-05-07T07:29:28.900Z","updated_at":"2021-05-07T07:29:28.900Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":1292012,"filename":"CVE-2021-22901.md","type":"text/markdown","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/80813pwboy0cpha7vu94l8xdmkae?response-content-disposition=attachment%3B%20filename%3D%22CVE-2021-22901.md%22%3B%20filename%2A%3DUTF-8%27%27CVE-2021-22901.md\u0026response-content-type=text%2Fmarkdown\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133014Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=7ac599f770e299a5ecc49701624df47b26f761f7032580df0bb50d9415231ada"}],"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11653588,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","automated_response":false,"created_at":"2021-05-07T07:29:53.382Z","updated_at":"2021-05-07T07:29:53.382Z","additional_data":{"old_title":"CVE-2021-22901: TLS 1.3 session ticket disaster","new_title":"CVE-2021-22901: TLS session caching disaster"},"actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11659271,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The latest advisory and patch both look good to me.","automated_response":false,"created_at":"2021-05-07T13:24:15.604Z","updated_at":"2021-05-07T13:24:15.604Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11660552,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The new patch is running ok with our Webkit browser. No new crashes have been reported that are related to the callback.\n\nAdvisory content looks good except it appears that some formatting has been dropped from the `Steps to remote code execution` section. Shouldn't it have numbered steps for the entries like before?","automated_response":false,"created_at":"2021-05-07T15:01:42.316Z","updated_at":"2021-05-07T15:01:42.316Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11660642,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I decided to ditch the numbering because how it looked when converted to HTML, as the sub-parts in the third step were introduced. In my view it is still as readable as before without them.","automated_response":false,"created_at":"2021-05-07T15:07:50.204Z","updated_at":"2021-05-07T15:07:50.204Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11661025,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"My brain would immediately interpret the lone line without a period as \"cut\" and try to see if the sentence would continue by merging the following line =\u003e confusion. Maybe this is just me.","automated_response":false,"created_at":"2021-05-07T15:15:55.603Z","updated_at":"2021-05-07T15:15:55.603Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11671184,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Okay, new attempt on advisory formatting tweak. This puts the numbering back but uses `-` for the sub bullets on number 3 so that the HTML renders slightly more sensible. I also attached the HTML that this markdown renders for me, using the same markdown-to-html tool we use on the web site (pandoc -f gfm).","automated_response":false,"created_at":"2021-05-08T15:25:27.368Z","updated_at":"2021-05-08T15:25:27.368Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":1293914,"filename":"CVE-2021-22901.html","type":"text/html","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ottnjd2cxgz7e1iw9tji9su8jwdz?response-content-disposition=attachment%3B%20filename%3D%22CVE-2021-22901.html%22%3B%20filename%2A%3DUTF-8%27%27CVE-2021-22901.html\u0026response-content-type=application%2Foctet-stream\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133014Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=d9ca7e1511f5a6f4986cfc2371884f1443168e6ae14ddbee76bfbe9af99732c9"},{"id":1293913,"filename":"CVE-2021-22901.md","type":"text/markdown","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/nnao6ipwfdj9s6u4qssmp1ugic14?response-content-disposition=attachment%3B%20filename%3D%22CVE-2021-22901.md%22%3B%20filename%2A%3DUTF-8%27%27CVE-2021-22901.md\u0026response-content-type=text%2Fmarkdown\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133014Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=f2d9ffab7af831c6b9a3e93c2b1b750424ef465089865f32d4574f214816b625"}],"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11671243,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Layout is ok to me now.","automated_response":false,"created_at":"2021-05-08T15:41:03.235Z","updated_at":"2021-05-08T15:41:03.235Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11683253,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thumbs up.","automated_response":false,"created_at":"2021-05-10T12:46:00.126Z","updated_at":"2021-05-10T12:46:00.126Z","actor":{"username":"bspencer","cleared":false,"url":"/bspencer","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11702075,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I intend to assign a monetary reward to this report asap, we're just a bit short of funds right now here and are working on getting money transferred over, but it seems to be a slow process. Should be done \"any day now\" ...","automated_response":false,"created_at":"2021-05-11T14:27:17.246Z","updated_at":"2021-05-11T14:27:53.071Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11766106,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"The curl security team has decided to reward hacker @nyymi  with the amount of 2000 USD for finding and reporting this issue. Many thanks for your great work!","automated_response":false,"created_at":"2021-05-16T20:29:09.324Z","updated_at":"2021-05-16T20:29:09.324Z","actor":{"url":"/curl","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"curl"}},"bounty_amount":"2000.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"curl","collaborator":{"username":"nyymi","url":"/nyymi"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11888814,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","automated_response":false,"created_at":"2021-05-26T07:24:00.611Z","updated_at":"2021-05-26T07:24:00.611Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"nyymi","url":"/nyymi"},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11888823,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-05-26T07:25:33.402Z","updated_at":"2021-05-26T07:25:33.402Z","first_to_agree":true,"actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/y9xzl5ayi7du4kz3l6pa6sff2ha5/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c?response-content-disposition=inline%3B%20filename%3D%22final-12-1000x1000.jpg%22%3B%20filename%2A%3DUTF-8%27%27final-12-1000x1000.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRCOM766B%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T133013Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHUaCXVzLXdlc3QtMiJIMEYCIQC2plSLprTu8RjGD8JYtZWBPt0cszlQG9FE345fmJX2hAIhALFlvJYKDzrEhN7%2FvlACW3w%2FuqitMoDByli%2BB32UD4xHKoMECO7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAhoMMDEzNjE5Mjc0ODQ5Igydotw%2BzjeVoEUzifsq1wO17iYJRnZ0fDCk2qA3GFkCAi2TACWamwiykehERisJcA6JAf5%2BKDXCSCA9Z5sJN1RS6yYikkzrd1g0%2FNHQvlKNEb%2F0bkFdpBo983pYtuPm%2FjZwdUmgycUkQTsKElvIdrra2ORU8syHUfTSsU0jkhKy1nTU1EUbOyVSpNZUO9kXRRe3ohujd32sjmj8LzGUv8aTvRQduIzkPVeEQOKzFH7EgJMvdNR3vaK2TDhSXjMkBaQKBFqnh6PEMyOLZDUpbrlIy%2BoEq2r%2B%2F10hoGkdsLCXXLTZ6FqEIiLpzSb0Iu7CYkr0MdHXUykD4DOTntKsy9rifi4r4BROm%2BFSV7DvWqgt3W4BdQyDDpqk1mezBTFX0MzxjgcpwKW8P9MAJbLCDmqfTTPFk4Q3hwN161Se85vO9XLNOyRVtPGBxj7OBbf9ALPJ5O3JeDoWAJMilj8zwYEUZ8HB%2BwxjDJ9XD8WIvUhkGyonPTYta41EE5Apa%2BuA9mDzlzHtztW9QWk0A9Sy6yWDe5RV1BvTfuQDIENmCujUYeHBAI1LctTr5dAfQfpbR25kBWiGSGkGj66CsyM%2Fv4WpFwB06OZt5%2FWKkqDvm8EJ4nRBeXyQEZgKwI6%2BBfR8uHZJrNaXh7ww%2FuiQiwY6pAG6PxCWeEgmj5NWNLAASGSJOsH%2B4v2Ym%2BQKqlIQLRYFFWUC%2FZOjX8OosfCA%2F2VoFSUqa9gE9u1ak8ebfBQMrD4qWG%2BNBuWtrVAT0zNhYQeLm7qYZBf6nK1%2F4Q%2FfiKY5Hwm5q1KG1XzDtwU7hRI5PfdeIVO1imHecmyw8jlgyE%2Bpn%2Bt6DW7WJdNcVKLCb%2BX4TDKDa3Lt%2FOx7FpCltN7n4hWkIyVpiw%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=35620b3031afe85cfee8ac4e498bf46db31051cc43cf81bcc8b493d0a714ade2"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":11889349,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2021-05-26T08:24:20.162Z","updated_at":"2021-05-26T08:24:20.162Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":11889350,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2021-05-26T08:24:20.284Z","updated_at":"2021-05-26T08:24:20.284Z","actor":{"username":"nyymi","cleared":false,"url":"/nyymi","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}